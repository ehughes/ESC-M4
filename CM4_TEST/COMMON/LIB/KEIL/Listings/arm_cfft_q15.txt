; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cfft_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_q15.c]
                          THUMB

                          AREA ||i.arm_cfft_q15||, CODE, READONLY, ALIGN=1

                  arm_cfft_q15 PROC
;;;88     
;;;89     void arm_cfft_q15( 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90         const arm_cfft_instance_q15 * S, 
;;;91         q15_t * p1,
;;;92         uint8_t ifftFlag,
;;;93         uint8_t bitReverseFlag)
;;;94     {
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
;;;95         uint32_t L = S->fftLen;
000008  8801              LDRH     r1,[r0,#0]
;;;96     
;;;97         if(ifftFlag == 1u)
;;;98         {
;;;99             switch (L) 
00000a  f44f7000          MOV      r0,#0x200
00000e  461d              MOV      r5,r3                 ;94
000010  0043              LSLS     r3,r0,#1
000012  0087              LSLS     r7,r0,#2
000014  f44f5c80          MOV      r12,#0x1000
000018  f44f7e80          MOV      lr,#0x100
00001c  2a01              CMP      r2,#1                 ;97
00001e  d00b              BEQ      |L1.56|
;;;100            {
;;;101            case 16: 
;;;102            case 64:
;;;103            case 256:
;;;104            case 1024:
;;;105            case 4096:
;;;106                arm_radix4_butterfly_inverse_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
;;;107                break;
;;;108                
;;;109            case 32:
;;;110            case 128:
;;;111            case 512:
;;;112            case 2048:
;;;113                arm_cfft_radix4by2_inverse_q15  ( p1, L, S->pTwiddle );
;;;114                break;
;;;115            }  
;;;116        }
;;;117        else
;;;118        {
;;;119            switch (L) 
000020  4571              CMP      r1,lr
000022  d030              BEQ      |L1.134|
000024  dc27              BGT      |L1.118|
000026  2910              CMP      r1,#0x10
000028  d02d              BEQ      |L1.134|
00002a  2920              CMP      r1,#0x20
00002c  d031              BEQ      |L1.146|
00002e  2940              CMP      r1,#0x40
000030  d029              BEQ      |L1.134|
000032  2980              CMP      r1,#0x80
000034  d131              BNE      |L1.154|
000036  e02c              B        |L1.146|
                  |L1.56|
000038  4571              CMP      r1,lr                 ;99
00003a  d011              BEQ      |L1.96|
00003c  dc08              BGT      |L1.80|
00003e  2910              CMP      r1,#0x10              ;99
000040  d00e              BEQ      |L1.96|
000042  2920              CMP      r1,#0x20              ;99
000044  d012              BEQ      |L1.108|
000046  2940              CMP      r1,#0x40              ;99
000048  d00a              BEQ      |L1.96|
00004a  2980              CMP      r1,#0x80              ;99
00004c  d125              BNE      |L1.154|
00004e  e00d              B        |L1.108|
                  |L1.80|
000050  4281              CMP      r1,r0                 ;99
000052  d00b              BEQ      |L1.108|
000054  4299              CMP      r1,r3                 ;99
000056  d003              BEQ      |L1.96|
000058  42b9              CMP      r1,r7                 ;99
00005a  d007              BEQ      |L1.108|
00005c  4561              CMP      r1,r12                ;99
00005e  d11c              BNE      |L1.154|
                  |L1.96|
000060  2301              MOVS     r3,#1                 ;106
000062  4630              MOV      r0,r6                 ;106
000064  6862              LDR      r2,[r4,#4]            ;106
000066  f7fffffe          BL       arm_radix4_butterfly_inverse_q15
00006a  e016              B        |L1.154|
                  |L1.108|
00006c  4630              MOV      r0,r6                 ;113
00006e  6862              LDR      r2,[r4,#4]            ;113
000070  f7fffffe          BL       arm_cfft_radix4by2_inverse_q15
000074  e011              B        |L1.154|
                  |L1.118|
000076  4281              CMP      r1,r0
000078  d00b              BEQ      |L1.146|
00007a  4299              CMP      r1,r3
00007c  d003              BEQ      |L1.134|
00007e  42b9              CMP      r1,r7
000080  d007              BEQ      |L1.146|
000082  4561              CMP      r1,r12
000084  d109              BNE      |L1.154|
                  |L1.134|
;;;120            {
;;;121            case 16: 
;;;122            case 64:
;;;123            case 256:
;;;124            case 1024:
;;;125            case 4096:
;;;126                arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
000086  2301              MOVS     r3,#1
000088  4630              MOV      r0,r6
00008a  6862              LDR      r2,[r4,#4]
00008c  f7fffffe          BL       arm_radix4_butterfly_q15
;;;127                break;
000090  e003              B        |L1.154|
                  |L1.146|
;;;128                
;;;129            case 32:
;;;130            case 128:
;;;131            case 512:
;;;132            case 2048:
;;;133                arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
000092  4630              MOV      r0,r6
000094  6862              LDR      r2,[r4,#4]
000096  f7fffffe          BL       arm_cfft_radix4by2_q15
                  |L1.154|
;;;134                break;
;;;135            }  
;;;136        }
;;;137        
;;;138        if( bitReverseFlag )
00009a  2d00              CMP      r5,#0
00009c  d006              BEQ      |L1.172|
;;;139            arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
00009e  89a1              LDRH     r1,[r4,#0xc]
0000a0  4630              MOV      r0,r6
0000a2  68a2              LDR      r2,[r4,#8]
0000a4  e8bd41f0          POP      {r4-r8,lr}
0000a8  f7ffbffe          B.W      arm_bitreversal_16
                  |L1.172|
;;;140    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
;;;141    
                          ENDP


                          AREA ||i.arm_cfft_radix4by2_inverse_q15||, CODE, READONLY, ALIGN=2

                  arm_cfft_radix4by2_inverse_q15 PROC
;;;252    
;;;253    void arm_cfft_radix4by2_inverse_q15(
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;254        q15_t * pSrc,
;;;255        uint32_t fftLen,
;;;256        const q15_t * pCoef) 
;;;257    {    
000004  460e              MOV      r6,r1
;;;258        uint32_t i;
;;;259        uint32_t n2;
;;;260        q15_t p0, p1, p2, p3;
;;;261    #ifndef ARM_MATH_CM0_FAMILY
;;;262        q31_t T, S, R;
;;;263        q31_t coeff, out1, out2;
;;;264        const q15_t *pC = pCoef;
;;;265        q15_t *pSi = pSrc;
;;;266        q15_t *pSl = pSrc + fftLen;
000006  eb000146          ADD      r1,r0,r6,LSL #1
;;;267    #else
;;;268        uint32_t ia, l;
;;;269        q15_t xt, yt, cosVal, sinVal;
;;;270    #endif
;;;271        
;;;272        n2 = fftLen >> 1; 
00000a  0874              LSRS     r4,r6,#1
00000c  4693              MOV      r11,r2                ;257
00000e  4605              MOV      r5,r0                 ;257
000010  468a              MOV      r10,r1                ;266
000012  46a1              MOV      r9,r4
000014  d01e              BEQ      |L2.84|
000016  f04f0e00          MOV      lr,#0                 ;257
;;;273    
;;;274    #ifndef ARM_MATH_CM0_FAMILY
;;;275    
;;;276        for (i = n2; i > 0; i--)
;;;277        {
;;;278            coeff = _SIMD32_OFFSET(pC);
00001a  bf00              NOP      
                  |L2.28|
00001c  f8527b04          LDR      r7,[r2],#4
;;;279            pC += 2;
;;;280    
;;;281            T = _SIMD32_OFFSET(pSi);
000020  f8d0c000          LDR      r12,[r0,#0]
;;;282            T = __SHADD16(T, 0); // this is just a SIMD arithmetic shift right by 1
000024  fa9cfc2e          SHADD16  r12,r12,lr
;;;283    
;;;284            S = _SIMD32_OFFSET(pSl);
000028  f8d18000          LDR      r8,[r1,#0]
;;;285            S = __SHADD16(S, 0); // this is just a SIMD arithmetic shift right by 1
00002c  fa98f82e          SHADD16  r8,r8,lr
;;;286    
;;;287            R = __QSUB16(T, S);
000030  fadcf318          QSUB16   r3,r12,r8
;;;288    
;;;289            _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
000034  fa9cfc28          SHADD16  r12,r12,r8
000038  f840cb04          STR      r12,[r0],#4
;;;290            pSi += 2;
;;;291    
;;;292        #ifndef ARM_MATH_BIG_ENDIAN
;;;293    
;;;294            out1 = __SMUSD(coeff, R) >> 16;
00003c  fb47fc03          SMUSD    r12,r7,r3
000040  ea4f4c1c          LSR      r12,r12,#16
;;;295            out2 = __SMUADX(coeff, R);
000044  fb27f313          SMUADX   r3,r7,r3
;;;296        #else
;;;297    
;;;298            out1 = __SMUADX(R, coeff) >> 16u;
;;;299            out2 = __SMUSD(__QSUB(0, coeff), R);
;;;300    
;;;301        #endif //     #ifndef ARM_MATH_BIG_ENDIAN
;;;302    
;;;303            _SIMD32_OFFSET(pSl) =
000048  eacc0303          PKHBT    r3,r12,r3
00004c  f8413b04          STR      r3,[r1],#4
000050  1e64              SUBS     r4,r4,#1
000052  d1e3              BNE      |L2.28|
                  |L2.84|
;;;304            (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
;;;305            pSl += 2;
;;;306        } 
;;;307        
;;;308    #else //    #ifndef ARM_MATH_CM0_FAMILY
;;;309    
;;;310        ia = 0;
;;;311        for (i = 0; i < n2; i++)
;;;312        {
;;;313            cosVal = pCoef[ia * 2];
;;;314            sinVal = pCoef[(ia * 2) + 1];
;;;315            ia++;
;;;316            
;;;317            l = i + n2;
;;;318            xt = (pSrc[2 * i] >> 1u) - (pSrc[2 * l] >> 1u);
;;;319            pSrc[2 * i] = ((pSrc[2 * i] >> 1u) + (pSrc[2 * l] >> 1u)) >> 1u;
;;;320            
;;;321            yt = (pSrc[2 * i + 1] >> 1u) - (pSrc[2 * l + 1] >> 1u);
;;;322            pSrc[2 * i + 1] =
;;;323              ((pSrc[2 * l + 1] >> 1u) + (pSrc[2 * i + 1] >> 1u)) >> 1u;
;;;324            
;;;325            pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) -
;;;326                            ((int16_t) (((q31_t) yt * sinVal) >> 16)));
;;;327            
;;;328            pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) +
;;;329                               ((int16_t) (((q31_t) xt * sinVal) >> 16)));
;;;330        } 
;;;331        
;;;332    #endif //    #ifndef ARM_MATH_CM0_FAMILY
;;;333    
;;;334        // first col
;;;335        arm_radix4_butterfly_inverse_q15( pSrc, n2, (q15_t*)pCoef, 2u);
000054  2302              MOVS     r3,#2
000056  465a              MOV      r2,r11
000058  4649              MOV      r1,r9
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       arm_radix4_butterfly_inverse_q15
000060  4650              MOV      r0,r10
;;;336        // second col
;;;337        arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
000062  2302              MOVS     r3,#2
000064  465a              MOV      r2,r11
000066  4649              MOV      r1,r9
000068  f7fffffe          BL       arm_radix4_butterfly_inverse_q15
;;;338    			
;;;339        for (i = 0; i < fftLen >> 1; i++)
00006c  e011              B        |L2.146|
;;;340        {
;;;341            p0 = pSrc[4*i+0];
00006e  bf00              NOP      
                  |L2.112|
;;;342            p1 = pSrc[4*i+1];
000070  eb0500c4          ADD      r0,r5,r4,LSL #3
000074  f8351034          LDRH     r1,[r5,r4,LSL #3]     ;341
000078  8847              LDRH     r7,[r0,#2]
;;;343            p2 = pSrc[4*i+2];
00007a  8882              LDRH     r2,[r0,#4]
;;;344            p3 = pSrc[4*i+3];
00007c  88c3              LDRH     r3,[r0,#6]
;;;345            
;;;346            p0 <<= 1;
00007e  0049              LSLS     r1,r1,#1
;;;347            p1 <<= 1;
000080  007f              LSLS     r7,r7,#1
;;;348            p2 <<= 1;
;;;349            p3 <<= 1;
;;;350            
;;;351            pSrc[4*i+0] = p0;
000082  f8251034          STRH     r1,[r5,r4,LSL #3]
000086  0052              LSLS     r2,r2,#1              ;348
000088  005b              LSLS     r3,r3,#1              ;349
;;;352            pSrc[4*i+1] = p1;
00008a  8047              STRH     r7,[r0,#2]
;;;353            pSrc[4*i+2] = p2;
00008c  8082              STRH     r2,[r0,#4]
;;;354            pSrc[4*i+3] = p3;
00008e  80c3              STRH     r3,[r0,#6]
000090  1c64              ADDS     r4,r4,#1
                  |L2.146|
000092  ebb40f56          CMP      r4,r6,LSR #1          ;339
000096  d3eb              BCC      |L2.112|
;;;355        }
;;;356    }
000098  e8bd9ff0          POP      {r4-r12,pc}
;;;357    
                          ENDP


                          AREA ||i.arm_cfft_radix4by2_q15||, CODE, READONLY, ALIGN=2

                  arm_cfft_radix4by2_q15 PROC
;;;145    
;;;146    void arm_cfft_radix4by2_q15(
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;147        q15_t * pSrc,
;;;148        uint32_t fftLen,
;;;149        const q15_t * pCoef) 
;;;150    {    
000004  460e              MOV      r6,r1
;;;151        uint32_t i;
;;;152        uint32_t n2;
;;;153        q15_t p0, p1, p2, p3;
;;;154    #ifndef ARM_MATH_CM0_FAMILY
;;;155        q31_t T, S, R;
;;;156        q31_t coeff, out1, out2;
;;;157        const q15_t *pC = pCoef;
;;;158        q15_t *pSi = pSrc;
;;;159        q15_t *pSl = pSrc + fftLen;
000006  eb000146          ADD      r1,r0,r6,LSL #1
;;;160    #else
;;;161        uint32_t ia, l;
;;;162        q15_t xt, yt, cosVal, sinVal;
;;;163    #endif
;;;164        
;;;165        n2 = fftLen >> 1; 
00000a  0874              LSRS     r4,r6,#1
00000c  4693              MOV      r11,r2                ;150
00000e  4605              MOV      r5,r0                 ;150
000010  468a              MOV      r10,r1                ;159
000012  46a1              MOV      r9,r4
000014  d01e              BEQ      |L3.84|
000016  f04f0e00          MOV      lr,#0                 ;150
;;;166    
;;;167    #ifndef ARM_MATH_CM0_FAMILY
;;;168    
;;;169        for (i = n2; i > 0; i--)
;;;170        {
;;;171            coeff = _SIMD32_OFFSET(pC);
00001a  bf00              NOP      
                  |L3.28|
00001c  f8527b04          LDR      r7,[r2],#4
;;;172            pC += 2;
;;;173    
;;;174            T = _SIMD32_OFFSET(pSi);
000020  f8d0c000          LDR      r12,[r0,#0]
;;;175            T = __SHADD16(T, 0); // this is just a SIMD arithmetic shift right by 1
000024  fa9cfc2e          SHADD16  r12,r12,lr
;;;176    
;;;177            S = _SIMD32_OFFSET(pSl);
000028  f8d18000          LDR      r8,[r1,#0]
;;;178            S = __SHADD16(S, 0); // this is just a SIMD arithmetic shift right by 1
00002c  fa98f82e          SHADD16  r8,r8,lr
;;;179    
;;;180            R = __QSUB16(T, S);
000030  fadcf318          QSUB16   r3,r12,r8
;;;181    
;;;182            _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
000034  fa9cfc28          SHADD16  r12,r12,r8
000038  f840cb04          STR      r12,[r0],#4
;;;183            pSi += 2;
;;;184    
;;;185        #ifndef ARM_MATH_BIG_ENDIAN
;;;186    
;;;187            out1 = __SMUAD(coeff, R) >> 16;
00003c  fb27fc03          SMUAD    r12,r7,r3
000040  ea4f4c1c          LSR      r12,r12,#16
;;;188            out2 = __SMUSDX(coeff, R);
000044  fb47f313          SMUSDX   r3,r7,r3
;;;189    
;;;190        #else
;;;191    
;;;192            out1 = __SMUSDX(R, coeff) >> 16u;
;;;193            out2 = __SMUAD(coeff, R);
;;;194    
;;;195        #endif //     #ifndef ARM_MATH_BIG_ENDIAN
;;;196    
;;;197            _SIMD32_OFFSET(pSl) =
000048  eacc0303          PKHBT    r3,r12,r3
00004c  f8413b04          STR      r3,[r1],#4
000050  1e64              SUBS     r4,r4,#1
000052  d1e3              BNE      |L3.28|
                  |L3.84|
;;;198            (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
;;;199            pSl += 2;
;;;200        } 
;;;201        
;;;202    #else //    #ifndef ARM_MATH_CM0_FAMILY
;;;203        
;;;204        ia = 0;
;;;205        for (i = 0; i < n2; i++)
;;;206        {
;;;207            cosVal = pCoef[ia * 2];
;;;208            sinVal = pCoef[(ia * 2) + 1];
;;;209            ia++;
;;;210            
;;;211            l = i + n2;        
;;;212            
;;;213            xt = (pSrc[2 * i] >> 1u) - (pSrc[2 * l] >> 1u);
;;;214            pSrc[2 * i] = ((pSrc[2 * i] >> 1u) + (pSrc[2 * l] >> 1u)) >> 1u;
;;;215            
;;;216            yt = (pSrc[2 * i + 1] >> 1u) - (pSrc[2 * l + 1] >> 1u);
;;;217            pSrc[2 * i + 1] =
;;;218            ((pSrc[2 * l + 1] >> 1u) + (pSrc[2 * i + 1] >> 1u)) >> 1u;
;;;219    
;;;220            pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
;;;221                      ((int16_t) (((q31_t) yt * sinVal) >> 16)));
;;;222    
;;;223            pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
;;;224                           ((int16_t) (((q31_t) xt * sinVal) >> 16)));
;;;225        } 
;;;226        
;;;227    #endif //    #ifndef ARM_MATH_CM0_FAMILY
;;;228        
;;;229        // first col
;;;230        arm_radix4_butterfly_q15( pSrc, n2, (q15_t*)pCoef, 2u);
000054  2302              MOVS     r3,#2
000056  465a              MOV      r2,r11
000058  4649              MOV      r1,r9
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       arm_radix4_butterfly_q15
000060  4650              MOV      r0,r10
;;;231        // second col
;;;232        arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
000062  2302              MOVS     r3,#2
000064  465a              MOV      r2,r11
000066  4649              MOV      r1,r9
000068  f7fffffe          BL       arm_radix4_butterfly_q15
;;;233    			
;;;234        for (i = 0; i < fftLen >> 1; i++)
00006c  e011              B        |L3.146|
;;;235        {
;;;236            p0 = pSrc[4*i+0];
00006e  bf00              NOP      
                  |L3.112|
;;;237            p1 = pSrc[4*i+1];
000070  eb0500c4          ADD      r0,r5,r4,LSL #3
000074  f8351034          LDRH     r1,[r5,r4,LSL #3]     ;236
000078  8847              LDRH     r7,[r0,#2]
;;;238            p2 = pSrc[4*i+2];
00007a  8882              LDRH     r2,[r0,#4]
;;;239            p3 = pSrc[4*i+3];
00007c  88c3              LDRH     r3,[r0,#6]
;;;240            
;;;241            p0 <<= 1;
00007e  0049              LSLS     r1,r1,#1
;;;242            p1 <<= 1;
000080  007f              LSLS     r7,r7,#1
;;;243            p2 <<= 1;
;;;244            p3 <<= 1;
;;;245            
;;;246            pSrc[4*i+0] = p0;
000082  f8251034          STRH     r1,[r5,r4,LSL #3]
000086  0052              LSLS     r2,r2,#1              ;243
000088  005b              LSLS     r3,r3,#1              ;244
;;;247            pSrc[4*i+1] = p1;
00008a  8047              STRH     r7,[r0,#2]
;;;248            pSrc[4*i+2] = p2;
00008c  8082              STRH     r2,[r0,#4]
;;;249            pSrc[4*i+3] = p3;
00008e  80c3              STRH     r3,[r0,#6]
000090  1c64              ADDS     r4,r4,#1
                  |L3.146|
000092  ebb40f56          CMP      r4,r6,LSR #1          ;234
000096  d3eb              BCC      |L3.112|
;;;250        }
;;;251    }
000098  e8bd9ff0          POP      {r4-r12,pc}
;;;252    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q15_c_d5d0a690____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_cfft_q15_c_d5d0a690____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q15_c_d5d0a690____REVSH|
#line 144
|__asm___14_arm_cfft_q15_c_d5d0a690____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q15_c_d5d0a690____RRX|
#line 300
|__asm___14_arm_cfft_q15_c_d5d0a690____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
