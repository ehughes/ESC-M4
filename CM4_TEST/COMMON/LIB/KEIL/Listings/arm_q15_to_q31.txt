; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_q15_to_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_q15_to_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_q15_to_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_q15_to_q31.c]
                          THUMB

                          AREA ||i.arm_q15_to_q31||, CODE, READONLY, ALIGN=1

                  arm_q15_to_q31 PROC
;;;69     
;;;70     void arm_q15_to_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;71       q15_t * pSrc,
;;;72       q31_t * pDst,
;;;73       uint32_t blockSize)
;;;74     {
;;;75       q15_t *pIn = pSrc;                             /* Src pointer */
;;;76       uint32_t blkCnt;                               /* loop counter */
;;;77     
;;;78     #ifndef ARM_MATH_CM0_FAMILY
;;;79     
;;;80       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;81       q31_t in1, in2;
;;;82       q31_t out1, out2, out3, out4;
;;;83     
;;;84       /*loop Unrolling */
;;;85       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e010              B        |L1.40|
                  |L1.6|
;;;86     
;;;87       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;88        ** a second loop below computes the remaining 1 to 3 samples. */
;;;89       while(blkCnt > 0u)
;;;90       {
;;;91         /* C = (q31_t)A << 16 */
;;;92         /* convert from q15 to q31 and then store the results in the destination buffer */
;;;93         in1 = *__SIMD32(pIn)++;
000006  6804              LDR      r4,[r0,#0]
;;;94         in2 = *__SIMD32(pIn)++;
000008  6845              LDR      r5,[r0,#4]
00000a  3008              ADDS     r0,r0,#8
;;;95     
;;;96     #ifndef ARM_MATH_BIG_ENDIAN
;;;97     
;;;98         /* extract lower 16 bits to 32 bit result */
;;;99         out1 = in1 << 16u;
00000c  ea4f4c04          LSL      r12,r4,#16
;;;100        /* extract upper 16 bits to 32 bit result */
;;;101        out2 = in1 & 0xFFFF0000;
000010  0c27              LSRS     r7,r4,#16
000012  043f              LSLS     r7,r7,#16
;;;102        /* extract lower 16 bits to 32 bit result */
;;;103        out3 = in2 << 16u;
000014  042e              LSLS     r6,r5,#16
;;;104        /* extract upper 16 bits to 32 bit result */
;;;105        out4 = in2 & 0xFFFF0000;
000016  0c2c              LSRS     r4,r5,#16
000018  0424              LSLS     r4,r4,#16
;;;106    
;;;107    #else
;;;108    
;;;109        /* extract upper 16 bits to 32 bit result */
;;;110        out1 = in1 & 0xFFFF0000;
;;;111        /* extract lower 16 bits to 32 bit result */
;;;112        out2 = in1 << 16u;
;;;113        /* extract upper 16 bits to 32 bit result */
;;;114        out3 = in2 & 0xFFFF0000;
;;;115        /* extract lower 16 bits to 32 bit result */
;;;116        out4 = in2 << 16u;
;;;117    
;;;118    #endif //      #ifndef ARM_MATH_BIG_ENDIAN
;;;119    
;;;120        *pDst++ = out1;
00001a  f8c1c000          STR      r12,[r1,#0]
;;;121        *pDst++ = out2;
00001e  604f              STR      r7,[r1,#4]
;;;122        *pDst++ = out3;
000020  608e              STR      r6,[r1,#8]
;;;123        *pDst++ = out4;
000022  60cc              STR      r4,[r1,#0xc]
000024  3110              ADDS     r1,r1,#0x10
;;;124    
;;;125        /* Decrement the loop counter */
;;;126        blkCnt--;
000026  1e5b              SUBS     r3,r3,#1
                  |L1.40|
000028  2b00              CMP      r3,#0                 ;89
00002a  d1ec              BNE      |L1.6|
;;;127      }
;;;128    
;;;129      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;130       ** No loop unrolling is used. */
;;;131      blkCnt = blockSize % 0x4u;
00002c  f0020203          AND      r2,r2,#3
;;;132    
;;;133    #else
;;;134    
;;;135      /* Run the below code for Cortex-M0 */
;;;136    
;;;137      /* Loop over blockSize number of values */
;;;138      blkCnt = blockSize;
;;;139    
;;;140    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;141    
;;;142      while(blkCnt > 0u)
000030  e004              B        |L1.60|
                  |L1.50|
;;;143      {
;;;144        /* C = (q31_t)A << 16 */
;;;145        /* convert from q15 to q31 and then store the results in the destination buffer */
;;;146        *pDst++ = (q31_t) * pIn++ << 16;
000032  f8303b02          LDRH     r3,[r0],#2
000036  041b              LSLS     r3,r3,#16
000038  c108              STM      r1!,{r3}
;;;147    
;;;148        /* Decrement the loop counter */
;;;149        blkCnt--;
00003a  1e52              SUBS     r2,r2,#1
                  |L1.60|
00003c  2a00              CMP      r2,#0                 ;142
00003e  d1f8              BNE      |L1.50|
;;;150      }
;;;151    
;;;152    }
000040  bdf0              POP      {r4-r7,pc}
;;;153    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_q15_to_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_q15_to_q31_c_9732b3f1____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_q15_to_q31_c_9732b3f1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_q15_to_q31_c_9732b3f1____REVSH|
#line 144
|__asm___16_arm_q15_to_q31_c_9732b3f1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_q15_to_q31_c_9732b3f1____RRX|
#line 300
|__asm___16_arm_q15_to_q31_c_9732b3f1____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
