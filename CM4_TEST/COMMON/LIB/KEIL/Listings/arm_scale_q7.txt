; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_scale_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_scale_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_scale_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_scale_q7.c]
                          THUMB

                          AREA ||i.arm_scale_q7||, CODE, READONLY, ALIGN=1

                  arm_scale_q7 PROC
;;;66     
;;;67     void arm_scale_q7(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;68       q7_t * pSrc,
;;;69       q7_t scaleFract,
;;;70       int8_t shift,
;;;71       q7_t * pDst,
;;;72       uint32_t blockSize)
;;;73     {
000004  f8dd801c          LDR      r8,[sp,#0x1c]
;;;74       int8_t kShift = 7 - shift;                     /* shift to apply after scaling */
000008  f1c20207          RSB      r2,r2,#7
00000c  b252              SXTB     r2,r2
;;;75       uint32_t blkCnt;                               /* loop counter */
;;;76     
;;;77     #ifndef ARM_MATH_CM0_FAMILY
;;;78     
;;;79     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;80       q7_t in1, in2, in3, in4, out1, out2, out3, out4;      /* Temporary variables to store input & output */
;;;81     
;;;82     
;;;83       /*loop Unrolling */
;;;84       blkCnt = blockSize >> 2u;
00000e  ea4f0498          LSR      r4,r8,#2
000012  e028              B        |L1.102|
                  |L1.20|
;;;85     
;;;86     
;;;87       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;88        ** a second loop below computes the remaining 1 to 3 samples. */
;;;89       while(blkCnt > 0u)
;;;90       {
;;;91         /* Reading 4 inputs from memory */
;;;92         in1 = *pSrc++;
000014  f9905000          LDRSB    r5,[r0,#0]
;;;93         in2 = *pSrc++;
000018  f9906001          LDRSB    r6,[r0,#1]
;;;94         in3 = *pSrc++;
00001c  f9907002          LDRSB    r7,[r0,#2]
000020  1cc0              ADDS     r0,r0,#3
;;;95         in4 = *pSrc++;
000022  f910cb01          LDRSB    r12,[r0],#1
;;;96     
;;;97         /* C = A * scale */
;;;98         /* Scale the inputs and then store the results in the temporary variables. */
;;;99         out1 = (q7_t) (__SSAT(((in1) * scaleFract) >> kShift, 8));
000026  434d              MULS     r5,r1,r5
000028  4115              ASRS     r5,r5,r2
00002a  f3050507          SSAT     r5,#8,r5
;;;100        out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
00002e  434e              MULS     r6,r1,r6
000030  4116              ASRS     r6,r6,r2
000032  f3060607          SSAT     r6,#8,r6
;;;101        out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
000036  434f              MULS     r7,r1,r7
000038  4117              ASRS     r7,r7,r2
00003a  f3070707          SSAT     r7,#8,r7
;;;102        out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
00003e  fb0cfc01          MUL      r12,r12,r1
000042  fa4cfc02          ASR      r12,r12,r2
000046  f30c0c07          SSAT     r12,#8,r12
;;;103    
;;;104        /* Packing the individual outputs into 32bit and storing in    
;;;105         * destination buffer in single write */
;;;106        *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
00004a  f64f79ff          MOV      r9,#0xffff
00004e  b2ed              UXTB     r5,r5
000050  ea092606          AND      r6,r9,r6,LSL #8
000054  4335              ORRS     r5,r5,r6
000056  b2fe              UXTB     r6,r7
000058  ea454506          ORR      r5,r5,r6,LSL #16
00005c  ea45650c          ORR      r5,r5,r12,LSL #24
000060  f8435b04          STR      r5,[r3],#4
;;;107    
;;;108        /* Decrement the loop counter */
;;;109        blkCnt--;
000064  1e64              SUBS     r4,r4,#1
                  |L1.102|
000066  2c00              CMP      r4,#0                 ;89
000068  d1d4              BNE      |L1.20|
;;;110      }
;;;111    
;;;112      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;113       ** No loop unrolling is used. */
;;;114      blkCnt = blockSize % 0x4u;
00006a  f0080403          AND      r4,r8,#3
;;;115    
;;;116      while(blkCnt > 0u)
00006e  e008              B        |L1.130|
                  |L1.112|
;;;117      {
;;;118        /* C = A * scale */
;;;119        /* Scale the input and then store the result in the destination buffer. */
;;;120        *pDst++ = (q7_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 8));
000070  f9105b01          LDRSB    r5,[r0],#1
000074  434d              MULS     r5,r1,r5
000076  4115              ASRS     r5,r5,r2
000078  f3050507          SSAT     r5,#8,r5
00007c  f8035b01          STRB     r5,[r3],#1
;;;121    
;;;122        /* Decrement the loop counter */
;;;123        blkCnt--;
000080  1e64              SUBS     r4,r4,#1
                  |L1.130|
000082  2c00              CMP      r4,#0                 ;116
000084  d1f4              BNE      |L1.112|
;;;124      }
;;;125    
;;;126    #else
;;;127    
;;;128      /* Run the below code for Cortex-M0 */
;;;129    
;;;130      /* Initialize blkCnt with number of samples */
;;;131      blkCnt = blockSize;
;;;132    
;;;133      while(blkCnt > 0u)
;;;134      {
;;;135        /* C = A * scale */
;;;136        /* Scale the input and then store the result in the destination buffer. */
;;;137        *pDst++ = (q7_t) (__SSAT((((q15_t) * pSrc++ * scaleFract) >> kShift), 8));
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
;;;141      }
;;;142    
;;;143    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;144    
;;;145    }
000086  e8bd83f0          POP      {r4-r9,pc}
;;;146    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_scale_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_scale_q7_c_05f409e1____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_scale_q7_c_05f409e1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_scale_q7_c_05f409e1____REVSH|
#line 144
|__asm___14_arm_scale_q7_c_05f409e1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_scale_q7_c_05f409e1____RRX|
#line 300
|__asm___14_arm_scale_q7_c_05f409e1____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
