; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_q31.c]
                          THUMB

                          AREA ||i.arm_conv_q31||, CODE, READONLY, ALIGN=2

                  arm_conv_q31 PROC
;;;77     
;;;78     void arm_conv_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;79       q31_t * pSrcA,
;;;80       uint32_t srcALen,
;;;81       q31_t * pSrcB,
;;;82       uint32_t srcBLen,
;;;83       q31_t * pDst)
;;;84     {
000004  b095              SUB      sp,sp,#0x54
;;;85     
;;;86     
;;;87     #ifndef ARM_MATH_CM0_FAMILY
;;;88     
;;;89       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;90     
;;;91       q31_t *pIn1;                                   /* inputA pointer */
;;;92       q31_t *pIn2;                                   /* inputB pointer */
;;;93       q31_t *pOut = pDst;                            /* output pointer */
000006  9922              LDR      r1,[sp,#0x88]
;;;94       q31_t *px;                                     /* Intermediate inputA pointer  */
;;;95       q31_t *py;                                     /* Intermediate inputB pointer  */
;;;96       q31_t *pSrc1, *pSrc2;                          /* Intermediate pointers */
;;;97       q63_t sum;                                     /* Accumulator */
;;;98       q63_t acc0, acc1, acc2;                        /* Accumulator */
;;;99       q31_t x0, x1, x2, c0;                          /* Temporary variables to hold state and coefficient values */
;;;100      uint32_t j, k, count, blkCnt, blockSize1, blockSize2, blockSize3;     /* loop counter */
;;;101    
;;;102      /* The algorithm implementation is based on the lengths of the inputs. */
;;;103      /* srcB is always made to slide across srcA. */
;;;104      /* So srcBLen is always considered as shorter or equal to srcALen */
;;;105      if(srcALen >= srcBLen)
000008  9101              STR      r1,[sp,#4]
00000a  9916              LDR      r1,[sp,#0x58]
00000c  4299              CMP      r1,r3
00000e  d302              BCC      |L1.22|
;;;106      {
;;;107        /* Initialization of inputA pointer */
;;;108        pIn1 = pSrcA;
;;;109    
;;;110        /* Initialization of inputB pointer */
;;;111        pIn2 = pSrcB;
000010  4691              MOV      r9,r2
000012  9006              STR      r0,[sp,#0x18]
000014  e004              B        |L1.32|
                  |L1.22|
;;;112      }
;;;113      else
;;;114      {
;;;115        /* Initialization of inputA pointer */
;;;116        pIn1 = (q31_t *) pSrcB;
;;;117    
;;;118        /* Initialization of inputB pointer */
;;;119        pIn2 = (q31_t *) pSrcA;
000016  4681              MOV      r9,r0
;;;120    
;;;121        /* srcBLen is always considered as shorter or equal to srcALen */
;;;122        j = srcBLen;
000018  4618              MOV      r0,r3
;;;123        srcBLen = srcALen;
00001a  460b              MOV      r3,r1
;;;124        srcALen = j;
00001c  9206              STR      r2,[sp,#0x18]
00001e  9016              STR      r0,[sp,#0x58]
                  |L1.32|
;;;125      }
;;;126    
;;;127      /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;128      /* The function is internally    
;;;129       * divided into three stages according to the number of multiplications that has to be    
;;;130       * taken place between inputA samples and inputB samples. In the first stage of the    
;;;131       * algorithm, the multiplications increase by one for every iteration.    
;;;132       * In the second stage of the algorithm, srcBLen number of multiplications are done.    
;;;133       * In the third stage of the algorithm, the multiplications decrease by one    
;;;134       * for every iteration. */
;;;135    
;;;136      /* The algorithm is implemented in three stages.    
;;;137         The loop counters of each stage is initiated here. */
;;;138      blockSize1 = srcBLen - 1u;
;;;139      blockSize2 = srcALen - (srcBLen - 1u);
000020  9816              LDR      r0,[sp,#0x58]
000022  f1a30801          SUB      r8,r3,#1              ;138
000026  1ac0              SUBS     r0,r0,r3
000028  1c40              ADDS     r0,r0,#1
00002a  e9cd8010          STRD     r8,r0,[sp,#0x40]
;;;140      blockSize3 = blockSize1;
;;;141    
;;;142      /* --------------------------    
;;;143       * Initializations of stage1    
;;;144       * -------------------------*/
;;;145    
;;;146      /* sum = x[0] * y[0]    
;;;147       * sum = x[0] * y[1] + x[1] * y[0]    
;;;148       * ....    
;;;149       * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]    
;;;150       */
;;;151    
;;;152      /* In this stage the MAC operations are increased by 1 for every iteration.    
;;;153         The count variable holds the number of MAC operations performed */
;;;154      count = 1u;
00002e  f04f0a01          MOV      r10,#1
;;;155    
;;;156      /* Working pointer of inputA */
;;;157      px = pIn1;
;;;158    
;;;159      /* Working pointer of inputB */
;;;160      py = pIn2;
000032  464a              MOV      r2,r9
;;;161    
;;;162    
;;;163      /* ------------------------    
;;;164       * Stage1 process    
;;;165       * ----------------------*/
;;;166    
;;;167      /* The first stage starts here */
;;;168      while(blockSize1 > 0u)
000034  9806              LDR      r0,[sp,#0x18]
000036  e045              B        |L1.196|
                  |L1.56|
000038  2600              MOVS     r6,#0
00003a  4631              MOV      r1,r6
;;;169      {
;;;170        /* Accumulator is made zero for every iteration */
;;;171        sum = 0;
;;;172    
;;;173        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;174        k = count >> 2u;
00003c  ea4f059a          LSR      r5,r10,#2
;;;175    
;;;176        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;177         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;178        while(k > 0u)
000040  e022              B        |L1.136|
                  |L1.66|
;;;179        {
;;;180          /* x[0] * y[srcBLen - 1] */
;;;181          sum += (q63_t) * px++ * (*py--);
000042  6804              LDR      r4,[r0,#0]
000044  f8d2c000          LDR      r12,[r2,#0]
;;;182          /* x[1] * y[srcBLen - 2] */
;;;183          sum += (q63_t) * px++ * (*py--);
;;;184          /* x[2] * y[srcBLen - 3] */
;;;185          sum += (q63_t) * px++ * (*py--);
;;;186          /* x[3] * y[srcBLen - 4] */
;;;187          sum += (q63_t) * px++ * (*py--);
;;;188    
;;;189          /* Decrement the loop counter */
;;;190          k--;
;;;191        }
;;;192    
;;;193        /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;194         ** No loop unrolling is used. */
;;;195        k = count % 0x4u;
;;;196    
;;;197        while(k > 0u)
;;;198        {
;;;199          /* Perform the multiply-accumulate */
;;;200          sum += (q63_t) * px++ * (*py--);
;;;201    
;;;202          /* Decrement the loop counter */
;;;203          k--;
;;;204        }
;;;205    
;;;206        /* Store the result in the accumulator in the destination buffer. */
;;;207        *pOut++ = (q31_t) (sum >> 31);
;;;208    
;;;209        /* Update the inputA and inputB pointers for next MAC calculation */
;;;210        py = pIn2 + count;
;;;211        px = pIn1;
;;;212    
;;;213        /* Increment the MAC count */
;;;214        count++;
;;;215    
;;;216        /* Decrement the loop counter */
;;;217        blockSize1--;
;;;218      }
;;;219    
;;;220      /* --------------------------    
;;;221       * Initializations of stage2    
;;;222       * ------------------------*/
;;;223    
;;;224      /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]    
;;;225       * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]    
;;;226       * ....    
;;;227       * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]    
;;;228       */
;;;229    
;;;230      /* Working pointer of inputA */
;;;231      px = pIn1;
;;;232    
;;;233      /* Working pointer of inputB */
;;;234      pSrc2 = pIn2 + (srcBLen - 1u);
;;;235      py = pSrc2;
;;;236    
;;;237      /* count is index by which the pointer pIn1 to be incremented */
;;;238      count = 0u;
;;;239    
;;;240      /* -------------------    
;;;241       * Stage2 process    
;;;242       * ------------------*/
;;;243    
;;;244      /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.    
;;;245       * So, to loop unroll over blockSize2,    
;;;246       * srcBLen should be greater than or equal to 4 */
;;;247      if(srcBLen >= 4u)
;;;248      {
;;;249        /* Loop unroll by 3 */
;;;250        blkCnt = blockSize2 / 3;
;;;251    
;;;252        while(blkCnt > 0u)
;;;253        {
;;;254          /* Set all accumulators to zero */
;;;255          acc0 = 0;
;;;256          acc1 = 0;
;;;257          acc2 = 0;
;;;258    
;;;259          /* read x[0], x[1], x[2] samples */
;;;260          x0 = *(px++);
;;;261          x1 = *(px++);
;;;262    
;;;263          /* Apply loop unrolling and compute 3 MACs simultaneously. */
;;;264          k = srcBLen / 3;
;;;265    
;;;266          /* First part of the processing with loop unrolling.  Compute 3 MACs at a time.        
;;;267           ** a second loop below computes MACs for the remaining 1 to 2 samples. */
;;;268          do
;;;269          {
;;;270            /* Read y[srcBLen - 1] sample */
;;;271            c0 = *(py);
;;;272    
;;;273            /* Read x[3] sample */
;;;274            x2 = *(px);
;;;275    
;;;276            /* Perform the multiply-accumulates */
;;;277            /* acc0 +=  x[0] * y[srcBLen - 1] */
;;;278            acc0 += ((q63_t) x0 * c0);
;;;279            /* acc1 +=  x[1] * y[srcBLen - 1] */
;;;280            acc1 += ((q63_t) x1 * c0);
;;;281            /* acc2 +=  x[2] * y[srcBLen - 1] */
;;;282            acc2 += ((q63_t) x2 * c0);
;;;283    
;;;284            /* Read y[srcBLen - 2] sample */
;;;285            c0 = *(py - 1u);
;;;286    
;;;287            /* Read x[4] sample */
;;;288            x0 = *(px + 1u);
;;;289    
;;;290            /* Perform the multiply-accumulate */
;;;291            /* acc0 +=  x[1] * y[srcBLen - 2] */
;;;292            acc0 += ((q63_t) x1 * c0);
;;;293            /* acc1 +=  x[2] * y[srcBLen - 2] */
;;;294            acc1 += ((q63_t) x2 * c0);
;;;295            /* acc2 +=  x[3] * y[srcBLen - 2] */
;;;296            acc2 += ((q63_t) x0 * c0);
;;;297    
;;;298            /* Read y[srcBLen - 3] sample */
;;;299            c0 = *(py - 2u);
;;;300    
;;;301            /* Read x[5] sample */
;;;302            x1 = *(px + 2u);
;;;303    
;;;304            /* Perform the multiply-accumulates */
;;;305            /* acc0 +=  x[2] * y[srcBLen - 3] */
;;;306            acc0 += ((q63_t) x2 * c0);
;;;307            /* acc1 +=  x[3] * y[srcBLen - 2] */
;;;308            acc1 += ((q63_t) x0 * c0);
;;;309            /* acc2 +=  x[4] * y[srcBLen - 2] */
;;;310            acc2 += ((q63_t) x1 * c0);
;;;311    
;;;312            /* update scratch pointers */
;;;313            px += 3u;
;;;314            py -= 3u;
;;;315    
;;;316          } while(--k);
;;;317    
;;;318          /* If the srcBLen is not a multiple of 3, compute any remaining MACs here.        
;;;319           ** No loop unrolling is used. */
;;;320          k = srcBLen - (3 * (srcBLen / 3));
;;;321    
;;;322          while(k > 0u)
;;;323          {
;;;324            /* Read y[srcBLen - 5] sample */
;;;325            c0 = *(py--);
;;;326    
;;;327            /* Read x[7] sample */
;;;328            x2 = *(px++);
;;;329    
;;;330            /* Perform the multiply-accumulates */
;;;331            /* acc0 +=  x[4] * y[srcBLen - 5] */
;;;332            acc0 += ((q63_t) x0 * c0);
;;;333            /* acc1 +=  x[5] * y[srcBLen - 5] */
;;;334            acc1 += ((q63_t) x1 * c0);
;;;335            /* acc2 +=  x[6] * y[srcBLen - 5] */
;;;336            acc2 += ((q63_t) x2 * c0);
;;;337    
;;;338            /* Reuse the present samples for the next MAC */
;;;339            x0 = x1;
;;;340            x1 = x2;
;;;341    
;;;342            /* Decrement the loop counter */
;;;343            k--;
;;;344          }
;;;345    
;;;346          /* Store the results in the accumulators in the destination buffer. */
;;;347          *pOut++ = (q31_t) (acc0 >> 31);
;;;348          *pOut++ = (q31_t) (acc1 >> 31);
;;;349          *pOut++ = (q31_t) (acc2 >> 31);
;;;350    
;;;351          /* Increment the pointer pIn1 index, count by 3 */
;;;352          count += 3u;
;;;353    
;;;354          /* Update the inputA and inputB pointers for next MAC calculation */
;;;355          px = pIn1 + count;
;;;356          py = pSrc2;
;;;357    
;;;358          /* Decrement the loop counter */
;;;359          blkCnt--;
;;;360        }
;;;361    
;;;362        /* If the blockSize2 is not a multiple of 3, compute any remaining output samples here.        
;;;363         ** No loop unrolling is used. */
;;;364        blkCnt = blockSize2 - 3 * (blockSize2 / 3);
;;;365    
;;;366        while(blkCnt > 0u)
;;;367        {
;;;368          /* Accumulator is made zero for every iteration */
;;;369          sum = 0;
;;;370    
;;;371          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;372          k = srcBLen >> 2u;
;;;373    
;;;374          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;375           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;376          while(k > 0u)
;;;377          {
;;;378            /* Perform the multiply-accumulates */
;;;379            sum += (q63_t) * px++ * (*py--);
;;;380            sum += (q63_t) * px++ * (*py--);
;;;381            sum += (q63_t) * px++ * (*py--);
;;;382            sum += (q63_t) * px++ * (*py--);
;;;383    
;;;384            /* Decrement the loop counter */
;;;385            k--;
;;;386          }
;;;387    
;;;388          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;389           ** No loop unrolling is used. */
;;;390          k = srcBLen % 0x4u;
;;;391    
;;;392          while(k > 0u)
;;;393          {
;;;394            /* Perform the multiply-accumulate */
;;;395            sum += (q63_t) * px++ * (*py--);
;;;396    
;;;397            /* Decrement the loop counter */
;;;398            k--;
;;;399          }
;;;400    
;;;401          /* Store the result in the accumulator in the destination buffer. */
;;;402          *pOut++ = (q31_t) (sum >> 31);
;;;403    
;;;404          /* Increment the MAC count */
;;;405          count++;
;;;406    
;;;407          /* Update the inputA and inputB pointers for next MAC calculation */
;;;408          px = pIn1 + count;
;;;409          py = pSrc2;
;;;410    
;;;411          /* Decrement the loop counter */
;;;412          blkCnt--;
;;;413        }
;;;414      }
;;;415      else
;;;416      {
;;;417        /* If the srcBLen is not a multiple of 4,    
;;;418         * the blockSize2 loop cannot be unrolled by 4 */
;;;419        blkCnt = blockSize2;
;;;420    
;;;421        while(blkCnt > 0u)
;;;422        {
;;;423          /* Accumulator is made zero for every iteration */
;;;424          sum = 0;
;;;425    
;;;426          /* srcBLen number of MACS should be performed */
;;;427          k = srcBLen;
;;;428    
;;;429          while(k > 0u)
;;;430          {
;;;431            /* Perform the multiply-accumulate */
;;;432            sum += (q63_t) * px++ * (*py--);
;;;433    
;;;434            /* Decrement the loop counter */
;;;435            k--;
;;;436          }
;;;437    
;;;438          /* Store the result in the accumulator in the destination buffer. */
;;;439          *pOut++ = (q31_t) (sum >> 31);
;;;440    
;;;441          /* Increment the MAC count */
;;;442          count++;
;;;443    
;;;444          /* Update the inputA and inputB pointers for next MAC calculation */
;;;445          px = pIn1 + count;
;;;446          py = pSrc2;
;;;447    
;;;448          /* Decrement the loop counter */
;;;449          blkCnt--;
;;;450        }
;;;451      }
;;;452    
;;;453    
;;;454      /* --------------------------    
;;;455       * Initializations of stage3    
;;;456       * -------------------------*/
;;;457    
;;;458      /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]    
;;;459       * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]    
;;;460       * ....    
;;;461       * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]    
;;;462       * sum +=  x[srcALen-1] * y[srcBLen-1]    
;;;463       */
;;;464    
;;;465      /* In this stage the MAC operations are decreased by 1 for every iteration.    
;;;466         The blockSize3 variable holds the number of MAC operations performed */
;;;467    
;;;468      /* Working pointer of inputA */
;;;469      pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
;;;470      px = pSrc1;
;;;471    
;;;472      /* Working pointer of inputB */
;;;473      pSrc2 = pIn2 + (srcBLen - 1u);
;;;474      py = pSrc2;
;;;475    
;;;476      /* -------------------    
;;;477       * Stage3 process    
;;;478       * ------------------*/
;;;479    
;;;480      while(blockSize3 > 0u)
;;;481      {
;;;482        /* Accumulator is made zero for every iteration */
;;;483        sum = 0;
;;;484    
;;;485        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;486        k = blockSize3 >> 2u;
;;;487    
;;;488        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;489         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;490        while(k > 0u)
;;;491        {
;;;492          /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
;;;493          sum += (q63_t) * px++ * (*py--);
;;;494          /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
;;;495          sum += (q63_t) * px++ * (*py--);
;;;496          /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
;;;497          sum += (q63_t) * px++ * (*py--);
;;;498          /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
;;;499          sum += (q63_t) * px++ * (*py--);
;;;500    
;;;501          /* Decrement the loop counter */
;;;502          k--;
;;;503        }
;;;504    
;;;505        /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.    
;;;506         ** No loop unrolling is used. */
;;;507        k = blockSize3 % 0x4u;
;;;508    
;;;509        while(k > 0u)
;;;510        {
;;;511          /* Perform the multiply-accumulate */
;;;512          sum += (q63_t) * px++ * (*py--);
;;;513    
;;;514          /* Decrement the loop counter */
;;;515          k--;
;;;516        }
;;;517    
;;;518        /* Store the result in the accumulator in the destination buffer. */
;;;519        *pOut++ = (q31_t) (sum >> 31);
;;;520    
;;;521        /* Update the inputA and inputB pointers for next MAC calculation */
;;;522        px = ++pSrc1;
;;;523        py = pSrc2;
;;;524    
;;;525        /* Decrement the loop counter */
;;;526        blockSize3--;
;;;527      }
;;;528    
;;;529    #else
;;;530    
;;;531      /* Run the below code for Cortex-M0 */
;;;532    
;;;533      q31_t *pIn1 = pSrcA;                           /* input pointer */
;;;534      q31_t *pIn2 = pSrcB;                           /* coefficient pointer */
;;;535      q63_t sum;                                     /* Accumulator */
;;;536      uint32_t i, j;                                 /* loop counter */
;;;537    
;;;538      /* Loop to calculate output of convolution for output length number of times */
;;;539      for (i = 0; i < (srcALen + srcBLen - 1); i++)
;;;540      {
;;;541        /* Initialize sum with zero to carry on MAC operations */
;;;542        sum = 0;
;;;543    
;;;544        /* Loop to perform MAC operations according to convolution equation */
;;;545        for (j = 0; j <= i; j++)
;;;546        {
;;;547          /* Check the array limitations */
;;;548          if(((i - j) < srcBLen) && (j < srcALen))
;;;549          {
;;;550            /* z[i] += x[i-j] * y[j] */
;;;551            sum += ((q63_t) pIn1[j] * (pIn2[i - j]));
;;;552          }
;;;553        }
;;;554    
;;;555        /* Store the output in the destination buffer */
;;;556        pDst[i] = (q31_t) (sum >> 31u);
;;;557      }
;;;558    
;;;559    #endif /*     #ifndef ARM_MATH_CM0_FAMILY */
;;;560    
;;;561    }
000048  f1a2070c          SUB      r7,r2,#0xc
00004c  fb84c40c          SMULL    r12,r4,r4,r12         ;181
000050  eb1c0606          ADDS     r6,r12,r6             ;181
000054  414c              ADCS     r4,r4,r1              ;181
000056  f852cc04          LDR      r12,[r2,#-4]          ;183
00005a  6841              LDR      r1,[r0,#4]            ;183
00005c  683f              LDR      r7,[r7,#0]            ;187
00005e  fb81c10c          SMULL    r12,r1,r1,r12         ;183
000062  eb1c0606          ADDS     r6,r12,r6             ;183
000066  4161              ADCS     r1,r1,r4              ;183
000068  f852cc08          LDR      r12,[r2,#-8]          ;185
00006c  6884              LDR      r4,[r0,#8]            ;185
00006e  fb84c40c          SMULL    r12,r4,r4,r12         ;185
000072  eb1c0606          ADDS     r6,r12,r6             ;185
000076  414c              ADCS     r4,r4,r1              ;185
000078  68c1              LDR      r1,[r0,#0xc]          ;187
00007a  3010              ADDS     r0,r0,#0x10           ;187
00007c  fb817107          SMULL    r7,r1,r1,r7           ;187
000080  3a10              SUBS     r2,r2,#0x10           ;187
000082  19be              ADDS     r6,r7,r6              ;187
000084  4161              ADCS     r1,r1,r4              ;187
000086  1e6d              SUBS     r5,r5,#1              ;187
                  |L1.136|
000088  2d00              CMP      r5,#0                 ;178
00008a  d1da              BNE      |L1.66|
00008c  f00a0403          AND      r4,r10,#3             ;195
000090  e007              B        |L1.162|
                  |L1.146|
000092  c820              LDM      r0!,{r5}              ;200
000094  f8527904          LDR      r7,[r2],#-4           ;200
000098  fb857507          SMULL    r7,r5,r5,r7           ;200
00009c  19be              ADDS     r6,r7,r6              ;200
00009e  4169              ADCS     r1,r1,r5              ;200
0000a0  1e64              SUBS     r4,r4,#1              ;200
                  |L1.162|
0000a2  2c00              CMP      r4,#0                 ;197
0000a4  d1f5              BNE      |L1.146|
0000a6  0ff0              LSRS     r0,r6,#31             ;207
0000a8  ea400041          ORR      r0,r0,r1,LSL #1       ;207
0000ac  9901              LDR      r1,[sp,#4]            ;207
0000ae  eb09028a          ADD      r2,r9,r10,LSL #2      ;210
0000b2  f10a0a01          ADD      r10,r10,#1            ;214
0000b6  6008              STR      r0,[r1,#0]            ;207
0000b8  9801              LDR      r0,[sp,#4]            ;207
0000ba  f1a80801          SUB      r8,r8,#1              ;217
0000be  1d00              ADDS     r0,r0,#4              ;207
0000c0  9001              STR      r0,[sp,#4]            ;211
0000c2  9806              LDR      r0,[sp,#0x18]         ;217
                  |L1.196|
0000c4  f1b80f00          CMP      r8,#0                 ;168
0000c8  d1b6              BNE      |L1.56|
0000ca  eb090183          ADD      r1,r9,r3,LSL #2       ;234
0000ce  9114              STR      r1,[sp,#0x50]         ;234
0000d0  1f09              SUBS     r1,r1,#4              ;234
0000d2  2200              MOVS     r2,#0                 ;238
0000d4  9213              STR      r2,[sp,#0x4c]         ;247
0000d6  910b              STR      r1,[sp,#0x2c]         ;247
0000d8  2b04              CMP      r3,#4                 ;247
0000da  d37d              BCC      |L1.472|
0000dc  9c11              LDR      r4,[sp,#0x44]         ;250
0000de  2203              MOVS     r2,#3                 ;250
0000e0  fbb4f4f2          UDIV     r4,r4,r2              ;250
0000e4  4622              MOV      r2,r4                 ;252
0000e6  940e              STR      r4,[sp,#0x38]         ;252
0000e8  e07f              B        |L1.490|
                  |L1.234|
0000ea  2400              MOVS     r4,#0                 ;252
0000ec  2503              MOVS     r5,#3                 ;264
0000ee  fbb3f5f5          UDIV     r5,r3,r5              ;264
0000f2  e8f06202          LDRD     r6,r2,[r0],#8         ;257
0000f6  46a2              MOV      r10,r4                ;255
0000f8  46a6              MOV      lr,r4                 ;256
0000fa  46a0              MOV      r8,r4                 ;256
0000fc  46a1              MOV      r9,r4                 ;256
0000fe  46a3              MOV      r11,r4                ;257
000100  f8cd503c          STR.W    r5,[sp,#0x3c]         ;264
                  |L1.260|
000104  f8517904          LDR      r7,[r1],#-4           ;271
000108  4655              MOV      r5,r10                ;278
00010a  fbc64507          SMLAL    r4,r5,r6,r7           ;278
00010e  f850cb04          LDR      r12,[r0],#4           ;274
000112  950d              STR      r5,[sp,#0x34]         ;280
000114  4675              MOV      r5,lr                 ;280
000116  fbc25807          SMLAL    r5,r8,r2,r7           ;280
00011a  9508              STR      r5,[sp,#0x20]         ;282
00011c  465d              MOV      r5,r11                ;282
00011e  fbcc9507          SMLAL    r9,r5,r12,r7          ;282
000122  46aa              MOV      r10,r5                ;282
000124  f8517904          LDR      r7,[r1],#-4           ;285
000128  9d0d              LDR      r5,[sp,#0x34]         ;292
00012a  c840              LDM      r0!,{r6}              ;288
00012c  fbc24507          SMLAL    r4,r5,r2,r7           ;292
000130  46ae              MOV      lr,r5                 ;292
000132  9d08              LDR      r5,[sp,#0x20]         ;294
000134  fbcc5807          SMLAL    r5,r8,r12,r7          ;294
000138  9508              STR      r5,[sp,#0x20]         ;296
00013a  4655              MOV      r5,r10                ;296
00013c  fbc69507          SMLAL    r9,r5,r6,r7           ;296
000140  46ab              MOV      r11,r5                ;296
000142  f8517904          LDR      r7,[r1],#-4           ;299
000146  4675              MOV      r5,lr                 ;306
000148  fbcc4507          SMLAL    r4,r5,r12,r7          ;306
00014c  46aa              MOV      r10,r5                ;306
00014e  9d08              LDR      r5,[sp,#0x20]         ;308
000150  c804              LDM      r0!,{r2}              ;302
000152  fbc65807          SMLAL    r5,r8,r6,r7           ;308
000156  46ae              MOV      lr,r5                 ;308
000158  465d              MOV      r5,r11                ;310
00015a  fbc29507          SMLAL    r9,r5,r2,r7           ;310
00015e  46ab              MOV      r11,r5                ;310
000160  9d0f              LDR      r5,[sp,#0x3c]         ;316
000162  1e6d              SUBS     r5,r5,#1              ;316
000164  950f              STR      r5,[sp,#0x3c]         ;316
000166  d1cd              BNE      |L1.260|
000168  2503              MOVS     r5,#3                 ;320
00016a  fbb3f5f5          UDIV     r5,r3,r5              ;320
00016e  eba50585          SUB      r5,r5,r5,LSL #2       ;320
000172  441d              ADD      r5,r5,r3              ;320
000174  e017              B        |L1.422|
000176  bf00              NOP                            ;325
                  |L1.376|
000178  c880              LDM      r0!,{r7}              ;328
00017a  f8515904          LDR      r5,[r1],#-4           ;325
00017e  970a              STR      r7,[sp,#0x28]         ;332
000180  4657              MOV      r7,r10                ;332
000182  fbc64705          SMLAL    r4,r7,r6,r5           ;332
000186  46ba              MOV      r10,r7                ;332
000188  4676              MOV      r6,lr                 ;334
00018a  4647              MOV      r7,r8                 ;334
00018c  fbc26705          SMLAL    r6,r7,r2,r5           ;334
000190  46b8              MOV      r8,r7                 ;334
000192  46b6              MOV      lr,r6                 ;334
000194  9f0a              LDR      r7,[sp,#0x28]         ;336
000196  465e              MOV      r6,r11                ;336
000198  fbc79605          SMLAL    r9,r6,r7,r5           ;336
00019c  46b3              MOV      r11,r6                ;336
00019e  4616              MOV      r6,r2                 ;339
0001a0  463a              MOV      r2,r7                 ;340
0001a2  f1ac0501          SUB      r5,r12,#1             ;343
                  |L1.422|
0001a6  ea5f0c05          MOVS     r12,r5                ;320
0001aa  d1e5              BNE      |L1.376|
0001ac  9901              LDR      r1,[sp,#4]            ;347
0001ae  0fe0              LSRS     r0,r4,#31             ;347
0001b0  ea40004a          ORR      r0,r0,r10,LSL #1      ;347
0001b4  6008              STR      r0,[r1,#0]            ;347
0001b6  9801              LDR      r0,[sp,#4]            ;348
0001b8  ea4f71de          LSR      r1,lr,#31             ;348
0001bc  ea410148          ORR      r1,r1,r8,LSL #1       ;348
0001c0  6041              STR      r1,[r0,#4]            ;349
0001c2  ea4f71d9          LSR      r1,r9,#31             ;349
0001c6  ea41014b          ORR      r1,r1,r11,LSL #1      ;349
0001ca  6081              STR      r1,[r0,#8]            ;349
0001cc  300c              ADDS     r0,r0,#0xc            ;349
0001ce  9001              STR      r0,[sp,#4]            ;352
0001d0  9813              LDR      r0,[sp,#0x4c]         ;352
0001d2  1cc0              ADDS     r0,r0,#3              ;352
0001d4  9013              STR      r0,[sp,#0x4c]         ;355
0001d6  e000              B        |L1.474|
                  |L1.472|
0001d8  e05f              B        |L1.666|
                  |L1.474|
0001da  9913              LDR      r1,[sp,#0x4c]         ;355
0001dc  9806              LDR      r0,[sp,#0x18]         ;355
0001de  9a0e              LDR      r2,[sp,#0x38]         ;359
0001e0  eb000081          ADD      r0,r0,r1,LSL #2       ;355
0001e4  1e52              SUBS     r2,r2,#1              ;359
0001e6  990b              LDR      r1,[sp,#0x2c]         ;359
0001e8  920e              STR      r2,[sp,#0x38]         ;359
                  |L1.490|
0001ea  2a00              CMP      r2,#0                 ;252
0001ec  f47faf7d          BNE      |L1.234|
0001f0  9a11              LDR      r2,[sp,#0x44]         ;364
0001f2  2403              MOVS     r4,#3                 ;364
0001f4  fbb2f2f4          UDIV     r2,r2,r4              ;364
0001f8  eba20482          SUB      r4,r2,r2,LSL #2       ;364
0001fc  9a11              LDR      r2,[sp,#0x44]         ;364
0001fe  4422              ADD      r2,r2,r4              ;364
000200  e047              B        |L1.658|
                  |L1.514|
000202  2500              MOVS     r5,#0                 ;366
000204  462e              MOV      r6,r5                 ;366
000206  089c              LSRS     r4,r3,#2              ;372
000208  e022              B        |L1.592|
                  |L1.522|
00020a  6802              LDR      r2,[r0,#0]            ;379
00020c  f8d1c000          LDR      r12,[r1,#0]           ;379
000210  f1a1070c          SUB      r7,r1,#0xc
000214  fb82c20c          SMULL    r12,r2,r2,r12         ;379
000218  eb1c0505          ADDS     r5,r12,r5             ;379
00021c  4172              ADCS     r2,r2,r6              ;379
00021e  f851cc04          LDR      r12,[r1,#-4]          ;380
000222  6846              LDR      r6,[r0,#4]            ;380
000224  683f              LDR      r7,[r7,#0]            ;382
000226  fb86c60c          SMULL    r12,r6,r6,r12         ;380
00022a  eb1c0505          ADDS     r5,r12,r5             ;380
00022e  4156              ADCS     r6,r6,r2              ;380
000230  f851cc08          LDR      r12,[r1,#-8]          ;381
000234  6882              LDR      r2,[r0,#8]            ;381
000236  fb82c20c          SMULL    r12,r2,r2,r12         ;381
00023a  eb1c0505          ADDS     r5,r12,r5             ;381
00023e  4172              ADCS     r2,r2,r6              ;381
000240  68c6              LDR      r6,[r0,#0xc]          ;382
000242  3010              ADDS     r0,r0,#0x10           ;382
000244  fb867607          SMULL    r7,r6,r6,r7           ;382
000248  3910              SUBS     r1,r1,#0x10           ;382
00024a  197d              ADDS     r5,r7,r5              ;382
00024c  4156              ADCS     r6,r6,r2              ;382
00024e  1e64              SUBS     r4,r4,#1              ;382
                  |L1.592|
000250  2c00              CMP      r4,#0                 ;376
000252  d1da              BNE      |L1.522|
000254  f0030203          AND      r2,r3,#3              ;390
000258  e007              B        |L1.618|
                  |L1.602|
00025a  c810              LDM      r0!,{r4}              ;395
00025c  f8517904          LDR      r7,[r1],#-4           ;395
000260  fb847407          SMULL    r7,r4,r4,r7           ;395
000264  197d              ADDS     r5,r7,r5              ;395
000266  4166              ADCS     r6,r6,r4              ;395
000268  1e52              SUBS     r2,r2,#1              ;395
                  |L1.618|
00026a  2a00              CMP      r2,#0                 ;392
00026c  d1f5              BNE      |L1.602|
00026e  9901              LDR      r1,[sp,#4]            ;402
000270  0fe8              LSRS     r0,r5,#31             ;402
000272  ea400046          ORR      r0,r0,r6,LSL #1       ;402
000276  6008              STR      r0,[r1,#0]            ;402
000278  9801              LDR      r0,[sp,#4]            ;402
00027a  f1a80201          SUB      r2,r8,#1              ;412
00027e  1d00              ADDS     r0,r0,#4              ;402
000280  9001              STR      r0,[sp,#4]            ;405
000282  9813              LDR      r0,[sp,#0x4c]         ;405
000284  1c40              ADDS     r0,r0,#1              ;405
000286  9013              STR      r0,[sp,#0x4c]         ;408
000288  9913              LDR      r1,[sp,#0x4c]         ;408
00028a  9806              LDR      r0,[sp,#0x18]         ;408
00028c  eb000081          ADD      r0,r0,r1,LSL #2       ;408
000290  990b              LDR      r1,[sp,#0x2c]         ;412
                  |L1.658|
000292  ea5f0802          MOVS     r8,r2                 ;364
000296  d1b4              BNE      |L1.514|
000298  e023              B        |L1.738|
                  |L1.666|
00029a  9e11              LDR      r6,[sp,#0x44]         ;421
00029c  e01f              B        |L1.734|
                  |L1.670|
00029e  2400              MOVS     r4,#0                 ;421
0002a0  4622              MOV      r2,r4                 ;421
0002a2  461d              MOV      r5,r3                 ;427
0002a4  e008              B        |L1.696|
                  |L1.678|
0002a6  c880              LDM      r0!,{r7}              ;432
0002a8  f851c904          LDR      r12,[r1],#-4          ;432
0002ac  fb87c70c          SMULL    r12,r7,r7,r12         ;432
0002b0  eb1c0404          ADDS     r4,r12,r4             ;432
0002b4  417a              ADCS     r2,r2,r7              ;432
0002b6  1e6d              SUBS     r5,r5,#1              ;432
                  |L1.696|
0002b8  2d00              CMP      r5,#0                 ;429
0002ba  d1f4              BNE      |L1.678|
0002bc  9901              LDR      r1,[sp,#4]            ;439
0002be  0fe0              LSRS     r0,r4,#31             ;439
0002c0  ea400042          ORR      r0,r0,r2,LSL #1       ;439
0002c4  6008              STR      r0,[r1,#0]            ;439
0002c6  9801              LDR      r0,[sp,#4]            ;439
0002c8  1d00              ADDS     r0,r0,#4              ;439
0002ca  9001              STR      r0,[sp,#4]            ;442
0002cc  9813              LDR      r0,[sp,#0x4c]         ;442
0002ce  1c40              ADDS     r0,r0,#1              ;442
0002d0  9013              STR      r0,[sp,#0x4c]         ;445
0002d2  9913              LDR      r1,[sp,#0x4c]         ;445
0002d4  9806              LDR      r0,[sp,#0x18]         ;445
0002d6  1e76              SUBS     r6,r6,#1              ;446
0002d8  eb000081          ADD      r0,r0,r1,LSL #2       ;445
0002dc  990b              LDR      r1,[sp,#0x2c]         ;446
                  |L1.734|
0002de  2e00              CMP      r6,#0                 ;421
0002e0  d1dd              BNE      |L1.670|
                  |L1.738|
0002e2  9916              LDR      r1,[sp,#0x58]         ;469
0002e4  9806              LDR      r0,[sp,#0x18]         ;469
0002e6  9a10              LDR      r2,[sp,#0x40]         ;480
0002e8  eb000081          ADD      r0,r0,r1,LSL #2       ;469
0002ec  eba00183          SUB      r1,r0,r3,LSL #2       ;469
0002f0  1d09              ADDS     r1,r1,#4              ;469
0002f2  9b14              LDR      r3,[sp,#0x50]         ;470
0002f4  4608              MOV      r0,r1                 ;470
0002f6  1f1b              SUBS     r3,r3,#4              ;470
0002f8  4698              MOV      r8,r3                 ;473
0002fa  e045              B        |L1.904|
                  |L1.764|
0002fc  2600              MOVS     r6,#0                 ;480
0002fe  9c10              LDR      r4,[sp,#0x40]         ;486
000300  4632              MOV      r2,r6                 ;480
000302  08a5              LSRS     r5,r4,#2              ;486
000304  e022              B        |L1.844|
                  |L1.774|
000306  6804              LDR      r4,[r0,#0]            ;493
000308  f8d3c000          LDR      r12,[r3,#0]           ;493
00030c  f1a3070c          SUB      r7,r3,#0xc
000310  fb84c40c          SMULL    r12,r4,r4,r12         ;493
000314  eb1c0606          ADDS     r6,r12,r6             ;493
000318  4154              ADCS     r4,r4,r2              ;493
00031a  f853cc04          LDR      r12,[r3,#-4]          ;495
00031e  6842              LDR      r2,[r0,#4]            ;495
000320  683f              LDR      r7,[r7,#0]            ;499
000322  fb82c20c          SMULL    r12,r2,r2,r12         ;495
000326  eb1c0606          ADDS     r6,r12,r6             ;495
00032a  4162              ADCS     r2,r2,r4              ;495
00032c  f853cc08          LDR      r12,[r3,#-8]          ;497
000330  6884              LDR      r4,[r0,#8]            ;497
000332  fb84c40c          SMULL    r12,r4,r4,r12         ;497
000336  eb1c0606          ADDS     r6,r12,r6             ;497
00033a  4154              ADCS     r4,r4,r2              ;497
00033c  68c2              LDR      r2,[r0,#0xc]          ;499
00033e  3010              ADDS     r0,r0,#0x10           ;499
000340  fb827207          SMULL    r7,r2,r2,r7           ;499
000344  3b10              SUBS     r3,r3,#0x10           ;499
000346  19be              ADDS     r6,r7,r6              ;499
000348  4162              ADCS     r2,r2,r4              ;499
00034a  1e6d              SUBS     r5,r5,#1              ;499
                  |L1.844|
00034c  2d00              CMP      r5,#0                 ;490
00034e  d1da              BNE      |L1.774|
000350  9c10              LDR      r4,[sp,#0x40]         ;507
000352  f0040403          AND      r4,r4,#3              ;507
000356  e007              B        |L1.872|
                  |L1.856|
000358  c820              LDM      r0!,{r5}              ;512
00035a  f8537904          LDR      r7,[r3],#-4           ;512
00035e  fb855707          SMULL    r5,r7,r5,r7           ;512
000362  19ae              ADDS     r6,r5,r6              ;512
000364  417a              ADCS     r2,r2,r7              ;512
000366  1e64              SUBS     r4,r4,#1              ;512
                  |L1.872|
000368  2c00              CMP      r4,#0                 ;509
00036a  d1f5              BNE      |L1.856|
00036c  0ff0              LSRS     r0,r6,#31             ;519
00036e  ea400042          ORR      r0,r0,r2,LSL #1       ;519
000372  9a01              LDR      r2,[sp,#4]            ;519
000374  4643              MOV      r3,r8                 ;523
000376  6010              STR      r0,[r2,#0]            ;519
000378  9801              LDR      r0,[sp,#4]            ;519
00037a  1d00              ADDS     r0,r0,#4              ;519
00037c  9001              STR      r0,[sp,#4]            ;522
00037e  1d08              ADDS     r0,r1,#4              ;522
000380  9a10              LDR      r2,[sp,#0x40]         ;526
000382  4601              MOV      r1,r0                 ;522
000384  1e52              SUBS     r2,r2,#1              ;526
000386  9210              STR      r2,[sp,#0x40]         ;526
                  |L1.904|
000388  2a00              CMP      r2,#0                 ;480
00038a  d1b7              BNE      |L1.764|
00038c  b019              ADD      sp,sp,#0x64
00038e  e8bd8ff0          POP      {r4-r11,pc}
;;;562    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_conv_q31_c_e38094d5____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_conv_q31_c_e38094d5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_conv_q31_c_e38094d5____REVSH|
#line 144
|__asm___14_arm_conv_q31_c_e38094d5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_conv_q31_c_e38094d5____RRX|
#line 300
|__asm___14_arm_conv_q31_c_e38094d5____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
