; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_scale_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_scale_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mat_scale_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_scale_q31.c]
                          THUMB

                          AREA ||i.arm_mat_scale_q31||, CODE, READONLY, ALIGN=1

                  arm_mat_scale_q31 PROC
;;;66     
;;;67     arm_status arm_mat_scale_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;68       const arm_matrix_instance_q31 * pSrc,
;;;69       q31_t scaleFract,
;;;70       int32_t shift,
;;;71       arm_matrix_instance_q31 * pDst)
;;;72     {
;;;73       q31_t *pIn = pSrc->pData;                      /* input data matrix pointer */
000004  6844              LDR      r4,[r0,#4]
;;;74       q31_t *pOut = pDst->pData;                     /* output data matrix pointer */
000006  685b              LDR      r3,[r3,#4]
;;;75       uint32_t numSamples;                           /* total number of elements in the matrix */
;;;76       int32_t totShift = shift + 1;                  /* shift to apply after scaling */
000008  1c52              ADDS     r2,r2,#1
;;;77       uint32_t blkCnt;                               /* loop counters  */
;;;78       arm_status status;                             /* status of matrix scaling      */
;;;79       q31_t in1, in2, out1;                          /* temporary variabels */
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       q31_t in3, in4, out2, out3, out4;              /* temporary variables */
;;;84     
;;;85     #endif //      #ifndef ARM_MAT_CM0
;;;86     
;;;87     #ifdef ARM_MATH_MATRIX_CHECK
;;;88       /* Check for matrix mismatch  */
;;;89       if((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
;;;90       {
;;;91         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;92         status = ARM_MATH_SIZE_MISMATCH;
;;;93       }
;;;94       else
;;;95     #endif //    #ifdef ARM_MATH_MATRIX_CHECK
;;;96       {
;;;97         /* Total number of samples in the input matrix */
;;;98         numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
00000a  f8b0a000          LDRH     r10,[r0,#0]
00000e  8840              LDRH     r0,[r0,#2]
000010  fb0afa00          MUL      r10,r10,r0
;;;99     
;;;100    #ifndef ARM_MATH_CM0_FAMILY
;;;101    
;;;102        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;103    
;;;104        /* Loop Unrolling */
;;;105        blkCnt = numSamples >> 2u;
000014  ea4f0b9a          LSR      r11,r10,#2
;;;106    
;;;107        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;108         ** a second loop below computes the remaining 1 to 3 samples. */
;;;109        while(blkCnt > 0u)
;;;110        {
;;;111          /* C(m,n) = A(m,n) * k */
;;;112          /* Read values from input */
;;;113          in1 = *pIn;
;;;114          in2 = *(pIn + 1);
;;;115          in3 = *(pIn + 2);
;;;116          in4 = *(pIn + 3);
;;;117    
;;;118          /* multiply input with scaler value */
;;;119          in1 = ((q63_t) in1 * scaleFract) >> 32;
;;;120          in2 = ((q63_t) in2 * scaleFract) >> 32;
;;;121          in3 = ((q63_t) in3 * scaleFract) >> 32;
;;;122          in4 = ((q63_t) in4 * scaleFract) >> 32;
;;;123    
;;;124          /* apply shifting */
;;;125          out1 = in1 << totShift;
;;;126          out2 = in2 << totShift;
;;;127    
;;;128          /* saturate the results. */
;;;129          if(in1 != (out1 >> totShift))
;;;130            out1 = 0x7FFFFFFF ^ (in1 >> 31);
000018  f06f4900          MVN      r9,#0x80000000
00001c  e034              B        |L1.136|
                  |L1.30|
00001e  6827              LDR      r7,[r4,#0]            ;113
000020  6860              LDR      r0,[r4,#4]            ;114
000022  68a6              LDR      r6,[r4,#8]            ;115
000024  68e5              LDR      r5,[r4,#0xc]          ;116
000026  fb57f701          SMMUL    r7,r7,r1              ;119
00002a  fb50fc01          SMMUL    r12,r0,r1             ;120
00002e  fb56f601          SMMUL    r6,r6,r1              ;121
000032  fb55f801          SMMUL    r8,r5,r1              ;122
000036  fa07f502          LSL      r5,r7,r2              ;125
00003a  fa0cf002          LSL      r0,r12,r2             ;126
00003e  fa45fe02          ASR      lr,r5,r2              ;129
000042  45be              CMP      lr,r7                 ;129
000044  d001              BEQ      |L1.74|
000046  ea8975e7          EOR      r5,r9,r7,ASR #31
                  |L1.74|
;;;131    
;;;132          if(in2 != (out2 >> totShift))
00004a  fa40f702          ASR      r7,r0,r2
00004e  4567              CMP      r7,r12
000050  d001              BEQ      |L1.86|
;;;133            out2 = 0x7FFFFFFF ^ (in2 >> 31);
000052  ea8970ec          EOR      r0,r9,r12,ASR #31
                  |L1.86|
;;;134    
;;;135          out3 = in3 << totShift;
000056  fa06f702          LSL      r7,r6,r2
;;;136          out4 = in4 << totShift;
00005a  fa08fc02          LSL      r12,r8,r2
;;;137    
;;;138          *pOut = out1;
00005e  601d              STR      r5,[r3,#0]
;;;139          *(pOut + 1) = out2;
000060  6058              STR      r0,[r3,#4]
;;;140    
;;;141          if(in3 != (out3 >> totShift))
000062  fa47f002          ASR      r0,r7,r2
000066  42b0              CMP      r0,r6
000068  d001              BEQ      |L1.110|
;;;142            out3 = 0x7FFFFFFF ^ (in3 >> 31);
00006a  ea8977e6          EOR      r7,r9,r6,ASR #31
                  |L1.110|
;;;143    
;;;144          if(in4 != (out4 >> totShift))
00006e  fa4cf002          ASR      r0,r12,r2
000072  4540              CMP      r0,r8
000074  d001              BEQ      |L1.122|
;;;145            out4 = 0x7FFFFFFF ^ (in4 >> 31);
000076  ea897ce8          EOR      r12,r9,r8,ASR #31
                  |L1.122|
;;;146    
;;;147    
;;;148          *(pOut + 2) = out3;
00007a  609f              STR      r7,[r3,#8]
;;;149          *(pOut + 3) = out4;
00007c  f8c3c00c          STR      r12,[r3,#0xc]
;;;150    
;;;151          /* update pointers to process next sampels */
;;;152          pIn += 4u;
000080  3410              ADDS     r4,r4,#0x10
;;;153          pOut += 4u;
000082  3310              ADDS     r3,r3,#0x10
;;;154    
;;;155    
;;;156          /* Decrement the numSamples loop counter */
;;;157          blkCnt--;
000084  f1ab0b01          SUB      r11,r11,#1
                  |L1.136|
000088  f1bb0f00          CMP      r11,#0                ;109
00008c  d1c7              BNE      |L1.30|
;;;158        }
;;;159    
;;;160        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;161         ** No loop unrolling is used. */
;;;162        blkCnt = numSamples % 0x4u;
00008e  f00a0603          AND      r6,r10,#3
;;;163    
;;;164    #else
;;;165    
;;;166        /* Run the below code for Cortex-M0 */
;;;167    
;;;168        /* Initialize blkCnt with number of samples */
;;;169        blkCnt = numSamples;
;;;170    
;;;171    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;172    
;;;173        while(blkCnt > 0u)
000092  e00c              B        |L1.174|
                  |L1.148|
;;;174        {
;;;175          /* C(m,n) = A(m,n) * k */
;;;176          /* Scale, saturate and then store the results in the destination buffer. */
;;;177          in1 = *pIn++;
000094  cc01              LDM      r4!,{r0}
;;;178    
;;;179          in2 = ((q63_t) in1 * scaleFract) >> 32;
000096  fb50f501          SMMUL    r5,r0,r1
;;;180    
;;;181          out1 = in2 << totShift;
00009a  fa05f002          LSL      r0,r5,r2
;;;182    
;;;183          if(in2 != (out1 >> totShift))
00009e  fa40f702          ASR      r7,r0,r2
0000a2  42af              CMP      r7,r5
0000a4  d001              BEQ      |L1.170|
;;;184            out1 = 0x7FFFFFFF ^ (in2 >> 31);
0000a6  ea8970e5          EOR      r0,r9,r5,ASR #31
                  |L1.170|
;;;185    
;;;186          *pOut++ = out1;
0000aa  c301              STM      r3!,{r0}
;;;187    
;;;188          /* Decrement the numSamples loop counter */
;;;189          blkCnt--;
0000ac  1e76              SUBS     r6,r6,#1
                  |L1.174|
0000ae  2e00              CMP      r6,#0                 ;173
0000b0  d1f0              BNE      |L1.148|
;;;190        }
;;;191    
;;;192        /* Set status as ARM_MATH_SUCCESS */
;;;193        status = ARM_MATH_SUCCESS;
0000b2  2000              MOVS     r0,#0
;;;194      }
;;;195    
;;;196      /* Return to application */
;;;197      return (status);
;;;198    }
0000b4  e8bd8ff0          POP      {r4-r11,pc}
;;;199    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_scale_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_q31_c_a18e8561____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_mat_scale_q31_c_a18e8561____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_q31_c_a18e8561____REVSH|
#line 144
|__asm___19_arm_mat_scale_q31_c_a18e8561____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_q31_c_a18e8561____RRX|
#line 300
|__asm___19_arm_mat_scale_q31_c_a18e8561____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
