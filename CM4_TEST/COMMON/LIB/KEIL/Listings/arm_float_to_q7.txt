; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_float_to_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_float_to_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_float_to_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_float_to_q7.c]
                          THUMB

                          AREA ||i.arm_float_to_q7||, CODE, READONLY, ALIGN=2

                  arm_float_to_q7 PROC
;;;74     
;;;75     void arm_float_to_q7(
000000  b510              PUSH     {r4,lr}
;;;76       float32_t * pSrc,
;;;77       q7_t * pDst,
;;;78       uint32_t blockSize)
;;;79     {
;;;80       float32_t *pIn = pSrc;                         /* Src pointer */
;;;81       uint32_t blkCnt;                               /* loop counter */
;;;82     
;;;83     #ifdef ARM_MATH_ROUNDING
;;;84     
;;;85       float32_t in;
;;;86     
;;;87     #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;88     
;;;89     #ifndef ARM_MATH_CM0_FAMILY
;;;90     
;;;91       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;92     
;;;93       /*loop Unrolling */
;;;94       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
;;;95     
;;;96       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;97        ** a second loop below computes the remaining 1 to 3 samples. */
;;;98       while(blkCnt > 0u)
;;;99       {
;;;100    
;;;101    #ifdef ARM_MATH_ROUNDING
;;;102        /* C = A * 128 */
;;;103        /* convert from float to q7 and then store the results in the destination buffer */
;;;104        in = *pIn++;
;;;105        in = (in * 128);
;;;106        in += in > 0.0f ? 0.5f : -0.5f;
;;;107        *pDst++ = (q7_t) (__SSAT((q15_t) (in), 8));
;;;108    
;;;109        in = *pIn++;
;;;110        in = (in * 128);
;;;111        in += in > 0.0f ? 0.5f : -0.5f;
;;;112        *pDst++ = (q7_t) (__SSAT((q15_t) (in), 8));
;;;113    
;;;114        in = *pIn++;
;;;115        in = (in * 128);
;;;116        in += in > 0.0f ? 0.5f : -0.5f;
;;;117        *pDst++ = (q7_t) (__SSAT((q15_t) (in), 8));
;;;118    
;;;119        in = *pIn++;
;;;120        in = (in * 128);
;;;121        in += in > 0.0f ? 0.5f : -0.5f;
;;;122        *pDst++ = (q7_t) (__SSAT((q15_t) (in), 8));
;;;123    
;;;124    #else
;;;125    
;;;126        /* C = A * 128 */
;;;127        /* convert from float to q7 and then store the results in the destination buffer */
;;;128        *pDst++ = __SSAT((q31_t) (*pIn++ * 128.0f), 8);
000004  ed9f0a22          VLDR     s0,|L1.144|
000008  e02d              B        |L1.102|
                  |L1.10|
00000a  ecf00a01          VLDM     r0!,{s1}
00000e  ee600a80          VMUL.F32 s1,s1,s0
000012  eefd0ae0          VCVT.S32.F32 s1,s1
000016  ee104a90          VMOV     r4,s1
00001a  f3040407          SSAT     r4,#8,r4
00001e  700c              STRB     r4,[r1,#0]
;;;129        *pDst++ = __SSAT((q31_t) (*pIn++ * 128.0f), 8);
000020  ecf00a01          VLDM     r0!,{s1}
000024  ee600a80          VMUL.F32 s1,s1,s0
000028  eefd0ae0          VCVT.S32.F32 s1,s1
00002c  ee104a90          VMOV     r4,s1
000030  f3040407          SSAT     r4,#8,r4
000034  704c              STRB     r4,[r1,#1]
;;;130        *pDst++ = __SSAT((q31_t) (*pIn++ * 128.0f), 8);
000036  ecf00a01          VLDM     r0!,{s1}
00003a  ee600a80          VMUL.F32 s1,s1,s0
00003e  eefd0ae0          VCVT.S32.F32 s1,s1
000042  ee104a90          VMOV     r4,s1
000046  f3040407          SSAT     r4,#8,r4
00004a  708c              STRB     r4,[r1,#2]
;;;131        *pDst++ = __SSAT((q31_t) (*pIn++ * 128.0f), 8);
00004c  ecf00a01          VLDM     r0!,{s1}
000050  ee600a80          VMUL.F32 s1,s1,s0
000054  eefd0ae0          VCVT.S32.F32 s1,s1
000058  ee104a90          VMOV     r4,s1
00005c  f3040407          SSAT     r4,#8,r4
000060  70cc              STRB     r4,[r1,#3]
000062  1d09              ADDS     r1,r1,#4
;;;132    
;;;133    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;134    
;;;135        /* Decrement the loop counter */
;;;136        blkCnt--;
000064  1e5b              SUBS     r3,r3,#1
                  |L1.102|
000066  2b00              CMP      r3,#0                 ;98
000068  d1cf              BNE      |L1.10|
;;;137      }
;;;138    
;;;139      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;140       ** No loop unrolling is used. */
;;;141      blkCnt = blockSize % 0x4u;
00006a  f0020203          AND      r2,r2,#3
;;;142    
;;;143      while(blkCnt > 0u)
00006e  e00c              B        |L1.138|
                  |L1.112|
;;;144      {
;;;145    
;;;146    #ifdef ARM_MATH_ROUNDING
;;;147        /* C = A * 128 */
;;;148        /* convert from float to q7 and then store the results in the destination buffer */
;;;149        in = *pIn++;
;;;150        in = (in * 128);
;;;151        in += in > 0.0f ? 0.5f : -0.5f;
;;;152        *pDst++ = (q7_t) (__SSAT((q15_t) (in), 8));
;;;153    
;;;154    #else
;;;155    
;;;156        /* C = A * 128 */
;;;157        /* convert from float to q7 and then store the results in the destination buffer */
;;;158        *pDst++ = __SSAT((q31_t) (*pIn++ * 128.0f), 8);
000070  ecf00a01          VLDM     r0!,{s1}
000074  ee600a80          VMUL.F32 s1,s1,s0
000078  eefd0ae0          VCVT.S32.F32 s1,s1
00007c  ee103a90          VMOV     r3,s1
000080  f3030307          SSAT     r3,#8,r3
000084  f8013b01          STRB     r3,[r1],#1
;;;159    
;;;160    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;161    
;;;162        /* Decrement the loop counter */
;;;163        blkCnt--;
000088  1e52              SUBS     r2,r2,#1
                  |L1.138|
00008a  2a00              CMP      r2,#0                 ;143
00008c  d1f0              BNE      |L1.112|
;;;164      }
;;;165    
;;;166    
;;;167    #else
;;;168    
;;;169      /* Run the below code for Cortex-M0 */
;;;170    
;;;171    
;;;172      /* Loop over blockSize number of values */
;;;173      blkCnt = blockSize;
;;;174    
;;;175      while(blkCnt > 0u)
;;;176      {
;;;177    #ifdef ARM_MATH_ROUNDING
;;;178        /* C = A * 128 */
;;;179        /* convert from float to q7 and then store the results in the destination buffer */
;;;180        in = *pIn++;
;;;181        in = (in * 128.0f);
;;;182        in += in > 0 ? 0.5f : -0.5f;
;;;183        *pDst++ = (q7_t) (__SSAT((q31_t) (in), 8));
;;;184    
;;;185    #else
;;;186    
;;;187        /* C = A * 128 */
;;;188        /* convert from float to q7 and then store the results in the destination buffer */
;;;189        *pDst++ = (q7_t) __SSAT((q31_t) (*pIn++ * 128.0f), 8);
;;;190    
;;;191    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;192    
;;;193        /* Decrement the loop counter */
;;;194        blkCnt--;
;;;195      }
;;;196    
;;;197    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;198    
;;;199    }
00008e  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  |L1.144|
000090  43000000          DCFS     0x43000000 ; 128

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_float_to_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_float_to_q7_c_af97a8f9____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_float_to_q7_c_af97a8f9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_float_to_q7_c_af97a8f9____REVSH|
#line 144
|__asm___17_arm_float_to_q7_c_af97a8f9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_float_to_q7_c_af97a8f9____RRX|
#line 300
|__asm___17_arm_float_to_q7_c_af97a8f9____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
