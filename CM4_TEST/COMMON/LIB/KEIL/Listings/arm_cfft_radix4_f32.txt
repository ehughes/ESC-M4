; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix4_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix4_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cfft_radix4_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix4_f32.c]
                          THUMB

                          AREA ||i.arm_cfft_radix4_f32||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix4_f32 PROC
;;;1180   
;;;1181   void arm_cfft_radix4_f32(
000000  b570              PUSH     {r4-r6,lr}
;;;1182   const arm_cfft_radix4_instance_f32 * S,
;;;1183   float32_t * pSrc)
;;;1184   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1185   
;;;1186      if(S->ifftFlag == 1u)
000006  78a0              LDRB     r0,[r4,#2]
;;;1187      {
;;;1188         /*  Complex IFFT radix-4  */
;;;1189         arm_radix4_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;1186
00000e  2801              CMP      r0,#1                 ;1186
000010  d00d              BEQ      |L1.46|
;;;1190         S->twidCoefModifier, S->onebyfftLen);
;;;1191      }
;;;1192      else
;;;1193      {
;;;1194         /*  Complex FFT radix-4  */
;;;1195         arm_radix4_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       arm_radix4_butterfly_f32
                  |L1.24|
;;;1196         S->twidCoefModifier);
;;;1197      }
;;;1198   
;;;1199      if(S->bitReverseFlag == 1u)
000018  78e0              LDRB     r0,[r4,#3]
00001a  2801              CMP      r0,#1
00001c  d10d              BNE      |L1.58|
;;;1200      {
;;;1201         /*  Bit Reversal */
;;;1202         arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
00001e  89e2              LDRH     r2,[r4,#0xe]
000020  8821              LDRH     r1,[r4,#0]
000022  4628              MOV      r0,r5
000024  68a3              LDR      r3,[r4,#8]
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      arm_bitreversal_f32
                  |L1.46|
00002e  ed940a04          VLDR     s0,[r4,#0x10]         ;1189
000032  4628              MOV      r0,r5                 ;1189
000034  f7fffffe          BL       arm_radix4_butterfly_inverse_f32
000038  e7ee              B        |L1.24|
                  |L1.58|
;;;1203      }
;;;1204   
;;;1205   }
00003a  bd70              POP      {r4-r6,pc}
;;;1206   
                          ENDP


                          AREA ||i.arm_radix4_butterfly_f32||, CODE, READONLY, ALIGN=1

                  arm_radix4_butterfly_f32 PROC
;;;66     
;;;67     void arm_radix4_butterfly_f32(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;68     float32_t * pSrc,
;;;69     uint16_t fftLen,
;;;70     float32_t * pCoef,
;;;71     uint16_t twidCoefModifier)
;;;72     {
000004  ed2d8b02          VPUSH    {d8}
000008  b088              SUB      sp,sp,#0x20
;;;73     
;;;74        float32_t co1, co2, co3, si1, si2, si3;
;;;75        uint32_t ia1, ia2, ia3;
;;;76        uint32_t i0, i1, i2, i3;
;;;77        uint32_t n1, n2, j, k;
;;;78     
;;;79     #ifndef ARM_MATH_CM0_FAMILY_FAMILY
;;;80     
;;;81        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;82     
;;;83        float32_t xaIn, yaIn, xbIn, ybIn, xcIn, ycIn, xdIn, ydIn;
;;;84        float32_t Xaplusc, Xbplusd, Yaplusc, Ybplusd, Xaminusc, Xbminusd, Yaminusc,
;;;85        Ybminusd;
;;;86        float32_t Xb12C_out, Yb12C_out, Xc12C_out, Yc12C_out, Xd12C_out, Yd12C_out;
;;;87        float32_t Xb12_out, Yb12_out, Xc12_out, Yc12_out, Xd12_out, Yd12_out;
;;;88        float32_t *ptr1;
;;;89        float32_t p0,p1,p2,p3,p4,p5;
;;;90        float32_t a0,a1,a2,a3,a4,a5,a6,a7;
;;;91     
;;;92        /*  Initializations for the first stage */
;;;93        n2 = fftLen;
00000a  990b              LDR      r1,[sp,#0x2c]
;;;94        n1 = n2;
;;;95     
;;;96        /* n2 = fftLen/4 */
;;;97        n2 >>= 2u;
00000c  0889              LSRS     r1,r1,#2
00000e  9107              STR      r1,[sp,#0x1c]
;;;98        i0 = 0u;
000010  2400              MOVS     r4,#0
;;;99        ia1 = 0u;
000012  2300              MOVS     r3,#0
;;;100    
;;;101       j = n2;
000014  460f              MOV      r7,r1
                  |L2.22|
;;;102    
;;;103       /*  Calculation of first stage */
;;;104       do
;;;105       {
;;;106          /*  index calculation for the input as, */
;;;107          /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;108          i1 = i0 + n2;
000016  eb040901          ADD      r9,r4,r1
;;;109          i2 = i1 + n2;
00001a  eb090a01          ADD      r10,r9,r1
;;;110          i3 = i2 + n2;
00001e  eb0a0b01          ADD      r11,r10,r1
;;;111    
;;;112          xaIn = pSrc[(2u * i0)];
000022  eb000cc4          ADD      r12,r0,r4,LSL #3
000026  eddc2a00          VLDR     s5,[r12,#0]
;;;113          yaIn = pSrc[(2u * i0) + 1u];
00002a  2501              MOVS     r5,#1
00002c  eb050644          ADD      r6,r5,r4,LSL #1
000030  eb000886          ADD      r8,r0,r6,LSL #2
000034  ed985a00          VLDR     s10,[r8,#0]
;;;114    
;;;115          xbIn = pSrc[(2u * i1)];
000038  eb0006c9          ADD      r6,r0,r9,LSL #3
00003c  9606              STR      r6,[sp,#0x18]
00003e  ed963a00          VLDR     s6,[r6,#0]
;;;116          ybIn = pSrc[(2u * i1) + 1u];
000042  eb050649          ADD      r6,r5,r9,LSL #1
000046  eb000686          ADD      r6,r0,r6,LSL #2
00004a  9605              STR      r6,[sp,#0x14]
00004c  edd63a00          VLDR     s7,[r6,#0]
;;;117    
;;;118          xcIn = pSrc[(2u * i2)];
000050  eb0006ca          ADD      r6,r0,r10,LSL #3
000054  9604              STR      r6,[sp,#0x10]
000056  edd66a00          VLDR     s13,[r6,#0]
;;;119          ycIn = pSrc[(2u * i2) + 1u];
00005a  eb05064a          ADD      r6,r5,r10,LSL #1
00005e  eb000986          ADD      r9,r0,r6,LSL #2
000062  edd95a00          VLDR     s11,[r9,#0]
;;;120    
;;;121          xdIn = pSrc[(2u * i3)];
000066  eb000acb          ADD      r10,r0,r11,LSL #3
00006a  ed9a6a00          VLDR     s12,[r10,#0]
;;;122          ydIn = pSrc[(2u * i3) + 1u];
00006e  eb05064b          ADD      r6,r5,r11,LSL #1
000072  eb000b86          ADD      r11,r0,r6,LSL #2
000076  ed9b4a00          VLDR     s8,[r11,#0]
;;;123    
;;;124          /* xa + xc */
;;;125          Xaplusc = xaIn + xcIn;
00007a  ee321aa6          VADD.F32 s2,s5,s13
;;;126          /* xb + xd */
;;;127          Xbplusd = xbIn + xdIn;
00007e  ee734a06          VADD.F32 s9,s6,s12
;;;128          /* ya + yc */
;;;129          Yaplusc = yaIn + ycIn;
000082  ee751a25          VADD.F32 s3,s10,s11
;;;130          /* yb + yd */
;;;131          Ybplusd = ybIn + ydIn;
000086  ee332a84          VADD.F32 s4,s7,s8
;;;132    
;;;133          /*  index calculation for the coefficients */
;;;134          ia2 = ia1 + ia1;
00008a  005e              LSLS     r6,r3,#1
;;;135          co2 = pCoef[ia2 * 2u];
00008c  eb020ec6          ADD      lr,r2,r6,LSL #3
000090  ed9e0a00          VLDR     s0,[lr,#0]
;;;136          si2 = pCoef[(ia2 * 2u) + 1u];
000094  eb050e46          ADD      lr,r5,r6,LSL #1
000098  eb020e8e          ADD      lr,r2,lr,LSL #2
00009c  edde0a00          VLDR     s1,[lr,#0]
;;;137    
;;;138          /* xa - xc */
;;;139          Xaminusc = xaIn - xcIn;
0000a0  ee722ae6          VSUB.F32 s5,s5,s13
;;;140          /* xb - xd */
;;;141          Xbminusd = xbIn - xdIn;
0000a4  ee333a46          VSUB.F32 s6,s6,s12
;;;142          /* ya - yc */
;;;143          Yaminusc = yaIn - ycIn;
0000a8  ee355a65          VSUB.F32 s10,s10,s11
;;;144          /* yb - yd */
;;;145          Ybminusd = ybIn - ydIn;
0000ac  ee336ac4          VSUB.F32 s12,s7,s8
;;;146    
;;;147          /* xa' = xa + xb + xc + xd */
;;;148          pSrc[(2u * i0)] = Xaplusc + Xbplusd;
0000b0  ee713a24          VADD.F32 s7,s2,s9
0000b4  edcc3a00          VSTR     s7,[r12,#0]
;;;149          /* ya' = ya + yb + yc + yd */
;;;150          pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
0000b8  ee713a82          VADD.F32 s7,s3,s4
0000bc  edc83a00          VSTR     s7,[r8,#0]
;;;151    
;;;152          /* (xa - xc) + (yb - yd) */
;;;153          Xb12C_out = (Xaminusc + Ybminusd);
0000c0  ee324a86          VADD.F32 s8,s5,s12
;;;154          /* (ya - yc) + (xb - xd) */
;;;155          Yb12C_out = (Yaminusc - Xbminusd);
0000c4  ee755a43          VSUB.F32 s11,s10,s6
;;;156          /* (xa + xc) - (xb + xd) */
;;;157          Xc12C_out = (Xaplusc - Xbplusd);
0000c8  ee713a64          VSUB.F32 s7,s2,s9
;;;158          /* (ya + yc) - (yb + yd) */
;;;159          Yc12C_out = (Yaplusc - Ybplusd);
0000cc  ee312ac2          VSUB.F32 s4,s3,s4
;;;160          /* (xa - xc) - (yb - yd) */
;;;161          Xd12C_out = (Xaminusc - Ybminusd);
0000d0  ee722ac6          VSUB.F32 s5,s5,s12
;;;162          /* (ya - yc) + (xb - xd) */
;;;163          Yd12C_out = (Xbminusd + Yaminusc);
0000d4  ee331a05          VADD.F32 s2,s6,s10
;;;164    
;;;165          co1 = pCoef[ia1 * 2u];
0000d8  eb020cc3          ADD      r12,r2,r3,LSL #3
0000dc  ed9c3a00          VLDR     s6,[r12,#0]
;;;166          si1 = pCoef[(ia1 * 2u) + 1u];
0000e0  eb050c43          ADD      r12,r5,r3,LSL #1
0000e4  eb020c8c          ADD      r12,r2,r12,LSL #2
0000e8  eddc4a00          VLDR     s9,[r12,#0]
;;;167    
;;;168          /*  index calculation for the coefficients */
;;;169          ia3 = ia2 + ia1;
0000ec  441e              ADD      r6,r6,r3
;;;170          co3 = pCoef[ia3 * 2u];
0000ee  eb020cc6          ADD      r12,r2,r6,LSL #3
0000f2  eddc1a00          VLDR     s3,[r12,#0]
;;;171          si3 = pCoef[(ia3 * 2u) + 1u];
0000f6  eb050646          ADD      r6,r5,r6,LSL #1
0000fa  eb020686          ADD      r6,r2,r6,LSL #2
0000fe  ed965a00          VLDR     s10,[r6,#0]
;;;172    
;;;173          Xb12_out = Xb12C_out * co1;
000102  ee646a03          VMUL.F32 s13,s8,s6
;;;174          Yb12_out = Yb12C_out * co1;
000106  ee657a83          VMUL.F32 s15,s11,s6
;;;175          Xc12_out = Xc12C_out * co2;
00010a  ee233a80          VMUL.F32 s6,s7,s0
;;;176          Yc12_out = Yc12C_out * co2;
00010e  ee226a00          VMUL.F32 s12,s4,s0
;;;177          Xd12_out = Xd12C_out * co3;
000112  ee227aa1          VMUL.F32 s14,s5,s3
;;;178          Yd12_out = Yd12C_out * co3;
000116  ee210a21          VMUL.F32 s0,s2,s3
;;;179             
;;;180          /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;181          //Xb12_out -= Yb12C_out * si1;
;;;182          p0 = Yb12C_out * si1;
00011a  ee651aa4          VMUL.F32 s3,s11,s9
;;;183          /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;184          //Yb12_out += Xb12C_out * si1;
;;;185          p1 = Xb12C_out * si1;
00011e  ee244a24          VMUL.F32 s8,s8,s9
;;;186          /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;187          //Xc12_out -= Yc12C_out * si2;
;;;188          p2 = Yc12C_out * si2;
000122  ee222a20          VMUL.F32 s4,s4,s1
;;;189          /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;190          //Yc12_out += Xc12C_out * si2;
;;;191          p3 = Xc12C_out * si2;
000126  ee630aa0          VMUL.F32 s1,s7,s1
;;;192          /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;193          //Xd12_out -= Yd12C_out * si3;
;;;194          p4 = Yd12C_out * si3;
00012a  ee211a05          VMUL.F32 s2,s2,s10
;;;195          /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;196          //Yd12_out += Xd12C_out * si3;
;;;197          p5 = Xd12C_out * si3;
00012e  ee622a85          VMUL.F32 s5,s5,s10
;;;198          
;;;199          Xb12_out += p0;
000132  ee761aa1          VADD.F32 s3,s13,s3
;;;200          Yb12_out -= p1;
000136  ee773ac4          VSUB.F32 s7,s15,s8
;;;201          Xc12_out += p2;
00013a  ee332a02          VADD.F32 s4,s6,s4
;;;202          Yc12_out -= p3;
00013e  ee760a60          VSUB.F32 s1,s12,s1
;;;203          Xd12_out += p4;
000142  ee371a01          VADD.F32 s2,s14,s2
;;;204          Yd12_out -= p5;
000146  ee300a62          VSUB.F32 s0,s0,s5
;;;205    
;;;206          /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;207          pSrc[2u * i1] = Xc12_out;
00014a  9e06              LDR      r6,[sp,#0x18]
00014c  ed862a00          VSTR     s4,[r6,#0]
;;;208    
;;;209          /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;210          pSrc[(2u * i1) + 1u] = Yc12_out;
000150  9e05              LDR      r6,[sp,#0x14]
000152  edc60a00          VSTR     s1,[r6,#0]
;;;211    
;;;212          /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;213          pSrc[2u * i2] = Xb12_out;
000156  9e04              LDR      r6,[sp,#0x10]
000158  edc61a00          VSTR     s3,[r6,#0]
;;;214    
;;;215          /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;216          pSrc[(2u * i2) + 1u] = Yb12_out;
00015c  edc93a00          VSTR     s7,[r9,#0]
;;;217    
;;;218          /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;219          pSrc[2u * i3] = Xd12_out;
000160  ed8a1a00          VSTR     s2,[r10,#0]
;;;220    
;;;221          /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;222          pSrc[(2u * i3) + 1u] = Yd12_out;
000164  ed8b0a00          VSTR     s0,[r11,#0]
;;;223    
;;;224          /*  Twiddle coefficients index modifier */
;;;225          ia1 += twidCoefModifier;
000168  9e0d              LDR      r6,[sp,#0x34]
00016a  4433              ADD      r3,r3,r6
;;;226    
;;;227          /*  Updating input index */
;;;228          i0++;
00016c  1c64              ADDS     r4,r4,#1
;;;229    
;;;230       }
;;;231       while(--j);
00016e  1e7f              SUBS     r7,r7,#1
000170  f47faf51          BNE      |L2.22|
;;;232    
;;;233       twidCoefModifier <<= 2u;
000174  9b0d              LDR      r3,[sp,#0x34]
000176  f64f74ff          MOV      r4,#0xffff
00017a  ea040a83          AND      r10,r4,r3,LSL #2
;;;234    
;;;235       /*  Calculation of second stage to excluding last stage */
;;;236       for (k = fftLen >> 2u; k > 4u; k >>= 2u)
00017e  9b07              LDR      r3,[sp,#0x1c]
000180  9300              STR      r3,[sp,#0]
000182  e0c2              B        |L2.778|
                  |L2.388|
;;;237       {
;;;238          /*  Initializations for the first stage */
;;;239          n1 = n2;
000184  9101              STR      r1,[sp,#4]
;;;240          n2 >>= 2u;
000186  0889              LSRS     r1,r1,#2
;;;241          ia1 = 0u;
000188  2400              MOVS     r4,#0
;;;242    
;;;243          /*  Calculation of first stage */
;;;244          j = 0;
00018a  2700              MOVS     r7,#0
                  |L2.396|
;;;245          do
;;;246          {
;;;247             /*  index calculation for the coefficients */
;;;248             ia2 = ia1 + ia1;
00018c  0063              LSLS     r3,r4,#1
;;;249             ia3 = ia2 + ia1;
00018e  191d              ADDS     r5,r3,r4
;;;250             co1 = pCoef[ia1 * 2u];
000190  eb0206c4          ADD      r6,r2,r4,LSL #3
000194  ed966a00          VLDR     s12,[r6,#0]
;;;251             si1 = pCoef[(ia1 * 2u) + 1u];
000198  2601              MOVS     r6,#1
00019a  eb060c44          ADD      r12,r6,r4,LSL #1
00019e  eb020c8c          ADD      r12,r2,r12,LSL #2
0001a2  eddc7a00          VLDR     s15,[r12,#0]
;;;252             co2 = pCoef[ia2 * 2u];
0001a6  eb020cc3          ADD      r12,r2,r3,LSL #3
0001aa  eddc6a00          VLDR     s13,[r12,#0]
;;;253             si2 = pCoef[(ia2 * 2u) + 1u];
0001ae  eb060343          ADD      r3,r6,r3,LSL #1
0001b2  eb020383          ADD      r3,r2,r3,LSL #2
0001b6  ed938a00          VLDR     s16,[r3,#0]
;;;254             co3 = pCoef[ia3 * 2u];
0001ba  eb0203c5          ADD      r3,r2,r5,LSL #3
0001be  ed937a00          VLDR     s14,[r3,#0]
;;;255             si3 = pCoef[(ia3 * 2u) + 1u];
0001c2  eb060345          ADD      r3,r6,r5,LSL #1
0001c6  eb020383          ADD      r3,r2,r3,LSL #2
0001ca  edd38a00          VLDR     s17,[r3,#0]
;;;256    
;;;257             /*  Twiddle coefficients index modifier */
;;;258             ia1 += twidCoefModifier;
0001ce  4454              ADD      r4,r4,r10
;;;259          
;;;260             i0 = j;
0001d0  463b              MOV      r3,r7
                  |L2.466|
;;;261             do
;;;262             {
;;;263                /*  index calculation for the input as, */
;;;264                /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;265                i1 = i0 + n2;
0001d2  185d              ADDS     r5,r3,r1
;;;266                i2 = i1 + n2;
0001d4  186e              ADDS     r6,r5,r1
;;;267                i3 = i2 + n2;
0001d6  eb060c01          ADD      r12,r6,r1
;;;268    
;;;269                xaIn = pSrc[(2u * i0)];
0001da  eb0009c3          ADD      r9,r0,r3,LSL #3
0001de  f8cd900c          STR      r9,[sp,#0xc]
0001e2  edd90a00          VLDR     s1,[r9,#0]
;;;270                yaIn = pSrc[(2u * i0) + 1u];
0001e6  f04f0901          MOV      r9,#1
0001ea  eb090843          ADD      r8,r9,r3,LSL #1
0001ee  eb000b88          ADD      r11,r0,r8,LSL #2
0001f2  eddb4a00          VLDR     s9,[r11,#0]
;;;271    
;;;272                xbIn = pSrc[(2u * i1)];
0001f6  eb0008c5          ADD      r8,r0,r5,LSL #3
0001fa  edd82a00          VLDR     s5,[r8,#0]
;;;273                ybIn = pSrc[(2u * i1) + 1u];
0001fe  eb090545          ADD      r5,r9,r5,LSL #1
000202  eb000e85          ADD      lr,r0,r5,LSL #2
000206  f8cde008          STR      lr,[sp,#8]
00020a  ed9e0a00          VLDR     s0,[lr,#0]
;;;274    
;;;275                xcIn = pSrc[(2u * i2)];
00020e  eb0005c6          ADD      r5,r0,r6,LSL #3
000212  edd55a00          VLDR     s11,[r5,#0]
;;;276                ycIn = pSrc[(2u * i2) + 1u];
000216  eb090646          ADD      r6,r9,r6,LSL #1
00021a  eb000686          ADD      r6,r0,r6,LSL #2
00021e  ed965a00          VLDR     s10,[r6,#0]
;;;277    
;;;278                xdIn = pSrc[(2u * i3)];
000222  eb000ecc          ADD      lr,r0,r12,LSL #3
000226  ed9e1a00          VLDR     s2,[lr,#0]
;;;279                ydIn = pSrc[(2u * i3) + 1u];
00022a  eb090c4c          ADD      r12,r9,r12,LSL #1
00022e  eb000c8c          ADD      r12,r0,r12,LSL #2
000232  ed9c4a00          VLDR     s8,[r12,#0]
;;;280    
;;;281                /* xa - xc */
;;;282                Xaminusc = xaIn - xcIn;
000236  ee303ae5          VSUB.F32 s6,s1,s11
;;;283                /* (xb - xd) */
;;;284                Xbminusd = xbIn - xdIn;
00023a  ee723ac1          VSUB.F32 s7,s5,s2
;;;285                /* ya - yc */
;;;286                Yaminusc = yaIn - ycIn;
00023e  ee342ac5          VSUB.F32 s4,s9,s10
;;;287                /* (yb - yd) */
;;;288                Ybminusd = ybIn - ydIn;
000242  ee701a44          VSUB.F32 s3,s0,s8
;;;289    
;;;290                /* xa + xc */
;;;291                Xaplusc = xaIn + xcIn;
000246  ee700aa5          VADD.F32 s1,s1,s11
;;;292                /* xb + xd */
;;;293                Xbplusd = xbIn + xdIn;
00024a  ee722a81          VADD.F32 s5,s5,s2
;;;294                /* ya + yc */
;;;295                Yaplusc = yaIn + ycIn;
00024e  ee341a85          VADD.F32 s2,s9,s10
;;;296                /* yb + yd */
;;;297                Ybplusd = ybIn + ydIn;
000252  ee304a04          VADD.F32 s8,s0,s8
;;;298    
;;;299                /* (xa - xc) + (yb - yd) */
;;;300                Xb12C_out = (Xaminusc + Ybminusd);
000256  ee330a21          VADD.F32 s0,s6,s3
;;;301                /* (ya - yc) -  (xb - xd) */
;;;302                Yb12C_out = (Yaminusc - Xbminusd);
00025a  ee724a63          VSUB.F32 s9,s4,s7
;;;303                /* xa + xc -(xb + xd) */
;;;304                Xc12C_out = (Xaplusc - Xbplusd);
00025e  ee705ae2          VSUB.F32 s11,s1,s5
;;;305                /* (ya + yc) - (yb + yd) */
;;;306                Yc12C_out = (Yaplusc - Ybplusd);
000262  ee315a44          VSUB.F32 s10,s2,s8
;;;307                /* (xa - xc) - (yb - yd) */
;;;308                Xd12C_out = (Xaminusc - Ybminusd);
000266  ee333a61          VSUB.F32 s6,s6,s3
;;;309                /* (ya - yc) +  (xb - xd) */
;;;310                Yd12C_out = (Xbminusd + Yaminusc);
00026a  ee731a82          VADD.F32 s3,s7,s4
;;;311    
;;;312                pSrc[(2u * i0)] = Xaplusc + Xbplusd;
00026e  ee700aa2          VADD.F32 s1,s1,s5
000272  f8dd900c          LDR      r9,[sp,#0xc]
000276  edc90a00          VSTR     s1,[r9,#0]
;;;313                pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
00027a  ee710a04          VADD.F32 s1,s2,s8
00027e  edcb0a00          VSTR     s1,[r11,#0]
;;;314    
;;;315                Xb12_out = Xb12C_out * co1;
000282  ee600a06          VMUL.F32 s1,s0,s12
;;;316                Yb12_out = Yb12C_out * co1;
000286  ee241a86          VMUL.F32 s2,s9,s12
;;;317                Xc12_out = Xc12C_out * co2;
00028a  ee652aa6          VMUL.F32 s5,s11,s13
;;;318                Yc12_out = Yc12C_out * co2;
00028e  ee252a26          VMUL.F32 s4,s10,s13
;;;319                Xd12_out = Xd12C_out * co3;
000292  ee234a07          VMUL.F32 s8,s6,s14
;;;320                Yd12_out = Yd12C_out * co3;
000296  ee613a87          VMUL.F32 s7,s3,s14
;;;321             
;;;322                /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;323                //Xb12_out -= Yb12C_out * si1;
;;;324                p0 = Yb12C_out * si1;
00029a  ee644aa7          VMUL.F32 s9,s9,s15
;;;325                /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;326                //Yb12_out += Xb12C_out * si1;
;;;327                p1 = Xb12C_out * si1;
00029e  ee200a27          VMUL.F32 s0,s0,s15
;;;328                /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;329                //Xc12_out -= Yc12C_out * si2;
;;;330                p2 = Yc12C_out * si2;
0002a2  ee255a08          VMUL.F32 s10,s10,s16
;;;331                /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;332                //Yc12_out += Xc12C_out * si2;
;;;333                p3 = Xc12C_out * si2;
0002a6  ee655a88          VMUL.F32 s11,s11,s16
;;;334                /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;335                //Xd12_out -= Yd12C_out * si3;
;;;336                p4 = Yd12C_out * si3;
0002aa  ee611aa8          VMUL.F32 s3,s3,s17
;;;337                /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;338                //Yd12_out += Xd12C_out * si3;
;;;339                p5 = Xd12C_out * si3;
0002ae  ee233a28          VMUL.F32 s6,s6,s17
;;;340                
;;;341                Xb12_out += p0;
0002b2  ee700aa4          VADD.F32 s1,s1,s9
;;;342                Yb12_out -= p1;
0002b6  ee310a40          VSUB.F32 s0,s2,s0
;;;343                Xc12_out += p2;
0002ba  ee321a85          VADD.F32 s2,s5,s10
;;;344                Yc12_out -= p3;
0002be  ee322a65          VSUB.F32 s4,s4,s11
;;;345                Xd12_out += p4;
0002c2  ee741a21          VADD.F32 s3,s8,s3
;;;346                Yd12_out -= p5;
0002c6  ee732ac3          VSUB.F32 s5,s7,s6
;;;347    
;;;348                /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;349                pSrc[2u * i1] = Xc12_out;
0002ca  ed881a00          VSTR     s2,[r8,#0]
;;;350    
;;;351                /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;352                pSrc[(2u * i1) + 1u] = Yc12_out;
0002ce  f8dd8008          LDR      r8,[sp,#8]
0002d2  ed882a00          VSTR     s4,[r8,#0]
;;;353    
;;;354                /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;355                pSrc[2u * i2] = Xb12_out;
0002d6  edc50a00          VSTR     s1,[r5,#0]
;;;356    
;;;357                /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;358                pSrc[(2u * i2) + 1u] = Yb12_out;
0002da  ed860a00          VSTR     s0,[r6,#0]
;;;359    
;;;360                /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;361                pSrc[2u * i3] = Xd12_out;
0002de  edce1a00          VSTR     s3,[lr,#0]
;;;362    
;;;363                /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;364                pSrc[(2u * i3) + 1u] = Yd12_out;
0002e2  edcc2a00          VSTR     s5,[r12,#0]
;;;365    
;;;366                i0 += n1;
0002e6  9d01              LDR      r5,[sp,#4]
0002e8  442b              ADD      r3,r3,r5
;;;367             } while(i0 < fftLen);
0002ea  9d0b              LDR      r5,[sp,#0x2c]
0002ec  42ab              CMP      r3,r5
0002ee  f4ffaf70          BCC      |L2.466|
;;;368             j++;
0002f2  1c7f              ADDS     r7,r7,#1
;;;369          } while(j <= (n2 - 1u));
0002f4  1e4b              SUBS     r3,r1,#1
0002f6  429f              CMP      r7,r3
0002f8  f67faf48          BLS      |L2.396|
;;;370          twidCoefModifier <<= 2u;
0002fc  f64f73ff          MOV      r3,#0xffff
000300  ea030a8a          AND      r10,r3,r10,LSL #2
000304  9b00              LDR      r3,[sp,#0]            ;236
000306  089b              LSRS     r3,r3,#2              ;236
000308  9300              STR      r3,[sp,#0]            ;236
                  |L2.778|
00030a  9b00              LDR      r3,[sp,#0]            ;236
00030c  2b04              CMP      r3,#4                 ;236
00030e  f63faf39          BHI      |L2.388|
;;;371       }
;;;372    
;;;373       j = fftLen >> 2;
000312  9907              LDR      r1,[sp,#0x1c]
                  |L2.788|
;;;374       ptr1 = &pSrc[0];
;;;375    
;;;376       /*  Calculations of last stage */
;;;377       do
;;;378       {
;;;379          xaIn = ptr1[0];
000314  ed903a00          VLDR     s6,[r0,#0]
;;;380          yaIn = ptr1[1];
000318  ed900a01          VLDR     s0,[r0,#4]
;;;381          xbIn = ptr1[2];
00031c  edd00a02          VLDR     s1,[r0,#8]
;;;382          ybIn = ptr1[3];
000320  ed901a03          VLDR     s2,[r0,#0xc]
;;;383          xcIn = ptr1[4];
000324  edd03a04          VLDR     s7,[r0,#0x10]
;;;384          ycIn = ptr1[5];
000328  ed904a05          VLDR     s8,[r0,#0x14]
;;;385          xdIn = ptr1[6];
00032c  edd02a06          VLDR     s5,[r0,#0x18]
;;;386          ydIn = ptr1[7];
000330  edd01a07          VLDR     s3,[r0,#0x1c]
;;;387    
;;;388          /* xa + xc */
;;;389          Xaplusc = xaIn + xcIn;
000334  ee332a23          VADD.F32 s4,s6,s7
;;;390    
;;;391          /* xa - xc */
;;;392          Xaminusc = xaIn - xcIn;
000338  ee733a63          VSUB.F32 s7,s6,s7
;;;393    
;;;394          /* ya + yc */
;;;395          Yaplusc = yaIn + ycIn;
00033c  ee303a04          VADD.F32 s6,s0,s8
;;;396    
;;;397          /* ya - yc */
;;;398          Yaminusc = yaIn - ycIn;
000340  ee300a44          VSUB.F32 s0,s0,s8
;;;399    
;;;400          /* xb + xd */
;;;401          Xbplusd = xbIn + xdIn;
000344  ee304aa2          VADD.F32 s8,s1,s5
;;;402    
;;;403          /* yb + yd */
;;;404          Ybplusd = ybIn + ydIn;
000348  ee714a21          VADD.F32 s9,s2,s3
;;;405    
;;;406          /* (xb-xd) */
;;;407          Xbminusd = xbIn - xdIn;
00034c  ee700ae2          VSUB.F32 s1,s1,s5
;;;408    
;;;409          /* (yb-yd) */
;;;410          Ybminusd = ybIn - ydIn;
000350  ee311a61          VSUB.F32 s2,s2,s3
;;;411    
;;;412          /* xa' = xa + xb + xc + xd */
;;;413          a0 = (Xaplusc + Xbplusd);
000354  ee721a04          VADD.F32 s3,s4,s8
;;;414          /* ya' = ya + yb + yc + yd */
;;;415          a1 = (Yaplusc + Ybplusd);
000358  ee732a24          VADD.F32 s5,s6,s9
;;;416          /* xc' = (xa-xb+xc-xd) */
;;;417          a2 = (Xaplusc - Xbplusd);
00035c  ee322a44          VSUB.F32 s4,s4,s8
;;;418          /* yc' = (ya-yb+yc-yd) */
;;;419          a3 = (Yaplusc - Ybplusd);
000360  ee333a64          VSUB.F32 s6,s6,s9
;;;420          /* xb' = (xa+yb-xc-yd) */
;;;421          a4 = (Xaminusc + Ybminusd);
000364  ee734a81          VADD.F32 s9,s7,s2
;;;422          /* yb' = (ya-xb-yc+xd) */
;;;423          a5 = (Yaminusc - Xbminusd);
000368  ee304a60          VSUB.F32 s8,s0,s1
;;;424          /* xd' = (xa-yb-xc+yd)) */
;;;425          a6 = (Xaminusc - Ybminusd);
00036c  ee331ac1          VSUB.F32 s2,s7,s2
;;;426          /* yd' = (ya+xb-yc-xd) */
;;;427          a7 = (Xbminusd + Yaminusc);
000370  ee300a80          VADD.F32 s0,s1,s0
;;;428       
;;;429          ptr1[0] = a0;
000374  edc01a00          VSTR     s3,[r0,#0]
;;;430          ptr1[1] = a1;
000378  edc02a01          VSTR     s5,[r0,#4]
;;;431          ptr1[2] = a2;
00037c  ed802a02          VSTR     s4,[r0,#8]
;;;432          ptr1[3] = a3;
000380  ed803a03          VSTR     s6,[r0,#0xc]
;;;433          ptr1[4] = a4;
000384  edc04a04          VSTR     s9,[r0,#0x10]
;;;434          ptr1[5] = a5;
000388  ed804a05          VSTR     s8,[r0,#0x14]
;;;435          ptr1[6] = a6;
00038c  ed801a06          VSTR     s2,[r0,#0x18]
;;;436          ptr1[7] = a7;
000390  ed800a07          VSTR     s0,[r0,#0x1c]
;;;437    
;;;438          /* increment pointer by 8 */
;;;439          ptr1 += 8u;
000394  3020              ADDS     r0,r0,#0x20
;;;440       } while(--j);
000396  1e49              SUBS     r1,r1,#1
000398  d1bc              BNE      |L2.788|
;;;441    
;;;442    #else
;;;443    
;;;444       float32_t t1, t2, r1, r2, s1, s2;
;;;445    
;;;446       /* Run the below code for Cortex-M0 */
;;;447    
;;;448       /*  Initializations for the fft calculation */
;;;449       n2 = fftLen;
;;;450       n1 = n2;
;;;451       for (k = fftLen; k > 1u; k >>= 2u)
;;;452       {
;;;453          /*  Initializations for the fft calculation */
;;;454          n1 = n2;
;;;455          n2 >>= 2u;
;;;456          ia1 = 0u;
;;;457    
;;;458          /*  FFT Calculation */
;;;459          j = 0;
;;;460          do
;;;461          {
;;;462             /*  index calculation for the coefficients */
;;;463             ia2 = ia1 + ia1;
;;;464             ia3 = ia2 + ia1;
;;;465             co1 = pCoef[ia1 * 2u];
;;;466             si1 = pCoef[(ia1 * 2u) + 1u];
;;;467             co2 = pCoef[ia2 * 2u];
;;;468             si2 = pCoef[(ia2 * 2u) + 1u];
;;;469             co3 = pCoef[ia3 * 2u];
;;;470             si3 = pCoef[(ia3 * 2u) + 1u];
;;;471    
;;;472             /*  Twiddle coefficients index modifier */
;;;473             ia1 = ia1 + twidCoefModifier;
;;;474    
;;;475             i0 = j;
;;;476             do
;;;477             {
;;;478                /*  index calculation for the input as, */
;;;479                /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;480                i1 = i0 + n2;
;;;481                i2 = i1 + n2;
;;;482                i3 = i2 + n2;
;;;483    
;;;484                /* xa + xc */
;;;485                r1 = pSrc[(2u * i0)] + pSrc[(2u * i2)];
;;;486    
;;;487                /* xa - xc */
;;;488                r2 = pSrc[(2u * i0)] - pSrc[(2u * i2)];
;;;489    
;;;490                /* ya + yc */
;;;491                s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;492    
;;;493                /* ya - yc */
;;;494                s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;495    
;;;496                /* xb + xd */
;;;497                t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;498    
;;;499                /* xa' = xa + xb + xc + xd */
;;;500                pSrc[2u * i0] = r1 + t1;
;;;501    
;;;502                /* xa + xc -(xb + xd) */
;;;503                r1 = r1 - t1;
;;;504    
;;;505                /* yb + yd */
;;;506                t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;507    
;;;508                /* ya' = ya + yb + yc + yd */
;;;509                pSrc[(2u * i0) + 1u] = s1 + t2;
;;;510    
;;;511                /* (ya + yc) - (yb + yd) */
;;;512                s1 = s1 - t2;
;;;513    
;;;514                /* (yb - yd) */
;;;515                t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;516    
;;;517                /* (xb - xd) */
;;;518                t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;519    
;;;520                /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;521                pSrc[2u * i1] = (r1 * co2) + (s1 * si2);
;;;522    
;;;523                /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;524                pSrc[(2u * i1) + 1u] = (s1 * co2) - (r1 * si2);
;;;525    
;;;526                /* (xa - xc) + (yb - yd) */
;;;527                r1 = r2 + t1;
;;;528    
;;;529                /* (xa - xc) - (yb - yd) */
;;;530                r2 = r2 - t1;
;;;531    
;;;532                /* (ya - yc) -  (xb - xd) */
;;;533                s1 = s2 - t2;
;;;534    
;;;535                /* (ya - yc) +  (xb - xd) */
;;;536                s2 = s2 + t2;
;;;537    
;;;538                /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;539                pSrc[2u * i2] = (r1 * co1) + (s1 * si1);
;;;540    
;;;541                /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;542                pSrc[(2u * i2) + 1u] = (s1 * co1) - (r1 * si1);
;;;543    
;;;544                /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;545                pSrc[2u * i3] = (r2 * co3) + (s2 * si3);
;;;546    
;;;547                /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;548                pSrc[(2u * i3) + 1u] = (s2 * co3) - (r2 * si3);
;;;549             
;;;550                i0 += n1;
;;;551             } while( i0 < fftLen);
;;;552             j++;
;;;553          } while(j <= (n2 - 1u));
;;;554          twidCoefModifier <<= 2u;
;;;555       }
;;;556    
;;;557    #endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */
;;;558    
;;;559    }
00039a  b008              ADD      sp,sp,#0x20
00039c  ecbd8b02          VPOP     {d8}
0003a0  e8bd8fff          POP      {r0-r11,pc}
;;;560    
                          ENDP


                          AREA ||i.arm_radix4_butterfly_inverse_f32||, CODE, READONLY, ALIGN=1

                  arm_radix4_butterfly_inverse_f32 PROC
;;;570    
;;;571    void arm_radix4_butterfly_inverse_f32(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;572    float32_t * pSrc,
;;;573    uint16_t fftLen,
;;;574    float32_t * pCoef,
;;;575    uint16_t twidCoefModifier,
;;;576    float32_t onebyfftLen)
;;;577    {
000004  ed2d0b02          VPUSH    {d0}
000008  ed2d8b04          VPUSH    {d8-d9}
00000c  b088              SUB      sp,sp,#0x20
;;;578       float32_t co1, co2, co3, si1, si2, si3;
;;;579       uint32_t ia1, ia2, ia3;
;;;580       uint32_t i0, i1, i2, i3;
;;;581       uint32_t n1, n2, j, k;
;;;582    
;;;583    #ifndef ARM_MATH_CM0_FAMILY_FAMILY
;;;584    
;;;585       float32_t xaIn, yaIn, xbIn, ybIn, xcIn, ycIn, xdIn, ydIn;
;;;586       float32_t Xaplusc, Xbplusd, Yaplusc, Ybplusd, Xaminusc, Xbminusd, Yaminusc,
;;;587       Ybminusd;
;;;588       float32_t Xb12C_out, Yb12C_out, Xc12C_out, Yc12C_out, Xd12C_out, Yd12C_out;
;;;589       float32_t Xb12_out, Yb12_out, Xc12_out, Yc12_out, Xd12_out, Yd12_out;
;;;590       float32_t *ptr1;
;;;591       float32_t p0,p1,p2,p3,p4,p5,p6,p7;
;;;592       float32_t a0,a1,a2,a3,a4,a5,a6,a7;
;;;593    
;;;594    
;;;595       /*  Initializations for the first stage */
;;;596       n2 = fftLen;
00000e  990f              LDR      r1,[sp,#0x3c]
;;;597       n1 = n2;
;;;598    
;;;599       /* n2 = fftLen/4 */
;;;600       n2 >>= 2u;
000010  0889              LSRS     r1,r1,#2
000012  9107              STR      r1,[sp,#0x1c]
;;;601       i0 = 0u;
000014  2400              MOVS     r4,#0
;;;602       ia1 = 0u;
000016  2300              MOVS     r3,#0
;;;603    
;;;604       j = n2;
000018  460f              MOV      r7,r1
                  |L3.26|
;;;605    
;;;606       /*  Calculation of first stage */
;;;607       do
;;;608       {
;;;609          /*  index calculation for the input as, */
;;;610          /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;611          i1 = i0 + n2;
00001a  eb040901          ADD      r9,r4,r1
;;;612          i2 = i1 + n2;
00001e  eb090a01          ADD      r10,r9,r1
;;;613          i3 = i2 + n2;
000022  eb0a0601          ADD      r6,r10,r1
;;;614    
;;;615          /*  Butterfly implementation */
;;;616          xaIn = pSrc[(2u * i0)];
000026  eb000cc4          ADD      r12,r0,r4,LSL #3
00002a  eddc3a00          VLDR     s7,[r12,#0]
;;;617          yaIn = pSrc[(2u * i0) + 1u];
00002e  2501              MOVS     r5,#1
000030  eb050844          ADD      r8,r5,r4,LSL #1
000034  eb000888          ADD      r8,r0,r8,LSL #2
000038  edd85a00          VLDR     s11,[r8,#0]
;;;618    
;;;619          xcIn = pSrc[(2u * i2)];
00003c  eb000eca          ADD      lr,r0,r10,LSL #3
000040  f8cde018          STR      lr,[sp,#0x18]
000044  ed9e7a00          VLDR     s14,[lr,#0]
;;;620          ycIn = pSrc[(2u * i2) + 1u];
000048  eb050a4a          ADD      r10,r5,r10,LSL #1
00004c  eb000e8a          ADD      lr,r0,r10,LSL #2
000050  f8cde014          STR      lr,[sp,#0x14]
000054  ed9e6a00          VLDR     s12,[lr,#0]
;;;621    
;;;622          xbIn = pSrc[(2u * i1)];
000058  eb000ec9          ADD      lr,r0,r9,LSL #3
00005c  f8cde010          STR      lr,[sp,#0x10]
000060  ed9e4a00          VLDR     s8,[lr,#0]
;;;623          ybIn = pSrc[(2u * i1) + 1u];
000064  eb050949          ADD      r9,r5,r9,LSL #1
000068  eb000989          ADD      r9,r0,r9,LSL #2
00006c  edd94a00          VLDR     s9,[r9,#0]
;;;624    
;;;625          xdIn = pSrc[(2u * i3)];
000070  eb000ac6          ADD      r10,r0,r6,LSL #3
000074  edda6a00          VLDR     s13,[r10,#0]
;;;626          ydIn = pSrc[(2u * i3) + 1u];
000078  eb050646          ADD      r6,r5,r6,LSL #1
00007c  eb000b86          ADD      r11,r0,r6,LSL #2
000080  ed9b5a00          VLDR     s10,[r11,#0]
;;;627    
;;;628          /* xa + xc */
;;;629          Xaplusc = xaIn + xcIn;
000084  ee731a87          VADD.F32 s3,s7,s14
;;;630          /* xb + xd */
;;;631          Xbplusd = xbIn + xdIn;
000088  ee342a26          VADD.F32 s4,s8,s13
;;;632          /* ya + yc */
;;;633          Yaplusc = yaIn + ycIn;
00008c  ee752a86          VADD.F32 s5,s11,s12
;;;634          /* yb + yd */
;;;635          Ybplusd = ybIn + ydIn;
000090  ee343a85          VADD.F32 s6,s9,s10
;;;636    
;;;637          /*  index calculation for the coefficients */
;;;638          ia2 = ia1 + ia1;
000094  005e              LSLS     r6,r3,#1
;;;639          co2 = pCoef[ia2 * 2u];
000096  eb020ec6          ADD      lr,r2,r6,LSL #3
00009a  edde0a00          VLDR     s1,[lr,#0]
;;;640          si2 = pCoef[(ia2 * 2u) + 1u];
00009e  eb050e46          ADD      lr,r5,r6,LSL #1
0000a2  eb020e8e          ADD      lr,r2,lr,LSL #2
0000a6  ed9e1a00          VLDR     s2,[lr,#0]
;;;641    
;;;642          /* xa - xc */
;;;643          Xaminusc = xaIn - xcIn;
0000aa  ee733ac7          VSUB.F32 s7,s7,s14
;;;644          /* xb - xd */
;;;645          Xbminusd = xbIn - xdIn;
0000ae  ee344a66          VSUB.F32 s8,s8,s13
;;;646          /* ya - yc */
;;;647          Yaminusc = yaIn - ycIn;
0000b2  ee755ac6          VSUB.F32 s11,s11,s12
;;;648          /* yb - yd */
;;;649          Ybminusd = ybIn - ydIn;
0000b6  ee346ac5          VSUB.F32 s12,s9,s10
;;;650    
;;;651          /* xa' = xa + xb + xc + xd */
;;;652          pSrc[(2u * i0)] = Xaplusc + Xbplusd;
0000ba  ee714a82          VADD.F32 s9,s3,s4
0000be  edcc4a00          VSTR     s9,[r12,#0]
;;;653    
;;;654          /* ya' = ya + yb + yc + yd */
;;;655          pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
0000c2  ee724a83          VADD.F32 s9,s5,s6
0000c6  edc84a00          VSTR     s9,[r8,#0]
;;;656    
;;;657          /* (xa - xc) - (yb - yd) */
;;;658          Xb12C_out = (Xaminusc - Ybminusd);
0000ca  ee734ac6          VSUB.F32 s9,s7,s12
;;;659          /* (ya - yc) + (xb - xd) */
;;;660          Yb12C_out = (Yaminusc + Xbminusd);
0000ce  ee355a84          VADD.F32 s10,s11,s8
;;;661          /* (xa + xc) - (xb + xd) */
;;;662          Xc12C_out = (Xaplusc - Xbplusd);
0000d2  ee312ac2          VSUB.F32 s4,s3,s4
;;;663          /* (ya + yc) - (yb + yd) */
;;;664          Yc12C_out = (Yaplusc - Ybplusd);
0000d6  ee722ac3          VSUB.F32 s5,s5,s6
;;;665          /* (xa - xc) + (yb - yd) */
;;;666          Xd12C_out = (Xaminusc + Ybminusd);
0000da  ee333a86          VADD.F32 s6,s7,s12
;;;667          /* (ya - yc) - (xb - xd) */
;;;668          Yd12C_out = (Yaminusc - Xbminusd);
0000de  ee751ac4          VSUB.F32 s3,s11,s8
;;;669    
;;;670          co1 = pCoef[ia1 * 2u];
0000e2  eb020cc3          ADD      r12,r2,r3,LSL #3
0000e6  eddc3a00          VLDR     s7,[r12,#0]
;;;671          si1 = pCoef[(ia1 * 2u) + 1u];
0000ea  eb050c43          ADD      r12,r5,r3,LSL #1
0000ee  eb020c8c          ADD      r12,r2,r12,LSL #2
0000f2  ed9c4a00          VLDR     s8,[r12,#0]
;;;672    
;;;673          /*  index calculation for the coefficients */
;;;674          ia3 = ia2 + ia1;
0000f6  441e              ADD      r6,r6,r3
;;;675          co3 = pCoef[ia3 * 2u];
0000f8  eb020cc6          ADD      r12,r2,r6,LSL #3
0000fc  eddc5a00          VLDR     s11,[r12,#0]
;;;676          si3 = pCoef[(ia3 * 2u) + 1u];
000100  eb050646          ADD      r6,r5,r6,LSL #1
000104  eb020686          ADD      r6,r2,r6,LSL #2
000108  ed966a00          VLDR     s12,[r6,#0]
;;;677    
;;;678          Xb12_out = Xb12C_out * co1;
00010c  ee247aa3          VMUL.F32 s14,s9,s7
;;;679          Yb12_out = Yb12C_out * co1;
000110  ee657a23          VMUL.F32 s15,s10,s7
;;;680          Xc12_out = Xc12C_out * co2;
000114  ee623a20          VMUL.F32 s7,s4,s1
;;;681          Yc12_out = Yc12C_out * co2;
000118  ee626aa0          VMUL.F32 s13,s5,s1
;;;682          Xd12_out = Xd12C_out * co3;
00011c  ee630a25          VMUL.F32 s1,s6,s11
;;;683          Yd12_out = Yd12C_out * co3;
000120  ee615aa5          VMUL.F32 s11,s3,s11
;;;684       
;;;685          /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;686          //Xb12_out -= Yb12C_out * si1;
;;;687          p0 = Yb12C_out * si1;
000124  ee255a04          VMUL.F32 s10,s10,s8
;;;688          /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;689          //Yb12_out += Xb12C_out * si1;
;;;690          p1 = Xb12C_out * si1;
000128  ee244a84          VMUL.F32 s8,s9,s8
;;;691          /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;692          //Xc12_out -= Yc12C_out * si2;
;;;693          p2 = Yc12C_out * si2;
00012c  ee622a81          VMUL.F32 s5,s5,s2
;;;694          /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;695          //Yc12_out += Xc12C_out * si2;
;;;696          p3 = Xc12C_out * si2;
000130  ee221a01          VMUL.F32 s2,s4,s2
;;;697          /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;698          //Xd12_out -= Yd12C_out * si3;
;;;699          p4 = Yd12C_out * si3;
000134  ee611a86          VMUL.F32 s3,s3,s12
;;;700          /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;701          //Yd12_out += Xd12C_out * si3;
;;;702          p5 = Xd12C_out * si3;
000138  ee232a06          VMUL.F32 s4,s6,s12
;;;703          
;;;704          Xb12_out -= p0;
00013c  ee373a45          VSUB.F32 s6,s14,s10
;;;705          Yb12_out += p1;
000140  ee374a84          VADD.F32 s8,s15,s8
;;;706          Xc12_out -= p2;
000144  ee732ae2          VSUB.F32 s5,s7,s5
;;;707          Yc12_out += p3;
000148  ee361a81          VADD.F32 s2,s13,s2
;;;708          Xd12_out -= p4;
00014c  ee700ae1          VSUB.F32 s1,s1,s3
;;;709          Yd12_out += p5;
000150  ee751a82          VADD.F32 s3,s11,s4
;;;710    
;;;711          /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;712          pSrc[2u * i1] = Xc12_out;
000154  f8dde010          LDR      lr,[sp,#0x10]
000158  edce2a00          VSTR     s5,[lr,#0]
;;;713    
;;;714          /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;715          pSrc[(2u * i1) + 1u] = Yc12_out;
00015c  ed891a00          VSTR     s2,[r9,#0]
;;;716    
;;;717          /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;718          pSrc[2u * i2] = Xb12_out;
000160  f8dde018          LDR      lr,[sp,#0x18]
000164  ed8e3a00          VSTR     s6,[lr,#0]
;;;719    
;;;720          /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;721          pSrc[(2u * i2) + 1u] = Yb12_out;
000168  f8dde014          LDR      lr,[sp,#0x14]
00016c  ed8e4a00          VSTR     s8,[lr,#0]
;;;722    
;;;723          /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;724          pSrc[2u * i3] = Xd12_out;
000170  edca0a00          VSTR     s1,[r10,#0]
;;;725    
;;;726          /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;727          pSrc[(2u * i3) + 1u] = Yd12_out;
000174  edcb1a00          VSTR     s3,[r11,#0]
;;;728    
;;;729          /*  Twiddle coefficients index modifier */
;;;730          ia1 = ia1 + twidCoefModifier;
000178  9e11              LDR      r6,[sp,#0x44]
00017a  4433              ADD      r3,r3,r6
;;;731    
;;;732          /*  Updating input index */
;;;733          i0 = i0 + 1u;
00017c  1c64              ADDS     r4,r4,#1
;;;734    
;;;735       } while(--j);
00017e  1e7f              SUBS     r7,r7,#1
000180  f47faf4b          BNE      |L3.26|
;;;736    
;;;737       twidCoefModifier <<= 2u;
000184  9b11              LDR      r3,[sp,#0x44]
000186  f64f74ff          MOV      r4,#0xffff
00018a  ea040a83          AND      r10,r4,r3,LSL #2
;;;738    
;;;739       /*  Calculation of second stage to excluding last stage */
;;;740       for (k = fftLen >> 2u; k > 4u; k >>= 2u)
00018e  9b07              LDR      r3,[sp,#0x1c]
000190  9300              STR      r3,[sp,#0]
000192  e0c2              B        |L3.794|
                  |L3.404|
;;;741       {
;;;742          /*  Initializations for the first stage */
;;;743          n1 = n2;
000194  9101              STR      r1,[sp,#4]
;;;744          n2 >>= 2u;
000196  0889              LSRS     r1,r1,#2
;;;745          ia1 = 0u;
000198  2400              MOVS     r4,#0
;;;746    
;;;747          /*  Calculation of first stage */
;;;748          j = 0;
00019a  2700              MOVS     r7,#0
                  |L3.412|
;;;749          do
;;;750          {
;;;751             /*  index calculation for the coefficients */
;;;752             ia2 = ia1 + ia1;
00019c  0063              LSLS     r3,r4,#1
;;;753             ia3 = ia2 + ia1;
00019e  191d              ADDS     r5,r3,r4
;;;754             co1 = pCoef[ia1 * 2u];
0001a0  eb0206c4          ADD      r6,r2,r4,LSL #3
0001a4  edd66a00          VLDR     s13,[r6,#0]
;;;755             si1 = pCoef[(ia1 * 2u) + 1u];
0001a8  2601              MOVS     r6,#1
0001aa  eb060c44          ADD      r12,r6,r4,LSL #1
0001ae  eb020c8c          ADD      r12,r2,r12,LSL #2
0001b2  ed9c8a00          VLDR     s16,[r12,#0]
;;;756             co2 = pCoef[ia2 * 2u];
0001b6  eb020cc3          ADD      r12,r2,r3,LSL #3
0001ba  ed9c7a00          VLDR     s14,[r12,#0]
;;;757             si2 = pCoef[(ia2 * 2u) + 1u];
0001be  eb060343          ADD      r3,r6,r3,LSL #1
0001c2  eb020383          ADD      r3,r2,r3,LSL #2
0001c6  edd38a00          VLDR     s17,[r3,#0]
;;;758             co3 = pCoef[ia3 * 2u];
0001ca  eb0203c5          ADD      r3,r2,r5,LSL #3
0001ce  edd37a00          VLDR     s15,[r3,#0]
;;;759             si3 = pCoef[(ia3 * 2u) + 1u];
0001d2  eb060345          ADD      r3,r6,r5,LSL #1
0001d6  eb020383          ADD      r3,r2,r3,LSL #2
0001da  ed939a00          VLDR     s18,[r3,#0]
;;;760    
;;;761             /*  Twiddle coefficients index modifier */
;;;762             ia1 = ia1 + twidCoefModifier;
0001de  4454              ADD      r4,r4,r10
;;;763    
;;;764             i0 = j;
0001e0  463b              MOV      r3,r7
                  |L3.482|
;;;765             do
;;;766             {
;;;767                /*  index calculation for the input as, */
;;;768                /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;769                i1 = i0 + n2;
0001e2  185d              ADDS     r5,r3,r1
;;;770                i2 = i1 + n2;
0001e4  186e              ADDS     r6,r5,r1
;;;771                i3 = i2 + n2;
0001e6  eb060c01          ADD      r12,r6,r1
;;;772    
;;;773                xaIn = pSrc[(2u * i0)];
0001ea  eb0008c3          ADD      r8,r0,r3,LSL #3
0001ee  f8cd800c          STR      r8,[sp,#0xc]
0001f2  edd80a00          VLDR     s1,[r8,#0]
;;;774                yaIn = pSrc[(2u * i0) + 1u];
0001f6  f04f0901          MOV      r9,#1
0001fa  eb090843          ADD      r8,r9,r3,LSL #1
0001fe  eb000888          ADD      r8,r0,r8,LSL #2
000202  f8cd8008          STR      r8,[sp,#8]
000206  edd81a00          VLDR     s3,[r8,#0]
;;;775    
;;;776                xbIn = pSrc[(2u * i1)];
00020a  eb000bc5          ADD      r11,r0,r5,LSL #3
00020e  eddb5a00          VLDR     s11,[r11,#0]
;;;777                ybIn = pSrc[(2u * i1) + 1u];
000212  eb090545          ADD      r5,r9,r5,LSL #1
000216  eb000585          ADD      r5,r0,r5,LSL #2
00021a  ed954a00          VLDR     s8,[r5,#0]
;;;778    
;;;779                xcIn = pSrc[(2u * i2)];
00021e  eb000ec6          ADD      lr,r0,r6,LSL #3
000222  ed9e6a00          VLDR     s12,[lr,#0]
;;;780                ycIn = pSrc[(2u * i2) + 1u];
000226  eb090646          ADD      r6,r9,r6,LSL #1
00022a  eb000686          ADD      r6,r0,r6,LSL #2
00022e  ed965a00          VLDR     s10,[r6,#0]
;;;781    
;;;782                xdIn = pSrc[(2u * i3)];
000232  eb0008cc          ADD      r8,r0,r12,LSL #3
000236  ed981a00          VLDR     s2,[r8,#0]
;;;783                ydIn = pSrc[(2u * i3) + 1u];
00023a  eb090c4c          ADD      r12,r9,r12,LSL #1
00023e  eb000c8c          ADD      r12,r0,r12,LSL #2
000242  eddc4a00          VLDR     s9,[r12,#0]
;;;784    
;;;785                /* xa - xc */
;;;786                Xaminusc = xaIn - xcIn;
000246  ee302ac6          VSUB.F32 s4,s1,s12
;;;787                /* (xb - xd) */
;;;788                Xbminusd = xbIn - xdIn;
00024a  ee752ac1          VSUB.F32 s5,s11,s2
;;;789                /* ya - yc */
;;;790                Yaminusc = yaIn - ycIn;
00024e  ee313ac5          VSUB.F32 s6,s3,s10
;;;791                /* (yb - yd) */
;;;792                Ybminusd = ybIn - ydIn;
000252  ee743a64          VSUB.F32 s7,s8,s9
;;;793    
;;;794                /* xa + xc */
;;;795                Xaplusc = xaIn + xcIn;
000256  ee700a86          VADD.F32 s1,s1,s12
;;;796                /* xb + xd */
;;;797                Xbplusd = xbIn + xdIn;
00025a  ee351a81          VADD.F32 s2,s11,s2
;;;798                /* ya + yc */
;;;799                Yaplusc = yaIn + ycIn;
00025e  ee711a85          VADD.F32 s3,s3,s10
;;;800                /* yb + yd */
;;;801                Ybplusd = ybIn + ydIn;
000262  ee344a24          VADD.F32 s8,s8,s9
;;;802    
;;;803                /* (xa - xc) - (yb - yd) */
;;;804                Xb12C_out = (Xaminusc - Ybminusd);
000266  ee325a63          VSUB.F32 s10,s4,s7
;;;805                /* (ya - yc) +  (xb - xd) */
;;;806                Yb12C_out = (Yaminusc + Xbminusd);
00026a  ee734a22          VADD.F32 s9,s6,s5
;;;807                /* xa + xc -(xb + xd) */
;;;808                Xc12C_out = (Xaplusc - Xbplusd);
00026e  ee705ac1          VSUB.F32 s11,s1,s2
;;;809                /* (ya + yc) - (yb + yd) */
;;;810                Yc12C_out = (Yaplusc - Ybplusd);
000272  ee316ac4          VSUB.F32 s12,s3,s8
;;;811                /* (xa - xc) + (yb - yd) */
;;;812                Xd12C_out = (Xaminusc + Ybminusd);
000276  ee723a23          VADD.F32 s7,s4,s7
;;;813                /* (ya - yc) -  (xb - xd) */
;;;814                Yd12C_out = (Yaminusc - Xbminusd);
00027a  ee332a62          VSUB.F32 s4,s6,s5
;;;815    
;;;816                pSrc[(2u * i0)] = Xaplusc + Xbplusd;
00027e  ee700a81          VADD.F32 s1,s1,s2
000282  f8dd900c          LDR      r9,[sp,#0xc]
000286  edc90a00          VSTR     s1,[r9,#0]
;;;817                pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
00028a  ee710a84          VADD.F32 s1,s3,s8
00028e  f8dd9008          LDR      r9,[sp,#8]
000292  edc90a00          VSTR     s1,[r9,#0]
;;;818    
;;;819                Xb12_out = Xb12C_out * co1;
000296  ee253a26          VMUL.F32 s6,s10,s13
;;;820                Yb12_out = Yb12C_out * co1;
00029a  ee641aa6          VMUL.F32 s3,s9,s13
;;;821                Xc12_out = Xc12C_out * co2;
00029e  ee652a87          VMUL.F32 s5,s11,s14
;;;822                Yc12_out = Yc12C_out * co2;
0002a2  ee264a07          VMUL.F32 s8,s12,s14
;;;823                Xd12_out = Xd12C_out * co3;
0002a6  ee630aa7          VMUL.F32 s1,s7,s15
;;;824                Yd12_out = Yd12C_out * co3;
0002aa  ee221a27          VMUL.F32 s2,s4,s15
;;;825    
;;;826                /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;827                //Xb12_out -= Yb12C_out * si1;
;;;828                p0 = Yb12C_out * si1;
0002ae  ee644a88          VMUL.F32 s9,s9,s16
;;;829                /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;830                //Yb12_out += Xb12C_out * si1;
;;;831                p1 = Xb12C_out * si1;
0002b2  ee255a08          VMUL.F32 s10,s10,s16
;;;832                /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;833                //Xc12_out -= Yc12C_out * si2;
;;;834                p2 = Yc12C_out * si2;
0002b6  ee266a28          VMUL.F32 s12,s12,s17
;;;835                /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;836                //Yc12_out += Xc12C_out * si2;
;;;837                p3 = Xc12C_out * si2;
0002ba  ee655aa8          VMUL.F32 s11,s11,s17
;;;838                /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;839                //Xd12_out -= Yd12C_out * si3;
;;;840                p4 = Yd12C_out * si3;
0002be  ee222a09          VMUL.F32 s4,s4,s18
;;;841                /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;842                //Yd12_out += Xd12C_out * si3;
;;;843                p5 = Xd12C_out * si3;
0002c2  ee633a89          VMUL.F32 s7,s7,s18
;;;844                
;;;845                Xb12_out -= p0;
0002c6  ee333a64          VSUB.F32 s6,s6,s9
;;;846                Yb12_out += p1;
0002ca  ee711a85          VADD.F32 s3,s3,s10
;;;847                Xc12_out -= p2;
0002ce  ee722ac6          VSUB.F32 s5,s5,s12
;;;848                Yc12_out += p3;
0002d2  ee344a25          VADD.F32 s8,s8,s11
;;;849                Xd12_out -= p4;
0002d6  ee700ac2          VSUB.F32 s1,s1,s4
;;;850                Yd12_out += p5;
0002da  ee311a23          VADD.F32 s2,s2,s7
;;;851    
;;;852                /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;853                pSrc[2u * i1] = Xc12_out;
0002de  edcb2a00          VSTR     s5,[r11,#0]
;;;854    
;;;855                /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;856                pSrc[(2u * i1) + 1u] = Yc12_out;
0002e2  ed854a00          VSTR     s8,[r5,#0]
;;;857    
;;;858                /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;859                pSrc[2u * i2] = Xb12_out;
0002e6  ed8e3a00          VSTR     s6,[lr,#0]
;;;860    
;;;861                /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;862                pSrc[(2u * i2) + 1u] = Yb12_out;
0002ea  edc61a00          VSTR     s3,[r6,#0]
;;;863    
;;;864                /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;865                pSrc[2u * i3] = Xd12_out;
0002ee  edc80a00          VSTR     s1,[r8,#0]
;;;866    
;;;867                /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;868                pSrc[(2u * i3) + 1u] = Yd12_out;
0002f2  ed8c1a00          VSTR     s2,[r12,#0]
;;;869    
;;;870                i0 += n1;
0002f6  9d01              LDR      r5,[sp,#4]
0002f8  442b              ADD      r3,r3,r5
;;;871             } while(i0 < fftLen);
0002fa  9d0f              LDR      r5,[sp,#0x3c]
0002fc  42ab              CMP      r3,r5
0002fe  f4ffaf70          BCC      |L3.482|
;;;872             j++;
000302  1c7f              ADDS     r7,r7,#1
;;;873          } while(j <= (n2 - 1u));
000304  1e4b              SUBS     r3,r1,#1
000306  429f              CMP      r7,r3
000308  f67faf48          BLS      |L3.412|
;;;874          twidCoefModifier <<= 2u;
00030c  f64f73ff          MOV      r3,#0xffff
000310  ea030a8a          AND      r10,r3,r10,LSL #2
000314  9b00              LDR      r3,[sp,#0]            ;740
000316  089b              LSRS     r3,r3,#2              ;740
000318  9300              STR      r3,[sp,#0]            ;740
                  |L3.794|
00031a  9b00              LDR      r3,[sp,#0]            ;740
00031c  2b04              CMP      r3,#4                 ;740
00031e  f63faf39          BHI      |L3.404|
;;;875       }
;;;876       /*  Initializations of last stage */
;;;877    
;;;878       j = fftLen >> 2;
000322  9907              LDR      r1,[sp,#0x1c]
                  |L3.804|
;;;879       ptr1 = &pSrc[0];
;;;880    
;;;881       /*  Calculations of last stage */
;;;882       do
;;;883       {
;;;884          xaIn = ptr1[0];
000324  edd00a00          VLDR     s1,[r0,#0]
;;;885          yaIn = ptr1[1];
000328  ed904a01          VLDR     s8,[r0,#4]
;;;886          xbIn = ptr1[2];
00032c  edd02a02          VLDR     s5,[r0,#8]
;;;887          ybIn = ptr1[3];
000330  edd01a03          VLDR     s3,[r0,#0xc]
;;;888          xcIn = ptr1[4];
000334  ed902a04          VLDR     s4,[r0,#0x10]
;;;889          ycIn = ptr1[5];
000338  edd04a05          VLDR     s9,[r0,#0x14]
;;;890          xdIn = ptr1[6];
00033c  edd03a06          VLDR     s7,[r0,#0x18]
;;;891          ydIn = ptr1[7];
000340  ed901a07          VLDR     s2,[r0,#0x1c]
;;;892    
;;;893          /*  Butterfly implementation */
;;;894          /* xa + xc */
;;;895          Xaplusc = xaIn + xcIn;
000344  ee303a82          VADD.F32 s6,s1,s4
;;;896    
;;;897          /* xa - xc */
;;;898          Xaminusc = xaIn - xcIn;
000348  ee700ac2          VSUB.F32 s1,s1,s4
;;;899    
;;;900          /* ya + yc */
;;;901          Yaplusc = yaIn + ycIn;
00034c  ee342a24          VADD.F32 s4,s8,s9
;;;902    
;;;903          /* ya - yc */
;;;904          Yaminusc = yaIn - ycIn;
000350  ee345a64          VSUB.F32 s10,s8,s9
;;;905    
;;;906          /* xb + xd */
;;;907          Xbplusd = xbIn + xdIn;
000354  ee324aa3          VADD.F32 s8,s5,s7
;;;908    
;;;909          /* yb + yd */
;;;910          Ybplusd = ybIn + ydIn;
000358  ee714a81          VADD.F32 s9,s3,s2
;;;911    
;;;912          /* (xb-xd) */
;;;913          Xbminusd = xbIn - xdIn;
00035c  ee722ae3          VSUB.F32 s5,s5,s7
;;;914    
;;;915          /* (yb-yd) */
;;;916          Ybminusd = ybIn - ydIn;
000360  ee311ac1          VSUB.F32 s2,s3,s2
;;;917          
;;;918          /* xa' = (xa+xb+xc+xd) * onebyfftLen */
;;;919          a0 = (Xaplusc + Xbplusd);
000364  ee731a04          VADD.F32 s3,s6,s8
;;;920          /* ya' = (ya+yb+yc+yd) * onebyfftLen */
;;;921          a1 = (Yaplusc + Ybplusd);
000368  ee723a24          VADD.F32 s7,s4,s9
;;;922          /* xc' = (xa-xb+xc-xd) * onebyfftLen */
;;;923          a2 = (Xaplusc - Xbplusd);
00036c  ee333a44          VSUB.F32 s6,s6,s8
;;;924          /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
;;;925          a3 = (Yaplusc - Ybplusd);
000370  ee322a64          VSUB.F32 s4,s4,s9
;;;926          /* xb' = (xa-yb-xc+yd) * onebyfftLen */
;;;927          a4 = (Xaminusc - Ybminusd);
000374  ee304ac1          VSUB.F32 s8,s1,s2
;;;928          /* yb' = (ya+xb-yc-xd) * onebyfftLen */
;;;929          a5 = (Yaminusc + Xbminusd);
000378  ee754a22          VADD.F32 s9,s10,s5
;;;930          /* xd' = (xa-yb-xc+yd) * onebyfftLen */
;;;931          a6 = (Xaminusc + Ybminusd);
00037c  ee700a81          VADD.F32 s1,s1,s2
;;;932          /* yd' = (ya-xb-yc+xd) * onebyfftLen */
;;;933          a7 = (Yaminusc - Xbminusd);
000380  ee351a62          VSUB.F32 s2,s10,s5
;;;934       
;;;935          p0 = a0 * onebyfftLen;
000384  ee611a80          VMUL.F32 s3,s3,s0
;;;936          p1 = a1 * onebyfftLen;
000388  ee632a80          VMUL.F32 s5,s7,s0
;;;937          p2 = a2 * onebyfftLen;
00038c  ee233a00          VMUL.F32 s6,s6,s0
;;;938          p3 = a3 * onebyfftLen;
000390  ee222a00          VMUL.F32 s4,s4,s0
;;;939          p4 = a4 * onebyfftLen;
000394  ee643a00          VMUL.F32 s7,s8,s0
;;;940          p5 = a5 * onebyfftLen;
000398  ee244a80          VMUL.F32 s8,s9,s0
;;;941          p6 = a6 * onebyfftLen;
00039c  ee600a80          VMUL.F32 s1,s1,s0
;;;942          p7 = a7 * onebyfftLen;
0003a0  ee211a00          VMUL.F32 s2,s2,s0
;;;943       
;;;944          /* xa' = (xa+xb+xc+xd) * onebyfftLen */
;;;945          ptr1[0] = p0;
0003a4  edc01a00          VSTR     s3,[r0,#0]
;;;946          /* ya' = (ya+yb+yc+yd) * onebyfftLen */
;;;947          ptr1[1] = p1;
0003a8  edc02a01          VSTR     s5,[r0,#4]
;;;948          /* xc' = (xa-xb+xc-xd) * onebyfftLen */
;;;949          ptr1[2] = p2;
0003ac  ed803a02          VSTR     s6,[r0,#8]
;;;950          /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
;;;951          ptr1[3] = p3;
0003b0  ed802a03          VSTR     s4,[r0,#0xc]
;;;952          /* xb' = (xa-yb-xc+yd) * onebyfftLen */
;;;953          ptr1[4] = p4;
0003b4  edc03a04          VSTR     s7,[r0,#0x10]
;;;954          /* yb' = (ya+xb-yc-xd) * onebyfftLen */
;;;955          ptr1[5] = p5;
0003b8  ed804a05          VSTR     s8,[r0,#0x14]
;;;956          /* xd' = (xa-yb-xc+yd) * onebyfftLen */
;;;957          ptr1[6] = p6;
0003bc  edc00a06          VSTR     s1,[r0,#0x18]
;;;958          /* yd' = (ya-xb-yc+xd) * onebyfftLen */
;;;959          ptr1[7] = p7;
0003c0  ed801a07          VSTR     s2,[r0,#0x1c]
;;;960    
;;;961          /* increment source pointer by 8 for next calculations */
;;;962          ptr1 = ptr1 + 8u;
0003c4  3020              ADDS     r0,r0,#0x20
;;;963    
;;;964       } while(--j);
0003c6  1e49              SUBS     r1,r1,#1
0003c8  d1ac              BNE      |L3.804|
;;;965    
;;;966    #else
;;;967    
;;;968       float32_t t1, t2, r1, r2, s1, s2;
;;;969    
;;;970       /* Run the below code for Cortex-M0 */
;;;971    
;;;972       /*  Initializations for the first stage */
;;;973       n2 = fftLen;
;;;974       n1 = n2;
;;;975    
;;;976       /*  Calculation of first stage */
;;;977       for (k = fftLen; k > 4u; k >>= 2u)
;;;978       {
;;;979          /*  Initializations for the first stage */
;;;980          n1 = n2;
;;;981          n2 >>= 2u;
;;;982          ia1 = 0u;
;;;983    
;;;984          /*  Calculation of first stage */
;;;985          j = 0;
;;;986          do
;;;987          {
;;;988             /*  index calculation for the coefficients */
;;;989             ia2 = ia1 + ia1;
;;;990             ia3 = ia2 + ia1;
;;;991             co1 = pCoef[ia1 * 2u];
;;;992             si1 = pCoef[(ia1 * 2u) + 1u];
;;;993             co2 = pCoef[ia2 * 2u];
;;;994             si2 = pCoef[(ia2 * 2u) + 1u];
;;;995             co3 = pCoef[ia3 * 2u];
;;;996             si3 = pCoef[(ia3 * 2u) + 1u];
;;;997    
;;;998             /*  Twiddle coefficients index modifier */
;;;999             ia1 = ia1 + twidCoefModifier;
;;;1000   
;;;1001            i0 = j;
;;;1002            do
;;;1003            {
;;;1004               /*  index calculation for the input as, */
;;;1005               /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;1006               i1 = i0 + n2;
;;;1007               i2 = i1 + n2;
;;;1008               i3 = i2 + n2;
;;;1009   
;;;1010               /* xa + xc */
;;;1011               r1 = pSrc[(2u * i0)] + pSrc[(2u * i2)];
;;;1012   
;;;1013               /* xa - xc */
;;;1014               r2 = pSrc[(2u * i0)] - pSrc[(2u * i2)];
;;;1015   
;;;1016               /* ya + yc */
;;;1017               s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;1018   
;;;1019               /* ya - yc */
;;;1020               s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;1021   
;;;1022               /* xb + xd */
;;;1023               t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;1024   
;;;1025               /* xa' = xa + xb + xc + xd */
;;;1026               pSrc[2u * i0] = r1 + t1;
;;;1027   
;;;1028               /* xa + xc -(xb + xd) */
;;;1029               r1 = r1 - t1;
;;;1030   
;;;1031               /* yb + yd */
;;;1032               t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;1033   
;;;1034               /* ya' = ya + yb + yc + yd */
;;;1035               pSrc[(2u * i0) + 1u] = s1 + t2;
;;;1036   
;;;1037               /* (ya + yc) - (yb + yd) */
;;;1038               s1 = s1 - t2;
;;;1039   
;;;1040               /* (yb - yd) */
;;;1041               t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;1042   
;;;1043               /* (xb - xd) */
;;;1044               t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;1045   
;;;1046               /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1047               pSrc[2u * i1] = (r1 * co2) - (s1 * si2);
;;;1048   
;;;1049               /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1050               pSrc[(2u * i1) + 1u] = (s1 * co2) + (r1 * si2);
;;;1051   
;;;1052               /* (xa - xc) - (yb - yd) */
;;;1053               r1 = r2 - t1;
;;;1054   
;;;1055               /* (xa - xc) + (yb - yd) */
;;;1056               r2 = r2 + t1;
;;;1057   
;;;1058               /* (ya - yc) +  (xb - xd) */
;;;1059               s1 = s2 + t2;
;;;1060   
;;;1061               /* (ya - yc) -  (xb - xd) */
;;;1062               s2 = s2 - t2;
;;;1063   
;;;1064               /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1065               pSrc[2u * i2] = (r1 * co1) - (s1 * si1);
;;;1066   
;;;1067               /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1068               pSrc[(2u * i2) + 1u] = (s1 * co1) + (r1 * si1);
;;;1069   
;;;1070               /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1071               pSrc[2u * i3] = (r2 * co3) - (s2 * si3);
;;;1072   
;;;1073               /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1074               pSrc[(2u * i3) + 1u] = (s2 * co3) + (r2 * si3);
;;;1075            
;;;1076               i0 += n1;
;;;1077            } while( i0 < fftLen);
;;;1078            j++;
;;;1079         } while(j <= (n2 - 1u));
;;;1080         twidCoefModifier <<= 2u;
;;;1081      }
;;;1082      /*  Initializations of last stage */
;;;1083      n1 = n2;
;;;1084      n2 >>= 2u;
;;;1085   
;;;1086      /*  Calculations of last stage */
;;;1087      for (i0 = 0u; i0 <= (fftLen - n1); i0 += n1)
;;;1088      {
;;;1089         /*  index calculation for the input as, */
;;;1090         /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;1091         i1 = i0 + n2;
;;;1092         i2 = i1 + n2;
;;;1093         i3 = i2 + n2;
;;;1094   
;;;1095         /*  Butterfly implementation */
;;;1096         /* xa + xc */
;;;1097         r1 = pSrc[2u * i0] + pSrc[2u * i2];
;;;1098   
;;;1099         /* xa - xc */
;;;1100         r2 = pSrc[2u * i0] - pSrc[2u * i2];
;;;1101   
;;;1102         /* ya + yc */
;;;1103         s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;1104   
;;;1105         /* ya - yc */
;;;1106         s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;1107   
;;;1108         /* xc + xd */
;;;1109         t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;1110   
;;;1111         /* xa' = xa + xb + xc + xd */
;;;1112         pSrc[2u * i0] = (r1 + t1) * onebyfftLen;
;;;1113   
;;;1114         /* (xa + xb) - (xc + xd) */
;;;1115         r1 = r1 - t1;
;;;1116   
;;;1117         /* yb + yd */
;;;1118         t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;1119   
;;;1120         /* ya' = ya + yb + yc + yd */
;;;1121         pSrc[(2u * i0) + 1u] = (s1 + t2) * onebyfftLen;
;;;1122   
;;;1123         /* (ya + yc) - (yb + yd) */
;;;1124         s1 = s1 - t2;
;;;1125   
;;;1126         /* (yb-yd) */
;;;1127         t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;1128   
;;;1129         /* (xb-xd) */
;;;1130         t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;1131   
;;;1132         /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1133         pSrc[2u * i1] = r1 * onebyfftLen;
;;;1134   
;;;1135         /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1136         pSrc[(2u * i1) + 1u] = s1 * onebyfftLen;
;;;1137   
;;;1138         /* (xa - xc) - (yb-yd) */
;;;1139         r1 = r2 - t1;
;;;1140   
;;;1141         /* (xa - xc) + (yb-yd) */
;;;1142         r2 = r2 + t1;
;;;1143   
;;;1144         /* (ya - yc) + (xb-xd) */
;;;1145         s1 = s2 + t2;
;;;1146   
;;;1147         /* (ya - yc) - (xb-xd) */
;;;1148         s2 = s2 - t2;
;;;1149   
;;;1150         /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1151         pSrc[2u * i2] = r1 * onebyfftLen;
;;;1152   
;;;1153         /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1154         pSrc[(2u * i2) + 1u] = s1 * onebyfftLen;
;;;1155   
;;;1156         /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1157         pSrc[2u * i3] = r2 * onebyfftLen;
;;;1158   
;;;1159         /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1160         pSrc[(2u * i3) + 1u] = s2 * onebyfftLen;
;;;1161      }
;;;1162   
;;;1163   #endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */
;;;1164   }
0003ca  b008              ADD      sp,sp,#0x20
0003cc  ecbd8b04          VPOP     {d8-d9}
0003d0  b006              ADD      sp,sp,#0x18
0003d2  e8bd8ff0          POP      {r4-r11,pc}
;;;1165   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix4_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_f32_c_95c9501a____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix4_f32_c_95c9501a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_f32_c_95c9501a____REVSH|
#line 144
|__asm___21_arm_cfft_radix4_f32_c_95c9501a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_f32_c_95c9501a____RRX|
#line 300
|__asm___21_arm_cfft_radix4_f32_c_95c9501a____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
