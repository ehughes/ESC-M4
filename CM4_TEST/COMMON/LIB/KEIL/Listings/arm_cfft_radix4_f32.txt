; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix4_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix4_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cfft_radix4_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix4_f32.c]
                          THUMB

                          AREA ||i.arm_cfft_radix4_f32||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix4_f32 PROC
;;;1180   
;;;1181   void arm_cfft_radix4_f32(
000000  b570              PUSH     {r4-r6,lr}
;;;1182   const arm_cfft_radix4_instance_f32 * S,
;;;1183   float32_t * pSrc)
;;;1184   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1185   
;;;1186      if(S->ifftFlag == 1u)
000006  7880              LDRB     r0,[r0,#2]
;;;1187      {
;;;1188         /*  Complex IFFT radix-4  */
;;;1189         arm_radix4_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;1186
00000e  2801              CMP      r0,#1                 ;1186
000010  d00d              BEQ      |L1.46|
;;;1190         S->twidCoefModifier, S->onebyfftLen);
;;;1191      }
;;;1192      else
;;;1193      {
;;;1194         /*  Complex FFT radix-4  */
;;;1195         arm_radix4_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       arm_radix4_butterfly_f32
                  |L1.24|
;;;1196         S->twidCoefModifier);
;;;1197      }
;;;1198   
;;;1199      if(S->bitReverseFlag == 1u)
000018  78e0              LDRB     r0,[r4,#3]
00001a  2801              CMP      r0,#1
00001c  d10d              BNE      |L1.58|
;;;1200      {
;;;1201         /*  Bit Reversal */
;;;1202         arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
00001e  89e2              LDRH     r2,[r4,#0xe]
000020  8821              LDRH     r1,[r4,#0]
000022  4628              MOV      r0,r5
000024  68a3              LDR      r3,[r4,#8]
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      arm_bitreversal_f32
                  |L1.46|
00002e  ed940a04          VLDR     s0,[r4,#0x10]         ;1189
000032  4628              MOV      r0,r5                 ;1189
000034  f7fffffe          BL       arm_radix4_butterfly_inverse_f32
000038  e7ee              B        |L1.24|
                  |L1.58|
;;;1203      }
;;;1204   
;;;1205   }
00003a  bd70              POP      {r4-r6,pc}
;;;1206   
                          ENDP


                          AREA ||i.arm_radix4_butterfly_f32||, CODE, READONLY, ALIGN=2

                  arm_radix4_butterfly_f32 PROC
;;;66     
;;;67     void arm_radix4_butterfly_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;68     float32_t * pSrc,
;;;69     uint16_t fftLen,
;;;70     float32_t * pCoef,
;;;71     uint16_t twidCoefModifier)
;;;72     {
000004  468b              MOV      r11,r1
;;;73     
;;;74        float32_t co1, co2, co3, si1, si2, si3;
;;;75        uint32_t ia1, ia2, ia3;
;;;76        uint32_t i0, i1, i2, i3;
;;;77        uint32_t n1, n2, j, k;
;;;78     
;;;79     #ifndef ARM_MATH_CM0_FAMILY_FAMILY
;;;80     
;;;81        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;82     
;;;83        float32_t xaIn, yaIn, xbIn, ybIn, xcIn, ycIn, xdIn, ydIn;
;;;84        float32_t Xaplusc, Xbplusd, Yaplusc, Ybplusd, Xaminusc, Xbminusd, Yaminusc,
;;;85        Ybminusd;
;;;86        float32_t Xb12C_out, Yb12C_out, Xc12C_out, Yc12C_out, Xd12C_out, Yd12C_out;
;;;87        float32_t Xb12_out, Yb12_out, Xc12_out, Yc12_out, Xd12_out, Yd12_out;
;;;88        float32_t *ptr1;
;;;89        float32_t p0,p1,p2,p3,p4,p5;
;;;90        float32_t a0,a1,a2,a3,a4,a5,a6,a7;
;;;91     
;;;92        /*  Initializations for the first stage */
;;;93        n2 = fftLen;
;;;94        n1 = n2;
;;;95     
;;;96        /* n2 = fftLen/4 */
;;;97        n2 >>= 2u;
000006  0889              LSRS     r1,r1,#2
000008  ed2d8b02          VPUSH    {d8}                  ;72
00000c  b081              SUB      sp,sp,#4              ;72
00000e  469e              MOV      lr,r3                 ;72
;;;98        i0 = 0u;
000010  2400              MOVS     r4,#0
;;;99        ia1 = 0u;
000012  4623              MOV      r3,r4
;;;100    
;;;101       j = n2;
000014  468a              MOV      r10,r1
000016  9100              STR      r1,[sp,#0]
                  |L2.24|
;;;102    
;;;103       /*  Calculation of first stage */
;;;104       do
;;;105       {
;;;106          /*  index calculation for the input as, */
;;;107          /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;108          i1 = i0 + n2;
000018  1867              ADDS     r7,r4,r1
;;;109          i2 = i1 + n2;
00001a  187e              ADDS     r6,r7,r1
;;;110          i3 = i2 + n2;
00001c  1875              ADDS     r5,r6,r1
;;;111    
;;;112          xaIn = pSrc[(2u * i0)];
;;;113          yaIn = pSrc[(2u * i0) + 1u];
;;;114    
;;;115          xbIn = pSrc[(2u * i1)];
;;;116          ybIn = pSrc[(2u * i1) + 1u];
;;;117    
;;;118          xcIn = pSrc[(2u * i2)];
00001e  eb0006c6          ADD      r6,r0,r6,LSL #3
000022  eb000cc4          ADD      r12,r0,r4,LSL #3      ;112
000026  eb0007c7          ADD      r7,r0,r7,LSL #3       ;115
;;;119          ycIn = pSrc[(2u * i2) + 1u];
;;;120    
;;;121          xdIn = pSrc[(2u * i3)];
00002a  eb0005c5          ADD      r5,r0,r5,LSL #3
00002e  ec960a02          VLDM     r6,{s0-s1}
;;;122          ydIn = pSrc[(2u * i3) + 1u];
;;;123    
;;;124          /* xa + xc */
;;;125          Xaplusc = xaIn + xcIn;
;;;126          /* xb + xd */
;;;127          Xbplusd = xbIn + xdIn;
;;;128          /* ya + yc */
;;;129          Yaplusc = yaIn + ycIn;
;;;130          /* yb + yd */
;;;131          Ybplusd = ybIn + ydIn;
;;;132    
;;;133          /*  index calculation for the coefficients */
;;;134          ia2 = ia1 + ia1;
000032  ea4f0943          LSL      r9,r3,#1
000036  eddc6a00          VLDR     s13,[r12,#0]          ;112
00003a  edd75a00          VLDR     s11,[r7,#0]           ;115
00003e  ed956a00          VLDR     s12,[r5,#0]           ;121
000042  ed9c3a01          VLDR     s6,[r12,#4]           ;113
000046  ee763a80          VADD.F32 s7,s13,s0             ;125
00004a  ee354a86          VADD.F32 s8,s11,s12            ;127
00004e  ed975a01          VLDR     s10,[r7,#4]           ;116
000052  edd52a01          VLDR     s5,[r5,#4]            ;122
000056  ee734a20          VADD.F32 s9,s6,s1              ;129
;;;135          co2 = pCoef[ia2 * 2u];
00005a  eb0208c9          ADD      r8,r2,r9,LSL #3
;;;136          si2 = pCoef[(ia2 * 2u) + 1u];
;;;137    
;;;138          /* xa - xc */
;;;139          Xaminusc = xaIn - xcIn;
;;;140          /* xb - xd */
;;;141          Xbminusd = xbIn - xdIn;
;;;142          /* ya - yc */
;;;143          Yaminusc = yaIn - ycIn;
00005e  ee333a60          VSUB.F32 s6,s6,s1
000062  ee751a22          VADD.F32 s3,s10,s5             ;131
;;;144          /* yb - yd */
;;;145          Ybminusd = ybIn - ydIn;
;;;146    
;;;147          /* xa' = xa + xb + xc + xd */
;;;148          pSrc[(2u * i0)] = Xaplusc + Xbplusd;
000066  ee730a84          VADD.F32 s1,s7,s8
00006a  ed982a00          VLDR     s4,[r8,#0]            ;135
00006e  ed981a01          VLDR     s2,[r8,#4]            ;136
000072  edcc0a00          VSTR     s1,[r12,#0]
;;;149          /* ya' = ya + yb + yc + yd */
;;;150          pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
000076  ee740aa1          VADD.F32 s1,s9,s3
00007a  ee755ac6          VSUB.F32 s11,s11,s12           ;141
00007e  ee356a62          VSUB.F32 s12,s10,s5            ;145
000082  edcc0a01          VSTR     s1,[r12,#4]
;;;151    
;;;152          /* (xa - xc) + (yb - yd) */
;;;153          Xb12C_out = (Xaminusc + Ybminusd);
;;;154          /* (ya - yc) + (xb - xd) */
;;;155          Yb12C_out = (Yaminusc - Xbminusd);
;;;156          /* (xa + xc) - (xb + xd) */
;;;157          Xc12C_out = (Xaplusc - Xbplusd);
000086  ee730ac4          VSUB.F32 s1,s7,s8
;;;158          /* (ya + yc) - (yb + yd) */
;;;159          Yc12C_out = (Yaplusc - Ybplusd);
00008a  ee743ae1          VSUB.F32 s7,s9,s3
00008e  ee360ac0          VSUB.F32 s0,s13,s0             ;139
;;;160          /* (xa - xc) - (yb - yd) */
;;;161          Xd12C_out = (Xaminusc - Ybminusd);
;;;162          /* (ya - yc) + (xb - xd) */
;;;163          Yd12C_out = (Xbminusd + Yaminusc);
;;;164    
;;;165          co1 = pCoef[ia1 * 2u];
000092  eb020cc3          ADD      r12,r2,r3,LSL #3
000096  ee335a65          VSUB.F32 s10,s6,s11            ;155
00009a  ee754a83          VADD.F32 s9,s11,s6             ;163
00009e  ee702a06          VADD.F32 s5,s0,s12             ;153
0000a2  eddc5a00          VLDR     s11,[r12,#0]
;;;166          si1 = pCoef[(ia1 * 2u) + 1u];
0000a6  eddc1a01          VLDR     s3,[r12,#4]
0000aa  ee300a46          VSUB.F32 s0,s0,s12             ;161
;;;167    
;;;168          /*  index calculation for the coefficients */
;;;169          ia3 = ia2 + ia1;
;;;170          co3 = pCoef[ia3 * 2u];
;;;171          si3 = pCoef[(ia3 * 2u) + 1u];
;;;172    
;;;173          Xb12_out = Xb12C_out * co1;
;;;174          Yb12_out = Yb12C_out * co1;
;;;175          Xc12_out = Xc12C_out * co2;
0000ae  ee606a82          VMUL.F32 s13,s1,s4
;;;176          Yc12_out = Yc12C_out * co2;
0000b2  ee237a82          VMUL.F32 s14,s7,s4
;;;177          Xd12_out = Xd12C_out * co3;
;;;178          Yd12_out = Yd12C_out * co3;
;;;179             
;;;180          /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;181          //Xb12_out -= Yb12C_out * si1;
;;;182          p0 = Yb12C_out * si1;
0000b6  ee252a21          VMUL.F32 s4,s10,s3
0000ba  ee226aa5          VMUL.F32 s12,s5,s11            ;173
0000be  eb090c03          ADD      r12,r9,r3             ;169
;;;183          /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;184          //Yb12_out += Xb12C_out * si1;
;;;185          p1 = Xb12C_out * si1;
0000c2  ee621aa1          VMUL.F32 s3,s5,s3
0000c6  eb020ccc          ADD      r12,r2,r12,LSL #3     ;170
;;;186          /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;187          //Xc12_out -= Yc12C_out * si2;
;;;188          p2 = Yc12C_out * si2;
0000ca  ee632a81          VMUL.F32 s5,s7,s2
0000ce  ed9c3a00          VLDR     s6,[r12,#0]           ;170
0000d2  ed9c4a01          VLDR     s8,[r12,#4]           ;171
;;;189          /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;190          //Yc12_out += Xc12C_out * si2;
;;;191          p3 = Xc12C_out * si2;
0000d6  ee201a81          VMUL.F32 s2,s1,s2
0000da  ee655a25          VMUL.F32 s11,s10,s11           ;174
0000de  ee607a03          VMUL.F32 s15,s0,s6             ;177
;;;192          /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;193          //Xd12_out -= Yd12C_out * si3;
;;;194          p4 = Yd12C_out * si3;
0000e2  ee640a84          VMUL.F32 s1,s9,s8
;;;195          /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;196          //Yd12_out += Xd12C_out * si3;
;;;197          p5 = Xd12C_out * si3;
;;;198          
;;;199          Xb12_out += p0;
;;;200          Yb12_out -= p1;
;;;201          Xc12_out += p2;
0000e6  ee762aa2          VADD.F32 s5,s13,s5
0000ea  ee243a83          VMUL.F32 s6,s9,s6              ;178
0000ee  ee200a04          VMUL.F32 s0,s0,s8              ;197
;;;202          Yc12_out -= p3;
0000f2  ee371a41          VSUB.F32 s2,s14,s2
0000f6  ee362a02          VADD.F32 s4,s12,s4             ;199
0000fa  ee751ae1          VSUB.F32 s3,s11,s3             ;200
;;;203          Xd12_out += p4;
;;;204          Yd12_out -= p5;
;;;205    
;;;206          /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;207          pSrc[2u * i1] = Xc12_out;
0000fe  edc72a00          VSTR     s5,[r7,#0]
000102  ee770aa0          VADD.F32 s1,s15,s1             ;203
;;;208    
;;;209          /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;210          pSrc[(2u * i1) + 1u] = Yc12_out;
000106  ed871a01          VSTR     s2,[r7,#4]
00010a  ee330a40          VSUB.F32 s0,s6,s0              ;204
;;;211    
;;;212          /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;213          pSrc[2u * i2] = Xb12_out;
00010e  ed862a00          VSTR     s4,[r6,#0]
;;;214    
;;;215          /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;216          pSrc[(2u * i2) + 1u] = Yb12_out;
000112  edc61a01          VSTR     s3,[r6,#4]
;;;217    
;;;218          /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;219          pSrc[2u * i3] = Xd12_out;
000116  edc50a00          VSTR     s1,[r5,#0]
;;;220    
;;;221          /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;222          pSrc[(2u * i3) + 1u] = Yd12_out;
00011a  ed850a01          VSTR     s0,[r5,#4]
;;;223    
;;;224          /*  Twiddle coefficients index modifier */
;;;225          ia1 += twidCoefModifier;
;;;226    
;;;227          /*  Updating input index */
;;;228          i0++;
;;;229    
;;;230       }
;;;231       while(--j);
00011e  f1aa0501          SUB      r5,r10,#1
000122  1c64              ADDS     r4,r4,#1
000124  4473              ADD      r3,r3,lr              ;225
000126  ea5f0a05          MOVS     r10,r5
00012a  f47faf75          BNE      |L2.24|
;;;232    
;;;233       twidCoefModifier <<= 2u;
00012e  f64f74ff          MOV      r4,#0xffff
000132  ea04098e          AND      r9,r4,lr,LSL #2
;;;234    
;;;235       /*  Calculation of second stage to excluding last stage */
;;;236       for (k = fftLen >> 2u; k > 4u; k >>= 2u)
000136  9b00              LDR      r3,[sp,#0]
000138  e098              B        |L2.620|
                  |L2.314|
;;;237       {
;;;238          /*  Initializations for the first stage */
;;;239          n1 = n2;
00013a  468e              MOV      lr,r1
;;;240          n2 >>= 2u;
00013c  0889              LSRS     r1,r1,#2
;;;241          ia1 = 0u;
00013e  2400              MOVS     r4,#0
;;;242    
;;;243          /*  Calculation of first stage */
;;;244          j = 0;
000140  4625              MOV      r5,r4
                  |L2.322|
;;;245          do
;;;246          {
;;;247             /*  index calculation for the coefficients */
;;;248             ia2 = ia1 + ia1;
000142  0063              LSLS     r3,r4,#1
;;;249             ia3 = ia2 + ia1;
000144  191e              ADDS     r6,r3,r4
;;;250             co1 = pCoef[ia1 * 2u];
;;;251             si1 = pCoef[(ia1 * 2u) + 1u];
;;;252             co2 = pCoef[ia2 * 2u];
000146  eb0203c3          ADD      r3,r2,r3,LSL #3
00014a  eb0207c4          ADD      r7,r2,r4,LSL #3       ;250
00014e  edd33a00          VLDR     s7,[r3,#0]
;;;253             si2 = pCoef[(ia2 * 2u) + 1u];
000152  ed936a01          VLDR     s12,[r3,#4]
;;;254             co3 = pCoef[ia3 * 2u];
000156  eb0203c6          ADD      r3,r2,r6,LSL #3
00015a  edd75a00          VLDR     s11,[r7,#0]           ;250
00015e  edd72a01          VLDR     s5,[r7,#4]            ;251
000162  ed935a00          VLDR     s10,[r3,#0]
;;;255             si3 = pCoef[(ia3 * 2u) + 1u];
000166  edd36a01          VLDR     s13,[r3,#4]
;;;256    
;;;257             /*  Twiddle coefficients index modifier */
;;;258             ia1 += twidCoefModifier;
00016a  444c              ADD      r4,r4,r9
;;;259          
;;;260             i0 = j;
00016c  462b              MOV      r3,r5
                  |L2.366|
;;;261             do
;;;262             {
;;;263                /*  index calculation for the input as, */
;;;264                /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;265                i1 = i0 + n2;
00016e  185e              ADDS     r6,r3,r1
;;;266                i2 = i1 + n2;
000170  eb060c01          ADD      r12,r6,r1
;;;267                i3 = i2 + n2;
000174  eb0c0801          ADD      r8,r12,r1
;;;268    
;;;269                xaIn = pSrc[(2u * i0)];
000178  eb0007c3          ADD      r7,r0,r3,LSL #3
;;;270                yaIn = pSrc[(2u * i0) + 1u];
;;;271    
;;;272                xbIn = pSrc[(2u * i1)];
00017c  eb0006c6          ADD      r6,r0,r6,LSL #3
;;;273                ybIn = pSrc[(2u * i1) + 1u];
;;;274    
;;;275                xcIn = pSrc[(2u * i2)];
000180  eb000ccc          ADD      r12,r0,r12,LSL #3
;;;276                ycIn = pSrc[(2u * i2) + 1u];
;;;277    
;;;278                xdIn = pSrc[(2u * i3)];
000184  eb0008c8          ADD      r8,r0,r8,LSL #3
000188  ed970a01          VLDR     s0,[r7,#4]            ;270
00018c  ed9c2a01          VLDR     s4,[r12,#4]           ;276
000190  ed977a00          VLDR     s14,[r7,#0]           ;269
000194  eddc8a00          VLDR     s17,[r12,#0]          ;275
000198  edd67a00          VLDR     s15,[r6,#0]           ;272
00019c  ed988a00          VLDR     s16,[r8,#0]
;;;279                ydIn = pSrc[(2u * i3) + 1u];
;;;280    
;;;281                /* xa - xc */
;;;282                Xaminusc = xaIn - xcIn;
;;;283                /* (xb - xd) */
;;;284                Xbminusd = xbIn - xdIn;
;;;285                /* ya - yc */
;;;286                Yaminusc = yaIn - ycIn;
0001a0  ee701a42          VSUB.F32 s3,s0,s4
0001a4  ee770a68          VSUB.F32 s1,s14,s17            ;282
0001a8  ed961a01          VLDR     s2,[r6,#4]            ;273
0001ac  ed983a01          VLDR     s6,[r8,#4]            ;279
0001b0  ee374ac8          VSUB.F32 s8,s15,s16            ;284
;;;287                /* (yb - yd) */
;;;288                Ybminusd = ybIn - ydIn;
;;;289    
;;;290                /* xa + xc */
;;;291                Xaplusc = xaIn + xcIn;
;;;292                /* xb + xd */
;;;293                Xbplusd = xbIn + xdIn;
0001b4  ee777a88          VADD.F32 s15,s15,s16
0001b8  ee714a43          VSUB.F32 s9,s2,s6              ;288
0001bc  ee377a28          VADD.F32 s14,s14,s17           ;291
;;;294                /* ya + yc */
;;;295                Yaplusc = yaIn + ycIn;
;;;296                /* yb + yd */
;;;297                Ybplusd = ybIn + ydIn;
;;;298    
;;;299                /* (xa - xc) + (yb - yd) */
;;;300                Xb12C_out = (Xaminusc + Ybminusd);
;;;301                /* (ya - yc) -  (xb - xd) */
;;;302                Yb12C_out = (Yaminusc - Xbminusd);
0001c0  ee318ac4          VSUB.F32 s16,s3,s8
0001c4  ee313a03          VADD.F32 s6,s2,s6              ;297
0001c8  ee300a02          VADD.F32 s0,s0,s4              ;295
;;;303                /* xa + xc -(xb + xd) */
;;;304                Xc12C_out = (Xaplusc - Xbplusd);
;;;305                /* (ya + yc) - (yb + yd) */
;;;306                Yc12C_out = (Yaplusc - Ybplusd);
;;;307                /* (xa - xc) - (yb - yd) */
;;;308                Xd12C_out = (Xaminusc - Ybminusd);
;;;309                /* (ya - yc) +  (xb - xd) */
;;;310                Yd12C_out = (Xbminusd + Yaminusc);
0001cc  ee741a21          VADD.F32 s3,s8,s3
;;;311    
;;;312                pSrc[(2u * i0)] = Xaplusc + Xbplusd;
0001d0  ee374a27          VADD.F32 s8,s14,s15
0001d4  ee301aa4          VADD.F32 s2,s1,s9              ;300
0001d8  ee708a43          VSUB.F32 s17,s0,s6             ;306
0001dc  ee700ae4          VSUB.F32 s1,s1,s9              ;308
0001e0  ed874a00          VSTR     s8,[r7,#0]
;;;313                pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
0001e4  ee300a03          VADD.F32 s0,s0,s6
0001e8  ee372a67          VSUB.F32 s4,s14,s15            ;304
;;;314    
;;;315                Xb12_out = Xb12C_out * co1;
0001ec  ee214a25          VMUL.F32 s8,s2,s11
0001f0  ed870a01          VSTR     s0,[r7,#4]            ;313
;;;316                Yb12_out = Yb12C_out * co1;
0001f4  ee684a25          VMUL.F32 s9,s16,s11
;;;317                Xc12_out = Xc12C_out * co2;
;;;318                Yc12_out = Yc12C_out * co2;
0001f8  ee280aa3          VMUL.F32 s0,s17,s7
;;;319                Xd12_out = Xd12C_out * co3;
;;;320                Yd12_out = Yd12C_out * co3;
;;;321             
;;;322                /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;323                //Xb12_out -= Yb12C_out * si1;
;;;324                p0 = Yb12C_out * si1;
;;;325                /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;326                //Yb12_out += Xb12C_out * si1;
;;;327                p1 = Xb12C_out * si1;
0001fc  ee211a22          VMUL.F32 s2,s2,s5
000200  ee227a23          VMUL.F32 s14,s4,s7             ;317
;;;328                /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;329                //Xc12_out -= Yc12C_out * si2;
;;;330                p2 = Yc12C_out * si2;
000204  ee688a86          VMUL.F32 s17,s17,s12
;;;331                /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;332                //Yc12_out += Xc12C_out * si2;
;;;333                p3 = Xc12C_out * si2;
000208  ee222a06          VMUL.F32 s4,s4,s12
00020c  ee288a22          VMUL.F32 s16,s16,s5            ;324
000210  ee617a85          VMUL.F32 s15,s3,s10            ;320
;;;334                /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;335                //Xd12_out -= Yd12C_out * si3;
;;;336                p4 = Yd12C_out * si3;
;;;337                /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;338                //Yd12_out += Xd12C_out * si3;
;;;339                p5 = Xd12C_out * si3;
;;;340                
;;;341                Xb12_out += p0;
;;;342                Yb12_out -= p1;
000214  ee341ac1          VSUB.F32 s2,s9,s2
000218  ee203a85          VMUL.F32 s6,s1,s10             ;319
00021c  ee611aa6          VMUL.F32 s3,s3,s13             ;336
;;;343                Xc12_out += p2;
000220  ee774a28          VADD.F32 s9,s14,s17
000224  ee600aa6          VMUL.F32 s1,s1,s13             ;339
;;;344                Yc12_out -= p3;
000228  ee300a42          VSUB.F32 s0,s0,s4
00022c  ee344a08          VADD.F32 s8,s8,s16             ;341
;;;345                Xd12_out += p4;
;;;346                Yd12_out -= p5;
;;;347    
;;;348                /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;349                pSrc[2u * i1] = Xc12_out;
000230  edc64a00          VSTR     s9,[r6,#0]
000234  ee731a21          VADD.F32 s3,s6,s3              ;345
;;;350    
;;;351                /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;352                pSrc[(2u * i1) + 1u] = Yc12_out;
000238  ed860a01          VSTR     s0,[r6,#4]
00023c  ee770ae0          VSUB.F32 s1,s15,s1             ;346
;;;353    
;;;354                /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;355                pSrc[2u * i2] = Xb12_out;
000240  ed8c4a00          VSTR     s8,[r12,#0]
;;;356    
;;;357                /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;358                pSrc[(2u * i2) + 1u] = Yb12_out;
000244  ed8c1a01          VSTR     s2,[r12,#4]
;;;359    
;;;360                /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;361                pSrc[2u * i3] = Xd12_out;
000248  edc81a00          VSTR     s3,[r8,#0]
;;;362    
;;;363                /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;364                pSrc[(2u * i3) + 1u] = Yd12_out;
;;;365    
;;;366                i0 += n1;
00024c  4473              ADD      r3,r3,lr
00024e  edc80a01          VSTR     s1,[r8,#4]            ;364
;;;367             } while(i0 < fftLen);
000252  455b              CMP      r3,r11
000254  d38b              BCC      |L2.366|
;;;368             j++;
;;;369          } while(j <= (n2 - 1u));
000256  1e4b              SUBS     r3,r1,#1
000258  1c6d              ADDS     r5,r5,#1
00025a  429d              CMP      r5,r3
00025c  f67faf71          BLS      |L2.322|
;;;370          twidCoefModifier <<= 2u;
000260  f64f74ff          MOV      r4,#0xffff
000264  ea040989          AND      r9,r4,r9,LSL #2
000268  ea4f039a          LSR      r3,r10,#2             ;236
                  |L2.620|
00026c  469a              MOV      r10,r3                ;236
00026e  2b04              CMP      r3,#4                 ;236
000270  f63faf63          BHI      |L2.314|
000274  f8dd1000          LDR.W    r1,[sp,#0]            ;236
                  |L2.632|
;;;371       }
;;;372    
;;;373       j = fftLen >> 2;
;;;374       ptr1 = &pSrc[0];
;;;375    
;;;376       /*  Calculations of last stage */
;;;377       do
;;;378       {
;;;379          xaIn = ptr1[0];
000278  ed901a00          VLDR     s2,[r0,#0]
;;;380          yaIn = ptr1[1];
;;;381          xbIn = ptr1[2];
;;;382          ybIn = ptr1[3];
;;;383          xcIn = ptr1[4];
00027c  edd03a04          VLDR     s7,[r0,#0x10]
000280  edd02a01          VLDR     s5,[r0,#4]            ;380
;;;384          ycIn = ptr1[5];
000284  ed903a05          VLDR     s6,[r0,#0x14]
;;;385          xdIn = ptr1[6];
;;;386          ydIn = ptr1[7];
;;;387    
;;;388          /* xa + xc */
;;;389          Xaplusc = xaIn + xcIn;
000288  ee310a23          VADD.F32 s0,s2,s7
00028c  edd00a02          VLDR     s1,[r0,#8]            ;381
000290  ed904a06          VLDR     s8,[r0,#0x18]         ;385
;;;390    
;;;391          /* xa - xc */
;;;392          Xaminusc = xaIn - xcIn;
000294  ee311a63          VSUB.F32 s2,s2,s7
;;;393    
;;;394          /* ya + yc */
;;;395          Yaplusc = yaIn + ycIn;
000298  ee724a83          VADD.F32 s9,s5,s6
;;;396    
;;;397          /* ya - yc */
;;;398          Yaminusc = yaIn - ycIn;
00029c  ee723ac3          VSUB.F32 s7,s5,s6
;;;399    
;;;400          /* xb + xd */
;;;401          Xbplusd = xbIn + xdIn;
0002a0  ee303a84          VADD.F32 s6,s1,s8
0002a4  ed902a03          VLDR     s4,[r0,#0xc]          ;382
0002a8  edd01a07          VLDR     s3,[r0,#0x1c]         ;386
;;;402    
;;;403          /* yb + yd */
;;;404          Ybplusd = ybIn + ydIn;
;;;405    
;;;406          /* (xb-xd) */
;;;407          Xbminusd = xbIn - xdIn;
0002ac  ee700ac4          VSUB.F32 s1,s1,s8
;;;408    
;;;409          /* (yb-yd) */
;;;410          Ybminusd = ybIn - ydIn;
;;;411    
;;;412          /* xa' = xa + xb + xc + xd */
;;;413          a0 = (Xaplusc + Xbplusd);
0002b0  ee305a03          VADD.F32 s10,s0,s6
0002b4  ee722a21          VADD.F32 s5,s4,s3              ;404
0002b8  ee721a61          VSUB.F32 s3,s4,s3              ;410
;;;414          /* ya' = ya + yb + yc + yd */
;;;415          a1 = (Yaplusc + Ybplusd);
;;;416          /* xc' = (xa-xb+xc-xd) */
;;;417          a2 = (Xaplusc - Xbplusd);
0002bc  ee303a43          VSUB.F32 s6,s0,s6
;;;418          /* yc' = (ya-yb+yc-yd) */
;;;419          a3 = (Yaplusc - Ybplusd);
;;;420          /* xb' = (xa+yb-xc-yd) */
;;;421          a4 = (Xaminusc + Ybminusd);
;;;422          /* yb' = (ya-xb-yc+xd) */
;;;423          a5 = (Yaminusc - Xbminusd);
;;;424          /* xd' = (xa-yb-xc+yd)) */
;;;425          a6 = (Xaminusc - Ybminusd);
;;;426          /* yd' = (ya+xb-yc-xd) */
;;;427          a7 = (Xbminusd + Yaminusc);
;;;428       
;;;429          ptr1[0] = a0;
0002c0  ed805a00          VSTR     s10,[r0,#0]
0002c4  ee344aa2          VADD.F32 s8,s9,s5              ;415
0002c8  ee340ae2          VSUB.F32 s0,s9,s5              ;419
0002cc  ee712a21          VADD.F32 s5,s2,s3              ;421
;;;430          ptr1[1] = a1;
0002d0  ed804a01          VSTR     s8,[r0,#4]
0002d4  ee332ae0          VSUB.F32 s4,s7,s1              ;423
;;;431          ptr1[2] = a2;
0002d8  ed803a02          VSTR     s6,[r0,#8]
0002dc  ee311a61          VSUB.F32 s2,s2,s3              ;425
;;;432          ptr1[3] = a3;
0002e0  ed800a03          VSTR     s0,[r0,#0xc]
0002e4  ee700aa3          VADD.F32 s1,s1,s7              ;427
;;;433          ptr1[4] = a4;
0002e8  edc02a04          VSTR     s5,[r0,#0x10]
;;;434          ptr1[5] = a5;
0002ec  ed802a05          VSTR     s4,[r0,#0x14]
;;;435          ptr1[6] = a6;
0002f0  ed801a06          VSTR     s2,[r0,#0x18]
;;;436          ptr1[7] = a7;
0002f4  edc00a07          VSTR     s1,[r0,#0x1c]
0002f8  3020              ADDS     r0,r0,#0x20
0002fa  1e49              SUBS     r1,r1,#1
;;;437    
;;;438          /* increment pointer by 8 */
;;;439          ptr1 += 8u;
;;;440       } while(--j);
0002fc  d1bc              BNE      |L2.632|
;;;441    
;;;442    #else
;;;443    
;;;444       float32_t t1, t2, r1, r2, s1, s2;
;;;445    
;;;446       /* Run the below code for Cortex-M0 */
;;;447    
;;;448       /*  Initializations for the fft calculation */
;;;449       n2 = fftLen;
;;;450       n1 = n2;
;;;451       for (k = fftLen; k > 1u; k >>= 2u)
;;;452       {
;;;453          /*  Initializations for the fft calculation */
;;;454          n1 = n2;
;;;455          n2 >>= 2u;
;;;456          ia1 = 0u;
;;;457    
;;;458          /*  FFT Calculation */
;;;459          j = 0;
;;;460          do
;;;461          {
;;;462             /*  index calculation for the coefficients */
;;;463             ia2 = ia1 + ia1;
;;;464             ia3 = ia2 + ia1;
;;;465             co1 = pCoef[ia1 * 2u];
;;;466             si1 = pCoef[(ia1 * 2u) + 1u];
;;;467             co2 = pCoef[ia2 * 2u];
;;;468             si2 = pCoef[(ia2 * 2u) + 1u];
;;;469             co3 = pCoef[ia3 * 2u];
;;;470             si3 = pCoef[(ia3 * 2u) + 1u];
;;;471    
;;;472             /*  Twiddle coefficients index modifier */
;;;473             ia1 = ia1 + twidCoefModifier;
;;;474    
;;;475             i0 = j;
;;;476             do
;;;477             {
;;;478                /*  index calculation for the input as, */
;;;479                /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;480                i1 = i0 + n2;
;;;481                i2 = i1 + n2;
;;;482                i3 = i2 + n2;
;;;483    
;;;484                /* xa + xc */
;;;485                r1 = pSrc[(2u * i0)] + pSrc[(2u * i2)];
;;;486    
;;;487                /* xa - xc */
;;;488                r2 = pSrc[(2u * i0)] - pSrc[(2u * i2)];
;;;489    
;;;490                /* ya + yc */
;;;491                s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;492    
;;;493                /* ya - yc */
;;;494                s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;495    
;;;496                /* xb + xd */
;;;497                t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;498    
;;;499                /* xa' = xa + xb + xc + xd */
;;;500                pSrc[2u * i0] = r1 + t1;
;;;501    
;;;502                /* xa + xc -(xb + xd) */
;;;503                r1 = r1 - t1;
;;;504    
;;;505                /* yb + yd */
;;;506                t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;507    
;;;508                /* ya' = ya + yb + yc + yd */
;;;509                pSrc[(2u * i0) + 1u] = s1 + t2;
;;;510    
;;;511                /* (ya + yc) - (yb + yd) */
;;;512                s1 = s1 - t2;
;;;513    
;;;514                /* (yb - yd) */
;;;515                t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;516    
;;;517                /* (xb - xd) */
;;;518                t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;519    
;;;520                /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;521                pSrc[2u * i1] = (r1 * co2) + (s1 * si2);
;;;522    
;;;523                /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;524                pSrc[(2u * i1) + 1u] = (s1 * co2) - (r1 * si2);
;;;525    
;;;526                /* (xa - xc) + (yb - yd) */
;;;527                r1 = r2 + t1;
;;;528    
;;;529                /* (xa - xc) - (yb - yd) */
;;;530                r2 = r2 - t1;
;;;531    
;;;532                /* (ya - yc) -  (xb - xd) */
;;;533                s1 = s2 - t2;
;;;534    
;;;535                /* (ya - yc) +  (xb - xd) */
;;;536                s2 = s2 + t2;
;;;537    
;;;538                /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;539                pSrc[2u * i2] = (r1 * co1) + (s1 * si1);
;;;540    
;;;541                /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;542                pSrc[(2u * i2) + 1u] = (s1 * co1) - (r1 * si1);
;;;543    
;;;544                /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;545                pSrc[2u * i3] = (r2 * co3) + (s2 * si3);
;;;546    
;;;547                /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;548                pSrc[(2u * i3) + 1u] = (s2 * co3) - (r2 * si3);
;;;549             
;;;550                i0 += n1;
;;;551             } while( i0 < fftLen);
;;;552             j++;
;;;553          } while(j <= (n2 - 1u));
;;;554          twidCoefModifier <<= 2u;
;;;555       }
;;;556    
;;;557    #endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */
;;;558    
;;;559    }
0002fe  b001              ADD      sp,sp,#4
000300  ecbd8b02          VPOP     {d8}
000304  e8bd8ff0          POP      {r4-r11,pc}
;;;560    
                          ENDP


                          AREA ||i.arm_radix4_butterfly_inverse_f32||, CODE, READONLY, ALIGN=1

                  arm_radix4_butterfly_inverse_f32 PROC
;;;570    
;;;571    void arm_radix4_butterfly_inverse_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;572    float32_t * pSrc,
;;;573    uint16_t fftLen,
;;;574    float32_t * pCoef,
;;;575    uint16_t twidCoefModifier,
;;;576    float32_t onebyfftLen)
;;;577    {
000004  468b              MOV      r11,r1
;;;578       float32_t co1, co2, co3, si1, si2, si3;
;;;579       uint32_t ia1, ia2, ia3;
;;;580       uint32_t i0, i1, i2, i3;
;;;581       uint32_t n1, n2, j, k;
;;;582    
;;;583    #ifndef ARM_MATH_CM0_FAMILY_FAMILY
;;;584    
;;;585       float32_t xaIn, yaIn, xbIn, ybIn, xcIn, ycIn, xdIn, ydIn;
;;;586       float32_t Xaplusc, Xbplusd, Yaplusc, Ybplusd, Xaminusc, Xbminusd, Yaminusc,
;;;587       Ybminusd;
;;;588       float32_t Xb12C_out, Yb12C_out, Xc12C_out, Yc12C_out, Xd12C_out, Yd12C_out;
;;;589       float32_t Xb12_out, Yb12_out, Xc12_out, Yc12_out, Xd12_out, Yd12_out;
;;;590       float32_t *ptr1;
;;;591       float32_t p0,p1,p2,p3,p4,p5,p6,p7;
;;;592       float32_t a0,a1,a2,a3,a4,a5,a6,a7;
;;;593    
;;;594    
;;;595       /*  Initializations for the first stage */
;;;596       n2 = fftLen;
;;;597       n1 = n2;
;;;598    
;;;599       /* n2 = fftLen/4 */
;;;600       n2 >>= 2u;
000006  0889              LSRS     r1,r1,#2
000008  ed2d8b04          VPUSH    {d8-d9}               ;577
00000c  b081              SUB      sp,sp,#4              ;577
00000e  469e              MOV      lr,r3                 ;577
;;;601       i0 = 0u;
000010  2400              MOVS     r4,#0
;;;602       ia1 = 0u;
000012  4623              MOV      r3,r4
;;;603    
;;;604       j = n2;
000014  468a              MOV      r10,r1
000016  9100              STR      r1,[sp,#0]
                  |L3.24|
;;;605    
;;;606       /*  Calculation of first stage */
;;;607       do
;;;608       {
;;;609          /*  index calculation for the input as, */
;;;610          /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;611          i1 = i0 + n2;
000018  1865              ADDS     r5,r4,r1
;;;612          i2 = i1 + n2;
00001a  186e              ADDS     r6,r5,r1
;;;613          i3 = i2 + n2;
00001c  eb060c01          ADD      r12,r6,r1
;;;614    
;;;615          /*  Butterfly implementation */
;;;616          xaIn = pSrc[(2u * i0)];
000020  eb0007c4          ADD      r7,r0,r4,LSL #3
;;;617          yaIn = pSrc[(2u * i0) + 1u];
;;;618    
;;;619          xcIn = pSrc[(2u * i2)];
000024  eb0006c6          ADD      r6,r0,r6,LSL #3
000028  ecd74a02          VLDM     r7,{s9-s10}
;;;620          ycIn = pSrc[(2u * i2) + 1u];
;;;621    
;;;622          xbIn = pSrc[(2u * i1)];
00002c  eb0005c5          ADD      r5,r0,r5,LSL #3
;;;623          ybIn = pSrc[(2u * i1) + 1u];
;;;624    
;;;625          xdIn = pSrc[(2u * i3)];
000030  eb000ccc          ADD      r12,r0,r12,LSL #3
000034  ed967a00          VLDR     s14,[r6,#0]           ;619
000038  ed956a01          VLDR     s12,[r5,#4]           ;623
;;;626          ydIn = pSrc[(2u * i3) + 1u];
00003c  ed9c1a01          VLDR     s2,[r12,#4]
000040  edd56a00          VLDR     s13,[r5,#0]           ;622
000044  ed9c3a00          VLDR     s6,[r12,#0]           ;625
;;;627    
;;;628          /* xa + xc */
;;;629          Xaplusc = xaIn + xcIn;
000048  ee342a87          VADD.F32 s4,s9,s14
;;;630          /* xb + xd */
;;;631          Xbplusd = xbIn + xdIn;
;;;632          /* ya + yc */
;;;633          Yaplusc = yaIn + ycIn;
;;;634          /* yb + yd */
;;;635          Ybplusd = ybIn + ydIn;
00004c  ee364a01          VADD.F32 s8,s12,s2
000050  ee762a83          VADD.F32 s5,s13,s6             ;631
000054  edd65a01          VLDR     s11,[r6,#4]           ;620
;;;636    
;;;637          /*  index calculation for the coefficients */
;;;638          ia2 = ia1 + ia1;
000058  ea4f0943          LSL      r9,r3,#1
;;;639          co2 = pCoef[ia2 * 2u];
;;;640          si2 = pCoef[(ia2 * 2u) + 1u];
;;;641    
;;;642          /* xa - xc */
;;;643          Xaminusc = xaIn - xcIn;
;;;644          /* xb - xd */
;;;645          Xbminusd = xbIn - xdIn;
;;;646          /* ya - yc */
;;;647          Yaminusc = yaIn - ycIn;
;;;648          /* yb - yd */
;;;649          Ybminusd = ybIn - ydIn;
00005c  ee366a41          VSUB.F32 s12,s12,s2
000060  eb0208c9          ADD      r8,r2,r9,LSL #3       ;639
;;;650    
;;;651          /* xa' = xa + xb + xc + xd */
;;;652          pSrc[(2u * i0)] = Xaplusc + Xbplusd;
000064  ee321a22          VADD.F32 s2,s4,s5
000068  ee750a25          VADD.F32 s1,s10,s11            ;633
00006c  edd81a00          VLDR     s3,[r8,#0]            ;639
000070  edd83a01          VLDR     s7,[r8,#4]            ;640
000074  ee744ac7          VSUB.F32 s9,s9,s14             ;643
000078  ed871a00          VSTR     s2,[r7,#0]
;;;653    
;;;654          /* ya' = ya + yb + yc + yd */
;;;655          pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
;;;656    
;;;657          /* (xa - xc) - (yb - yd) */
;;;658          Xb12C_out = (Xaminusc - Ybminusd);
;;;659          /* (ya - yc) + (xb - xd) */
;;;660          Yb12C_out = (Yaminusc + Xbminusd);
;;;661          /* (xa + xc) - (xb + xd) */
;;;662          Xc12C_out = (Xaplusc - Xbplusd);
00007c  ee322a62          VSUB.F32 s4,s4,s5
000080  ee301a84          VADD.F32 s2,s1,s8              ;655
;;;663          /* (ya + yc) - (yb + yd) */
;;;664          Yc12C_out = (Yaplusc - Ybplusd);
000084  ee702ac4          VSUB.F32 s5,s1,s8
000088  ee355a65          VSUB.F32 s10,s10,s11           ;647
00008c  ed871a01          VSTR     s2,[r7,#4]            ;655
;;;665          /* (xa - xc) + (yb - yd) */
;;;666          Xd12C_out = (Xaminusc + Ybminusd);
;;;667          /* (ya - yc) - (xb - xd) */
;;;668          Yd12C_out = (Yaminusc - Xbminusd);
;;;669    
;;;670          co1 = pCoef[ia1 * 2u];
000090  eb0207c3          ADD      r7,r2,r3,LSL #3
000094  ee745ac6          VSUB.F32 s11,s9,s12            ;658
000098  ee740a86          VADD.F32 s1,s9,s12             ;666
00009c  ee363ac3          VSUB.F32 s6,s13,s6             ;645
0000a0  ed976a00          VLDR     s12,[r7,#0]
;;;671          si1 = pCoef[(ia1 * 2u) + 1u];
0000a4  edd74a01          VLDR     s9,[r7,#4]
;;;672    
;;;673          /*  index calculation for the coefficients */
;;;674          ia3 = ia2 + ia1;
0000a8  eb090703          ADD      r7,r9,r3
0000ac  ee351a03          VADD.F32 s2,s10,s6             ;660
;;;675          co3 = pCoef[ia3 * 2u];
0000b0  eb0207c7          ADD      r7,r2,r7,LSL #3
0000b4  ee353a43          VSUB.F32 s6,s10,s6             ;668
0000b8  ed974a00          VLDR     s8,[r7,#0]
;;;676          si3 = pCoef[(ia3 * 2u) + 1u];
0000bc  ed975a01          VLDR     s10,[r7,#4]
;;;677    
;;;678          Xb12_out = Xb12C_out * co1;
;;;679          Yb12_out = Yb12C_out * co1;
;;;680          Xc12_out = Xc12C_out * co2;
0000c0  ee227a21          VMUL.F32 s14,s4,s3
0000c4  ee656a86          VMUL.F32 s13,s11,s12           ;678
0000c8  ee216a06          VMUL.F32 s12,s2,s12            ;679
;;;681          Yc12_out = Yc12C_out * co2;
0000cc  ee621aa1          VMUL.F32 s3,s5,s3
;;;682          Xd12_out = Xd12C_out * co3;
0000d0  ee607a84          VMUL.F32 s15,s1,s8
;;;683          Yd12_out = Yd12C_out * co3;
0000d4  ee234a04          VMUL.F32 s8,s6,s8
;;;684       
;;;685          /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;686          //Xb12_out -= Yb12C_out * si1;
;;;687          p0 = Yb12C_out * si1;
0000d8  ee211a24          VMUL.F32 s2,s2,s9
;;;688          /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;689          //Yb12_out += Xb12C_out * si1;
;;;690          p1 = Xb12C_out * si1;
;;;691          /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;692          //Xc12_out -= Yc12C_out * si2;
;;;693          p2 = Yc12C_out * si2;
0000dc  ee622aa3          VMUL.F32 s5,s5,s7
;;;694          /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;695          //Yc12_out += Xc12C_out * si2;
;;;696          p3 = Xc12C_out * si2;
0000e0  ee222a23          VMUL.F32 s4,s4,s7
;;;697          /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;698          //Xd12_out -= Yd12C_out * si3;
;;;699          p4 = Yd12C_out * si3;
0000e4  ee233a05          VMUL.F32 s6,s6,s10
;;;700          /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;701          //Yd12_out += Xd12C_out * si3;
;;;702          p5 = Xd12C_out * si3;
0000e8  ee603a85          VMUL.F32 s7,s1,s10
;;;703          
;;;704          Xb12_out -= p0;
0000ec  ee365ac1          VSUB.F32 s10,s13,s2
;;;705          Yb12_out += p1;
;;;706          Xc12_out -= p2;
0000f0  ee772a62          VSUB.F32 s5,s14,s5
0000f4  ee654aa4          VMUL.F32 s9,s11,s9             ;690
;;;707          Yc12_out += p3;
0000f8  ee311a82          VADD.F32 s2,s3,s4
;;;708          Xd12_out -= p4;
;;;709          Yd12_out += p5;
;;;710    
;;;711          /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;712          pSrc[2u * i1] = Xc12_out;
0000fc  edc52a00          VSTR     s5,[r5,#0]
000100  ee770ac3          VSUB.F32 s1,s15,s6             ;708
;;;713    
;;;714          /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;715          pSrc[(2u * i1) + 1u] = Yc12_out;
000104  ed851a01          VSTR     s2,[r5,#4]
000108  ee764a24          VADD.F32 s9,s12,s9             ;705
00010c  ee741a23          VADD.F32 s3,s8,s7              ;709
;;;716    
;;;717          /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;718          pSrc[2u * i2] = Xb12_out;
000110  ed865a00          VSTR     s10,[r6,#0]
;;;719    
;;;720          /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;721          pSrc[(2u * i2) + 1u] = Yb12_out;
000114  edc64a01          VSTR     s9,[r6,#4]
;;;722    
;;;723          /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;724          pSrc[2u * i3] = Xd12_out;
000118  edcc0a00          VSTR     s1,[r12,#0]
;;;725    
;;;726          /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;727          pSrc[(2u * i3) + 1u] = Yd12_out;
;;;728    
;;;729          /*  Twiddle coefficients index modifier */
;;;730          ia1 = ia1 + twidCoefModifier;
;;;731    
;;;732          /*  Updating input index */
;;;733          i0 = i0 + 1u;
;;;734    
;;;735       } while(--j);
00011c  f1aa0501          SUB      r5,r10,#1
000120  1c64              ADDS     r4,r4,#1
000122  edcc1a01          VSTR     s3,[r12,#4]           ;727
000126  4473              ADD      r3,r3,lr              ;730
000128  ea5f0a05          MOVS     r10,r5
00012c  f47faf74          BNE      |L3.24|
;;;736    
;;;737       twidCoefModifier <<= 2u;
000130  f64f74ff          MOV      r4,#0xffff
000134  ea04098e          AND      r9,r4,lr,LSL #2
;;;738    
;;;739       /*  Calculation of second stage to excluding last stage */
;;;740       for (k = fftLen >> 2u; k > 4u; k >>= 2u)
000138  9b00              LDR      r3,[sp,#0]
00013a  e094              B        |L3.614|
                  |L3.316|
;;;741       {
;;;742          /*  Initializations for the first stage */
;;;743          n1 = n2;
00013c  468e              MOV      lr,r1
;;;744          n2 >>= 2u;
00013e  0889              LSRS     r1,r1,#2
;;;745          ia1 = 0u;
000140  2400              MOVS     r4,#0
;;;746    
;;;747          /*  Calculation of first stage */
;;;748          j = 0;
000142  4625              MOV      r5,r4
                  |L3.324|
;;;749          do
;;;750          {
;;;751             /*  index calculation for the coefficients */
;;;752             ia2 = ia1 + ia1;
000144  0063              LSLS     r3,r4,#1
;;;753             ia3 = ia2 + ia1;
000146  191f              ADDS     r7,r3,r4
;;;754             co1 = pCoef[ia1 * 2u];
;;;755             si1 = pCoef[(ia1 * 2u) + 1u];
;;;756             co2 = pCoef[ia2 * 2u];
000148  eb0203c3          ADD      r3,r2,r3,LSL #3
00014c  eb0206c4          ADD      r6,r2,r4,LSL #3       ;754
000150  ecd35a02          VLDM     r3,{s11-s12}
;;;757             si2 = pCoef[(ia2 * 2u) + 1u];
;;;758             co3 = pCoef[ia3 * 2u];
000154  eb0203c7          ADD      r3,r2,r7,LSL #3
;;;759             si3 = pCoef[(ia3 * 2u) + 1u];
;;;760    
;;;761             /*  Twiddle coefficients index modifier */
;;;762             ia1 = ia1 + twidCoefModifier;
000158  444c              ADD      r4,r4,r9
00015a  ecd66a02          VLDM     r6,{s13-s14}          ;754
00015e  ed934a00          VLDR     s8,[r3,#0]            ;758
000162  ed931a01          VLDR     s2,[r3,#4]            ;759
;;;763    
;;;764             i0 = j;
000166  462b              MOV      r3,r5
                  |L3.360|
;;;765             do
;;;766             {
;;;767                /*  index calculation for the input as, */
;;;768                /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;769                i1 = i0 + n2;
000168  185e              ADDS     r6,r3,r1
;;;770                i2 = i1 + n2;
00016a  eb060c01          ADD      r12,r6,r1
;;;771                i3 = i2 + n2;
00016e  eb0c0801          ADD      r8,r12,r1
;;;772    
;;;773                xaIn = pSrc[(2u * i0)];
000172  eb0007c3          ADD      r7,r0,r3,LSL #3
;;;774                yaIn = pSrc[(2u * i0) + 1u];
;;;775    
;;;776                xbIn = pSrc[(2u * i1)];
000176  eb0006c6          ADD      r6,r0,r6,LSL #3
;;;777                ybIn = pSrc[(2u * i1) + 1u];
;;;778    
;;;779                xcIn = pSrc[(2u * i2)];
00017a  eb000ccc          ADD      r12,r0,r12,LSL #3
;;;780                ycIn = pSrc[(2u * i2) + 1u];
;;;781    
;;;782                xdIn = pSrc[(2u * i3)];
00017e  eb0008c8          ADD      r8,r0,r8,LSL #3
000182  edd61a01          VLDR     s3,[r6,#4]            ;777
;;;783                ydIn = pSrc[(2u * i3) + 1u];
000186  edd87a01          VLDR     s15,[r8,#4]
00018a  ed973a00          VLDR     s6,[r7,#0]            ;773
00018e  edd64a00          VLDR     s9,[r6,#0]            ;776
000192  ed9c9a00          VLDR     s18,[r12,#0]          ;779
000196  edd88a00          VLDR     s17,[r8,#0]           ;782
00019a  edd70a01          VLDR     s1,[r7,#4]            ;774
00019e  ed9c8a01          VLDR     s16,[r12,#4]          ;780
;;;784    
;;;785                /* xa - xc */
;;;786                Xaminusc = xaIn - xcIn;
0001a2  ee733a49          VSUB.F32 s7,s6,s18
;;;787                /* (xb - xd) */
;;;788                Xbminusd = xbIn - xdIn;
0001a6  ee342ae8          VSUB.F32 s4,s9,s17
;;;789                /* ya - yc */
;;;790                Yaminusc = yaIn - ycIn;
;;;791                /* (yb - yd) */
;;;792                Ybminusd = ybIn - ydIn;
;;;793    
;;;794                /* xa + xc */
;;;795                Xaplusc = xaIn + xcIn;
0001aa  ee333a09          VADD.F32 s6,s6,s18
0001ae  ee712ae7          VSUB.F32 s5,s3,s15             ;792
;;;796                /* xb + xd */
;;;797                Xbplusd = xbIn + xdIn;
0001b2  ee744aa8          VADD.F32 s9,s9,s17
0001b6  ee305ac8          VSUB.F32 s10,s1,s16            ;790
;;;798                /* ya + yc */
;;;799                Yaplusc = yaIn + ycIn;
;;;800                /* yb + yd */
;;;801                Ybplusd = ybIn + ydIn;
0001ba  ee718aa7          VADD.F32 s17,s3,s15
0001be  ee308a88          VADD.F32 s16,s1,s16            ;799
;;;802    
;;;803                /* (xa - xc) - (yb - yd) */
;;;804                Xb12C_out = (Xaminusc - Ybminusd);
;;;805                /* (ya - yc) +  (xb - xd) */
;;;806                Yb12C_out = (Yaminusc + Xbminusd);
;;;807                /* xa + xc -(xb + xd) */
;;;808                Xc12C_out = (Xaplusc - Xbplusd);
0001c2  ee737a64          VSUB.F32 s15,s6,s9
;;;809                /* (ya + yc) - (yb + yd) */
;;;810                Yc12C_out = (Yaplusc - Ybplusd);
;;;811                /* (xa - xc) + (yb - yd) */
;;;812                Xd12C_out = (Xaminusc + Ybminusd);
;;;813                /* (ya - yc) -  (xb - xd) */
;;;814                Yd12C_out = (Yaminusc - Xbminusd);
;;;815    
;;;816                pSrc[(2u * i0)] = Xaplusc + Xbplusd;
0001c6  ee333a24          VADD.F32 s6,s6,s9
0001ca  ee751a02          VADD.F32 s3,s10,s4             ;806
0001ce  ee339ae2          VSUB.F32 s18,s7,s5             ;804
0001d2  ed873a00          VSTR     s6,[r7,#0]
0001d6  ee780a68          VSUB.F32 s1,s16,s17            ;810
;;;817                pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
0001da  ee383a28          VADD.F32 s6,s16,s17
0001de  ee352a42          VSUB.F32 s4,s10,s4             ;814
0001e2  ee732aa2          VADD.F32 s5,s7,s5              ;812
0001e6  ed873a01          VSTR     s6,[r7,#4]
;;;818    
;;;819                Xb12_out = Xb12C_out * co1;
;;;820                Yb12_out = Yb12C_out * co1;
0001ea  ee614aa6          VMUL.F32 s9,s3,s13
;;;821                Xc12_out = Xc12C_out * co2;
;;;822                Yc12_out = Yc12C_out * co2;
0001ee  ee208aa5          VMUL.F32 s16,s1,s11
0001f2  ee293a26          VMUL.F32 s6,s18,s13            ;819
;;;823                Xd12_out = Xd12C_out * co3;
;;;824                Yd12_out = Yd12C_out * co3;
;;;825    
;;;826                /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;827                //Xb12_out -= Yb12C_out * si1;
;;;828                p0 = Yb12C_out * si1;
0001f6  ee611a87          VMUL.F32 s3,s3,s14
;;;829                /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;830                //Yb12_out += Xb12C_out * si1;
;;;831                p1 = Xb12C_out * si1;
;;;832                /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;833                //Xc12_out -= Yc12C_out * si2;
;;;834                p2 = Yc12C_out * si2;
0001fa  ee609a86          VMUL.F32 s19,s1,s12
0001fe  ee275aa5          VMUL.F32 s10,s15,s11           ;821
000202  ee299a07          VMUL.F32 s18,s18,s14           ;831
;;;835                /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;836                //Yc12_out += Xc12C_out * si2;
;;;837                p3 = Xc12C_out * si2;
;;;838                /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;839                //Xd12_out -= Yd12C_out * si3;
;;;840                p4 = Yd12C_out * si3;
000206  ee620a01          VMUL.F32 s1,s4,s2
00020a  ee628a04          VMUL.F32 s17,s4,s8             ;824
00020e  ee677a86          VMUL.F32 s15,s15,s12           ;837
000212  ee623a84          VMUL.F32 s7,s5,s8              ;823
;;;841                /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;842                //Yd12_out += Xd12C_out * si3;
;;;843                p5 = Xd12C_out * si3;
000216  ee222a81          VMUL.F32 s4,s5,s2
;;;844                
;;;845                Xb12_out -= p0;
00021a  ee731a61          VSUB.F32 s3,s6,s3
;;;846                Yb12_out += p1;
00021e  ee343a89          VADD.F32 s6,s9,s18
;;;847                Xc12_out -= p2;
000222  ee752a69          VSUB.F32 s5,s10,s19
;;;848                Yc12_out += p3;
000226  ee784a27          VADD.F32 s9,s16,s15
;;;849                Xd12_out -= p4;
00022a  ee730ae0          VSUB.F32 s1,s7,s1
;;;850                Yd12_out += p5;
;;;851    
;;;852                /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;853                pSrc[2u * i1] = Xc12_out;
00022e  edc62a00          VSTR     s5,[r6,#0]
;;;854    
;;;855                /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;856                pSrc[(2u * i1) + 1u] = Yc12_out;
000232  edc64a01          VSTR     s9,[r6,#4]
000236  ee382a82          VADD.F32 s4,s17,s4             ;850
;;;857    
;;;858                /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;859                pSrc[2u * i2] = Xb12_out;
00023a  edcc1a00          VSTR     s3,[r12,#0]
;;;860    
;;;861                /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;862                pSrc[(2u * i2) + 1u] = Yb12_out;
00023e  ed8c3a01          VSTR     s6,[r12,#4]
;;;863    
;;;864                /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;865                pSrc[2u * i3] = Xd12_out;
000242  edc80a00          VSTR     s1,[r8,#0]
;;;866    
;;;867                /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;868                pSrc[(2u * i3) + 1u] = Yd12_out;
;;;869    
;;;870                i0 += n1;
000246  4473              ADD      r3,r3,lr
000248  ed882a01          VSTR     s4,[r8,#4]            ;868
;;;871             } while(i0 < fftLen);
00024c  455b              CMP      r3,r11
00024e  d38b              BCC      |L3.360|
;;;872             j++;
;;;873          } while(j <= (n2 - 1u));
000250  1e4b              SUBS     r3,r1,#1
000252  1c6d              ADDS     r5,r5,#1
000254  429d              CMP      r5,r3
000256  f67faf75          BLS      |L3.324|
;;;874          twidCoefModifier <<= 2u;
00025a  f64f74ff          MOV      r4,#0xffff
00025e  ea040989          AND      r9,r4,r9,LSL #2
000262  ea4f039a          LSR      r3,r10,#2             ;740
                  |L3.614|
000266  469a              MOV      r10,r3                ;740
000268  2b04              CMP      r3,#4                 ;740
00026a  f63faf67          BHI      |L3.316|
00026e  9900              LDR      r1,[sp,#0]            ;740
                  |L3.624|
;;;875       }
;;;876       /*  Initializations of last stage */
;;;877    
;;;878       j = fftLen >> 2;
;;;879       ptr1 = &pSrc[0];
;;;880    
;;;881       /*  Calculations of last stage */
;;;882       do
;;;883       {
;;;884          xaIn = ptr1[0];
000270  ed901a00          VLDR     s2,[r0,#0]
;;;885          yaIn = ptr1[1];
;;;886          xbIn = ptr1[2];
;;;887          ybIn = ptr1[3];
;;;888          xcIn = ptr1[4];
000274  ed903a04          VLDR     s6,[r0,#0x10]
000278  ed902a01          VLDR     s4,[r0,#4]            ;885
;;;889          ycIn = ptr1[5];
00027c  edd02a05          VLDR     s5,[r0,#0x14]
;;;890          xdIn = ptr1[6];
;;;891          ydIn = ptr1[7];
;;;892    
;;;893          /*  Butterfly implementation */
;;;894          /* xa + xc */
;;;895          Xaplusc = xaIn + xcIn;
000280  ee710a03          VADD.F32 s1,s2,s6
000284  ed904a03          VLDR     s8,[r0,#0xc]          ;887
000288  edd04a07          VLDR     s9,[r0,#0x1c]         ;891
;;;896    
;;;897          /* xa - xc */
;;;898          Xaminusc = xaIn - xcIn;
00028c  ee313a43          VSUB.F32 s6,s2,s6
;;;899    
;;;900          /* ya + yc */
;;;901          Yaplusc = yaIn + ycIn;
000290  ee321a22          VADD.F32 s2,s4,s5
;;;902    
;;;903          /* ya - yc */
;;;904          Yaminusc = yaIn - ycIn;
000294  ee325a62          VSUB.F32 s10,s4,s5
000298  edd01a02          VLDR     s3,[r0,#8]            ;886
00029c  edd03a06          VLDR     s7,[r0,#0x18]         ;890
;;;905    
;;;906          /* xb + xd */
;;;907          Xbplusd = xbIn + xdIn;
;;;908    
;;;909          /* yb + yd */
;;;910          Ybplusd = ybIn + ydIn;
0002a0  ee742a24          VADD.F32 s5,s8,s9
0002a4  ee312aa3          VADD.F32 s4,s3,s7              ;907
;;;911    
;;;912          /* (xb-xd) */
;;;913          Xbminusd = xbIn - xdIn;
0002a8  ee711ae3          VSUB.F32 s3,s3,s7
;;;914    
;;;915          /* (yb-yd) */
;;;916          Ybminusd = ybIn - ydIn;
0002ac  ee743a64          VSUB.F32 s7,s8,s9
;;;917          
;;;918          /* xa' = (xa+xb+xc+xd) * onebyfftLen */
;;;919          a0 = (Xaplusc + Xbplusd);
;;;920          /* ya' = (ya+yb+yc+yd) * onebyfftLen */
;;;921          a1 = (Yaplusc + Ybplusd);
;;;922          /* xc' = (xa-xb+xc-xd) * onebyfftLen */
;;;923          a2 = (Xaplusc - Xbplusd);
;;;924          /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
;;;925          a3 = (Yaplusc - Ybplusd);
0002b0  ee715a62          VSUB.F32 s11,s2,s5
0002b4  ee704a82          VADD.F32 s9,s1,s4              ;919
0002b8  ee314a22          VADD.F32 s8,s2,s5              ;921
0002bc  ee302ac2          VSUB.F32 s4,s1,s4              ;923
;;;926          /* xb' = (xa-yb-xc+yd) * onebyfftLen */
;;;927          a4 = (Xaminusc - Ybminusd);
0002c0  ee331a63          VSUB.F32 s2,s6,s7
;;;928          /* yb' = (ya+xb-yc-xd) * onebyfftLen */
;;;929          a5 = (Yaminusc + Xbminusd);
;;;930          /* xd' = (xa-yb-xc+yd) * onebyfftLen */
;;;931          a6 = (Xaminusc + Ybminusd);
0002c4  ee733a23          VADD.F32 s7,s6,s7
;;;932          /* yd' = (ya-xb-yc+xd) * onebyfftLen */
;;;933          a7 = (Yaminusc - Xbminusd);
;;;934       
;;;935          p0 = a0 * onebyfftLen;
0002c8  ee644a80          VMUL.F32 s9,s9,s0
0002cc  ee750a21          VADD.F32 s1,s10,s3             ;929
;;;936          p1 = a1 * onebyfftLen;
0002d0  ee243a00          VMUL.F32 s6,s8,s0
;;;937          p2 = a2 * onebyfftLen;
0002d4  ee622a00          VMUL.F32 s5,s4,s0
0002d8  ee355a61          VSUB.F32 s10,s10,s3            ;933
;;;938          p3 = a3 * onebyfftLen;
0002dc  ee252a80          VMUL.F32 s4,s11,s0
;;;939          p4 = a4 * onebyfftLen;
;;;940          p5 = a5 * onebyfftLen;
;;;941          p6 = a6 * onebyfftLen;
;;;942          p7 = a7 * onebyfftLen;
;;;943       
;;;944          /* xa' = (xa+xb+xc+xd) * onebyfftLen */
;;;945          ptr1[0] = p0;
0002e0  edc04a00          VSTR     s9,[r0,#0]
0002e4  ee211a00          VMUL.F32 s2,s2,s0              ;939
;;;946          /* ya' = (ya+yb+yc+yd) * onebyfftLen */
;;;947          ptr1[1] = p1;
0002e8  ed803a01          VSTR     s6,[r0,#4]
0002ec  ee601a80          VMUL.F32 s3,s1,s0              ;940
;;;948          /* xc' = (xa-xb+xc-xd) * onebyfftLen */
;;;949          ptr1[2] = p2;
0002f0  edc02a02          VSTR     s5,[r0,#8]
0002f4  ee633a80          VMUL.F32 s7,s7,s0              ;941
;;;950          /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
;;;951          ptr1[3] = p3;
0002f8  ed802a03          VSTR     s4,[r0,#0xc]
0002fc  ee650a00          VMUL.F32 s1,s10,s0             ;942
;;;952          /* xb' = (xa-yb-xc+yd) * onebyfftLen */
;;;953          ptr1[4] = p4;
000300  ed801a04          VSTR     s2,[r0,#0x10]
;;;954          /* yb' = (ya+xb-yc-xd) * onebyfftLen */
;;;955          ptr1[5] = p5;
000304  edc01a05          VSTR     s3,[r0,#0x14]
;;;956          /* xd' = (xa-yb-xc+yd) * onebyfftLen */
;;;957          ptr1[6] = p6;
000308  edc03a06          VSTR     s7,[r0,#0x18]
;;;958          /* yd' = (ya-xb-yc+xd) * onebyfftLen */
;;;959          ptr1[7] = p7;
00030c  edc00a07          VSTR     s1,[r0,#0x1c]
000310  3020              ADDS     r0,r0,#0x20
000312  1e49              SUBS     r1,r1,#1
;;;960    
;;;961          /* increment source pointer by 8 for next calculations */
;;;962          ptr1 = ptr1 + 8u;
;;;963    
;;;964       } while(--j);
000314  d1ac              BNE      |L3.624|
;;;965    
;;;966    #else
;;;967    
;;;968       float32_t t1, t2, r1, r2, s1, s2;
;;;969    
;;;970       /* Run the below code for Cortex-M0 */
;;;971    
;;;972       /*  Initializations for the first stage */
;;;973       n2 = fftLen;
;;;974       n1 = n2;
;;;975    
;;;976       /*  Calculation of first stage */
;;;977       for (k = fftLen; k > 4u; k >>= 2u)
;;;978       {
;;;979          /*  Initializations for the first stage */
;;;980          n1 = n2;
;;;981          n2 >>= 2u;
;;;982          ia1 = 0u;
;;;983    
;;;984          /*  Calculation of first stage */
;;;985          j = 0;
;;;986          do
;;;987          {
;;;988             /*  index calculation for the coefficients */
;;;989             ia2 = ia1 + ia1;
;;;990             ia3 = ia2 + ia1;
;;;991             co1 = pCoef[ia1 * 2u];
;;;992             si1 = pCoef[(ia1 * 2u) + 1u];
;;;993             co2 = pCoef[ia2 * 2u];
;;;994             si2 = pCoef[(ia2 * 2u) + 1u];
;;;995             co3 = pCoef[ia3 * 2u];
;;;996             si3 = pCoef[(ia3 * 2u) + 1u];
;;;997    
;;;998             /*  Twiddle coefficients index modifier */
;;;999             ia1 = ia1 + twidCoefModifier;
;;;1000   
;;;1001            i0 = j;
;;;1002            do
;;;1003            {
;;;1004               /*  index calculation for the input as, */
;;;1005               /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;1006               i1 = i0 + n2;
;;;1007               i2 = i1 + n2;
;;;1008               i3 = i2 + n2;
;;;1009   
;;;1010               /* xa + xc */
;;;1011               r1 = pSrc[(2u * i0)] + pSrc[(2u * i2)];
;;;1012   
;;;1013               /* xa - xc */
;;;1014               r2 = pSrc[(2u * i0)] - pSrc[(2u * i2)];
;;;1015   
;;;1016               /* ya + yc */
;;;1017               s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;1018   
;;;1019               /* ya - yc */
;;;1020               s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;1021   
;;;1022               /* xb + xd */
;;;1023               t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;1024   
;;;1025               /* xa' = xa + xb + xc + xd */
;;;1026               pSrc[2u * i0] = r1 + t1;
;;;1027   
;;;1028               /* xa + xc -(xb + xd) */
;;;1029               r1 = r1 - t1;
;;;1030   
;;;1031               /* yb + yd */
;;;1032               t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;1033   
;;;1034               /* ya' = ya + yb + yc + yd */
;;;1035               pSrc[(2u * i0) + 1u] = s1 + t2;
;;;1036   
;;;1037               /* (ya + yc) - (yb + yd) */
;;;1038               s1 = s1 - t2;
;;;1039   
;;;1040               /* (yb - yd) */
;;;1041               t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;1042   
;;;1043               /* (xb - xd) */
;;;1044               t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;1045   
;;;1046               /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1047               pSrc[2u * i1] = (r1 * co2) - (s1 * si2);
;;;1048   
;;;1049               /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1050               pSrc[(2u * i1) + 1u] = (s1 * co2) + (r1 * si2);
;;;1051   
;;;1052               /* (xa - xc) - (yb - yd) */
;;;1053               r1 = r2 - t1;
;;;1054   
;;;1055               /* (xa - xc) + (yb - yd) */
;;;1056               r2 = r2 + t1;
;;;1057   
;;;1058               /* (ya - yc) +  (xb - xd) */
;;;1059               s1 = s2 + t2;
;;;1060   
;;;1061               /* (ya - yc) -  (xb - xd) */
;;;1062               s2 = s2 - t2;
;;;1063   
;;;1064               /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1065               pSrc[2u * i2] = (r1 * co1) - (s1 * si1);
;;;1066   
;;;1067               /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1068               pSrc[(2u * i2) + 1u] = (s1 * co1) + (r1 * si1);
;;;1069   
;;;1070               /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1071               pSrc[2u * i3] = (r2 * co3) - (s2 * si3);
;;;1072   
;;;1073               /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1074               pSrc[(2u * i3) + 1u] = (s2 * co3) + (r2 * si3);
;;;1075            
;;;1076               i0 += n1;
;;;1077            } while( i0 < fftLen);
;;;1078            j++;
;;;1079         } while(j <= (n2 - 1u));
;;;1080         twidCoefModifier <<= 2u;
;;;1081      }
;;;1082      /*  Initializations of last stage */
;;;1083      n1 = n2;
;;;1084      n2 >>= 2u;
;;;1085   
;;;1086      /*  Calculations of last stage */
;;;1087      for (i0 = 0u; i0 <= (fftLen - n1); i0 += n1)
;;;1088      {
;;;1089         /*  index calculation for the input as, */
;;;1090         /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
;;;1091         i1 = i0 + n2;
;;;1092         i2 = i1 + n2;
;;;1093         i3 = i2 + n2;
;;;1094   
;;;1095         /*  Butterfly implementation */
;;;1096         /* xa + xc */
;;;1097         r1 = pSrc[2u * i0] + pSrc[2u * i2];
;;;1098   
;;;1099         /* xa - xc */
;;;1100         r2 = pSrc[2u * i0] - pSrc[2u * i2];
;;;1101   
;;;1102         /* ya + yc */
;;;1103         s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;1104   
;;;1105         /* ya - yc */
;;;1106         s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;1107   
;;;1108         /* xc + xd */
;;;1109         t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;1110   
;;;1111         /* xa' = xa + xb + xc + xd */
;;;1112         pSrc[2u * i0] = (r1 + t1) * onebyfftLen;
;;;1113   
;;;1114         /* (xa + xb) - (xc + xd) */
;;;1115         r1 = r1 - t1;
;;;1116   
;;;1117         /* yb + yd */
;;;1118         t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;1119   
;;;1120         /* ya' = ya + yb + yc + yd */
;;;1121         pSrc[(2u * i0) + 1u] = (s1 + t2) * onebyfftLen;
;;;1122   
;;;1123         /* (ya + yc) - (yb + yd) */
;;;1124         s1 = s1 - t2;
;;;1125   
;;;1126         /* (yb-yd) */
;;;1127         t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;1128   
;;;1129         /* (xb-xd) */
;;;1130         t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;1131   
;;;1132         /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1133         pSrc[2u * i1] = r1 * onebyfftLen;
;;;1134   
;;;1135         /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1136         pSrc[(2u * i1) + 1u] = s1 * onebyfftLen;
;;;1137   
;;;1138         /* (xa - xc) - (yb-yd) */
;;;1139         r1 = r2 - t1;
;;;1140   
;;;1141         /* (xa - xc) + (yb-yd) */
;;;1142         r2 = r2 + t1;
;;;1143   
;;;1144         /* (ya - yc) + (xb-xd) */
;;;1145         s1 = s2 + t2;
;;;1146   
;;;1147         /* (ya - yc) - (xb-xd) */
;;;1148         s2 = s2 - t2;
;;;1149   
;;;1150         /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1151         pSrc[2u * i2] = r1 * onebyfftLen;
;;;1152   
;;;1153         /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1154         pSrc[(2u * i2) + 1u] = s1 * onebyfftLen;
;;;1155   
;;;1156         /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1157         pSrc[2u * i3] = r2 * onebyfftLen;
;;;1158   
;;;1159         /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1160         pSrc[(2u * i3) + 1u] = s2 * onebyfftLen;
;;;1161      }
;;;1162   
;;;1163   #endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */
;;;1164   }
000316  b001              ADD      sp,sp,#4
000318  ecbd8b04          VPOP     {d8-d9}
00031c  e8bd8ff0          POP      {r4-r11,pc}
;;;1165   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix4_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_f32_c_95c9501a____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix4_f32_c_95c9501a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_f32_c_95c9501a____REVSH|
#line 144
|__asm___21_arm_cfft_radix4_f32_c_95c9501a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_f32_c_95c9501a____RRX|
#line 300
|__asm___21_arm_cfft_radix4_f32_c_95c9501a____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
