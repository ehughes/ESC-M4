; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_power_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_power_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_power_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_power_q31.c]
                          THUMB

                          AREA ||i.arm_power_q31||, CODE, READONLY, ALIGN=1

                  arm_power_q31 PROC
;;;73     
;;;74     void arm_power_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;75       q31_t * pSrc,
;;;76       uint32_t blockSize,
;;;77       q63_t * pResult)
;;;78     {
;;;79       q63_t sum = 0;                                 /* Temporary result storage */
000002  2300              MOVS     r3,#0
000004  461c              MOV      r4,r3
;;;80       q31_t in;
;;;81       uint32_t blkCnt;                               /* loop counter */
;;;82     
;;;83     
;;;84     #ifndef ARM_MATH_CM0_FAMILY
;;;85     
;;;86       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;87     
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
000006  088d              LSRS     r5,r1,#2
000008  e02a              B        |L1.96|
                  |L1.10|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;92        ** a second loop below computes the remaining 1 to 3 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;96         /* Compute Power then shift intermediate results by 14 bits to maintain 16.48 format and then store the result in a temporary variable sum, providing 15 guard bits. */
;;;97         in = *pSrc++;
00000a  6806              LDR      r6,[r0,#0]
;;;98         sum += ((q63_t) in * in) >> 14u;
00000c  fb867606          SMULL    r7,r6,r6,r6
000010  0bbf              LSRS     r7,r7,#14
000012  ea474786          ORR      r7,r7,r6,LSL #18
000016  18fb              ADDS     r3,r7,r3
000018  eb4434a6          ADC      r4,r4,r6,ASR #14
;;;99     
;;;100        in = *pSrc++;
00001c  6846              LDR      r6,[r0,#4]
;;;101        sum += ((q63_t) in * in) >> 14u;
00001e  fb867606          SMULL    r7,r6,r6,r6
000022  ea4f3797          LSR      r7,r7,#14
000026  ea474786          ORR      r7,r7,r6,LSL #18
00002a  18fb              ADDS     r3,r7,r3
00002c  eb4434a6          ADC      r4,r4,r6,ASR #14
;;;102    
;;;103        in = *pSrc++;
000030  6886              LDR      r6,[r0,#8]
;;;104        sum += ((q63_t) in * in) >> 14u;
000032  fb867606          SMULL    r7,r6,r6,r6
000036  ea4f3797          LSR      r7,r7,#14
00003a  ea474786          ORR      r7,r7,r6,LSL #18
00003e  18fb              ADDS     r3,r7,r3
000040  eb4434a6          ADC      r4,r4,r6,ASR #14
;;;105    
;;;106        in = *pSrc++;
000044  68c6              LDR      r6,[r0,#0xc]
000046  f1000010          ADD      r0,r0,#0x10
;;;107        sum += ((q63_t) in * in) >> 14u;
00004a  fb867606          SMULL    r7,r6,r6,r6
00004e  ea4f3797          LSR      r7,r7,#14
000052  ea474786          ORR      r7,r7,r6,LSL #18
000056  18fb              ADDS     r3,r7,r3
000058  eb4434a6          ADC      r4,r4,r6,ASR #14
;;;108    
;;;109        /* Decrement the loop counter */
;;;110        blkCnt--;
00005c  f1a50501          SUB      r5,r5,#1
                  |L1.96|
000060  2d00              CMP      r5,#0                 ;93
000062  d1d2              BNE      |L1.10|
;;;111      }
;;;112    
;;;113      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;114       ** No loop unrolling is used. */
;;;115      blkCnt = blockSize % 0x4u;
000064  f0010103          AND      r1,r1,#3
;;;116    
;;;117    #else
;;;118    
;;;119      /* Run the below code for Cortex-M0 */
;;;120    
;;;121      /* Loop over blockSize number of values */
;;;122      blkCnt = blockSize;
;;;123    
;;;124    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;125    
;;;126      while(blkCnt > 0u)
000068  e00a              B        |L1.128|
                  |L1.106|
;;;127      {
;;;128        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;129        /* Compute Power and then store the result in a temporary variable, sum. */
;;;130        in = *pSrc++;
00006a  c820              LDM      r0!,{r5}
;;;131        sum += ((q63_t) in * in) >> 14u;
00006c  fb856505          SMULL    r6,r5,r5,r5
000070  0bb6              LSRS     r6,r6,#14
000072  ea464685          ORR      r6,r6,r5,LSL #18
000076  18f3              ADDS     r3,r6,r3
000078  eb4434a5          ADC      r4,r4,r5,ASR #14
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
00007c  f1a10101          SUB      r1,r1,#1
                  |L1.128|
000080  2900              CMP      r1,#0                 ;126
000082  d1f2              BNE      |L1.106|
;;;135      }
;;;136    
;;;137      /* Store the results in 16.48 format  */
;;;138      *pResult = sum;
000084  c218              STM      r2!,{r3,r4}
;;;139    }
000086  bdf0              POP      {r4-r7,pc}
;;;140    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_power_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_q31_c_af5b9670____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_power_q31_c_af5b9670____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_q31_c_af5b9670____REVSH|
#line 144
|__asm___15_arm_power_q31_c_af5b9670____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_q31_c_af5b9670____RRX|
#line 300
|__asm___15_arm_power_q31_c_af5b9670____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
