; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mult_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mult_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mult_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_mult_q7.c]
                          THUMB

                          AREA ||i.arm_mult_q7||, CODE, READONLY, ALIGN=1

                  arm_mult_q7 PROC
;;;65     
;;;66     void arm_mult_q7(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;67       q7_t * pSrcA,
;;;68       q7_t * pSrcB,
;;;69       q7_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counters */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q7_t out1, out2, out3, out4;                   /* Temporary variables to store the product */
;;;78     
;;;79       /* loop Unrolling */
;;;80       blkCnt = blockSize >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e02f              B        |L1.104|
                  |L1.8|
;;;81     
;;;82       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;83        ** a second loop below computes the remaining 1 to 3 samples. */
;;;84       while(blkCnt > 0u)
;;;85       {
;;;86         /* C = A * B */
;;;87         /* Multiply the inputs and store the results in temporary variables */
;;;88         out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
000008  f9905000          LDRSB    r5,[r0,#0]
00000c  f9916000          LDRSB    r6,[r1,#0]
000010  fb15f506          SMULBB   r5,r5,r6
000014  f32515c7          SSAT     r5,#8,r5,ASR #7
;;;89         out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
000018  f9906001          LDRSB    r6,[r0,#1]
00001c  f9917001          LDRSB    r7,[r1,#1]
000020  1c89              ADDS     r1,r1,#2
000022  fb16f607          SMULBB   r6,r6,r7
000026  f32616c7          SSAT     r6,#8,r6,ASR #7
;;;90         out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
00002a  f9907002          LDRSB    r7,[r0,#2]
00002e  f911cb01          LDRSB    r12,[r1],#1
000032  1cc0              ADDS     r0,r0,#3
000034  fb17f70c          SMULBB   r7,r7,r12
000038  f32717c7          SSAT     r7,#8,r7,ASR #7
;;;91         out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
00003c  f910cb01          LDRSB    r12,[r0],#1
000040  f9118b01          LDRSB    r8,[r1],#1
000044  fb1cfc08          SMULBB   r12,r12,r8
000048  f32c1cc7          SSAT     r12,#8,r12,ASR #7
;;;92     
;;;93         /* Store the results of 4 inputs in the destination buffer in single cycle by packing */
;;;94         *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
00004c  f64f78ff          MOV      r8,#0xffff
000050  b2ed              UXTB     r5,r5
000052  ea082606          AND      r6,r8,r6,LSL #8
000056  4335              ORRS     r5,r5,r6
000058  b2fe              UXTB     r6,r7
00005a  ea454506          ORR      r5,r5,r6,LSL #16
00005e  ea45650c          ORR      r5,r5,r12,LSL #24
000062  f8425b04          STR      r5,[r2],#4
;;;95     
;;;96         /* Decrement the blockSize loop counter */
;;;97         blkCnt--;
000066  1e64              SUBS     r4,r4,#1
                  |L1.104|
000068  2c00              CMP      r4,#0                 ;84
00006a  d1cd              BNE      |L1.8|
;;;98       }
;;;99     
;;;100      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;101       ** No loop unrolling is used. */
;;;102      blkCnt = blockSize % 0x4u;
00006c  f0030303          AND      r3,r3,#3
;;;103    
;;;104    #else
;;;105    
;;;106      /* Run the below code for Cortex-M0 */
;;;107    
;;;108      /* Initialize blkCnt with number of samples */
;;;109      blkCnt = blockSize;
;;;110    
;;;111    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;112    
;;;113    
;;;114      while(blkCnt > 0u)
000070  e00a              B        |L1.136|
                  |L1.114|
;;;115      {
;;;116        /* C = A * B */
;;;117        /* Multiply the inputs and store the result in the destination buffer */
;;;118        *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
000072  f9104b01          LDRSB    r4,[r0],#1
000076  f9115b01          LDRSB    r5,[r1],#1
00007a  fb14f405          SMULBB   r4,r4,r5
00007e  f32414c7          SSAT     r4,#8,r4,ASR #7
000082  f8024b01          STRB     r4,[r2],#1
;;;119    
;;;120        /* Decrement the blockSize loop counter */
;;;121        blkCnt--;
000086  1e5b              SUBS     r3,r3,#1
                  |L1.136|
000088  2b00              CMP      r3,#0                 ;114
00008a  d1f2              BNE      |L1.114|
;;;122      }
;;;123    }
00008c  e8bd81f0          POP      {r4-r8,pc}
;;;124    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_mult_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_mult_q7_c_c923b2cd____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_mult_q7_c_c923b2cd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_mult_q7_c_c923b2cd____REVSH|
#line 144
|__asm___13_arm_mult_q7_c_c923b2cd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_mult_q7_c_c923b2cd____RRX|
#line 300
|__asm___13_arm_mult_q7_c_c923b2cd____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
