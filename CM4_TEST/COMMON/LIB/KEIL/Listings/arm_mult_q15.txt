; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mult_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mult_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mult_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_mult_q15.c]
                          THUMB

                          AREA ||i.arm_mult_q15||, CODE, READONLY, ALIGN=1

                  arm_mult_q15 PROC
;;;66     
;;;67     void arm_mult_q15(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;68       q15_t * pSrcA,
;;;69       q15_t * pSrcB,
;;;70       q15_t * pDst,
;;;71       uint32_t blockSize)
;;;72     {
;;;73       uint32_t blkCnt;                               /* loop counters */
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       q31_t inA1, inA2, inB1, inB2;                  /* temporary input variables */
;;;79       q15_t out1, out2, out3, out4;                  /* temporary output variables */
;;;80       q31_t mul1, mul2, mul3, mul4;                  /* temporary variables */
;;;81     
;;;82       /* loop Unrolling */
;;;83       blkCnt = blockSize >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e01e              B        |L1.70|
                  |L1.8|
;;;84     
;;;85       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;86        ** a second loop below computes the remaining 1 to 3 samples. */
;;;87       while(blkCnt > 0u)
;;;88       {
;;;89         /* read two samples at a time from sourceA */
;;;90         inA1 = *__SIMD32(pSrcA)++;
000008  6806              LDR      r6,[r0,#0]
;;;91         /* read two samples at a time from sourceB */
;;;92         inB1 = *__SIMD32(pSrcB)++;
00000a  f8d1c000          LDR      r12,[r1,#0]
;;;93         /* read two samples at a time from sourceA */
;;;94         inA2 = *__SIMD32(pSrcA)++;
00000e  6847              LDR      r7,[r0,#4]
000010  3008              ADDS     r0,r0,#8
;;;95         /* read two samples at a time from sourceB */
;;;96         inB2 = *__SIMD32(pSrcB)++;
000012  684d              LDR      r5,[r1,#4]
000014  3108              ADDS     r1,r1,#8
;;;97     
;;;98         /* multiply mul = sourceA * sourceB */
;;;99         mul1 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
000016  fb16f83c          SMULTT   r8,r6,r12
;;;100        mul2 = (q31_t) ((q15_t) inA1 * (q15_t) inB1);
00001a  fb16f60c          SMULBB   r6,r6,r12
;;;101        mul3 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB2 >> 16));
00001e  fb17fc35          SMULTT   r12,r7,r5
;;;102        mul4 = (q31_t) ((q15_t) inA2 * (q15_t) inB2);
000022  fb17f505          SMULBB   r5,r7,r5
;;;103    
;;;104        /* saturate result to 16 bit */
;;;105        out1 = (q15_t) __SSAT(mul1 >> 15, 16);
000026  f32837cf          SSAT     r7,#16,r8,ASR #15
;;;106        out2 = (q15_t) __SSAT(mul2 >> 15, 16);
00002a  f32638cf          SSAT     r8,#16,r6,ASR #15
;;;107        out3 = (q15_t) __SSAT(mul3 >> 15, 16);
00002e  f32c36cf          SSAT     r6,#16,r12,ASR #15
;;;108        out4 = (q15_t) __SSAT(mul4 >> 15, 16);
000032  f32535cf          SSAT     r5,#16,r5,ASR #15
;;;109    
;;;110        /* store the result */
;;;111    #ifndef ARM_MATH_BIG_ENDIAN
;;;112    
;;;113        *__SIMD32(pDst)++ = __PKHBT(out2, out1, 16);
000036  eac84707          PKHBT    r7,r8,r7,LSL #16
00003a  6017              STR      r7,[r2,#0]
;;;114        *__SIMD32(pDst)++ = __PKHBT(out4, out3, 16);
00003c  eac54506          PKHBT    r5,r5,r6,LSL #16
000040  6055              STR      r5,[r2,#4]
000042  3208              ADDS     r2,r2,#8
;;;115    
;;;116    #else
;;;117    
;;;118        *__SIMD32(pDst)++ = __PKHBT(out2, out1, 16);
;;;119        *__SIMD32(pDst)++ = __PKHBT(out4, out3, 16);
;;;120    
;;;121    #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
;;;122    
;;;123        /* Decrement the blockSize loop counter */
;;;124        blkCnt--;
000044  1e64              SUBS     r4,r4,#1
                  |L1.70|
000046  2c00              CMP      r4,#0                 ;87
000048  d1de              BNE      |L1.8|
;;;125      }
;;;126    
;;;127      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;128       ** No loop unrolling is used. */
;;;129      blkCnt = blockSize % 0x4u;
00004a  f0030303          AND      r3,r3,#3
;;;130    
;;;131    #else
;;;132    
;;;133      /* Run the below code for Cortex-M0 */
;;;134    
;;;135      /* Initialize blkCnt with number of samples */
;;;136      blkCnt = blockSize;
;;;137    
;;;138    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;139    
;;;140    
;;;141      while(blkCnt > 0u)
00004e  e00a              B        |L1.102|
                  |L1.80|
;;;142      {
;;;143        /* C = A * B */
;;;144        /* Multiply the inputs and store the result in the destination buffer */
;;;145        *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
000050  f8304b02          LDRH     r4,[r0],#2
000054  f8315b02          LDRH     r5,[r1],#2
000058  fb14f405          SMULBB   r4,r4,r5
00005c  f32434cf          SSAT     r4,#16,r4,ASR #15
000060  f8224b02          STRH     r4,[r2],#2
;;;146    
;;;147        /* Decrement the blockSize loop counter */
;;;148        blkCnt--;
000064  1e5b              SUBS     r3,r3,#1
                  |L1.102|
000066  2b00              CMP      r3,#0                 ;141
000068  d1f2              BNE      |L1.80|
;;;149      }
;;;150    }
00006a  e8bd83f0          POP      {r4-r9,pc}
;;;151    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_mult_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_q15_c_37f71197____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_mult_q15_c_37f71197____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_q15_c_37f71197____REVSH|
#line 144
|__asm___14_arm_mult_q15_c_37f71197____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_q15_c_37f71197____RRX|
#line 300
|__asm___14_arm_mult_q15_c_37f71197____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
