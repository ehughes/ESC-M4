; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_copy_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_copy_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_copy_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_copy_q31.c]
                          THUMB

                          AREA ||i.arm_copy_q31||, CODE, READONLY, ALIGN=1

                  arm_copy_q31 PROC
;;;60     
;;;61     void arm_copy_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;62       q31_t * pSrc,
;;;63       q31_t * pDst,
;;;64       uint32_t blockSize)
;;;65     {
;;;66       uint32_t blkCnt;                               /* loop counter */
;;;67     
;;;68     
;;;69     #ifndef ARM_MATH_CM0_FAMILY
;;;70     
;;;71       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;72       q31_t in1, in2, in3, in4;
;;;73     
;;;74       /*loop Unrolling */
;;;75       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e002              B        |L1.12|
                  |L1.6|
000006  c8f0              LDM      r0!,{r4-r7}           ;65
000008  c1f0              STM      r1!,{r4-r7}           ;65
00000a  1e5b              SUBS     r3,r3,#1              ;65
                  |L1.12|
;;;76     
;;;77       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;78        ** a second loop below computes the remaining 1 to 3 samples. */
;;;79       while(blkCnt > 0u)
00000c  2b00              CMP      r3,#0
00000e  d1fa              BNE      |L1.6|
;;;80       {
;;;81         /* C = A */
;;;82         /* Copy and then store the values in the destination buffer */
;;;83         in1 = *pSrc++;
;;;84         in2 = *pSrc++;
;;;85         in3 = *pSrc++;
;;;86         in4 = *pSrc++;
;;;87     
;;;88         *pDst++ = in1;
;;;89         *pDst++ = in2;
;;;90         *pDst++ = in3;
;;;91         *pDst++ = in4;
;;;92     
;;;93         /* Decrement the loop counter */
;;;94         blkCnt--;
;;;95       }
;;;96     
;;;97       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;98        ** No loop unrolling is used. */
;;;99       blkCnt = blockSize % 0x4u;
000010  f0020203          AND      r2,r2,#3
;;;100    
;;;101    #else
;;;102    
;;;103      /* Run the below code for Cortex-M0 */
;;;104    
;;;105      /* Loop over blockSize number of values */
;;;106      blkCnt = blockSize;
;;;107    
;;;108    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;109    
;;;110      while(blkCnt > 0u)
000014  e002              B        |L1.28|
                  |L1.22|
;;;111      {
;;;112        /* C = A */
;;;113        /* Copy and then store the value in the destination buffer */
;;;114        *pDst++ = *pSrc++;
000016  c808              LDM      r0!,{r3}
000018  1e52              SUBS     r2,r2,#1
00001a  c108              STM      r1!,{r3}
                  |L1.28|
00001c  2a00              CMP      r2,#0                 ;110
00001e  d1fa              BNE      |L1.22|
;;;115    
;;;116        /* Decrement the loop counter */
;;;117        blkCnt--;
;;;118      }
;;;119    }
000020  bdf0              POP      {r4-r7,pc}
;;;120    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_copy_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_copy_q31_c_580c60ef____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_copy_q31_c_580c60ef____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_copy_q31_c_580c60ef____REVSH|
#line 144
|__asm___14_arm_copy_q31_c_580c60ef____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_copy_q31_c_580c60ef____RRX|
#line 300
|__asm___14_arm_copy_q31_c_580c60ef____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
