; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_add_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_add_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_add_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_add_f32.c]
                          THUMB

                          AREA ||i.arm_add_f32||, CODE, READONLY, ALIGN=1

                  arm_add_f32 PROC
;;;72     
;;;73     void arm_add_f32(
000000  b510              PUSH     {r4,lr}
;;;74       float32_t * pSrcA,
;;;75       float32_t * pSrcB,
;;;76       float32_t * pDst,
;;;77       uint32_t blockSize)
;;;78     {
;;;79       uint32_t blkCnt;                               /* loop counter */
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;84       float32_t inA1, inA2, inA3, inA4;              /* temporary input variabels */
;;;85       float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
;;;86     
;;;87       /*loop Unrolling */
;;;88       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e023              B        |L1.78|
                  |L1.6|
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;91        ** a second loop below computes the remaining 1 to 3 samples. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94         /* C = A + B */
;;;95         /* Add and then store the results in the destination buffer. */
;;;96     
;;;97         /* read four inputs from sourceA and four inputs from sourceB */
;;;98         inA1 = *pSrcA;
000006  edd03a00          VLDR     s7,[r0,#0]
;;;99         inB1 = *pSrcB;
00000a  edd12a00          VLDR     s5,[r1,#0]
;;;100        inA2 = *(pSrcA + 1);
00000e  ed900a01          VLDR     s0,[r0,#4]
;;;101        inB2 = *(pSrcB + 1);
000012  ed912a01          VLDR     s4,[r1,#4]
;;;102        inA3 = *(pSrcA + 2);
000016  edd00a02          VLDR     s1,[r0,#8]
;;;103        inB3 = *(pSrcB + 2);
00001a  ed911a02          VLDR     s2,[r1,#8]
;;;104        inA4 = *(pSrcA + 3);
00001e  edd01a03          VLDR     s3,[r0,#0xc]
;;;105        inB4 = *(pSrcB + 3);
000022  ed913a03          VLDR     s6,[r1,#0xc]
;;;106    
;;;107        /* C = A + B */
;;;108        /* add and store result to destination */
;;;109        *pDst = inA1 + inB1;
000026  ee732aa2          VADD.F32 s5,s7,s5
00002a  edc22a00          VSTR     s5,[r2,#0]
;;;110        *(pDst + 1) = inA2 + inB2;
00002e  ee300a02          VADD.F32 s0,s0,s4
000032  ed820a01          VSTR     s0,[r2,#4]
;;;111        *(pDst + 2) = inA3 + inB3;
000036  ee300a81          VADD.F32 s0,s1,s2
00003a  ed820a02          VSTR     s0,[r2,#8]
;;;112        *(pDst + 3) = inA4 + inB4;
00003e  ee310a83          VADD.F32 s0,s3,s6
000042  ed820a03          VSTR     s0,[r2,#0xc]
;;;113    
;;;114        /* update pointers to process next samples */
;;;115        pSrcA += 4u;
000046  3010              ADDS     r0,r0,#0x10
;;;116        pSrcB += 4u;
000048  3110              ADDS     r1,r1,#0x10
;;;117        pDst += 4u;
00004a  3210              ADDS     r2,r2,#0x10
;;;118    
;;;119    
;;;120        /* Decrement the loop counter */
;;;121        blkCnt--;
00004c  1e64              SUBS     r4,r4,#1
                  |L1.78|
00004e  2c00              CMP      r4,#0                 ;92
000050  d1d9              BNE      |L1.6|
;;;122      }
;;;123    
;;;124      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;125       ** No loop unrolling is used. */
;;;126      blkCnt = blockSize % 0x4u;
000052  f0030303          AND      r3,r3,#3
;;;127    
;;;128    #else
;;;129    
;;;130      /* Run the below code for Cortex-M0 */
;;;131    
;;;132      /* Initialize blkCnt with number of samples */
;;;133      blkCnt = blockSize;
;;;134    
;;;135    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;136    
;;;137      while(blkCnt > 0u)
000056  e008              B        |L1.106|
                  |L1.88|
;;;138      {
;;;139        /* C = A + B */
;;;140        /* Add and then store the results in the destination buffer. */
;;;141        *pDst++ = (*pSrcA++) + (*pSrcB++);
000058  ecb00a01          VLDM     r0!,{s0}
00005c  ecf10a01          VLDM     r1!,{s1}
000060  ee300a20          VADD.F32 s0,s0,s1
000064  eca20a01          VSTM     r2!,{s0}
;;;142    
;;;143        /* Decrement the loop counter */
;;;144        blkCnt--;
000068  1e5b              SUBS     r3,r3,#1
                  |L1.106|
00006a  2b00              CMP      r3,#0                 ;137
00006c  d1f4              BNE      |L1.88|
;;;145      }
;;;146    }
00006e  bd10              POP      {r4,pc}
;;;147    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_add_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_add_f32_c_18d56d6e____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_add_f32_c_18d56d6e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_add_f32_c_18d56d6e____REVSH|
#line 144
|__asm___13_arm_add_f32_c_18d56d6e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_add_f32_c_18d56d6e____RRX|
#line 300
|__asm___13_arm_add_f32_c_18d56d6e____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
