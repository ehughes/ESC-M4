; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_biquad_cascade_stereo_df2t_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_biquad_cascade_stereo_df2t_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_biquad_cascade_stereo_df2t_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_biquad_cascade_stereo_df2T_f32.c]
                          THUMB

                          AREA ||i.arm_biquad_cascade_stereo_df2T_f32||, CODE, READONLY, ALIGN=1

                  arm_biquad_cascade_stereo_df2T_f32 PROC
;;;154    LOW_OPTIMIZATION_ENTER
;;;155    void arm_biquad_cascade_stereo_df2T_f32(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
;;;157    float32_t * pSrc,
;;;158    float32_t * pDst,
;;;159    uint32_t blockSize)
;;;160    {
000004  ed2d8b08          VPUSH    {d8-d11}
;;;161    
;;;162        float32_t *pIn = pSrc;                         /*  source pointer            */
;;;163        float32_t *pOut = pDst;                        /*  destination pointer       */
000008  4614              MOV      r4,r2
;;;164        float32_t *pState = S->pState;                 /*  State pointer             */
00000a  6845              LDR      r5,[r0,#4]
;;;165        float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
00000c  6887              LDR      r7,[r0,#8]
;;;166        float32_t acc1a, acc1b;                        /*  accumulator               */
;;;167        float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
;;;168        float32_t Xn1a, Xn1b;                          /*  temporary input           */
;;;169        float32_t d1a, d2a, d1b, d2b;                  /*  state variables           */
;;;170        uint32_t sample, stage = S->numStages;         /*  loop counters             */
00000e  f890c000          LDRB     r12,[r0,#0]
;;;171    
;;;172    #if defined(ARM_MATH_CM7)
;;;173    	
;;;174        float32_t Xn2a, Xn3a, Xn4a, Xn5a, Xn6a, Xn7a, Xn8a;         /*  Input State variables     */
;;;175        float32_t Xn2b, Xn3b, Xn4b, Xn5b, Xn6b, Xn7b, Xn8b;         /*  Input State variables     */
;;;176        float32_t acc2a, acc3a, acc4a, acc5a, acc6a, acc7a, acc8a;  /*  Simulates the accumulator */
;;;177        float32_t acc2b, acc3b, acc4b, acc5b, acc6b, acc7b, acc8b;  /*  Simulates the accumulator */
;;;178    
;;;179        do
;;;180        {
;;;181            /* Reading the coefficients */ 
;;;182            b0 = pCoeffs[0]; 
;;;183            b1 = pCoeffs[1]; 
;;;184            b2 = pCoeffs[2]; 
;;;185            a1 = pCoeffs[3]; 
;;;186            /* Apply loop unrolling and compute 8 output values simultaneously. */ 
;;;187            sample = blockSize >> 3u; 
;;;188            a2 = pCoeffs[4]; 
;;;189    
;;;190            /*Reading the state values */ 
;;;191            d1a = pState[0]; 
;;;192            d2a = pState[1]; 
;;;193            d1b = pState[2]; 
;;;194            d2b = pState[3]; 
;;;195    
;;;196            pCoeffs += 5u;
;;;197    
;;;198            /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.       
;;;199            ** a second loop below computes the remaining 1 to 7 samples. */
;;;200            while(sample > 0u) {
;;;201    
;;;202                /* y[n] = b0 * x[n] + d1 */
;;;203                /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;204                /* d2 = b2 * x[n] + a2 * y[n] */
;;;205    
;;;206                /* Read the first 2 inputs. 2 cycles */
;;;207                Xn1a  = pIn[0 ];
;;;208                Xn1b  = pIn[1 ];
;;;209    
;;;210                /* Sample 1. 5 cycles */
;;;211                Xn2a  = pIn[2 ];
;;;212                acc1a = b0 * Xn1a + d1a;
;;;213    
;;;214                Xn2b  = pIn[3 ];
;;;215                d1a = b1 * Xn1a + d2a;
;;;216    
;;;217                Xn3a  = pIn[4 ];
;;;218                d2a = b2 * Xn1a;
;;;219    
;;;220                Xn3b  = pIn[5 ];
;;;221                d1a += a1 * acc1a;
;;;222    
;;;223                Xn4a  = pIn[6 ];
;;;224                d2a += a2 * acc1a;
;;;225    
;;;226                /* Sample 2. 5 cycles */
;;;227                Xn4b  = pIn[7 ];
;;;228                acc1b = b0 * Xn1b + d1b;
;;;229    
;;;230                Xn5a  = pIn[8 ];
;;;231                d1b = b1 * Xn1b + d2b;
;;;232    
;;;233                Xn5b = pIn[9 ];
;;;234                d2b = b2 * Xn1b;
;;;235    
;;;236                Xn6a = pIn[10];
;;;237                d1b += a1 * acc1b;
;;;238    
;;;239                Xn6b = pIn[11];
;;;240                d2b += a2 * acc1b;
;;;241    
;;;242                /* Sample 3. 5 cycles */
;;;243                Xn7a = pIn[12];
;;;244                acc2a = b0 * Xn2a + d1a;
;;;245    
;;;246                Xn7b = pIn[13];
;;;247                d1a = b1 * Xn2a + d2a;
;;;248    
;;;249                Xn8a = pIn[14];
;;;250                d2a = b2 * Xn2a;
;;;251    
;;;252                Xn8b = pIn[15];
;;;253                d1a += a1 * acc2a;
;;;254    
;;;255                pIn += 16;
;;;256                d2a += a2 * acc2a;
;;;257    
;;;258                /* Sample 4. 5 cycles */
;;;259                acc2b = b0 * Xn2b + d1b;
;;;260                d1b = b1 * Xn2b + d2b;
;;;261                d2b = b2 * Xn2b;
;;;262                d1b += a1 * acc2b;
;;;263                d2b += a2 * acc2b;
;;;264    
;;;265                /* Sample 5. 5 cycles */
;;;266                acc3a = b0 * Xn3a + d1a;
;;;267                d1a = b1 * Xn3a + d2a;
;;;268                d2a = b2 * Xn3a;
;;;269                d1a += a1 * acc3a;
;;;270                d2a += a2 * acc3a;
;;;271    
;;;272                /* Sample 6. 5 cycles */
;;;273                acc3b = b0 * Xn3b + d1b;
;;;274                d1b = b1 * Xn3b + d2b;
;;;275                d2b = b2 * Xn3b;
;;;276                d1b += a1 * acc3b;
;;;277                d2b += a2 * acc3b;
;;;278    
;;;279                /* Sample 7. 5 cycles */
;;;280                acc4a = b0 * Xn4a + d1a;
;;;281                d1a = b1 * Xn4a + d2a;
;;;282                d2a = b2 * Xn4a;
;;;283                d1a += a1 * acc4a;
;;;284                d2a += a2 * acc4a;
;;;285    
;;;286                /* Sample 8. 5 cycles */
;;;287                acc4b = b0 * Xn4b + d1b;
;;;288                d1b = b1 * Xn4b + d2b;
;;;289                d2b = b2 * Xn4b;
;;;290                d1b += a1 * acc4b;
;;;291                d2b += a2 * acc4b;
;;;292    
;;;293                /* Sample 9. 5 cycles */
;;;294                acc5a = b0 * Xn5a + d1a;
;;;295                d1a = b1 * Xn5a + d2a;
;;;296                d2a = b2 * Xn5a;
;;;297                d1a += a1 * acc5a;
;;;298                d2a += a2 * acc5a;
;;;299    
;;;300                /* Sample 10. 5 cycles */
;;;301                acc5b = b0 * Xn5b + d1b;
;;;302                d1b = b1 * Xn5b + d2b;
;;;303                d2b = b2 * Xn5b;
;;;304                d1b += a1 * acc5b;
;;;305                d2b += a2 * acc5b;
;;;306    
;;;307                /* Sample 11. 5 cycles */
;;;308                acc6a = b0 * Xn6a + d1a;
;;;309                d1a = b1 * Xn6a + d2a;
;;;310                d2a = b2 * Xn6a;
;;;311                d1a += a1 * acc6a;
;;;312                d2a += a2 * acc6a;
;;;313    
;;;314                /* Sample 12. 5 cycles */
;;;315                acc6b = b0 * Xn6b + d1b;
;;;316                d1b = b1 * Xn6b + d2b;
;;;317                d2b = b2 * Xn6b;
;;;318                d1b += a1 * acc6b;
;;;319                d2b += a2 * acc6b;
;;;320    
;;;321                /* Sample 13. 5 cycles */
;;;322                acc7a = b0 * Xn7a + d1a;         
;;;323                d1a = b1 * Xn7a + d2a;   
;;;324                
;;;325                pOut[0 ] = acc1a ;      
;;;326                d2a = b2 * Xn7a;
;;;327    
;;;328                pOut[1 ] = acc1b ;	
;;;329                d1a += a1 * acc7a;
;;;330    
;;;331                pOut[2 ] = acc2a ;	
;;;332                d2a += a2 * acc7a;
;;;333    
;;;334                /* Sample 14. 5 cycles */
;;;335                pOut[3 ] = acc2b ;
;;;336                acc7b = b0 * Xn7b + d1b;
;;;337    
;;;338                pOut[4 ] = acc3a ; 
;;;339                d1b = b1 * Xn7b + d2b;
;;;340    
;;;341                pOut[5 ] = acc3b ;	
;;;342                d2b = b2 * Xn7b;
;;;343    
;;;344                pOut[6 ] = acc4a ;	  
;;;345                d1b += a1 * acc7b;
;;;346    
;;;347                pOut[7 ] = acc4b ;
;;;348                d2b += a2 * acc7b;
;;;349    
;;;350                /* Sample 15. 5 cycles */
;;;351                pOut[8 ] = acc5a ;  
;;;352                acc8a = b0 * Xn8a + d1a;
;;;353    
;;;354                pOut[9 ] = acc5b;	
;;;355                d1a = b1 * Xn8a + d2a;
;;;356    
;;;357                pOut[10] = acc6a;	
;;;358                d2a = b2 * Xn8a;
;;;359    
;;;360                pOut[11] = acc6b;
;;;361                d1a += a1 * acc8a;
;;;362    
;;;363                pOut[12] = acc7a;
;;;364                d2a += a2 * acc8a;
;;;365    
;;;366                /* Sample 16. 5 cycles */
;;;367                pOut[13] = acc7b;	
;;;368                acc8b = b0 * Xn8b + d1b;
;;;369    
;;;370                pOut[14] = acc8a;	
;;;371                d1b = b1 * Xn8b + d2b;
;;;372    
;;;373                pOut[15] = acc8b;
;;;374                d2b = b2 * Xn8b;
;;;375    
;;;376                sample--;	 
;;;377                d1b += a1 * acc8b;
;;;378    
;;;379                pOut += 16;
;;;380                d2b += a2 * acc8b;
;;;381            }
;;;382    
;;;383            sample = blockSize & 0x7u;
;;;384            while(sample > 0u) {
;;;385                /* Read the input */
;;;386                Xn1a = *pIn++; //Channel a
;;;387                Xn1b = *pIn++; //Channel b
;;;388    
;;;389                /* y[n] = b0 * x[n] + d1 */
;;;390                acc1a = (b0 * Xn1a) + d1a;
;;;391                acc1b = (b0 * Xn1b) + d1b;
;;;392    
;;;393                /* Store the result in the accumulator in the destination buffer. */
;;;394                *pOut++ = acc1a;
;;;395                *pOut++ = acc1b;
;;;396    
;;;397                /* Every time after the output is computed state should be updated. */
;;;398                /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;399                d1a = ((b1 * Xn1a) + (a1 * acc1a)) + d2a;
;;;400                d1b = ((b1 * Xn1b) + (a1 * acc1b)) + d2b;
;;;401    
;;;402                /* d2 = b2 * x[n] + a2 * y[n] */
;;;403                d2a = (b2 * Xn1a) + (a2 * acc1a);
;;;404                d2b = (b2 * Xn1b) + (a2 * acc1b);
;;;405    
;;;406                sample--;	
;;;407            }
;;;408    
;;;409            /* Store the updated state variables back into the state array */ 
;;;410            pState[0] = d1a; 
;;;411            pState[1] = d2a;         
;;;412    
;;;413            pState[2] = d1b; 
;;;414            pState[3] = d2b; 
;;;415            
;;;416            /* The current stage input is given as the output to the next stage */ 
;;;417            pIn = pDst; 
;;;418            /* decrement the loop counter */ 
;;;419            stage--; 
;;;420    
;;;421            pState += 4u;
;;;422            /*Reset the output working pointer */ 
;;;423            pOut = pDst; 
;;;424    
;;;425        } while(stage > 0u);
;;;426    	
;;;427    #elif defined(ARM_MATH_CM0_FAMILY)
;;;428    
;;;429        /* Run the below code for Cortex-M0 */
;;;430    
;;;431        do
;;;432        {
;;;433            /* Reading the coefficients */
;;;434            b0 = *pCoeffs++;
;;;435            b1 = *pCoeffs++;
;;;436            b2 = *pCoeffs++;
;;;437            a1 = *pCoeffs++;
;;;438            a2 = *pCoeffs++;
;;;439    
;;;440            /*Reading the state values */
;;;441            d1a = pState[0];
;;;442            d2a = pState[1];
;;;443            d1b = pState[2];
;;;444            d2b = pState[3];
;;;445    
;;;446    
;;;447            sample = blockSize;
;;;448    
;;;449            while(sample > 0u)
;;;450            {
;;;451                /* Read the input */
;;;452                Xn1a = *pIn++; //Channel a
;;;453                Xn1b = *pIn++; //Channel b
;;;454    
;;;455                /* y[n] = b0 * x[n] + d1 */
;;;456                acc1a = (b0 * Xn1a) + d1a;
;;;457                acc1b = (b0 * Xn1b) + d1b;
;;;458    
;;;459                /* Store the result in the accumulator in the destination buffer. */
;;;460                *pOut++ = acc1a;
;;;461                *pOut++ = acc1b;
;;;462    
;;;463                /* Every time after the output is computed state should be updated. */
;;;464                /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;465                d1a = ((b1 * Xn1a) + (a1 * acc1a)) + d2a;
;;;466                d1b = ((b1 * Xn1b) + (a1 * acc1b)) + d2b;
;;;467    
;;;468                /* d2 = b2 * x[n] + a2 * y[n] */
;;;469                d2a = (b2 * Xn1a) + (a2 * acc1a);
;;;470                d2b = (b2 * Xn1b) + (a2 * acc1b);
;;;471    
;;;472                /* decrement the loop counter */
;;;473                sample--;
;;;474            }
;;;475    
;;;476            /* Store the updated state variables back into the state array */
;;;477            *pState++ = d1a;
;;;478            *pState++ = d2a;
;;;479            *pState++ = d1b;
;;;480            *pState++ = d2b;
;;;481    
;;;482            /* The current stage input is given as the output to the next stage */
;;;483            pIn = pDst;
;;;484    
;;;485            /*Reset the output working pointer */
;;;486            pOut = pDst;
;;;487    
;;;488            /* decrement the loop counter */
;;;489            stage--;
;;;490    
;;;491        } while(stage > 0u);
;;;492    	 
;;;493    #else
;;;494    
;;;495        float32_t Xn2a, Xn3a, Xn4a;                          /*  Input State variables     */
;;;496        float32_t Xn2b, Xn3b, Xn4b;                          /*  Input State variables     */
;;;497        float32_t acc2a, acc3a, acc4a;                       /*  accumulator               */
;;;498        float32_t acc2b, acc3b, acc4b;                       /*  accumulator               */
;;;499        float32_t p0a, p1a, p2a, p3a, p4a, A1a;
;;;500        float32_t p0b, p1b, p2b, p3b, p4b, A1b;
;;;501    
;;;502        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;503        do
;;;504        {
;;;505            /* Reading the coefficients */     
;;;506            b0 = *pCoeffs++;
;;;507            b1 = *pCoeffs++;
;;;508            b2 = *pCoeffs++;
;;;509            a1 = *pCoeffs++;
;;;510            a2 = *pCoeffs++;      
;;;511    
;;;512            /*Reading the state values */
;;;513            d1a = pState[0];
;;;514            d2a = pState[1];
;;;515            d1b = pState[2];
;;;516            d2b = pState[3];
;;;517    
;;;518            /* Apply loop unrolling and compute 4 output values simultaneously. */
;;;519            sample = blockSize >> 2u;
000012  ea4f0893          LSR      r8,r3,#2
                  |L1.22|
000016  ecb70a01          VLDM     r7!,{s0}              ;506
00001a  ecf70a01          VLDM     r7!,{s1}              ;507
00001e  ecb71a01          VLDM     r7!,{s2}              ;508
000022  ecf71a01          VLDM     r7!,{s3}              ;509
000026  ecb72a01          VLDM     r7!,{s4}              ;510
00002a  edd52a00          VLDR     s5,[r5,#0]            ;513
00002e  ed953a01          VLDR     s6,[r5,#4]            ;514
000032  edd53a02          VLDR     s7,[r5,#8]            ;515
000036  ed954a03          VLDR     s8,[r5,#0xc]          ;516
00003a  4640              MOV      r0,r8
;;;520    
;;;521            /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
;;;522            ** a second loop below computes the remaining 1 to 3 samples. */
;;;523            while(sample > 0u) {
00003c  e0b2              B        |L1.420|
                  |L1.62|
;;;524    
;;;525                /* y[n] = b0 * x[n] + d1 */
;;;526                /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;527                /* d2 = b2 * x[n] + a2 * y[n] */
;;;528    
;;;529                /* Read the four inputs */
;;;530                Xn1a = pIn[0];
00003e  ed915a00          VLDR     s10,[r1,#0]
;;;531                Xn1b = pIn[1];
000042  edd18a01          VLDR     s17,[r1,#4]
;;;532                Xn2a = pIn[2];
000046  edd15a02          VLDR     s11,[r1,#8]
;;;533                Xn2b = pIn[3];
00004a  ed919a03          VLDR     s18,[r1,#0xc]
;;;534                Xn3a = pIn[4];
00004e  edd14a04          VLDR     s9,[r1,#0x10]
;;;535                Xn3b = pIn[5];
000052  edd16a05          VLDR     s13,[r1,#0x14]
;;;536                Xn4a = pIn[6];
000056  ed916a06          VLDR     s12,[r1,#0x18]
;;;537                Xn4b = pIn[7];
00005a  ed917a07          VLDR     s14,[r1,#0x1c]
;;;538                pIn += 8;     
00005e  3120              ADDS     r1,r1,#0x20
;;;539                
;;;540                p0a = b0 * Xn1a; 
000060  ee607a05          VMUL.F32 s15,s0,s10
;;;541                p0b = b0 * Xn1b; 
000064  ee208a28          VMUL.F32 s16,s0,s17
;;;542                p1a = b1 * Xn1a;
000068  ee609a85          VMUL.F32 s19,s1,s10
;;;543                p1b = b1 * Xn1b;
00006c  ee20aaa8          VMUL.F32 s20,s1,s17
;;;544                acc1a = p0a + d1a;
000070  ee777aa2          VADD.F32 s15,s15,s5
;;;545                acc1b = p0b + d1b;
000074  ee388a23          VADD.F32 s16,s16,s7
;;;546                p0a = b0 * Xn2a; 
000078  ee603a25          VMUL.F32 s7,s0,s11
;;;547                p0b = b0 * Xn2b; 
00007c  ee602a09          VMUL.F32 s5,s0,s18
;;;548                p3a = a1 * acc1a;
000080  ee61baa7          VMUL.F32 s23,s3,s15
;;;549                p3b = a1 * acc1b;
000084  ee61aa88          VMUL.F32 s21,s3,s16
;;;550                p2a = b2 * Xn1a;
000088  ee21ba05          VMUL.F32 s22,s2,s10
;;;551                p2b = b2 * Xn1b;
00008c  ee618a28          VMUL.F32 s17,s2,s17
;;;552                A1a = p1a + p3a;
000090  ee395aab          VADD.F32 s10,s19,s23
;;;553                A1b = p1b + p3b;
000094  ee7aba2a          VADD.F32 s23,s20,s21
;;;554                p4a = a2 * acc1a;
000098  ee22aa27          VMUL.F32 s20,s4,s15
;;;555                p4b = a2 * acc1b;
00009c  ee629a08          VMUL.F32 s19,s4,s16
;;;556                d1a = A1a + d2a;
0000a0  ee75aa03          VADD.F32 s21,s10,s6
;;;557                d1b = A1b + d2b;
0000a4  ee3b5a84          VADD.F32 s10,s23,s8
;;;558                d2a = p2a + p4a;
0000a8  ee3b3a0a          VADD.F32 s6,s22,s20
;;;559                d2b = p2b + p4b;
0000ac  ee384aa9          VADD.F32 s8,s17,s19
;;;560                
;;;561                p1a = b1 * Xn2a;
0000b0  ee609aa5          VMUL.F32 s19,s1,s11
;;;562                p1b = b1 * Xn2b;
0000b4  ee20aa89          VMUL.F32 s20,s1,s18
;;;563                acc2a = p0a + d1a;
0000b8  ee738aaa          VADD.F32 s17,s7,s21
;;;564                acc2b = p0b + d1b;
0000bc  ee325a85          VADD.F32 s10,s5,s10
;;;565                p0a = b0 * Xn3a; 
0000c0  ee603a24          VMUL.F32 s7,s0,s9
;;;566                p0b = b0 * Xn3b; 
0000c4  ee602a26          VMUL.F32 s5,s0,s13
;;;567                p3a = a1 * acc2a;
0000c8  ee61aaa8          VMUL.F32 s21,s3,s17
;;;568                p3b = a1 * acc2b;
0000cc  ee21ba85          VMUL.F32 s22,s3,s10
;;;569                p2a = b2 * Xn2a;
0000d0  ee61ba25          VMUL.F32 s23,s2,s11
;;;570                p2b = b2 * Xn2b;
0000d4  ee615a09          VMUL.F32 s11,s2,s18
;;;571                A1a = p1a + p3a;
0000d8  ee399aaa          VADD.F32 s18,s19,s21
;;;572                A1b = p1b + p3b;
0000dc  ee3aba0b          VADD.F32 s22,s20,s22
;;;573                p4a = a2 * acc2a;
0000e0  ee22aa28          VMUL.F32 s20,s4,s17
;;;574                p4b = a2 * acc2b;
0000e4  ee629a05          VMUL.F32 s19,s4,s10
;;;575                d1a = A1a + d2a;
0000e8  ee79aa03          VADD.F32 s21,s18,s6
;;;576                d1b = A1b + d2b;
0000ec  ee3b9a04          VADD.F32 s18,s22,s8
;;;577                d2a = p2a + p4a;
0000f0  ee3b4a8a          VADD.F32 s8,s23,s20
;;;578                d2b = p2b + p4b;
0000f4  ee759aa9          VADD.F32 s19,s11,s19
;;;579                
;;;580                p1a = b1 * Xn3a;
0000f8  ee20aaa4          VMUL.F32 s20,s1,s9
;;;581                p1b = b1 * Xn3b;
0000fc  ee203aa6          VMUL.F32 s6,s1,s13
;;;582                acc3a = p0a + d1a;
000100  ee735aaa          VADD.F32 s11,s7,s21
;;;583                acc3b = p0b + d1b;
000104  ee329a89          VADD.F32 s18,s5,s18
;;;584                p0a = b0 * Xn4a; 
000108  ee60aa06          VMUL.F32 s21,s0,s12
;;;585                p0b = b0 * Xn4b; 
00010c  ee602a07          VMUL.F32 s5,s0,s14
;;;586                p3a = a1 * acc3a;
000110  ee613aa5          VMUL.F32 s7,s3,s11
;;;587                p3b = a1 * acc3b;
000114  ee21ba89          VMUL.F32 s22,s3,s18
;;;588                p2a = b2 * Xn3a;
000118  ee61ba24          VMUL.F32 s23,s2,s9
;;;589                p2b = b2 * Xn3b;
00011c  ee614a26          VMUL.F32 s9,s2,s13
;;;590                A1a = p1a + p3a;
000120  ee7a3a23          VADD.F32 s7,s20,s7
;;;591                A1b = p1b + p3b;
000124  ee333a0b          VADD.F32 s6,s6,s22
;;;592                p4a = a2 * acc3a;
000128  ee22aa25          VMUL.F32 s20,s4,s11
;;;593                p4b = a2 * acc3b;
00012c  ee626a09          VMUL.F32 s13,s4,s18
;;;594                d1a = A1a + d2a;
000130  ee334a84          VADD.F32 s8,s7,s8
;;;595                d1b = A1b + d2b;
000134  ee333a29          VADD.F32 s6,s6,s19
;;;596                d2a = p2a + p4a;
000138  ee7b3a8a          VADD.F32 s7,s23,s20
;;;597                d2b = p2b + p4b;
00013c  ee749aa6          VADD.F32 s19,s9,s13
;;;598                
;;;599                acc4a = p0a + d1a;
000140  ee7a4a84          VADD.F32 s9,s21,s8
;;;600                acc4b = p0b + d1b;
000144  ee726a83          VADD.F32 s13,s5,s6
;;;601                p1a = b1 * Xn4a;
000148  ee602a86          VMUL.F32 s5,s1,s12
;;;602                p1b = b1 * Xn4b;
00014c  ee60aa87          VMUL.F32 s21,s1,s14
;;;603                p3a = a1 * acc4a;
000150  ee21aaa4          VMUL.F32 s20,s3,s9
;;;604                p3b = a1 * acc4b;
000154  ee21baa6          VMUL.F32 s22,s3,s13
;;;605                p2a = b2 * Xn4a;
000158  ee213a06          VMUL.F32 s6,s2,s12
;;;606                p2b = b2 * Xn4b;
00015c  ee214a07          VMUL.F32 s8,s2,s14
;;;607                A1a = p1a + p3a;
000160  ee722a8a          VADD.F32 s5,s5,s20
;;;608                A1b = p1b + p3b;
000164  ee3aaa8b          VADD.F32 s20,s21,s22
;;;609                p4a = a2 * acc4a;
000168  ee227a24          VMUL.F32 s14,s4,s9
;;;610                p4b = a2 * acc4b;
00016c  ee226a26          VMUL.F32 s12,s4,s13
;;;611                d1a = A1a + d2a;
000170  ee722aa3          VADD.F32 s5,s5,s7
;;;612                d1b = A1b + d2b;
000174  ee7a3a29          VADD.F32 s7,s20,s19
;;;613                d2a = p2a + p4a;
000178  ee333a07          VADD.F32 s6,s6,s14
;;;614                d2b = p2b + p4b;
00017c  ee344a06          VADD.F32 s8,s8,s12
;;;615    
;;;616                pOut[0] = acc1a;	
000180  edc47a00          VSTR     s15,[r4,#0]
;;;617                pOut[1] = acc1b;	
000184  ed848a01          VSTR     s16,[r4,#4]
;;;618                pOut[2] = acc2a;	
000188  edc48a02          VSTR     s17,[r4,#8]
;;;619                pOut[3] = acc2b;
00018c  ed845a03          VSTR     s10,[r4,#0xc]
;;;620                pOut[4] = acc3a;	
000190  edc45a04          VSTR     s11,[r4,#0x10]
;;;621                pOut[5] = acc3b;	
000194  ed849a05          VSTR     s18,[r4,#0x14]
;;;622                pOut[6] = acc4a;	
000198  edc44a06          VSTR     s9,[r4,#0x18]
;;;623                pOut[7] = acc4b;
00019c  edc46a07          VSTR     s13,[r4,#0x1c]
;;;624                pOut += 8;
0001a0  3420              ADDS     r4,r4,#0x20
;;;625                 
;;;626                sample--;	       
0001a2  1e40              SUBS     r0,r0,#1
                  |L1.420|
0001a4  2800              CMP      r0,#0                 ;523
0001a6  f47faf4a          BNE      |L1.62|
;;;627            }
;;;628    
;;;629            sample = blockSize & 0x3u;
0001aa  f0030603          AND      r6,r3,#3
;;;630            while(sample > 0u) {
0001ae  e02c              B        |L1.522|
                  |L1.432|
;;;631                Xn1a = *pIn++;
0001b0  ecf15a01          VLDM     r1!,{s11}
;;;632                Xn1b = *pIn++;
0001b4  ecb16a01          VLDM     r1!,{s12}
;;;633    
;;;634                p0a = b0 * Xn1a; 
0001b8  ee604a25          VMUL.F32 s9,s0,s11
;;;635                p0b = b0 * Xn1b; 
0001bc  ee205a06          VMUL.F32 s10,s0,s12
;;;636                p1a = b1 * Xn1a;
0001c0  ee207aa5          VMUL.F32 s14,s1,s11
;;;637                p1b = b1 * Xn1b;
0001c4  ee606a86          VMUL.F32 s13,s1,s12
;;;638                acc1a = p0a + d1a;
0001c8  ee744aa2          VADD.F32 s9,s9,s5
;;;639                acc1b = p0b + d1b;
0001cc  ee355a23          VADD.F32 s10,s10,s7
;;;640                p3a = a1 * acc1a;
0001d0  ee613aa4          VMUL.F32 s7,s3,s9
;;;641                p3b = a1 * acc1b;
0001d4  ee612a85          VMUL.F32 s5,s3,s10
;;;642                p2a = b2 * Xn1a;
0001d8  ee615a25          VMUL.F32 s11,s2,s11
;;;643                p2b = b2 * Xn1b;
0001dc  ee216a06          VMUL.F32 s12,s2,s12
;;;644                A1a = p1a + p3a;
0001e0  ee773a23          VADD.F32 s7,s14,s7
;;;645                A1b = p1b + p3b;
0001e4  ee767aa2          VADD.F32 s15,s13,s5
;;;646                p4a = a2 * acc1a;
0001e8  ee626a24          VMUL.F32 s13,s4,s9
;;;647                p4b = a2 * acc1b;
0001ec  ee227a05          VMUL.F32 s14,s4,s10
;;;648                d1a = A1a + d2a;
0001f0  ee732a83          VADD.F32 s5,s7,s6
;;;649                d1b = A1b + d2b;
0001f4  ee773a84          VADD.F32 s7,s15,s8
;;;650                d2a = p2a + p4a;
0001f8  ee353aa6          VADD.F32 s6,s11,s13
;;;651                d2b = p2b + p4b;
0001fc  ee364a07          VADD.F32 s8,s12,s14
;;;652    
;;;653                *pOut++ = acc1a;
000200  ece44a01          VSTM     r4!,{s9}
;;;654                *pOut++ = acc1b;
000204  eca45a01          VSTM     r4!,{s10}
;;;655    
;;;656                sample--;	       
000208  1e76              SUBS     r6,r6,#1
                  |L1.522|
00020a  2e00              CMP      r6,#0                 ;630
00020c  d1d0              BNE      |L1.432|
;;;657            }
;;;658    
;;;659            /* Store the updated state variables back into the state array */
;;;660            *pState++ = d1a;
00020e  ece52a01          VSTM     r5!,{s5}
;;;661            *pState++ = d2a;
000212  eca53a01          VSTM     r5!,{s6}
;;;662            *pState++ = d1b;
000216  ece53a01          VSTM     r5!,{s7}
;;;663            *pState++ = d2b;
00021a  eca54a01          VSTM     r5!,{s8}
;;;664    
;;;665            /* The current stage input is given as the output to the next stage */
;;;666            pIn = pDst;
;;;667    
;;;668            /*Reset the output working pointer */
;;;669            pOut = pDst;
00021e  4611              MOV      r1,r2
000220  460c              MOV      r4,r1
;;;670    
;;;671            /* decrement the loop counter */
;;;672            stage--;
000222  f1ac0c01          SUB      r12,r12,#1
;;;673    
;;;674        } while(stage > 0u);
000226  f1bc0f00          CMP      r12,#0
00022a  f47faef4          BNE      |L1.22|
;;;675    
;;;676    #endif 
;;;677    
;;;678    }
00022e  ecbd8b08          VPOP     {d8-d11}
000232  e8bd81f0          POP      {r4-r8,pc}
;;;679    LOW_OPTIMIZATION_EXIT
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_biquad_cascade_stereo_df2T_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___36_arm_biquad_cascade_stereo_df2T_f32_c_0da5ad1a____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___36_arm_biquad_cascade_stereo_df2T_f32_c_0da5ad1a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___36_arm_biquad_cascade_stereo_df2T_f32_c_0da5ad1a____REVSH|
#line 144
|__asm___36_arm_biquad_cascade_stereo_df2T_f32_c_0da5ad1a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___36_arm_biquad_cascade_stereo_df2T_f32_c_0da5ad1a____RRX|
#line 300
|__asm___36_arm_biquad_cascade_stereo_df2T_f32_c_0da5ad1a____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
