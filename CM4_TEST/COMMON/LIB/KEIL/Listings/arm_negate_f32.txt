; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_negate_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_negate_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_negate_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_negate_f32.c]
                          THUMB

                          AREA ||i.arm_negate_f32||, CODE, READONLY, ALIGN=1

                  arm_negate_f32 PROC
;;;73     
;;;74     void arm_negate_f32(
000000  0893              LSRS     r3,r2,#2
;;;75       float32_t * pSrc,
;;;76       float32_t * pDst,
;;;77       uint32_t blockSize)
;;;78     {
000002  e01a              B        |L1.58|
                  |L1.4|
;;;79       uint32_t blkCnt;                               /* loop counter */
;;;80     
;;;81     
;;;82     #ifndef ARM_MATH_CM0_FAMILY
;;;83     
;;;84     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;85       float32_t in1, in2, in3, in4;                  /* temporary variables */
;;;86     
;;;87       /*loop Unrolling */
;;;88       blkCnt = blockSize >> 2u;
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;91        ** a second loop below computes the remaining 1 to 3 samples. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94         /* read inputs from source */
;;;95         in1 = *pSrc;
000004  ed900a00          VLDR     s0,[r0,#0]
;;;96         in2 = *(pSrc + 1);
000008  edd01a01          VLDR     s3,[r0,#4]
;;;97         in3 = *(pSrc + 2);
00000c  edd00a02          VLDR     s1,[r0,#8]
;;;98         in4 = *(pSrc + 3);
000010  ed901a03          VLDR     s2,[r0,#0xc]
;;;99     
;;;100        /* negate the input */
;;;101        in1 = -in1;
000014  eeb10a40          VNEG.F32 s0,s0
;;;102        in2 = -in2;
000018  eef11a61          VNEG.F32 s3,s3
;;;103        in3 = -in3;
00001c  eef10a60          VNEG.F32 s1,s1
;;;104        in4 = -in4;
000020  eeb11a41          VNEG.F32 s2,s2
;;;105    
;;;106        /* store the result to destination */
;;;107        *pDst = in1;
000024  ed810a00          VSTR     s0,[r1,#0]
;;;108        *(pDst + 1) = in2;
000028  edc11a01          VSTR     s3,[r1,#4]
;;;109        *(pDst + 2) = in3;
00002c  edc10a02          VSTR     s1,[r1,#8]
;;;110        *(pDst + 3) = in4;
000030  ed811a03          VSTR     s2,[r1,#0xc]
;;;111    
;;;112        /* update pointers to process next samples */
;;;113        pSrc += 4u;
000034  3010              ADDS     r0,r0,#0x10
;;;114        pDst += 4u;
000036  3110              ADDS     r1,r1,#0x10
;;;115    
;;;116        /* Decrement the loop counter */
;;;117        blkCnt--;
000038  1e5b              SUBS     r3,r3,#1
                  |L1.58|
00003a  2b00              CMP      r3,#0                 ;92
00003c  d1e2              BNE      |L1.4|
;;;118      }
;;;119    
;;;120      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;121       ** No loop unrolling is used. */
;;;122      blkCnt = blockSize % 0x4u;
00003e  f0020203          AND      r2,r2,#3
;;;123    
;;;124    #else
;;;125    
;;;126      /* Run the below code for Cortex-M0 */
;;;127    
;;;128      /* Initialize blkCnt with number of samples */
;;;129      blkCnt = blockSize;
;;;130    
;;;131    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;132    
;;;133      while(blkCnt > 0u)
000042  e006              B        |L1.82|
                  |L1.68|
;;;134      {
;;;135        /* C = -A */
;;;136        /* Negate and then store the results in the destination buffer. */
;;;137        *pDst++ = -*pSrc++;
000044  ecb00a01          VLDM     r0!,{s0}
000048  eeb10a40          VNEG.F32 s0,s0
00004c  eca10a01          VSTM     r1!,{s0}
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
000050  1e52              SUBS     r2,r2,#1
                  |L1.82|
000052  2a00              CMP      r2,#0                 ;133
000054  d1f6              BNE      |L1.68|
;;;141      }
;;;142    }
000056  4770              BX       lr
;;;143    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_negate_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_f32_c_4ba6afb4____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_negate_f32_c_4ba6afb4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_f32_c_4ba6afb4____REVSH|
#line 144
|__asm___16_arm_negate_f32_c_4ba6afb4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_f32_c_4ba6afb4____RRX|
#line 300
|__asm___16_arm_negate_f32_c_4ba6afb4____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
