; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_sub_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sub_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_sub_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_sub_q7.c]
                          THUMB

                          AREA ||i.arm_sub_q7||, CODE, READONLY, ALIGN=2

                  arm_sub_q7 PROC
;;;65     
;;;66     void arm_sub_q7(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q7_t * pSrcA,
;;;68       q7_t * pSrcB,
;;;69       q7_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77     
;;;78       /*loop Unrolling */
;;;79       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e009              B        |L1.26|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C = A - B */
;;;86         /* Subtract and then store the results in the destination buffer 4 samples at a time. */
;;;87         *__SIMD32(pDst)++ = __QSUB8(*__SIMD32(pSrcA)++, *__SIMD32(pSrcB)++);
000006  bf00              NOP      
                  |L1.8|
000008  f8505b04          LDR      r5,[r0],#4
00000c  f8516b04          LDR      r6,[r1],#4
000010  fac5f516          QSUB8    r5,r5,r6
000014  f8425b04          STR      r5,[r2],#4
000018  1e64              SUBS     r4,r4,#1
                  |L1.26|
00001a  2c00              CMP      r4,#0                 ;83
00001c  d1f4              BNE      |L1.8|
;;;88     
;;;89         /* Decrement the loop counter */
;;;90         blkCnt--;
;;;91       }
;;;92     
;;;93       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;94        ** No loop unrolling is used. */
;;;95       blkCnt = blockSize % 0x4u;
00001e  f0030303          AND      r3,r3,#3
;;;96     
;;;97       while(blkCnt > 0u)
000022  e009              B        |L1.56|
                  |L1.36|
;;;98       {
;;;99         /* C = A - B */
;;;100        /* Subtract and then store the result in the destination buffer. */
;;;101        *pDst++ = __SSAT(*pSrcA++ - *pSrcB++, 8);
000024  f9104b01          LDRSB    r4,[r0],#1
000028  f9115b01          LDRSB    r5,[r1],#1
00002c  1b64              SUBS     r4,r4,r5
00002e  f3040407          SSAT     r4,#8,r4
000032  f8024b01          STRB     r4,[r2],#1
000036  1e5b              SUBS     r3,r3,#1
                  |L1.56|
000038  2b00              CMP      r3,#0                 ;97
00003a  d1f3              BNE      |L1.36|
;;;102    
;;;103        /* Decrement the loop counter */
;;;104        blkCnt--;
;;;105      }
;;;106    
;;;107    #else
;;;108    
;;;109      /* Run the below code for Cortex-M0 */
;;;110    
;;;111      /* Initialize blkCnt with number of samples */
;;;112      blkCnt = blockSize;
;;;113    
;;;114      while(blkCnt > 0u)
;;;115      {
;;;116        /* C = A - B */
;;;117        /* Subtract and then store the result in the destination buffer. */
;;;118        *pDst++ = (q7_t) __SSAT((q15_t) * pSrcA++ - *pSrcB++, 8);
;;;119    
;;;120        /* Decrement the loop counter */
;;;121        blkCnt--;
;;;122      }
;;;123    
;;;124    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;125    
;;;126    
;;;127    }
00003c  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_sub_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_sub_q7_c_595b6b32____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___12_arm_sub_q7_c_595b6b32____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_sub_q7_c_595b6b32____REVSH|
#line 144
|__asm___12_arm_sub_q7_c_595b6b32____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_sub_q7_c_595b6b32____RRX|
#line 300
|__asm___12_arm_sub_q7_c_595b6b32____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
