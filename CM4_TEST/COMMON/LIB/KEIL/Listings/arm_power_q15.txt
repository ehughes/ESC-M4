; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_power_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_power_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_power_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_power_q15.c]
                          THUMB

                          AREA ||i.arm_power_q15||, CODE, READONLY, ALIGN=1

                  arm_power_q15 PROC
;;;72     
;;;73     void arm_power_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;74       q15_t * pSrc,
;;;75       uint32_t blockSize,
;;;76       q63_t * pResult)
;;;77     {
;;;78       q63_t sum = 0;                                 /* Temporary result storage */
000002  2300              MOVS     r3,#0
000004  461c              MOV      r4,r3
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83     
;;;84       q31_t in32;                                    /* Temporary variable to store input value */
;;;85       q15_t in16;                                    /* Temporary variable to store input value */
;;;86       uint32_t blkCnt;                               /* loop counter */
;;;87     
;;;88     
;;;89       /* loop Unrolling */
;;;90       blkCnt = blockSize >> 2u;
000006  088d              LSRS     r5,r1,#2
000008  e007              B        |L1.26|
                  |L1.10|
;;;91     
;;;92       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;93        ** a second loop below computes the remaining 1 to 3 samples. */
;;;94       while(blkCnt > 0u)
;;;95       {
;;;96         /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;97         /* Compute Power and then store the result in a temporary variable, sum. */
;;;98         in32 = *__SIMD32(pSrc)++;
00000a  6806              LDR      r6,[r0,#0]
;;;99         sum = __SMLALD(in32, in32, sum);
00000c  fbc634c6          SMLALD   r3,r4,r6,r6
;;;100        in32 = *__SIMD32(pSrc)++;
000010  6846              LDR      r6,[r0,#4]
000012  3008              ADDS     r0,r0,#8
;;;101        sum = __SMLALD(in32, in32, sum);
000014  fbc634c6          SMLALD   r3,r4,r6,r6
;;;102    
;;;103        /* Decrement the loop counter */
;;;104        blkCnt--;
000018  1e6d              SUBS     r5,r5,#1
                  |L1.26|
00001a  2d00              CMP      r5,#0                 ;94
00001c  d1f5              BNE      |L1.10|
;;;105      }
;;;106    
;;;107      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;108       ** No loop unrolling is used. */
;;;109      blkCnt = blockSize % 0x4u;
00001e  f0010103          AND      r1,r1,#3
;;;110    
;;;111      while(blkCnt > 0u)
000022  e004              B        |L1.46|
                  |L1.36|
;;;112      {
;;;113        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;114        /* Compute Power and then store the result in a temporary variable, sum. */
;;;115        in16 = *pSrc++;
000024  f9305b02          LDRSH    r5,[r0],#2
;;;116        sum = __SMLALD(in16, in16, sum);
000028  fbc534c5          SMLALD   r3,r4,r5,r5
;;;117    
;;;118        /* Decrement the loop counter */
;;;119        blkCnt--;
00002c  1e49              SUBS     r1,r1,#1
                  |L1.46|
00002e  2900              CMP      r1,#0                 ;111
000030  d1f8              BNE      |L1.36|
;;;120      }
;;;121    
;;;122    #else
;;;123    
;;;124      /* Run the below code for Cortex-M0 */
;;;125    
;;;126      q15_t in;                                      /* Temporary variable to store input value */
;;;127      uint32_t blkCnt;                               /* loop counter */
;;;128    
;;;129    
;;;130      /* Loop over blockSize number of values */
;;;131      blkCnt = blockSize;
;;;132    
;;;133      while(blkCnt > 0u)
;;;134      {
;;;135        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;136        /* Compute Power and then store the result in a temporary variable, sum. */
;;;137        in = *pSrc++;
;;;138        sum += ((q31_t) in * in);
;;;139    
;;;140        /* Decrement the loop counter */
;;;141        blkCnt--;
;;;142      }
;;;143    
;;;144    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;145    
;;;146      /* Store the results in 34.30 format  */
;;;147      *pResult = sum;
000032  c218              STM      r2!,{r3,r4}
;;;148    }
000034  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_power_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_q15_c_9a0030eb____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_power_q15_c_9a0030eb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_q15_c_9a0030eb____REVSH|
#line 144
|__asm___15_arm_power_q15_c_9a0030eb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_q15_c_9a0030eb____RRX|
#line 300
|__asm___15_arm_power_q15_c_9a0030eb____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
