; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mag_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_f32.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_f32||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mag_f32 PROC
;;;83     
;;;84     void arm_cmplx_mag_f32(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85       float32_t * pSrc,
;;;86       float32_t * pDst,
;;;87       uint32_t numSamples)
;;;88     {
000004  4690              MOV      r8,r2
000006  460d              MOV      r5,r1
000008  4604              MOV      r4,r0
;;;89       float32_t realIn, imagIn;                      /* Temporary variables to hold input values */
;;;90     
;;;91     #ifndef ARM_MATH_CM0_FAMILY
;;;92     
;;;93       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;94       uint32_t blkCnt;                               /* loop counter */
;;;95     
;;;96       /*loop Unrolling */
;;;97       blkCnt = numSamples >> 2u;
00000a  0897              LSRS     r7,r2,#2
00000c  e035              B        |L1.122|
;;;98     
;;;99       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;100       ** a second loop below computes the remaining 1 to 3 samples. */
;;;101      while(blkCnt > 0u)
;;;102      {
;;;103    
;;;104        /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
;;;105        realIn = *pSrc++;
00000e  bf00              NOP      
                  |L1.16|
000010  ed940a00          VLDR     s0,[r4,#0]
;;;106        imagIn = *pSrc++;
000014  edd40a01          VLDR     s1,[r4,#4]
;;;107        /* store the result in the destination buffer. */
;;;108        arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
000018  4628              MOV      r0,r5
00001a  ee200a00          VMUL.F32 s0,s0,s0
00001e  1d2d              ADDS     r5,r5,#4
000020  3408              ADDS     r4,r4,#8
000022  ee000aa0          VMLA.F32 s0,s1,s1
000026  f7fffffe          BL       arm_sqrt_f32
;;;109    
;;;110        realIn = *pSrc++;
00002a  ed940a00          VLDR     s0,[r4,#0]
;;;111        imagIn = *pSrc++;
00002e  edd40a01          VLDR     s1,[r4,#4]
;;;112        arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
000032  1d2e              ADDS     r6,r5,#4
000034  ee200a00          VMUL.F32 s0,s0,s0
000038  4628              MOV      r0,r5
00003a  3408              ADDS     r4,r4,#8
00003c  ee000aa0          VMLA.F32 s0,s1,s1
000040  f7fffffe          BL       arm_sqrt_f32
;;;113    
;;;114        realIn = *pSrc++;
000044  ed940a00          VLDR     s0,[r4,#0]
;;;115        imagIn = *pSrc++;
000048  edd40a01          VLDR     s1,[r4,#4]
;;;116        arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
00004c  4630              MOV      r0,r6
00004e  ee200a00          VMUL.F32 s0,s0,s0
000052  1d36              ADDS     r6,r6,#4
000054  3408              ADDS     r4,r4,#8
000056  ee000aa0          VMLA.F32 s0,s1,s1
00005a  f7fffffe          BL       arm_sqrt_f32
;;;117    
;;;118        realIn = *pSrc++;
00005e  ed940a00          VLDR     s0,[r4,#0]
;;;119        imagIn = *pSrc++;
000062  edd40a01          VLDR     s1,[r4,#4]
;;;120        arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
000066  1d35              ADDS     r5,r6,#4
000068  ee200a00          VMUL.F32 s0,s0,s0
00006c  4630              MOV      r0,r6
00006e  3408              ADDS     r4,r4,#8
000070  ee000aa0          VMLA.F32 s0,s1,s1
000074  f7fffffe          BL       arm_sqrt_f32
000078  1e7f              SUBS     r7,r7,#1
                  |L1.122|
00007a  2f00              CMP      r7,#0                 ;101
00007c  d1c8              BNE      |L1.16|
;;;121    
;;;122    
;;;123        /* Decrement the loop counter */
;;;124        blkCnt--;
;;;125      }
;;;126    
;;;127      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;128       ** No loop unrolling is used. */
;;;129      blkCnt = numSamples % 0x4u;
00007e  f0080603          AND      r6,r8,#3
;;;130    
;;;131      while(blkCnt > 0u)
000082  e00d              B        |L1.160|
                  |L1.132|
;;;132      {
;;;133        /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
;;;134        realIn = *pSrc++;
000084  ed940a00          VLDR     s0,[r4,#0]
;;;135        imagIn = *pSrc++;
000088  edd40a01          VLDR     s1,[r4,#4]
;;;136        /* store the result in the destination buffer. */
;;;137        arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
00008c  4628              MOV      r0,r5
00008e  ee200a00          VMUL.F32 s0,s0,s0
000092  1d2d              ADDS     r5,r5,#4
000094  3408              ADDS     r4,r4,#8
000096  ee000aa0          VMLA.F32 s0,s1,s1
00009a  f7fffffe          BL       arm_sqrt_f32
00009e  1e76              SUBS     r6,r6,#1
                  |L1.160|
0000a0  2e00              CMP      r6,#0                 ;131
0000a2  d1ef              BNE      |L1.132|
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
;;;141      }
;;;142    
;;;143    #else
;;;144    
;;;145      /* Run the below code for Cortex-M0 */
;;;146    
;;;147      while(numSamples > 0u)
;;;148      {
;;;149        /* out = sqrt((real * real) + (imag * imag)) */
;;;150        realIn = *pSrc++;
;;;151        imagIn = *pSrc++;
;;;152        /* store the result in the destination buffer. */
;;;153        arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
;;;154    
;;;155        /* Decrement the loop counter */
;;;156        numSamples--;
;;;157      }
;;;158    
;;;159    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;160    
;;;161    }
0000a4  e8bd81f0          POP      {r4-r8,pc}
;;;162    
                          ENDP


                          AREA ||i.arm_sqrt_f32||, CODE, READONLY, ALIGN=2

                  arm_sqrt_f32 PROC
;;;6088   
;;;6089     static __INLINE arm_status arm_sqrt_f32(
000000  eeb50ac0          VCMPE.F32 s0,#0.0
;;;6090     float32_t in,
;;;6091     float32_t * pOut)
;;;6092     {
;;;6093       if(in > 0)
000004  eef1fa10          VMRS     APSR_nzcv,FPSCR
000008  dd05              BLE      |L2.22|
;;;6094       {
;;;6095   
;;;6096   //      #if __FPU_USED
;;;6097   #if (__FPU_USED == 1) && defined ( __CC_ARM   )
;;;6098         *pOut = __sqrtf(in);
00000a  eef10ac0          VSQRT.F32 s1,s0
00000e  edc00a00          VSTR     s1,[r0,#0]
;;;6099   #else
;;;6100         *pOut = sqrtf(in);
;;;6101   #endif
;;;6102   
;;;6103         return (ARM_MATH_SUCCESS);
000012  2000              MOVS     r0,#0
;;;6104       }
;;;6105       else
;;;6106       {
;;;6107         *pOut = 0.0f;
;;;6108         return (ARM_MATH_ARGUMENT_ERROR);
;;;6109       }
;;;6110   
;;;6111     }
000014  4770              BX       lr
                  |L2.22|
000016  ed9f0a03          VLDR     s0,|L2.36|
00001a  ed800a00          VSTR     s0,[r0,#0]            ;6107
00001e  f04f30ff          MOV      r0,#0xffffffff        ;6108
000022  4770              BX       lr
;;;6112   
                          ENDP

                  |L2.36|
000024  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_f32_c_bcd69883____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_cmplx_mag_f32_c_bcd69883____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_f32_c_bcd69883____REVSH|
#line 144
|__asm___19_arm_cmplx_mag_f32_c_bcd69883____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_f32_c_bcd69883____RRX|
#line 300
|__asm___19_arm_cmplx_mag_f32_c_bcd69883____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
