; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_f32.c]
                          THUMB

                          AREA ||i.arm_conv_f32||, CODE, READONLY, ALIGN=2

                  arm_conv_f32 PROC
;;;123    
;;;124    void arm_conv_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;125      float32_t * pSrcA,
;;;126      uint32_t srcALen,
;;;127      float32_t * pSrcB,
;;;128      uint32_t srcBLen,
;;;129      float32_t * pDst)
;;;130    {
;;;131    
;;;132    
;;;133    #ifndef ARM_MATH_CM0_FAMILY
;;;134    
;;;135      /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;136    
;;;137      float32_t *pIn1;                               /* inputA pointer */
;;;138      float32_t *pIn2;                               /* inputB pointer */
;;;139      float32_t *pOut = pDst;                        /* output pointer */
;;;140      float32_t *px;                                 /* Intermediate inputA pointer */
;;;141      float32_t *py;                                 /* Intermediate inputB pointer */
;;;142      float32_t *pSrc1, *pSrc2;                      /* Intermediate pointers */
;;;143      float32_t sum, acc0, acc1, acc2, acc3;         /* Accumulator */
;;;144      float32_t x0, x1, x2, x3, c0;                  /* Temporary variables to hold state and coefficient values */
;;;145      uint32_t j, k, count, blkCnt, blockSize1, blockSize2, blockSize3;     /* loop counters */
;;;146    
;;;147      /* The algorithm implementation is based on the lengths of the inputs. */
;;;148      /* srcB is always made to slide across srcA. */
;;;149      /* So srcBLen is always considered as shorter or equal to srcALen */
;;;150      if(srcALen >= srcBLen)
000004  4299              CMP      r1,r3
000006  9d09              LDR      r5,[sp,#0x24]
000008  d302              BCC      |L1.16|
;;;151      {
;;;152        /* Initialization of inputA pointer */
;;;153        pIn1 = pSrcA;
00000a  4604              MOV      r4,r0
;;;154    
;;;155        /* Initialization of inputB pointer */
;;;156        pIn2 = pSrcB;
00000c  4691              MOV      r9,r2
00000e  e004              B        |L1.26|
                  |L1.16|
;;;157      }
;;;158      else
;;;159      {
;;;160        /* Initialization of inputA pointer */
;;;161        pIn1 = pSrcB;
;;;162    
;;;163        /* Initialization of inputB pointer */
;;;164        pIn2 = pSrcA;
000010  4681              MOV      r9,r0
;;;165    
;;;166        /* srcBLen is always considered as shorter or equal to srcALen */
;;;167        j = srcBLen;
000012  4618              MOV      r0,r3
;;;168        srcBLen = srcALen;
000014  460b              MOV      r3,r1
000016  4614              MOV      r4,r2                 ;161
;;;169        srcALen = j;
000018  4601              MOV      r1,r0
                  |L1.26|
;;;170      }
;;;171    
;;;172      /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;173      /* The function is internally    
;;;174       * divided into three stages according to the number of multiplications that has to be    
;;;175       * taken place between inputA samples and inputB samples. In the first stage of the    
;;;176       * algorithm, the multiplications increase by one for every iteration.    
;;;177       * In the second stage of the algorithm, srcBLen number of multiplications are done.    
;;;178       * In the third stage of the algorithm, the multiplications decrease by one    
;;;179       * for every iteration. */
;;;180    
;;;181      /* The algorithm is implemented in three stages.    
;;;182         The loop counters of each stage is initiated here. */
;;;183      blockSize1 = srcBLen - 1u;
00001a  1e5f              SUBS     r7,r3,#1
;;;184      blockSize2 = srcALen - (srcBLen - 1u);
00001c  1ac8              SUBS     r0,r1,r3
00001e  f1000a01          ADD      r10,r0,#1
;;;185      blockSize3 = blockSize1;
000022  463a              MOV      r2,r7
;;;186    
;;;187      /* --------------------------    
;;;188       * initializations of stage1    
;;;189       * -------------------------*/
;;;190    
;;;191      /* sum = x[0] * y[0]    
;;;192       * sum = x[0] * y[1] + x[1] * y[0]    
;;;193       * ....    
;;;194       * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]    
;;;195       */
;;;196    
;;;197      /* In this stage the MAC operations are increased by 1 for every iteration.    
;;;198         The count variable holds the number of MAC operations performed */
;;;199      count = 1u;
000024  f04f0b01          MOV      r11,#1
;;;200    
;;;201      /* Working pointer of inputA */
;;;202      px = pIn1;
000028  4620              MOV      r0,r4
;;;203    
;;;204      /* Working pointer of inputB */
;;;205      py = pIn2;
00002a  464e              MOV      r6,r9
;;;206    
;;;207    
;;;208      /* ------------------------    
;;;209       * Stage1 process    
;;;210       * ----------------------*/
;;;211    
;;;212      /* The first stage starts here */
;;;213      while(blockSize1 > 0u)
;;;214      {
;;;215        /* Accumulator is made zero for every iteration */
;;;216        sum = 0.0f;
00002c  ed9f0ab3          VLDR     s0,|L1.764|
000030  e03c              B        |L1.172|
000032  bf00              NOP      
                  |L1.52|
000034  eef00a40          VMOV.F32 s1,s0
;;;217    
;;;218        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;219        k = count >> 2u;
000038  ea4f0c9b          LSR      r12,r11,#2
;;;220    
;;;221        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;222         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;223        while(k > 0u)
00003c  e01c              B        |L1.120|
;;;224        {
;;;225          /* x[0] * y[srcBLen - 1] */
;;;226          sum += *px++ * *py--;
00003e  bf00              NOP      
                  |L1.64|
000040  ed901a00          VLDR     s2,[r0,#0]
000044  edd61a00          VLDR     s3,[r6,#0]
;;;227    
;;;228          /* x[1] * y[srcBLen - 2] */
;;;229          sum += *px++ * *py--;
;;;230    
;;;231          /* x[2] * y[srcBLen - 3] */
;;;232          sum += *px++ * *py--;
;;;233    
;;;234          /* x[3] * y[srcBLen - 4] */
;;;235          sum += *px++ * *py--;
000048  f1ac0c01          SUB      r12,r12,#1
00004c  ee410a21          VMLA.F32 s1,s2,s3              ;226
000050  ed901a01          VLDR     s2,[r0,#4]            ;229
000054  ed561a01          VLDR     s3,[r6,#-4]           ;229
000058  ee410a21          VMLA.F32 s1,s2,s3              ;229
00005c  ed901a02          VLDR     s2,[r0,#8]            ;232
000060  ed561a02          VLDR     s3,[r6,#-8]           ;232
000064  ee410a21          VMLA.F32 s1,s2,s3              ;232
000068  ed901a03          VLDR     s2,[r0,#0xc]
00006c  ed561a03          VLDR     s3,[r6,#-0xc]
000070  3010              ADDS     r0,r0,#0x10
000072  3e10              SUBS     r6,r6,#0x10
000074  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.120|
000078  f1bc0f00          CMP      r12,#0                ;223
00007c  d1e0              BNE      |L1.64|
;;;236    
;;;237          /* Decrement the loop counter */
;;;238          k--;
;;;239        }
;;;240    
;;;241        /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;242         ** No loop unrolling is used. */
;;;243        k = count % 0x4u;
00007e  f00b0c03          AND      r12,r11,#3
;;;244    
;;;245        while(k > 0u)
000082  e008              B        |L1.150|
                  |L1.132|
;;;246        {
;;;247          /* Perform the multiply-accumulate */
;;;248          sum += *px++ * *py--;
000084  ecb01a01          VLDM     r0!,{s2}
000088  edd61a00          VLDR     s3,[r6,#0]
00008c  1f36              SUBS     r6,r6,#4
00008e  f1ac0c01          SUB      r12,r12,#1
000092  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.150|
000096  f1bc0f00          CMP      r12,#0                ;245
00009a  d1f3              BNE      |L1.132|
;;;249    
;;;250          /* Decrement the loop counter */
;;;251          k--;
;;;252        }
;;;253    
;;;254        /* Store the result in the accumulator in the destination buffer. */
;;;255        *pOut++ = sum;
;;;256    
;;;257        /* Update the inputA and inputB pointers for next MAC calculation */
;;;258        py = pIn2 + count;
00009c  eb09068b          ADD      r6,r9,r11,LSL #2
0000a0  ece50a01          VSTM     r5!,{s1}              ;255
;;;259        px = pIn1;
0000a4  4620              MOV      r0,r4
;;;260    
;;;261        /* Increment the MAC count */
;;;262        count++;
0000a6  f10b0b01          ADD      r11,r11,#1
0000aa  1e7f              SUBS     r7,r7,#1
                  |L1.172|
0000ac  2f00              CMP      r7,#0                 ;213
0000ae  d1c1              BNE      |L1.52|
;;;263    
;;;264        /* Decrement the loop counter */
;;;265        blockSize1--;
;;;266      }
;;;267    
;;;268      /* --------------------------    
;;;269       * Initializations of stage2    
;;;270       * ------------------------*/
;;;271    
;;;272      /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]    
;;;273       * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]    
;;;274       * ....    
;;;275       * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]    
;;;276       */
;;;277    
;;;278      /* Working pointer of inputA */
;;;279      px = pIn1;
;;;280    
;;;281      /* Working pointer of inputB */
;;;282      pSrc2 = pIn2 + (srcBLen - 1u);
0000b0  eb090e83          ADD      lr,r9,r3,LSL #2
0000b4  f1ae0604          SUB      r6,lr,#4
0000b8  46b3              MOV      r11,r6
;;;283      py = pSrc2;
;;;284    
;;;285      /* count is index by which the pointer pIn1 to be incremented */
;;;286      count = 0u;
;;;287    
;;;288      /* -------------------    
;;;289       * Stage2 process    
;;;290       * ------------------*/
;;;291    
;;;292      /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.    
;;;293       * So, to loop unroll over blockSize2,    
;;;294       * srcBLen should be greater than or equal to 4 */
;;;295      if(srcBLen >= 4u)
0000ba  2b04              CMP      r3,#4
0000bc  d37d              BCC      |L1.442|
;;;296      {
;;;297        /* Loop unroll over blockSize2, by 4 */
;;;298        blkCnt = blockSize2 >> 2u;
0000be  ea4f099a          LSR      r9,r10,#2
;;;299    
;;;300        while(blkCnt > 0u)
0000c2  e074              B        |L1.430|
                  |L1.196|
;;;301        {
;;;302          /* Set all accumulators to zero */
;;;303          acc0 = 0.0f;
0000c4  eef00a40          VMOV.F32 s1,s0
;;;304          acc1 = 0.0f;
;;;305          acc2 = 0.0f;
;;;306          acc3 = 0.0f;
;;;307    
;;;308          /* read x[0], x[1], x[2] samples */
;;;309          x0 = *(px++);
0000c8  edd03a00          VLDR     s7,[r0,#0]
;;;310          x1 = *(px++);
0000cc  ed903a01          VLDR     s6,[r0,#4]
;;;311          x2 = *(px++);
0000d0  ed902a02          VLDR     s4,[r0,#8]
0000d4  eeb01a60          VMOV.F32 s2,s1                 ;304
0000d8  eef02a60          VMOV.F32 s5,s1                 ;305
0000dc  eef01a60          VMOV.F32 s3,s1                 ;306
;;;312    
;;;313          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;314          k = srcBLen >> 2u;
0000e0  ea4f0893          LSR      r8,r3,#2
0000e4  f110000c          ADDS.W   r0,r0,#0xc
                  |L1.232|
;;;315    
;;;316          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;317           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;318          do
;;;319          {
;;;320            /* Read y[srcBLen - 1] sample */
;;;321            c0 = *(py--);
0000e8  edd64a00          VLDR     s9,[r6,#0]
;;;322    
;;;323            /* Read x[3] sample */
;;;324            x3 = *(px);
0000ec  ed904a00          VLDR     s8,[r0,#0]
0000f0  eeb05a60          VMOV.F32 s10,s1
;;;325    
;;;326            /* Perform the multiply-accumulate */
;;;327            /* acc0 +=  x[0] * y[srcBLen - 1] */
;;;328            acc0 += x0 * c0;
;;;329    
;;;330            /* acc1 +=  x[1] * y[srcBLen - 1] */
;;;331            acc1 += x1 * c0;
;;;332    
;;;333            /* acc2 +=  x[2] * y[srcBLen - 1] */
;;;334            acc2 += x2 * c0;
;;;335    
;;;336            /* acc3 +=  x[3] * y[srcBLen - 1] */
;;;337            acc3 += x3 * c0;
;;;338    
;;;339            /* Read y[srcBLen - 2] sample */
;;;340            c0 = *(py--);
0000f4  ed560a01          VLDR     s1,[r6,#-4]
0000f8  ee035aa4          VMLA.F32 s10,s7,s9             ;328
0000fc  ee031a24          VMLA.F32 s2,s6,s9              ;331
000100  ee422a24          VMLA.F32 s5,s4,s9              ;334
000104  ee441a24          VMLA.F32 s3,s8,s9              ;337
;;;341    
;;;342            /* Read x[4] sample */
;;;343            x0 = *(px + 1u);
000108  edd03a01          VLDR     s7,[r0,#4]
;;;344    
;;;345            /* Perform the multiply-accumulate */
;;;346            /* acc0 +=  x[1] * y[srcBLen - 2] */
;;;347            acc0 += x1 * c0;
;;;348            /* acc1 +=  x[2] * y[srcBLen - 2] */
;;;349            acc1 += x2 * c0;
;;;350            /* acc2 +=  x[3] * y[srcBLen - 2] */
;;;351            acc2 += x3 * c0;
;;;352            /* acc3 +=  x[4] * y[srcBLen - 2] */
;;;353            acc3 += x0 * c0;
;;;354    
;;;355            /* Read y[srcBLen - 3] sample */
;;;356            c0 = *(py--);
00010c  ed564a02          VLDR     s9,[r6,#-8]
000110  ee035a20          VMLA.F32 s10,s6,s1             ;347
000114  ee021a20          VMLA.F32 s2,s4,s1              ;349
000118  ee442a20          VMLA.F32 s5,s8,s1              ;351
00011c  ee431aa0          VMLA.F32 s3,s7,s1              ;353
;;;357    
;;;358            /* Read x[5] sample */
;;;359            x1 = *(px + 2u);
000120  ed903a02          VLDR     s6,[r0,#8]
;;;360    
;;;361            /* Perform the multiply-accumulates */
;;;362            /* acc0 +=  x[2] * y[srcBLen - 3] */
;;;363            acc0 += x2 * c0;
000124  ee025a24          VMLA.F32 s10,s4,s9
;;;364            /* acc1 +=  x[3] * y[srcBLen - 2] */
;;;365            acc1 += x3 * c0;
000128  ee041a24          VMLA.F32 s2,s8,s9
;;;366            /* acc2 +=  x[4] * y[srcBLen - 2] */
;;;367            acc2 += x0 * c0;
00012c  ee432aa4          VMLA.F32 s5,s7,s9
;;;368            /* acc3 +=  x[5] * y[srcBLen - 2] */
;;;369            acc3 += x1 * c0;
000130  ee431a24          VMLA.F32 s3,s6,s9
;;;370    
;;;371            /* Read y[srcBLen - 4] sample */
;;;372            c0 = *(py--);
000134  ed564a03          VLDR     s9,[r6,#-0xc]
;;;373    
;;;374            /* Read x[6] sample */
;;;375            x2 = *(px + 3u);
000138  ed902a03          VLDR     s4,[r0,#0xc]
00013c  eef00a45          VMOV.F32 s1,s10                ;363
;;;376            px += 4u;
;;;377    
;;;378            /* Perform the multiply-accumulates */
;;;379            /* acc0 +=  x[3] * y[srcBLen - 4] */
;;;380            acc0 += x3 * c0;
;;;381            /* acc1 +=  x[4] * y[srcBLen - 4] */
;;;382            acc1 += x0 * c0;
000140  ee031aa4          VMLA.F32 s2,s7,s9
000144  ee440a24          VMLA.F32 s1,s8,s9              ;380
;;;383            /* acc2 +=  x[5] * y[srcBLen - 4] */
;;;384            acc2 += x1 * c0;
000148  ee432a24          VMLA.F32 s5,s6,s9
;;;385            /* acc3 +=  x[6] * y[srcBLen - 4] */
;;;386            acc3 += x2 * c0;
00014c  ee421a24          VMLA.F32 s3,s4,s9
000150  3010              ADDS     r0,r0,#0x10
000152  3e10              SUBS     r6,r6,#0x10
000154  f1b80801          SUBS     r8,r8,#1
;;;387    
;;;388    
;;;389          } while(--k);
000158  d1c6              BNE      |L1.232|
;;;390    
;;;391          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;392           ** No loop unrolling is used. */
;;;393          k = srcBLen % 0x4u;
00015a  f0030c03          AND      r12,r3,#3
;;;394    
;;;395          while(k > 0u)
00015e  e014              B        |L1.394|
                  |L1.352|
;;;396          {
;;;397            /* Read y[srcBLen - 5] sample */
;;;398            c0 = *(py--);
000160  ed964a00          VLDR     s8,[r6,#0]
;;;399    
;;;400            /* Read x[7] sample */
;;;401            x3 = *(px++);
;;;402    
;;;403            /* Perform the multiply-accumulates */
;;;404            /* acc0 +=  x[4] * y[srcBLen - 5] */
;;;405            acc0 += x0 * c0;
;;;406            /* acc1 +=  x[5] * y[srcBLen - 5] */
;;;407            acc1 += x1 * c0;
;;;408            /* acc2 +=  x[6] * y[srcBLen - 5] */
;;;409            acc2 += x2 * c0;
;;;410            /* acc3 +=  x[7] * y[srcBLen - 5] */
;;;411            acc3 += x3 * c0;
;;;412    
;;;413            /* Reuse the present samples for the next MAC */
;;;414            x0 = x1;
;;;415            x1 = x2;
;;;416            x2 = x3;
000164  1f36              SUBS     r6,r6,#4
000166  ecf04a01          VLDM     r0!,{s9}              ;401
00016a  ee430a84          VMLA.F32 s1,s7,s8              ;405
00016e  ee031a04          VMLA.F32 s2,s6,s8              ;407
000172  ee422a04          VMLA.F32 s5,s4,s8              ;409
000176  eef03a43          VMOV.F32 s7,s6                 ;414
00017a  ee441a84          VMLA.F32 s3,s9,s8              ;411
00017e  eeb03a42          VMOV.F32 s6,s4                 ;415
000182  eeb02a64          VMOV.F32 s4,s9
000186  f1ac0c01          SUB      r12,r12,#1
                  |L1.394|
00018a  f1bc0f00          CMP      r12,#0                ;395
00018e  d1e7              BNE      |L1.352|
;;;417    
;;;418            /* Decrement the loop counter */
;;;419            k--;
;;;420          }
;;;421    
;;;422          /* Store the result in the accumulator in the destination buffer. */
;;;423          *pOut++ = acc0;
000190  edc50a00          VSTR     s1,[r5,#0]
;;;424          *pOut++ = acc1;
000194  ed851a01          VSTR     s2,[r5,#4]
;;;425          *pOut++ = acc2;
000198  edc52a02          VSTR     s5,[r5,#8]
;;;426          *pOut++ = acc3;
00019c  1d3f              ADDS     r7,r7,#4
00019e  edc51a03          VSTR     s3,[r5,#0xc]
;;;427    
;;;428          /* Increment the pointer pIn1 index, count by 4 */
;;;429          count += 4u;
;;;430    
;;;431          /* Update the inputA and inputB pointers for next MAC calculation */
;;;432          px = pIn1 + count;
0001a2  eb040087          ADD      r0,r4,r7,LSL #2
;;;433          py = pSrc2;
0001a6  465e              MOV      r6,r11
;;;434    
;;;435    
;;;436          /* Decrement the loop counter */
;;;437          blkCnt--;
0001a8  f1a90901          SUB      r9,r9,#1
0001ac  3510              ADDS     r5,r5,#0x10
                  |L1.430|
0001ae  f1b90f00          CMP      r9,#0                 ;300
0001b2  d187              BNE      |L1.196|
;;;438        }
;;;439    
;;;440    
;;;441        /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.    
;;;442         ** No loop unrolling is used. */
;;;443        blkCnt = blockSize2 % 0x4u;
0001b4  f00a0903          AND      r9,r10,#3
;;;444    
;;;445        while(blkCnt > 0u)
0001b8  e03c              B        |L1.564|
                  |L1.442|
0001ba  e03f              B        |L1.572|
                  |L1.444|
;;;446        {
;;;447          /* Accumulator is made zero for every iteration */
;;;448          sum = 0.0f;
0001bc  eef00a40          VMOV.F32 s1,s0
;;;449    
;;;450          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;451          k = srcBLen >> 2u;
0001c0  ea4f0c93          LSR      r12,r3,#2
;;;452    
;;;453          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;454           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;455          while(k > 0u)
0001c4  e01c              B        |L1.512|
;;;456          {
;;;457            /* Perform the multiply-accumulates */
;;;458            sum += *px++ * *py--;
0001c6  bf00              NOP      
                  |L1.456|
0001c8  ed901a00          VLDR     s2,[r0,#0]
0001cc  edd61a00          VLDR     s3,[r6,#0]
;;;459            sum += *px++ * *py--;
;;;460            sum += *px++ * *py--;
;;;461            sum += *px++ * *py--;
0001d0  f1ac0c01          SUB      r12,r12,#1
0001d4  ee410a21          VMLA.F32 s1,s2,s3              ;458
0001d8  ed901a01          VLDR     s2,[r0,#4]            ;459
0001dc  ed561a01          VLDR     s3,[r6,#-4]           ;459
0001e0  ee410a21          VMLA.F32 s1,s2,s3              ;459
0001e4  ed901a02          VLDR     s2,[r0,#8]            ;460
0001e8  ed561a02          VLDR     s3,[r6,#-8]           ;460
0001ec  ee410a21          VMLA.F32 s1,s2,s3              ;460
0001f0  ed901a03          VLDR     s2,[r0,#0xc]
0001f4  ed561a03          VLDR     s3,[r6,#-0xc]
0001f8  3010              ADDS     r0,r0,#0x10
0001fa  3e10              SUBS     r6,r6,#0x10
0001fc  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.512|
000200  f1bc0f00          CMP      r12,#0                ;455
000204  d1e0              BNE      |L1.456|
;;;462    
;;;463            /* Decrement the loop counter */
;;;464            k--;
;;;465          }
;;;466    
;;;467          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;468           ** No loop unrolling is used. */
;;;469          k = srcBLen % 0x4u;
000206  f0030c03          AND      r12,r3,#3
;;;470    
;;;471          while(k > 0u)
00020a  e008              B        |L1.542|
                  |L1.524|
;;;472          {
;;;473            /* Perform the multiply-accumulate */
;;;474            sum += *px++ * *py--;
00020c  ecb01a01          VLDM     r0!,{s2}
000210  edd61a00          VLDR     s3,[r6,#0]
000214  1f36              SUBS     r6,r6,#4
000216  f1ac0c01          SUB      r12,r12,#1
00021a  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.542|
00021e  f1bc0f00          CMP      r12,#0                ;471
000222  d1f3              BNE      |L1.524|
;;;475    
;;;476            /* Decrement the loop counter */
;;;477            k--;
;;;478          }
;;;479    
;;;480          /* Store the result in the accumulator in the destination buffer. */
;;;481          *pOut++ = sum;
000224  1c7f              ADDS     r7,r7,#1
000226  ece50a01          VSTM     r5!,{s1}
;;;482    
;;;483          /* Increment the MAC count */
;;;484          count++;
;;;485    
;;;486          /* Update the inputA and inputB pointers for next MAC calculation */
;;;487          px = pIn1 + count;
00022a  eb040087          ADD      r0,r4,r7,LSL #2
;;;488          py = pSrc2;
00022e  465e              MOV      r6,r11
;;;489    
;;;490          /* Decrement the loop counter */
;;;491          blkCnt--;
000230  f1a90901          SUB      r9,r9,#1
                  |L1.564|
000234  f1b90f00          CMP      r9,#0                 ;445
000238  d1c0              BNE      |L1.444|
00023a  e01c              B        |L1.630|
                  |L1.572|
;;;492        }
;;;493      }
;;;494      else
;;;495      {
;;;496        /* If the srcBLen is not a multiple of 4,    
;;;497         * the blockSize2 loop cannot be unrolled by 4 */
;;;498        blkCnt = blockSize2;
00023c  46d0              MOV      r8,r10
;;;499    
;;;500        while(blkCnt > 0u)
00023e  e017              B        |L1.624|
                  |L1.576|
;;;501        {
;;;502          /* Accumulator is made zero for every iteration */
;;;503          sum = 0.0f;
000240  eef00a40          VMOV.F32 s1,s0
;;;504    
;;;505          /* srcBLen number of MACS should be performed */
;;;506          k = srcBLen;
000244  469c              MOV      r12,r3
;;;507    
;;;508          while(k > 0u)
000246  e008              B        |L1.602|
                  |L1.584|
;;;509          {
;;;510            /* Perform the multiply-accumulate */
;;;511            sum += *px++ * *py--;
000248  ecb01a01          VLDM     r0!,{s2}
00024c  edd61a00          VLDR     s3,[r6,#0]
000250  1f36              SUBS     r6,r6,#4
000252  f1ac0c01          SUB      r12,r12,#1
000256  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.602|
00025a  f1bc0f00          CMP      r12,#0                ;508
00025e  d1f3              BNE      |L1.584|
;;;512    
;;;513            /* Decrement the loop counter */
;;;514            k--;
;;;515          }
;;;516    
;;;517          /* Store the result in the accumulator in the destination buffer. */
;;;518          *pOut++ = sum;
000260  1c7f              ADDS     r7,r7,#1
000262  ece50a01          VSTM     r5!,{s1}
;;;519    
;;;520          /* Increment the MAC count */
;;;521          count++;
;;;522    
;;;523          /* Update the inputA and inputB pointers for next MAC calculation */
;;;524          px = pIn1 + count;
000266  eb040087          ADD      r0,r4,r7,LSL #2
;;;525          py = pSrc2;
00026a  465e              MOV      r6,r11
00026c  f1a80801          SUB      r8,r8,#1
                  |L1.624|
000270  f1b80f00          CMP      r8,#0                 ;500
000274  d1e4              BNE      |L1.576|
                  |L1.630|
;;;526    
;;;527          /* Decrement the loop counter */
;;;528          blkCnt--;
;;;529        }
;;;530      }
;;;531    
;;;532    
;;;533      /* --------------------------    
;;;534       * Initializations of stage3    
;;;535       * -------------------------*/
;;;536    
;;;537      /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]    
;;;538       * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]    
;;;539       * ....    
;;;540       * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]    
;;;541       * sum +=  x[srcALen-1] * y[srcBLen-1]    
;;;542       */
;;;543    
;;;544      /* In this stage the MAC operations are decreased by 1 for every iteration.    
;;;545         The blockSize3 variable holds the number of MAC operations performed */
;;;546    
;;;547      /* Working pointer of inputA */
;;;548      pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
000276  eb040081          ADD      r0,r4,r1,LSL #2
00027a  eba00483          SUB      r4,r0,r3,LSL #2
00027e  1d24              ADDS     r4,r4,#4
;;;549      px = pSrc1;
;;;550    
;;;551      /* Working pointer of inputB */
;;;552      pSrc2 = pIn2 + (srcBLen - 1u);
000280  f1ae0104          SUB      r1,lr,#4
000284  4620              MOV      r0,r4                 ;549
000286  460e              MOV      r6,r1
;;;553      py = pSrc2;
;;;554    
;;;555      /* -------------------    
;;;556       * Stage3 process    
;;;557       * ------------------*/
;;;558    
;;;559      while(blockSize3 > 0u)
000288  e034              B        |L1.756|
;;;560      {
;;;561        /* Accumulator is made zero for every iteration */
;;;562        sum = 0.0f;
00028a  bf00              NOP      
                  |L1.652|
00028c  eef00a40          VMOV.F32 s1,s0
;;;563    
;;;564        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;565        k = blockSize3 >> 2u;
000290  0893              LSRS     r3,r2,#2
;;;566    
;;;567        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;568         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;569        while(k > 0u)
000292  e01a              B        |L1.714|
                  |L1.660|
;;;570        {
;;;571          /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
;;;572          sum += *px++ * *py--;
000294  ed901a00          VLDR     s2,[r0,#0]
000298  edd11a00          VLDR     s3,[r1,#0]
00029c  ee410a21          VMLA.F32 s1,s2,s3
;;;573    
;;;574          /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
;;;575          sum += *px++ * *py--;
0002a0  ed901a01          VLDR     s2,[r0,#4]
0002a4  ed511a01          VLDR     s3,[r1,#-4]
0002a8  ee410a21          VMLA.F32 s1,s2,s3
;;;576    
;;;577          /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
;;;578          sum += *px++ * *py--;
0002ac  ed901a02          VLDR     s2,[r0,#8]
0002b0  ed511a02          VLDR     s3,[r1,#-8]
0002b4  ee410a21          VMLA.F32 s1,s2,s3
;;;579    
;;;580          /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
;;;581          sum += *px++ * *py--;
0002b8  ed901a03          VLDR     s2,[r0,#0xc]
0002bc  ed511a03          VLDR     s3,[r1,#-0xc]
0002c0  3010              ADDS     r0,r0,#0x10
0002c2  3910              SUBS     r1,r1,#0x10
0002c4  1e5b              SUBS     r3,r3,#1
0002c6  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.714|
0002ca  2b00              CMP      r3,#0                 ;569
0002cc  d1e2              BNE      |L1.660|
;;;582    
;;;583          /* Decrement the loop counter */
;;;584          k--;
;;;585        }
;;;586    
;;;587        /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.    
;;;588         ** No loop unrolling is used. */
;;;589        k = blockSize3 % 0x4u;
0002ce  f0020303          AND      r3,r2,#3
;;;590    
;;;591        while(k > 0u)
0002d2  e007              B        |L1.740|
                  |L1.724|
;;;592        {
;;;593          /* Perform the multiply-accumulates */
;;;594          /* sum +=  x[srcALen-1] * y[srcBLen-1] */
;;;595          sum += *px++ * *py--;
0002d4  ecb01a01          VLDM     r0!,{s2}
0002d8  edd11a00          VLDR     s3,[r1,#0]
0002dc  1f09              SUBS     r1,r1,#4
0002de  1e5b              SUBS     r3,r3,#1
0002e0  ee410a21          VMLA.F32 s1,s2,s3
                  |L1.740|
0002e4  2b00              CMP      r3,#0                 ;591
0002e6  d1f5              BNE      |L1.724|
;;;596    
;;;597          /* Decrement the loop counter */
;;;598          k--;
;;;599        }
;;;600    
;;;601        /* Store the result in the accumulator in the destination buffer. */
;;;602        *pOut++ = sum;
;;;603    
;;;604        /* Update the inputA and inputB pointers for next MAC calculation */
;;;605        px = ++pSrc1;
0002e8  1d20              ADDS     r0,r4,#4
0002ea  ece50a01          VSTM     r5!,{s1}              ;602
0002ee  4604              MOV      r4,r0
;;;606        py = pSrc2;
0002f0  4631              MOV      r1,r6
0002f2  1e52              SUBS     r2,r2,#1
                  |L1.756|
0002f4  2a00              CMP      r2,#0                 ;559
0002f6  d1c9              BNE      |L1.652|
;;;607    
;;;608        /* Decrement the loop counter */
;;;609        blockSize3--;
;;;610      }
;;;611    
;;;612    #else
;;;613    
;;;614      /* Run the below code for Cortex-M0 */
;;;615    
;;;616      float32_t *pIn1 = pSrcA;                       /* inputA pointer */
;;;617      float32_t *pIn2 = pSrcB;                       /* inputB pointer */
;;;618      float32_t sum;                                 /* Accumulator */
;;;619      uint32_t i, j;                                 /* loop counters */
;;;620    
;;;621      /* Loop to calculate convolution for output length number of times */
;;;622      for (i = 0u; i < ((srcALen + srcBLen) - 1u); i++)
;;;623      {
;;;624        /* Initialize sum with zero to carry out MAC operations */
;;;625        sum = 0.0f;
;;;626    
;;;627        /* Loop to perform MAC operations according to convolution equation */
;;;628        for (j = 0u; j <= i; j++)
;;;629        {
;;;630          /* Check the array limitations */
;;;631          if((((i - j) < srcBLen) && (j < srcALen)))
;;;632          {
;;;633            /* z[i] += x[i-j] * y[j] */
;;;634            sum += pIn1[j] * pIn2[i - j];
;;;635          }
;;;636        }
;;;637        /* Store the output in the destination buffer */
;;;638        pDst[i] = sum;
;;;639      }
;;;640    
;;;641    #endif /*   #ifndef ARM_MATH_CM0_FAMILY        */
;;;642    
;;;643    }
0002f8  e8bd8ff0          POP      {r4-r11,pc}
;;;644    
                          ENDP

                  |L1.764|
0002fc  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_conv_f32_c_63e0709a____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_conv_f32_c_63e0709a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_conv_f32_c_63e0709a____REVSH|
#line 144
|__asm___14_arm_conv_f32_c_63e0709a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_conv_f32_c_63e0709a____RRX|
#line 300
|__asm___14_arm_conv_f32_c_63e0709a____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
