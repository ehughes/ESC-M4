; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_abs_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_abs_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_abs_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_abs_q7.c]
                          THUMB

                          AREA ||i.arm_abs_q7||, CODE, READONLY, ALIGN=1

                  arm_abs_q7 PROC
;;;68     
;;;69     void arm_abs_q7(
000000  b5f0              PUSH     {r4-r7,lr}
;;;70       q7_t * pSrc,
;;;71       q7_t * pDst,
;;;72       uint32_t blockSize)
;;;73     {
;;;74       uint32_t blkCnt;                               /* loop counter */
;;;75       q7_t in;                                       /* Input value1 */
;;;76     
;;;77     #ifndef ARM_MATH_CM0_FAMILY
;;;78     
;;;79       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;80       q31_t in1, in2, in3, in4;                      /* temporary input variables */
;;;81       q31_t out1, out2, out3, out4;                  /* temporary output variables */
;;;82     
;;;83       /*loop Unrolling */
;;;84       blkCnt = blockSize >> 2u;
000002  0896              LSRS     r6,r2,#2
000004  2700              MOVS     r7,#0
000006  e020              B        |L1.74|
                  |L1.8|
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C = |A| */
;;;91         /* Read inputs */
;;;92         in1 = (q31_t) * pSrc;
000008  f9905000          LDRSB    r5,[r0,#0]
;;;93         in2 = (q31_t) * (pSrc + 1);
00000c  f9904001          LDRSB    r4,[r0,#1]
;;;94         in3 = (q31_t) * (pSrc + 2);
000010  f9903002          LDRSB    r3,[r0,#2]
;;;95     
;;;96         /* find absolute value */
;;;97         out1 = (in1 > 0) ? in1 : (q31_t)__QSUB8(0, in1);
000014  2d00              CMP      r5,#0
000016  dc01              BGT      |L1.28|
000018  fac7f515          QSUB8    r5,r7,r5
                  |L1.28|
;;;98     
;;;99         /* read input */
;;;100        in4 = (q31_t) * (pSrc + 3);
00001c  f990c003          LDRSB    r12,[r0,#3]
;;;101    
;;;102        /* find absolute value */
;;;103        out2 = (in2 > 0) ? in2 : (q31_t)__QSUB8(0, in2);
000020  2c00              CMP      r4,#0
000022  dc01              BGT      |L1.40|
000024  fac7f414          QSUB8    r4,r7,r4
                  |L1.40|
;;;104    
;;;105        /* store result to destination */
;;;106        *pDst = (q7_t) out1;
000028  700d              STRB     r5,[r1,#0]
;;;107    
;;;108        /* find absolute value */
;;;109        out3 = (in3 > 0) ? in3 : (q31_t)__QSUB8(0, in3);
00002a  2b00              CMP      r3,#0
00002c  dc01              BGT      |L1.50|
00002e  fac7f313          QSUB8    r3,r7,r3
                  |L1.50|
;;;110    
;;;111        /* find absolute value */
;;;112        out4 = (in4 > 0) ? in4 : (q31_t)__QSUB8(0, in4);
000032  f1bc0f00          CMP      r12,#0
000036  dc01              BGT      |L1.60|
000038  fac7fc1c          QSUB8    r12,r7,r12
                  |L1.60|
;;;113    
;;;114        /* store result to destination */
;;;115        *(pDst + 1) = (q7_t) out2;
00003c  704c              STRB     r4,[r1,#1]
;;;116    
;;;117        /* store result to destination */
;;;118        *(pDst + 2) = (q7_t) out3;
00003e  708b              STRB     r3,[r1,#2]
;;;119    
;;;120        /* store result to destination */
;;;121        *(pDst + 3) = (q7_t) out4;
000040  f881c003          STRB     r12,[r1,#3]
000044  1d00              ADDS     r0,r0,#4
000046  1d09              ADDS     r1,r1,#4
000048  1e76              SUBS     r6,r6,#1
                  |L1.74|
00004a  2e00              CMP      r6,#0                 ;88
00004c  d1dc              BNE      |L1.8|
;;;122    
;;;123        /* update pointers to process next samples */
;;;124        pSrc += 4u;
;;;125        pDst += 4u;
;;;126    
;;;127        /* Decrement the loop counter */
;;;128        blkCnt--;
;;;129      }
;;;130    
;;;131      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;132       ** No loop unrolling is used. */
;;;133      blkCnt = blockSize % 0x4u;
00004e  f0020303          AND      r3,r2,#3
;;;134    #else
;;;135    
;;;136      /* Run the below code for Cortex-M0 */
;;;137      blkCnt = blockSize;
;;;138    
;;;139    #endif /* #define ARM_MATH_CM0_FAMILY */
;;;140    
;;;141      while(blkCnt > 0u)
000052  e00a              B        |L1.106|
                  |L1.84|
;;;142      {
;;;143        /* C = |A| */
;;;144        /* Read the input */
;;;145        in = *pSrc++;
000054  f9102b01          LDRSB    r2,[r0],#1
;;;146    
;;;147        /* Store the Absolute result in the destination buffer */
;;;148        *pDst++ = (in > 0) ? in : ((in == (q7_t) 0x80) ? 0x7f : -in);
000058  2a00              CMP      r2,#0
00005a  dc03              BGT      |L1.100|
00005c  f1120f80          CMN      r2,#0x80
000060  d006              BEQ      |L1.112|
000062  4252              RSBS     r2,r2,#0
                  |L1.100|
000064  f8012b01          STRB     r2,[r1],#1
000068  1e5b              SUBS     r3,r3,#1
                  |L1.106|
00006a  2b00              CMP      r3,#0                 ;141
00006c  d1f2              BNE      |L1.84|
;;;149    
;;;150        /* Decrement the loop counter */
;;;151        blkCnt--;
;;;152      }
;;;153    }
00006e  bdf0              POP      {r4-r7,pc}
                  |L1.112|
000070  227f              MOVS     r2,#0x7f              ;148
000072  e7f7              B        |L1.100|
;;;154    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_abs_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_abs_q7_c_2d20b3ca____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___12_arm_abs_q7_c_2d20b3ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_abs_q7_c_2d20b3ca____REVSH|
#line 144
|__asm___12_arm_abs_q7_c_2d20b3ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_abs_q7_c_2d20b3ca____RRX|
#line 300
|__asm___12_arm_abs_q7_c_2d20b3ca____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
