; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mean_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mean_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mean_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_mean_q31.c]
                          THUMB

                          AREA ||i.arm_mean_q31||, CODE, READONLY, ALIGN=1

                  arm_mean_q31 PROC
;;;71     
;;;72     void arm_mean_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;73       q31_t * pSrc,
;;;74       uint32_t blockSize,
;;;75       q31_t * pResult)
;;;76     {
000004  4603              MOV      r3,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;77       q63_t sum = 0;                                 /* Temporary result storage */
00000a  2000              MOVS     r0,#0
00000c  4601              MOV      r1,r0
;;;78       uint32_t blkCnt;                               /* loop counter */
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       q31_t in1, in2, in3, in4;
;;;84     
;;;85       /*loop Unrolling */
;;;86       blkCnt = blockSize >> 2u;
00000e  08ba              LSRS     r2,r7,#2
000010  e016              B        |L1.64|
                  |L1.18|
;;;87     
;;;88       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;89        ** a second loop below computes the remaining 1 to 3 samples. */
;;;90       while(blkCnt > 0u)
;;;91       {
;;;92         /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;93         in1 = *pSrc++;
000012  f8d3c000          LDR      r12,[r3,#0]
;;;94         in2 = *pSrc++;
000016  685d              LDR      r5,[r3,#4]
;;;95         in3 = *pSrc++;
000018  689e              LDR      r6,[r3,#8]
00001a  330c              ADDS     r3,r3,#0xc
;;;96         in4 = *pSrc++;
00001c  f8538b04          LDR      r8,[r3],#4
;;;97     
;;;98         sum += in1;
000020  eb10000c          ADDS     r0,r0,r12
000024  eb4171ec          ADC      r1,r1,r12,ASR #31
;;;99         sum += in2;
000028  1940              ADDS     r0,r0,r5
00002a  eb4171e5          ADC      r1,r1,r5,ASR #31
;;;100        sum += in3;
00002e  1980              ADDS     r0,r0,r6
000030  eb4171e6          ADC      r1,r1,r6,ASR #31
;;;101        sum += in4;
000034  eb100008          ADDS     r0,r0,r8
000038  eb4171e8          ADC      r1,r1,r8,ASR #31
;;;102    
;;;103        /* Decrement the loop counter */
;;;104        blkCnt--;
00003c  f1a20201          SUB      r2,r2,#1
                  |L1.64|
000040  2a00              CMP      r2,#0                 ;90
000042  d1e6              BNE      |L1.18|
;;;105      }
;;;106    
;;;107      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;108       ** No loop unrolling is used. */
;;;109      blkCnt = blockSize % 0x4u;
000044  f0070203          AND      r2,r7,#3
;;;110    
;;;111    #else
;;;112    
;;;113      /* Run the below code for Cortex-M0 */
;;;114    
;;;115      /* Loop over blockSize number of values */
;;;116      blkCnt = blockSize;
;;;117    
;;;118    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;119    
;;;120      while(blkCnt > 0u)
000048  e005              B        |L1.86|
                  |L1.74|
;;;121      {
;;;122        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;123        sum += *pSrc++;
00004a  cb20              LDM      r3!,{r5}
00004c  1828              ADDS     r0,r5,r0
00004e  eb4171e5          ADC      r1,r1,r5,ASR #31
;;;124    
;;;125        /* Decrement the loop counter */
;;;126        blkCnt--;
000052  f1a20201          SUB      r2,r2,#1
                  |L1.86|
000056  2a00              CMP      r2,#0                 ;120
000058  d1f7              BNE      |L1.74|
;;;127      }
;;;128    
;;;129      /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
;;;130      /* Store the result to the destination */
;;;131      *pResult = (q31_t) (sum / (int32_t) blockSize);
00005a  463a              MOV      r2,r7
00005c  ea4f73e7          ASR      r3,r7,#31
000060  f7fffffe          BL       __aeabi_ldivmod
000064  6020              STR      r0,[r4,#0]
;;;132    }
000066  e8bd87f0          POP      {r4-r10,pc}
;;;133    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_mean_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_q31_c_f3bcb73f____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_mean_q31_c_f3bcb73f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_q31_c_f3bcb73f____REVSH|
#line 144
|__asm___14_arm_mean_q31_c_f3bcb73f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_q31_c_f3bcb73f____RRX|
#line 300
|__asm___14_arm_mean_q31_c_f3bcb73f____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
