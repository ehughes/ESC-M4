; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_mean_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mean_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_mean_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_mean_q31.c]
                          THUMB

                          AREA ||i.arm_mean_q31||, CODE, READONLY, ALIGN=1

                  arm_mean_q31 PROC
;;;71     
;;;72     void arm_mean_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;73       q31_t * pSrc,
;;;74       uint32_t blockSize,
;;;75       q31_t * pResult)
;;;76     {
000004  4691              MOV      r9,r2
000006  460a              MOV      r2,r1
000008  2400              MOVS     r4,#0
00000a  4621              MOV      r1,r4
;;;77       q63_t sum = 0;                                 /* Temporary result storage */
;;;78       uint32_t blkCnt;                               /* loop counter */
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       q31_t in1, in2, in3, in4;
;;;84     
;;;85       /*loop Unrolling */
;;;86       blkCnt = blockSize >> 2u;
00000c  0893              LSRS     r3,r2,#2
00000e  e012              B        |L1.54|
                  |L1.16|
000010  e9d06502          LDRD     r6,r5,[r0,#8]         ;76
000014  e8f0c704          LDRD     r12,r7,[r0],#0x10     ;76
000018  eb14040c          ADDS     r4,r4,r12             ;76
00001c  eb4171ec          ADC      r1,r1,r12,ASR #31     ;76
000020  19e4              ADDS     r4,r4,r7              ;76
000022  eb4171e7          ADC      r1,r1,r7,ASR #31      ;76
000026  19a4              ADDS     r4,r4,r6              ;76
000028  eb4171e6          ADC      r1,r1,r6,ASR #31      ;76
00002c  1964              ADDS     r4,r4,r5              ;76
00002e  eb4171e5          ADC      r1,r1,r5,ASR #31      ;76
000032  f1a30301          SUB      r3,r3,#1              ;76
                  |L1.54|
;;;87     
;;;88       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;89        ** a second loop below computes the remaining 1 to 3 samples. */
;;;90       while(blkCnt > 0u)
000036  2b00              CMP      r3,#0
000038  d1ea              BNE      |L1.16|
;;;91       {
;;;92         /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;93         in1 = *pSrc++;
;;;94         in2 = *pSrc++;
;;;95         in3 = *pSrc++;
;;;96         in4 = *pSrc++;
;;;97     
;;;98         sum += in1;
;;;99         sum += in2;
;;;100        sum += in3;
;;;101        sum += in4;
;;;102    
;;;103        /* Decrement the loop counter */
;;;104        blkCnt--;
;;;105      }
;;;106    
;;;107      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;108       ** No loop unrolling is used. */
;;;109      blkCnt = blockSize % 0x4u;
00003a  f0020303          AND      r3,r2,#3
;;;110    
;;;111    #else
;;;112    
;;;113      /* Run the below code for Cortex-M0 */
;;;114    
;;;115      /* Loop over blockSize number of values */
;;;116      blkCnt = blockSize;
;;;117    
;;;118    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;119    
;;;120      while(blkCnt > 0u)
00003e  e005              B        |L1.76|
                  |L1.64|
;;;121      {
;;;122        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;123        sum += *pSrc++;
000040  c840              LDM      r0!,{r6}
000042  f1a30301          SUB      r3,r3,#1
000046  1934              ADDS     r4,r6,r4
000048  eb4171e6          ADC      r1,r1,r6,ASR #31
                  |L1.76|
00004c  2b00              CMP      r3,#0                 ;120
00004e  d1f7              BNE      |L1.64|
;;;124    
;;;125        /* Decrement the loop counter */
;;;126        blkCnt--;
;;;127      }
;;;128    
;;;129      /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
;;;130      /* Store the result to the destination */
;;;131      *pResult = (q31_t) (sum / (int32_t) blockSize);
000050  ea4f73e2          ASR      r3,r2,#31
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       __aeabi_ldivmod
00005a  f8c90000          STR      r0,[r9,#0]
;;;132    }
00005e  e8bd87f0          POP      {r4-r10,pc}
;;;133    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_mean_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_q31_c_f3bcb73f____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_mean_q31_c_f3bcb73f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_q31_c_f3bcb73f____REVSH|
#line 144
|__asm___14_arm_mean_q31_c_f3bcb73f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_q31_c_f3bcb73f____RRX|
#line 300
|__asm___14_arm_mean_q31_c_f3bcb73f____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
