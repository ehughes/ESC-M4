; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fill_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fill_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fill_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_fill_q7.c]
                          THUMB

                          AREA ||i.arm_fill_q7||, CODE, READONLY, ALIGN=1

                  arm_fill_q7 PROC
;;;60     
;;;61     void arm_fill_q7(
000000  b530              PUSH     {r4,r5,lr}
;;;62       q7_t value,
;;;63       q7_t * pDst,
;;;64       uint32_t blockSize)
;;;65     {
;;;66       uint32_t blkCnt;                               /* loop counter */
;;;67     
;;;68     #ifndef ARM_MATH_CM0_FAMILY
;;;69     
;;;70       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;71     
;;;72       q31_t packedValue;                             /* value packed to 32 bits */
;;;73     
;;;74       /*loop Unrolling */
;;;75       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
;;;76     
;;;77       /* Packing four 8 bit values to 32 bit value in order to use SIMD */
;;;78       packedValue = __PACKq7(value, value, value, value);
000004  f64f75ff          MOV      r5,#0xffff
000008  b2c4              UXTB     r4,r0
00000a  ea052500          AND      r5,r5,r0,LSL #8
00000e  4325              ORRS     r5,r5,r4
000010  ea454404          ORR      r4,r5,r4,LSL #16
000014  ea446400          ORR      r4,r4,r0,LSL #24
000018  e002              B        |L1.32|
                  |L1.26|
;;;79     
;;;80       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;81        ** a second loop below computes the remaining 1 to 3 samples. */
;;;82       while(blkCnt > 0u)
;;;83       {
;;;84         /* C = value */
;;;85         /* Fill the value in the destination buffer */
;;;86         *__SIMD32(pDst)++ = packedValue;
00001a  f8414b04          STR      r4,[r1],#4
;;;87     
;;;88         /* Decrement the loop counter */
;;;89         blkCnt--;
00001e  1e5b              SUBS     r3,r3,#1
                  |L1.32|
000020  2b00              CMP      r3,#0                 ;82
000022  d1fa              BNE      |L1.26|
;;;90       }
;;;91     
;;;92       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;93        ** No loop unrolling is used. */
;;;94       blkCnt = blockSize % 0x4u;
000024  f0020203          AND      r2,r2,#3
;;;95     
;;;96     #else
;;;97     
;;;98       /* Run the below code for Cortex-M0 */
;;;99     
;;;100      /* Loop over blockSize number of values */
;;;101      blkCnt = blockSize;
;;;102    
;;;103    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;104    
;;;105      while(blkCnt > 0u)
000028  e002              B        |L1.48|
                  |L1.42|
;;;106      {
;;;107        /* C = value */
;;;108        /* Fill the value in the destination buffer */
;;;109        *pDst++ = value;
00002a  f8010b01          STRB     r0,[r1],#1
;;;110    
;;;111        /* Decrement the loop counter */
;;;112        blkCnt--;
00002e  1e52              SUBS     r2,r2,#1
                  |L1.48|
000030  2a00              CMP      r2,#0                 ;105
000032  d1fa              BNE      |L1.42|
;;;113      }
;;;114    }
000034  bd30              POP      {r4,r5,pc}
;;;115    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_fill_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_fill_q7_c_2a9d5ba7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_fill_q7_c_2a9d5ba7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_fill_q7_c_2a9d5ba7____REVSH|
#line 144
|__asm___13_arm_fill_q7_c_2a9d5ba7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_fill_q7_c_2a9d5ba7____RRX|
#line 300
|__asm___13_arm_fill_q7_c_2a9d5ba7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
