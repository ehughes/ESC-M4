; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_sub_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sub_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_sub_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_sub_f32.c]
                          THUMB

                          AREA ||i.arm_sub_f32||, CODE, READONLY, ALIGN=2

                  arm_sub_f32 PROC
;;;73     
;;;74     void arm_sub_f32(
000000  b510              PUSH     {r4,lr}
;;;75       float32_t * pSrcA,
;;;76       float32_t * pSrcB,
;;;77       float32_t * pDst,
;;;78       uint32_t blockSize)
;;;79     {
;;;80       uint32_t blkCnt;                               /* loop counter */
;;;81     
;;;82     #ifndef ARM_MATH_CM0_FAMILY
;;;83     
;;;84     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;85       float32_t inA1, inA2, inA3, inA4;              /* temporary variables */
;;;86       float32_t inB1, inB2, inB3, inB4;              /* temporary variables */
;;;87     
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e024              B        |L1.80|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;92        ** a second loop below computes the remaining 1 to 3 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* C = A - B */
;;;96         /* Subtract and then store the results in the destination buffer. */
;;;97         /* Read 4 input samples from sourceA and sourceB */
;;;98         inA1 = *pSrcA;
000006  bf00              NOP      
                  |L1.8|
000008  edd03a00          VLDR     s7,[r0,#0]
;;;99         inB1 = *pSrcB;
00000c  ed913a00          VLDR     s6,[r1,#0]
;;;100        inA2 = *(pSrcA + 1);
000010  ed902a01          VLDR     s4,[r0,#4]
;;;101        inB2 = *(pSrcB + 1);
000014  edd11a01          VLDR     s3,[r1,#4]
;;;102        inA3 = *(pSrcA + 2);
000018  ed901a02          VLDR     s2,[r0,#8]
;;;103        inB3 = *(pSrcB + 2);
00001c  edd10a02          VLDR     s1,[r1,#8]
;;;104        inA4 = *(pSrcA + 3);
000020  ed900a03          VLDR     s0,[r0,#0xc]
;;;105        inB4 = *(pSrcB + 3);
000024  edd12a03          VLDR     s5,[r1,#0xc]
;;;106    
;;;107        /* dst = srcA - srcB */
;;;108        /* subtract and store the result */
;;;109        *pDst = inA1 - inB1;
000028  ee333ac3          VSUB.F32 s6,s7,s6
;;;110        *(pDst + 1) = inA2 - inB2;
00002c  ee721a61          VSUB.F32 s3,s4,s3
;;;111        *(pDst + 2) = inA3 - inB3;
000030  ee710a60          VSUB.F32 s1,s2,s1
000034  ed823a00          VSTR     s6,[r2,#0]            ;109
;;;112        *(pDst + 3) = inA4 - inB4;
000038  ee300a62          VSUB.F32 s0,s0,s5
00003c  edc21a01          VSTR     s3,[r2,#4]            ;110
000040  edc20a02          VSTR     s1,[r2,#8]            ;111
000044  ed820a03          VSTR     s0,[r2,#0xc]
000048  3010              ADDS     r0,r0,#0x10
00004a  3110              ADDS     r1,r1,#0x10
00004c  3210              ADDS     r2,r2,#0x10
00004e  1e64              SUBS     r4,r4,#1
                  |L1.80|
000050  2c00              CMP      r4,#0                 ;93
000052  d1d9              BNE      |L1.8|
;;;113    
;;;114    
;;;115        /* Update pointers to process next sampels */
;;;116        pSrcA += 4u;
;;;117        pSrcB += 4u;
;;;118        pDst += 4u;
;;;119    
;;;120        /* Decrement the loop counter */
;;;121        blkCnt--;
;;;122      }
;;;123    
;;;124      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;125       ** No loop unrolling is used. */
;;;126      blkCnt = blockSize % 0x4u;
000054  f0030303          AND      r3,r3,#3
;;;127    
;;;128    #else
;;;129    
;;;130      /* Run the below code for Cortex-M0 */
;;;131    
;;;132      /* Initialize blkCnt with number of samples */
;;;133      blkCnt = blockSize;
;;;134    
;;;135    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;136    
;;;137      while(blkCnt > 0u)
000058  e009              B        |L1.110|
;;;138      {
;;;139        /* C = A - B */
;;;140        /* Subtract and then store the results in the destination buffer. */
;;;141        *pDst++ = (*pSrcA++) - (*pSrcB++);
00005a  bf00              NOP      
                  |L1.92|
00005c  ecb00a01          VLDM     r0!,{s0}
000060  1e5b              SUBS     r3,r3,#1
000062  ecf10a01          VLDM     r1!,{s1}
000066  ee300a60          VSUB.F32 s0,s0,s1
00006a  eca20a01          VSTM     r2!,{s0}
                  |L1.110|
00006e  2b00              CMP      r3,#0                 ;137
000070  d1f4              BNE      |L1.92|
;;;142    
;;;143        /* Decrement the loop counter */
;;;144        blkCnt--;
;;;145      }
;;;146    }
000072  bd10              POP      {r4,pc}
;;;147    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_sub_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_f32_c_af5ec417____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_sub_f32_c_af5ec417____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_f32_c_af5ec417____REVSH|
#line 144
|__asm___13_arm_sub_f32_c_af5ec417____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_f32_c_af5ec417____RRX|
#line 300
|__asm___13_arm_sub_f32_c_af5ec417____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
