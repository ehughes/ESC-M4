; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_std_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_std_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_std_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_std_q31.c]
                          THUMB

                          AREA ||i.arm_std_q31||, CODE, READONLY, ALIGN=1

                  arm_std_q31 PROC
;;;77     
;;;78     void arm_std_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;79       q31_t * pSrc,
;;;80       uint32_t blockSize,
;;;81       q31_t * pResult)
;;;82     {
000004  4603              MOV      r3,r0
000006  4688              MOV      r8,r1
000008  4692              MOV      r10,r2
;;;83       q63_t sum = 0;                                 /* Accumulator */
00000a  2400              MOVS     r4,#0
00000c  4625              MOV      r5,r4
;;;84       q63_t meanOfSquares, squareOfMean;             /* square of mean and mean of square */
;;;85       q31_t in;                                      /* input value */
;;;86       uint32_t blkCnt;                               /* loop counter */
;;;87       q63_t sumOfSquares = 0;                        /* Accumulator */
00000e  2000              MOVS     r0,#0
000010  4601              MOV      r1,r0
;;;88     
;;;89     	if(blockSize == 1)
000012  2200              MOVS     r2,#0
000014  f1b80f01          CMP      r8,#1
000018  d002              BEQ      |L1.32|
;;;90     	{
;;;91     		*pResult = 0;
;;;92     		return;
;;;93     	}
;;;94        
;;;95     #ifndef ARM_MATH_CM0_FAMILY
;;;96     
;;;97       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;98     
;;;99       /*loop Unrolling */
;;;100      blkCnt = blockSize >> 2u;
00001a  ea4f0698          LSR      r6,r8,#2
;;;101    
;;;102      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;103       ** a second loop below computes the remaining 1 to 3 samples. */
;;;104      while(blkCnt > 0u)
00001e  e026              B        |L1.110|
                  |L1.32|
000020  f8ca2000          STR      r2,[r10,#0]           ;91
;;;105      {
;;;106        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;107        /* Compute Sum of squares of the input samples    
;;;108         * and then store the result in a temporary variable, sum. */
;;;109        in = *pSrc++ >> 8;
;;;110        sum += in;
;;;111        sumOfSquares += ((q63_t) (in) * (in));
;;;112        in = *pSrc++ >> 8;
;;;113        sum += in;
;;;114        sumOfSquares += ((q63_t) (in) * (in));
;;;115        in = *pSrc++ >> 8;
;;;116        sum += in;
;;;117        sumOfSquares += ((q63_t) (in) * (in));
;;;118        in = *pSrc++ >> 8;
;;;119        sum += in;
;;;120        sumOfSquares += ((q63_t) (in) * (in));
;;;121    
;;;122        /* Decrement the loop counter */
;;;123        blkCnt--;
;;;124      }
;;;125    
;;;126      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;127       ** No loop unrolling is used. */
;;;128      blkCnt = blockSize % 0x4u;
;;;129    
;;;130      while(blkCnt > 0u)
;;;131      {
;;;132        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;133        /* Compute Sum of squares of the input samples    
;;;134         * and then store the result in a temporary variable, sum. */
;;;135        in = *pSrc++ >> 8;
;;;136        sum += in;
;;;137        sumOfSquares += ((q63_t) (in) * (in));
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
;;;141      }
;;;142    
;;;143      /* Compute Mean of squares of the input samples    
;;;144       * and then store the result in a temporary variable, meanOfSquares. */
;;;145      meanOfSquares = sumOfSquares / (q63_t)(blockSize - 1);
;;;146    
;;;147    #else
;;;148    
;;;149      /* Run the below code for Cortex-M0 */
;;;150    
;;;151      /* Loop over blockSize number of values */
;;;152      blkCnt = blockSize;
;;;153    
;;;154      while(blkCnt > 0u)
;;;155      {
;;;156        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;157        /* Compute Sum of squares of the input samples     
;;;158         * and then store the result in a temporary variable, sumOfSquares. */
;;;159        in = *pSrc++ >> 8;
;;;160        sumOfSquares += ((q63_t) (in) * (in));
;;;161    
;;;162        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;163        /* Compute sum of all input values and then store the result in a temporary variable, sum. */
;;;164        sum += in;
;;;165    
;;;166        /* Decrement the loop counter */
;;;167        blkCnt--;
;;;168      }
;;;169    
;;;170      /* Compute Mean of squares of the input samples     
;;;171       * and then store the result in a temporary variable, meanOfSquares. */
;;;172      meanOfSquares = sumOfSquares / (q63_t)(blockSize - 1);
;;;173    
;;;174    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;175    
;;;176      /* Compute square of mean */
;;;177      squareOfMean = sum * sum / (q63_t)(blockSize * (blockSize - 1u));
;;;178    
;;;179      /* Compute standard deviation and then store the result to the destination */
;;;180      arm_sqrt_q31((meanOfSquares - squareOfMean) >> 15, pResult);
;;;181    
;;;182    }
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L1.40|
000028  681a              LDR      r2,[r3,#0]            ;109
00002a  1212              ASRS     r2,r2,#8              ;109
00002c  18a4              ADDS     r4,r4,r2              ;110
00002e  eb4575e2          ADC      r5,r5,r2,ASR #31      ;110
000032  fbc20102          SMLAL    r0,r1,r2,r2           ;111
000036  685a              LDR      r2,[r3,#4]            ;112
000038  ea4f2222          ASR      r2,r2,#8              ;112
00003c  18a4              ADDS     r4,r4,r2              ;113
00003e  eb4575e2          ADC      r5,r5,r2,ASR #31      ;113
000042  fbc20102          SMLAL    r0,r1,r2,r2           ;114
000046  689a              LDR      r2,[r3,#8]            ;115
000048  ea4f2222          ASR      r2,r2,#8              ;115
00004c  18a4              ADDS     r4,r4,r2              ;116
00004e  eb4575e2          ADC      r5,r5,r2,ASR #31      ;116
000052  fbc20102          SMLAL    r0,r1,r2,r2           ;117
000056  68da              LDR      r2,[r3,#0xc]          ;118
000058  f1030310          ADD      r3,r3,#0x10           ;118
00005c  ea4f2222          ASR      r2,r2,#8              ;118
000060  18a4              ADDS     r4,r4,r2              ;119
000062  eb4575e2          ADC      r5,r5,r2,ASR #31      ;119
000066  fbc20102          SMLAL    r0,r1,r2,r2           ;120
00006a  f1a60601          SUB      r6,r6,#1              ;123
                  |L1.110|
00006e  2e00              CMP      r6,#0                 ;104
000070  d1da              BNE      |L1.40|
000072  f0080603          AND      r6,r8,#3              ;128
000076  e008              B        |L1.138|
                  |L1.120|
000078  cb04              LDM      r3!,{r2}              ;135
00007a  1212              ASRS     r2,r2,#8              ;135
00007c  18a4              ADDS     r4,r4,r2              ;136
00007e  eb4575e2          ADC      r5,r5,r2,ASR #31      ;136
000082  fbc20102          SMLAL    r0,r1,r2,r2           ;137
000086  f1a60601          SUB      r6,r6,#1              ;140
                  |L1.138|
00008a  2e00              CMP      r6,#0                 ;130
00008c  d1f4              BNE      |L1.120|
00008e  f1a80901          SUB      r9,r8,#1              ;145
000092  464a              MOV      r2,r9                 ;145
000094  4633              MOV      r3,r6                 ;145
000096  f7fffffe          BL       __aeabi_ldivmod
00009a  4606              MOV      r6,r0                 ;145
00009c  460f              MOV      r7,r1                 ;145
00009e  fba40104          UMULL    r0,r1,r4,r4           ;177
0000a2  fb051104          MLA      r1,r5,r4,r1           ;177
0000a6  fb041105          MLA      r1,r4,r5,r1           ;177
0000aa  fb08f209          MUL      r2,r8,r9              ;177
0000ae  2300              MOVS     r3,#0                 ;177
0000b0  f7fffffe          BL       __aeabi_ldivmod
0000b4  1a30              SUBS     r0,r6,r0              ;180
0000b6  eb670701          SBC      r7,r7,r1              ;180
0000ba  0bc0              LSRS     r0,r0,#15             ;180
0000bc  ea404047          ORR      r0,r0,r7,LSL #17      ;180
0000c0  4651              MOV      r1,r10                ;180
0000c2  e8bd47f0          POP      {r4-r10,lr}           ;180
0000c6  f7ffbffe          B.W      arm_sqrt_q31
;;;183    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_std_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q31_c_6b22065d____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_std_q31_c_6b22065d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q31_c_6b22065d____REVSH|
#line 144
|__asm___13_arm_std_q31_c_6b22065d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q31_c_6b22065d____RRX|
#line 300
|__asm___13_arm_std_q31_c_6b22065d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
