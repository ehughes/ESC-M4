; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_std_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_std_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_std_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_std_q31.c]
                          THUMB

                          AREA ||i.arm_std_q31||, CODE, READONLY, ALIGN=1

                  arm_std_q31 PROC
;;;77     
;;;78     void arm_std_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;79       q31_t * pSrc,
;;;80       uint32_t blockSize,
;;;81       q31_t * pResult)
;;;82     {
000004  2500              MOVS     r5,#0
000006  4692              MOV      r10,r2
000008  460e              MOV      r6,r1
00000a  4602              MOV      r2,r0
00000c  462c              MOV      r4,r5
00000e  4628              MOV      r0,r5
000010  4629              MOV      r1,r5
000012  462b              MOV      r3,r5
;;;83       q63_t sum = 0;                                 /* Accumulator */
;;;84       q63_t meanOfSquares, squareOfMean;             /* square of mean and mean of square */
;;;85       q31_t in;                                      /* input value */
;;;86       uint32_t blkCnt;                               /* loop counter */
;;;87       q63_t sumOfSquares = 0;                        /* Accumulator */
;;;88     
;;;89     	if(blockSize == 1)
000014  2e01              CMP      r6,#1
000016  d001              BEQ      |L1.28|
;;;90     	{
;;;91     		*pResult = 0;
;;;92     		return;
;;;93     	}
;;;94        
;;;95     #ifndef ARM_MATH_CM0_FAMILY
;;;96     
;;;97       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;98     
;;;99       /*loop Unrolling */
;;;100      blkCnt = blockSize >> 2u;
000018  08b3              LSRS     r3,r6,#2
;;;101    
;;;102      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;103       ** a second loop below computes the remaining 1 to 3 samples. */
;;;104      while(blkCnt > 0u)
00001a  e026              B        |L1.106|
                  |L1.28|
00001c  f8ca3000          STR      r3,[r10,#0]           ;91
;;;105      {
;;;106        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;107        /* Compute Sum of squares of the input samples    
;;;108         * and then store the result in a temporary variable, sum. */
;;;109        in = *pSrc++ >> 8;
;;;110        sum += in;
;;;111        sumOfSquares += ((q63_t) (in) * (in));
;;;112        in = *pSrc++ >> 8;
;;;113        sum += in;
;;;114        sumOfSquares += ((q63_t) (in) * (in));
;;;115        in = *pSrc++ >> 8;
;;;116        sum += in;
;;;117        sumOfSquares += ((q63_t) (in) * (in));
;;;118        in = *pSrc++ >> 8;
;;;119        sum += in;
;;;120        sumOfSquares += ((q63_t) (in) * (in));
;;;121    
;;;122        /* Decrement the loop counter */
;;;123        blkCnt--;
;;;124      }
;;;125    
;;;126      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;127       ** No loop unrolling is used. */
;;;128      blkCnt = blockSize % 0x4u;
;;;129    
;;;130      while(blkCnt > 0u)
;;;131      {
;;;132        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;133        /* Compute Sum of squares of the input samples    
;;;134         * and then store the result in a temporary variable, sum. */
;;;135        in = *pSrc++ >> 8;
;;;136        sum += in;
;;;137        sumOfSquares += ((q63_t) (in) * (in));
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
;;;141      }
;;;142    
;;;143      /* Compute Mean of squares of the input samples    
;;;144       * and then store the result in a temporary variable, meanOfSquares. */
;;;145      meanOfSquares = sumOfSquares / (q63_t)(blockSize - 1);
;;;146    
;;;147    #else
;;;148    
;;;149      /* Run the below code for Cortex-M0 */
;;;150    
;;;151      /* Loop over blockSize number of values */
;;;152      blkCnt = blockSize;
;;;153    
;;;154      while(blkCnt > 0u)
;;;155      {
;;;156        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;157        /* Compute Sum of squares of the input samples     
;;;158         * and then store the result in a temporary variable, sumOfSquares. */
;;;159        in = *pSrc++ >> 8;
;;;160        sumOfSquares += ((q63_t) (in) * (in));
;;;161    
;;;162        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;163        /* Compute sum of all input values and then store the result in a temporary variable, sum. */
;;;164        sum += in;
;;;165    
;;;166        /* Decrement the loop counter */
;;;167        blkCnt--;
;;;168      }
;;;169    
;;;170      /* Compute Mean of squares of the input samples     
;;;171       * and then store the result in a temporary variable, meanOfSquares. */
;;;172      meanOfSquares = sumOfSquares / (q63_t)(blockSize - 1);
;;;173    
;;;174    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;175    
;;;176      /* Compute square of mean */
;;;177      squareOfMean = sum * sum / (q63_t)(blockSize * (blockSize - 1u));
;;;178    
;;;179      /* Compute standard deviation and then store the result to the destination */
;;;180      arm_sqrt_q31((meanOfSquares - squareOfMean) >> 15, pResult);
;;;181    
;;;182    }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L1.36|
000024  6817              LDR      r7,[r2,#0]            ;109
000026  f1a30301          SUB      r3,r3,#1              ;120
00002a  123f              ASRS     r7,r7,#8              ;109
00002c  fbc70107          SMLAL    r0,r1,r7,r7           ;111
000030  19ed              ADDS     r5,r5,r7              ;109
000032  eb4474e7          ADC      r4,r4,r7,ASR #31      ;109
000036  6857              LDR      r7,[r2,#4]            ;112
000038  ea4f2727          ASR      r7,r7,#8              ;112
00003c  fbc70107          SMLAL    r0,r1,r7,r7           ;114
000040  19ed              ADDS     r5,r5,r7              ;112
000042  eb4474e7          ADC      r4,r4,r7,ASR #31      ;112
000046  6897              LDR      r7,[r2,#8]            ;115
000048  ea4f2727          ASR      r7,r7,#8              ;115
00004c  fbc70107          SMLAL    r0,r1,r7,r7           ;117
000050  19ed              ADDS     r5,r5,r7              ;115
000052  eb4474e7          ADC      r4,r4,r7,ASR #31      ;115
000056  68d7              LDR      r7,[r2,#0xc]          ;118
000058  f1020210          ADD      r2,r2,#0x10           ;118
00005c  ea4f2727          ASR      r7,r7,#8              ;118
000060  fbc70107          SMLAL    r0,r1,r7,r7           ;120
000064  19ed              ADDS     r5,r5,r7              ;118
000066  eb4474e7          ADC      r4,r4,r7,ASR #31      ;118
                  |L1.106|
00006a  2b00              CMP      r3,#0                 ;104
00006c  d1da              BNE      |L1.36|
00006e  f0060703          AND      r7,r6,#3              ;128
000072  e008              B        |L1.134|
                  |L1.116|
000074  ca08              LDM      r2!,{r3}              ;135
000076  f1a70701          SUB      r7,r7,#1              ;137
00007a  121b              ASRS     r3,r3,#8              ;135
00007c  fbc30103          SMLAL    r0,r1,r3,r3           ;137
000080  18ed              ADDS     r5,r5,r3              ;135
000082  eb4474e3          ADC      r4,r4,r3,ASR #31      ;135
                  |L1.134|
000086  2f00              CMP      r7,#0                 ;130
000088  d1f4              BNE      |L1.116|
00008a  f1a60701          SUB      r7,r6,#1              ;145
00008e  463a              MOV      r2,r7                 ;145
000090  f04f0300          MOV      r3,#0                 ;145
000094  f7fffffe          BL       __aeabi_ldivmod
000098  4680              MOV      r8,r0                 ;145
00009a  4689              MOV      r9,r1                 ;145
00009c  fba50105          UMULL    r0,r1,r5,r5           ;177
0000a0  fb041105          MLA      r1,r4,r5,r1           ;177
0000a4  fb051104          MLA      r1,r5,r4,r1           ;177
0000a8  fb06f207          MUL      r2,r6,r7              ;177
0000ac  2300              MOVS     r3,#0                 ;177
0000ae  f7fffffe          BL       __aeabi_ldivmod
0000b2  ebb80000          SUBS     r0,r8,r0              ;177
0000b6  eb690101          SBC      r1,r9,r1              ;177
0000ba  0bc0              LSRS     r0,r0,#15             ;180
0000bc  ea404041          ORR      r0,r0,r1,LSL #17      ;180
0000c0  4651              MOV      r1,r10                ;180
0000c2  e8bd47f0          POP      {r4-r10,lr}           ;180
0000c6  f7ffbffe          B.W      arm_sqrt_q31
;;;183    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_std_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q31_c_6b22065d____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_std_q31_c_6b22065d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q31_c_6b22065d____REVSH|
#line 144
|__asm___13_arm_std_q31_c_6b22065d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q31_c_6b22065d____RRX|
#line 300
|__asm___13_arm_std_q31_c_6b22065d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
