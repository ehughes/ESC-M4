; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_lattice_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_lattice_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_fir_lattice_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_lattice_q31.c]
                          THUMB

                          AREA ||i.arm_fir_lattice_q31||, CODE, READONLY, ALIGN=2

                  arm_fir_lattice_q31 PROC
;;;69     
;;;70     void arm_fir_lattice_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;71       const arm_fir_lattice_instance_q31 * S,
;;;72       q31_t * pSrc,
;;;73       q31_t * pDst,
;;;74       uint32_t blockSize)
;;;75     {
000004  b083              SUB      sp,sp,#0xc
000006  4696              MOV      lr,r2
;;;76       q31_t *pState;                                 /* State pointer */
;;;77       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
;;;78       q31_t *px;                                     /* temporary state pointer */
;;;79       q31_t *pk;                                     /* temporary coefficient pointer */
;;;80       q31_t fcurr1, fnext1, gcurr1 = 0, gnext1;      /* temporary variables for first sample in loop unrolling */
;;;81       q31_t fcurr2, fnext2, gnext2;                  /* temporary variables for second sample in loop unrolling */
;;;82       uint32_t numStages = S->numStages;             /* Length of the filter */
000008  8802              LDRH     r2,[r0,#0]
00000a  f8d0b008          LDR      r11,[r0,#8]
;;;83       uint32_t blkCnt, stageCnt;                     /* temporary variables for counts */
;;;84       q31_t k;
;;;85     
;;;86       pState = &S->pState[0];
00000e  9202              STR      r2,[sp,#8]
;;;87     
;;;88       blkCnt = blockSize >> 1u;
000010  f8d0a004          LDR      r10,[r0,#4]
000014  9806              LDR      r0,[sp,#0x18]
000016  0840              LSRS     r0,r0,#1
                  |L1.24|
000018  ea5f0900          MOVS     r9,r0
00001c  d046              BEQ      |L1.172|
00001e  e8f15702          LDRD     r5,r7,[r1],#8
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 2 outputs at a time.        
;;;91          a second loop below computes the remaining 1 sample. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94         /* f0(n) = x(n) */
;;;95         fcurr1 = *pSrc++;
;;;96     
;;;97         /* f0(n) = x(n) */
;;;98         fcurr2 = *pSrc++;
;;;99     
;;;100        /* Initialize coeff pointer */
;;;101        pk = (pCoeffs);
;;;102    
;;;103        /* Initialize state pointer */
;;;104        px = pState;
;;;105    
;;;106        /* read g0(n - 1) from state buffer */
;;;107        gcurr1 = *px;
;;;108    
;;;109        /* Read the reflection coefficient */
;;;110        k = *pk++;
000022  f8da6000          LDR      r6,[r10,#0]
;;;111    
;;;112        /* for sample 1 processing */
;;;113        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;114        fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
000026  f8db4000          LDR      r4,[r11,#0]
00002a  f10b0204          ADD      r2,r11,#4             ;110
00002e  fb56f304          SMMUL    r3,r6,r4
;;;115    
;;;116        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;117        gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
000032  fb55fc04          SMMUL    r12,r5,r4
;;;118        fnext1 = fcurr1 + (fnext1 << 1u);
000036  eb050343          ADD      r3,r5,r3,LSL #1
;;;119        gnext1 = gcurr1 + (gnext1 << 1u);
00003a  eb06064c          ADD      r6,r6,r12,LSL #1
;;;120    
;;;121        /* for sample 1 processing */
;;;122        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;123        fnext2 = (q31_t) (((q63_t) fcurr1 * k) >> 32);
00003e  fb55f804          SMMUL    r8,r5,r4
;;;124    
;;;125        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;126        gnext2 = (q31_t) (((q63_t) fcurr2 * (k)) >> 32);
000042  fb57fc04          SMMUL    r12,r7,r4
;;;127        fnext2 = fcurr2 + (fnext2 << 1u);
000046  eb070448          ADD      r4,r7,r8,LSL #1
;;;128        gnext2 = fcurr1 + (gnext2 << 1u);
;;;129    
;;;130        /* save g1(n) in state buffer */
;;;131        *px++ = fcurr2;
;;;132    
;;;133        /* f1(n) is saved in fcurr1        
;;;134           for next stage processing */
;;;135        fcurr1 = fnext1;
;;;136        fcurr2 = fnext2;
;;;137    
;;;138        stageCnt = (numStages - 1u);
00004a  f8ca7000          STR      r7,[r10,#0]
00004e  eb05054c          ADD      r5,r5,r12,LSL #1      ;128
000052  f10a0004          ADD      r0,r10,#4             ;131
;;;139    
;;;140        /* stage loop */
;;;141        while(stageCnt > 0u)
000056  9f02              LDR      r7,[sp,#8]
000058  e01d              B        |L1.150|
;;;142        {
;;;143    
;;;144          /* Read the reflection coefficient */
;;;145          k = *pk++;
00005a  bf00              NOP      
                  |L1.92|
00005c  f852cb04          LDR      r12,[r2],#4
;;;146    
;;;147          /* read g2(n) from state buffer */
;;;148          gcurr1 = *px;
;;;149    
;;;150          /* save g1(n) in state buffer */
;;;151          *px++ = gnext2;
000060  f8d08000          LDR      r8,[r0,#0]
000064  c020              STM      r0!,{r5}
;;;152    
;;;153          /* Sample processing for K2, K3.... */
;;;154          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;155          fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
000066  fb58f50c          SMMUL    r5,r8,r12
;;;156          fnext2 = (q31_t) (((q63_t) gnext1 * k) >> 32);
00006a  9500              STR      r5,[sp,#0]
00006c  fb56f50c          SMMUL    r5,r6,r12
;;;157    
;;;158          fnext1 = fcurr1 + (fnext1 << 1u);
000070  9501              STR      r5,[sp,#4]
000072  9d00              LDR      r5,[sp,#0]
000074  eb030545          ADD      r5,r3,r5,LSL #1
;;;159          fnext2 = fcurr2 + (fnext2 << 1u);
000078  9500              STR      r5,[sp,#0]
00007a  9d01              LDR      r5,[sp,#4]
00007c  eb040545          ADD      r5,r4,r5,LSL #1
;;;160    
;;;161          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;162          gnext2 = (q31_t) (((q63_t) fcurr2 * (k)) >> 32);
000080  fb54f40c          SMMUL    r4,r4,r12
;;;163          gnext2 = gnext1 + (gnext2 << 1u);
000084  9501              STR      r5,[sp,#4]
000086  eb060544          ADD      r5,r6,r4,LSL #1
;;;164    
;;;165          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;166          gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
00008a  fb53f30c          SMMUL    r3,r3,r12
;;;167          gnext1 = gcurr1 + (gnext1 << 1u);
00008e  eb080643          ADD      r6,r8,r3,LSL #1
000092  e9dd3400          LDRD     r3,r4,[sp,#0]
                  |L1.150|
000096  1e7f              SUBS     r7,r7,#1
000098  d1e0              BNE      |L1.92|
;;;168    
;;;169          /* f1(n) is saved in fcurr1        
;;;170             for next stage processing */
;;;171          fcurr1 = fnext1;
;;;172          fcurr2 = fnext2;
;;;173    
;;;174          stageCnt--;
;;;175    
;;;176        }
;;;177    
;;;178        /* y(n) = fN(n) */
;;;179        *pDst++ = fcurr1;
00009a  f10e0004          ADD      r0,lr,#4
;;;180        *pDst++ = fcurr2;
00009e  f8ce3000          STR      r3,[lr,#0]
0000a2  c010              STM      r0!,{r4}
0000a4  4686              MOV      lr,r0
;;;181    
;;;182        blkCnt--;
0000a6  f1a90001          SUB      r0,r9,#1
0000aa  e7b5              B        |L1.24|
                  |L1.172|
;;;183    
;;;184      }
;;;185    
;;;186      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;187       ** No loop unrolling is used. */
;;;188      blkCnt = blockSize % 0x2u;
0000ac  9806              LDR      r0,[sp,#0x18]
0000ae  f0000501          AND      r5,r0,#1
;;;189    
;;;190      while(blkCnt > 0u)
0000b2  e026              B        |L1.258|
                  |L1.180|
;;;191      {
;;;192        /* f0(n) = x(n) */
;;;193        fcurr1 = *pSrc++;
0000b4  c910              LDM      r1!,{r4}
;;;194    
;;;195        /* Initialize coeff pointer */
;;;196        pk = (pCoeffs);
;;;197    
;;;198        /* Initialize state pointer */
;;;199        px = pState;
;;;200    
;;;201        /* read g0(n - 1) from state buffer */
;;;202        gcurr1 = *px;
;;;203    
;;;204        /* Read the reflection coefficient */
;;;205        k = *pk++;
0000b6  f8da6000          LDR      r6,[r10,#0]
;;;206    
;;;207        /* for sample 1 processing */
;;;208        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;209        fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
0000ba  f8db7000          LDR      r7,[r11,#0]
0000be  f10b0304          ADD      r3,r11,#4             ;205
0000c2  fb56f207          SMMUL    r2,r6,r7
;;;210        fnext1 = fcurr1 + (fnext1 << 1u);
0000c6  eb040242          ADD      r2,r4,r2,LSL #1
;;;211    
;;;212        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;213        gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
0000ca  fb54f707          SMMUL    r7,r4,r7
;;;214        gnext1 = gcurr1 + (gnext1 << 1u);
;;;215    
;;;216        /* save g1(n) in state buffer */
;;;217        *px++ = fcurr1;
;;;218    
;;;219        /* f1(n) is saved in fcurr1        
;;;220           for next stage processing */
;;;221        fcurr1 = fnext1;
;;;222    
;;;223        stageCnt = (numStages - 1u);
0000ce  f8ca4000          STR      r4,[r10,#0]
0000d2  eb060c47          ADD      r12,r6,r7,LSL #1      ;214
0000d6  f10a0004          ADD      r0,r10,#4             ;217
;;;224    
;;;225        /* stage loop */
;;;226        while(stageCnt > 0u)
0000da  9c02              LDR      r4,[sp,#8]
0000dc  e00c              B        |L1.248|
                  |L1.222|
;;;227        {
;;;228          /* Read the reflection coefficient */
;;;229          k = *pk++;
0000de  cb80              LDM      r3!,{r7}
;;;230    
;;;231          /* read g2(n) from state buffer */
;;;232          gcurr1 = *px;
;;;233    
;;;234          /* save g1(n) in state buffer */
;;;235          *px++ = gnext1;
0000e0  6806              LDR      r6,[r0,#0]
0000e2  f840cb04          STR      r12,[r0],#4
;;;236    
;;;237          /* Sample processing for K2, K3.... */
;;;238          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;239          fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
0000e6  fb56fc07          SMMUL    r12,r6,r7
;;;240          fnext1 = fcurr1 + (fnext1 << 1u);
0000ea  eb02084c          ADD      r8,r2,r12,LSL #1
;;;241    
;;;242          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;243          gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
0000ee  fb52f207          SMMUL    r2,r2,r7
;;;244          gnext1 = gcurr1 + (gnext1 << 1u);
0000f2  eb060c42          ADD      r12,r6,r2,LSL #1
;;;245    
;;;246          /* f1(n) is saved in fcurr1        
;;;247             for next stage processing */
;;;248          fcurr1 = fnext1;
0000f6  4642              MOV      r2,r8
                  |L1.248|
0000f8  1e64              SUBS     r4,r4,#1
0000fa  d1f0              BNE      |L1.222|
;;;249    
;;;250          stageCnt--;
;;;251    
;;;252        }
;;;253    
;;;254    
;;;255        /* y(n) = fN(n) */
;;;256        *pDst++ = fcurr1;
0000fc  f84e2b04          STR      r2,[lr],#4
000100  1e6d              SUBS     r5,r5,#1
                  |L1.258|
000102  2d00              CMP      r5,#0                 ;190
000104  d1d6              BNE      |L1.180|
;;;257    
;;;258        blkCnt--;
;;;259    
;;;260      }
;;;261    
;;;262    
;;;263    }
000106  b007              ADD      sp,sp,#0x1c
000108  e8bd8ff0          POP      {r4-r11,pc}
;;;264    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_lattice_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q31_c_18f0082c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_fir_lattice_q31_c_18f0082c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q31_c_18f0082c____REVSH|
#line 144
|__asm___21_arm_fir_lattice_q31_c_18f0082c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q31_c_18f0082c____RRX|
#line 300
|__asm___21_arm_fir_lattice_q31_c_18f0082c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
