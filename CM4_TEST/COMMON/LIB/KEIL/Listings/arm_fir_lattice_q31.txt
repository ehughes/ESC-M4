; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_lattice_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_lattice_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fir_lattice_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_lattice_q31.c]
                          THUMB

                          AREA ||i.arm_fir_lattice_q31||, CODE, READONLY, ALIGN=1

                  arm_fir_lattice_q31 PROC
;;;69     
;;;70     void arm_fir_lattice_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;71       const arm_fir_lattice_instance_q31 * S,
;;;72       q31_t * pSrc,
;;;73       q31_t * pDst,
;;;74       uint32_t blockSize)
;;;75     {
000004  b083              SUB      sp,sp,#0xc
;;;76       q31_t *pState;                                 /* State pointer */
;;;77       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000006  6883              LDR      r3,[r0,#8]
000008  9301              STR      r3,[sp,#4]
;;;78       q31_t *px;                                     /* temporary state pointer */
;;;79       q31_t *pk;                                     /* temporary coefficient pointer */
;;;80       q31_t fcurr1, fnext1, gcurr1 = 0, gnext1;      /* temporary variables for first sample in loop unrolling */
;;;81       q31_t fcurr2, fnext2, gnext2;                  /* temporary variables for second sample in loop unrolling */
;;;82       uint32_t numStages = S->numStages;             /* Length of the filter */
00000a  8803              LDRH     r3,[r0,#0]
00000c  9300              STR      r3,[sp,#0]
;;;83       uint32_t blkCnt, stageCnt;                     /* temporary variables for counts */
;;;84       q31_t k;
;;;85     
;;;86       pState = &S->pState[0];
00000e  6840              LDR      r0,[r0,#4]
000010  9002              STR      r0,[sp,#8]
;;;87     
;;;88       blkCnt = blockSize >> 1u;
000012  9806              LDR      r0,[sp,#0x18]
000014  ea4f0a50          LSR      r10,r0,#1
000018  e03a              B        |L1.144|
                  |L1.26|
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 2 outputs at a time.        
;;;91          a second loop below computes the remaining 1 sample. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94         /* f0(n) = x(n) */
;;;95         fcurr1 = *pSrc++;
00001a  6808              LDR      r0,[r1,#0]
;;;96     
;;;97         /* f0(n) = x(n) */
;;;98         fcurr2 = *pSrc++;
00001c  684f              LDR      r7,[r1,#4]
00001e  3108              ADDS     r1,r1,#8
;;;99     
;;;100        /* Initialize coeff pointer */
;;;101        pk = (pCoeffs);
000020  9e01              LDR      r6,[sp,#4]
;;;102    
;;;103        /* Initialize state pointer */
;;;104        px = pState;
000022  9b02              LDR      r3,[sp,#8]
;;;105    
;;;106        /* read g0(n - 1) from state buffer */
;;;107        gcurr1 = *px;
000024  f8d3c000          LDR      r12,[r3,#0]
;;;108    
;;;109        /* Read the reflection coefficient */
;;;110        k = *pk++;
000028  ce20              LDM      r6!,{r5}
;;;111    
;;;112        /* for sample 1 processing */
;;;113        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;114        fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
00002a  fb5cf405          SMMUL    r4,r12,r5
;;;115    
;;;116        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;117        gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
00002e  fb50f805          SMMUL    r8,r0,r5
;;;118        fnext1 = fcurr1 + (fnext1 << 1u);
000032  eb000444          ADD      r4,r0,r4,LSL #1
;;;119        gnext1 = gcurr1 + (gnext1 << 1u);
000036  eb0c0c48          ADD      r12,r12,r8,LSL #1
;;;120    
;;;121        /* for sample 1 processing */
;;;122        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;123        fnext2 = (q31_t) (((q63_t) fcurr1 * k) >> 32);
00003a  fb50f905          SMMUL    r9,r0,r5
;;;124    
;;;125        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;126        gnext2 = (q31_t) (((q63_t) fcurr2 * (k)) >> 32);
00003e  fb57f805          SMMUL    r8,r7,r5
;;;127        fnext2 = fcurr2 + (fnext2 << 1u);
000042  eb070549          ADD      r5,r7,r9,LSL #1
;;;128        gnext2 = fcurr1 + (gnext2 << 1u);
000046  eb000948          ADD      r9,r0,r8,LSL #1
;;;129    
;;;130        /* save g1(n) in state buffer */
;;;131        *px++ = fcurr2;
00004a  c380              STM      r3!,{r7}
;;;132    
;;;133        /* f1(n) is saved in fcurr1        
;;;134           for next stage processing */
;;;135        fcurr1 = fnext1;
;;;136        fcurr2 = fnext2;
;;;137    
;;;138        stageCnt = (numStages - 1u);
00004c  9f00              LDR      r7,[sp,#0]
00004e  1e7f              SUBS     r7,r7,#1
;;;139    
;;;140        /* stage loop */
;;;141        while(stageCnt > 0u)
000050  e017              B        |L1.130|
                  |L1.82|
;;;142        {
;;;143    
;;;144          /* Read the reflection coefficient */
;;;145          k = *pk++;
000052  ce01              LDM      r6!,{r0}
;;;146    
;;;147          /* read g2(n) from state buffer */
;;;148          gcurr1 = *px;
000054  f8d38000          LDR      r8,[r3,#0]
;;;149    
;;;150          /* save g1(n) in state buffer */
;;;151          *px++ = gnext2;
000058  f8439b04          STR      r9,[r3],#4
;;;152    
;;;153          /* Sample processing for K2, K3.... */
;;;154          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;155          fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
00005c  fb58fb00          SMMUL    r11,r8,r0
;;;156          fnext2 = (q31_t) (((q63_t) gnext1 * k) >> 32);
000060  fb5cf900          SMMUL    r9,r12,r0
;;;157    
;;;158          fnext1 = fcurr1 + (fnext1 << 1u);
000064  eb040b4b          ADD      r11,r4,r11,LSL #1
;;;159          fnext2 = fcurr2 + (fnext2 << 1u);
000068  eb050e49          ADD      lr,r5,r9,LSL #1
;;;160    
;;;161          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;162          gnext2 = (q31_t) (((q63_t) fcurr2 * (k)) >> 32);
00006c  fb55f500          SMMUL    r5,r5,r0
;;;163          gnext2 = gnext1 + (gnext2 << 1u);
000070  eb0c0945          ADD      r9,r12,r5,LSL #1
;;;164    
;;;165          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;166          gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
000074  fb54f000          SMMUL    r0,r4,r0
;;;167          gnext1 = gcurr1 + (gnext1 << 1u);
000078  eb080c40          ADD      r12,r8,r0,LSL #1
;;;168    
;;;169          /* f1(n) is saved in fcurr1        
;;;170             for next stage processing */
;;;171          fcurr1 = fnext1;
00007c  465c              MOV      r4,r11
;;;172          fcurr2 = fnext2;
00007e  4675              MOV      r5,lr
;;;173    
;;;174          stageCnt--;
000080  1e7f              SUBS     r7,r7,#1
                  |L1.130|
000082  2f00              CMP      r7,#0                 ;141
000084  d1e5              BNE      |L1.82|
;;;175    
;;;176        }
;;;177    
;;;178        /* y(n) = fN(n) */
;;;179        *pDst++ = fcurr1;
000086  6014              STR      r4,[r2,#0]
;;;180        *pDst++ = fcurr2;
000088  6055              STR      r5,[r2,#4]
00008a  3208              ADDS     r2,r2,#8
;;;181    
;;;182        blkCnt--;
00008c  f1aa0a01          SUB      r10,r10,#1
                  |L1.144|
000090  f1ba0f00          CMP      r10,#0                ;92
000094  d1c1              BNE      |L1.26|
;;;183    
;;;184      }
;;;185    
;;;186      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;187       ** No loop unrolling is used. */
;;;188      blkCnt = blockSize % 0x2u;
000096  9806              LDR      r0,[sp,#0x18]
000098  f0000801          AND      r8,r0,#1
;;;189    
;;;190      while(blkCnt > 0u)
00009c  e023              B        |L1.230|
                  |L1.158|
;;;191      {
;;;192        /* f0(n) = x(n) */
;;;193        fcurr1 = *pSrc++;
00009e  c920              LDM      r1!,{r5}
;;;194    
;;;195        /* Initialize coeff pointer */
;;;196        pk = (pCoeffs);
0000a0  9c01              LDR      r4,[sp,#4]
;;;197    
;;;198        /* Initialize state pointer */
;;;199        px = pState;
0000a2  9802              LDR      r0,[sp,#8]
;;;200    
;;;201        /* read g0(n - 1) from state buffer */
;;;202        gcurr1 = *px;
0000a4  6806              LDR      r6,[r0,#0]
;;;203    
;;;204        /* Read the reflection coefficient */
;;;205        k = *pk++;
0000a6  cc80              LDM      r4!,{r7}
;;;206    
;;;207        /* for sample 1 processing */
;;;208        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;209        fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
0000a8  fb56f307          SMMUL    r3,r6,r7
;;;210        fnext1 = fcurr1 + (fnext1 << 1u);
0000ac  eb050343          ADD      r3,r5,r3,LSL #1
;;;211    
;;;212        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;213        gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
0000b0  fb55f707          SMMUL    r7,r5,r7
;;;214        gnext1 = gcurr1 + (gnext1 << 1u);
0000b4  eb060c47          ADD      r12,r6,r7,LSL #1
;;;215    
;;;216        /* save g1(n) in state buffer */
;;;217        *px++ = fcurr1;
0000b8  c020              STM      r0!,{r5}
;;;218    
;;;219        /* f1(n) is saved in fcurr1        
;;;220           for next stage processing */
;;;221        fcurr1 = fnext1;
;;;222    
;;;223        stageCnt = (numStages - 1u);
0000ba  9d00              LDR      r5,[sp,#0]
0000bc  1e6d              SUBS     r5,r5,#1
;;;224    
;;;225        /* stage loop */
;;;226        while(stageCnt > 0u)
0000be  e00d              B        |L1.220|
                  |L1.192|
;;;227        {
;;;228          /* Read the reflection coefficient */
;;;229          k = *pk++;
0000c0  cc80              LDM      r4!,{r7}
;;;230    
;;;231          /* read g2(n) from state buffer */
;;;232          gcurr1 = *px;
0000c2  6806              LDR      r6,[r0,#0]
;;;233    
;;;234          /* save g1(n) in state buffer */
;;;235          *px++ = gnext1;
0000c4  f840cb04          STR      r12,[r0],#4
;;;236    
;;;237          /* Sample processing for K2, K3.... */
;;;238          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;239          fnext1 = (q31_t) (((q63_t) gcurr1 * k) >> 32);
0000c8  fb56fc07          SMMUL    r12,r6,r7
;;;240          fnext1 = fcurr1 + (fnext1 << 1u);
0000cc  eb03094c          ADD      r9,r3,r12,LSL #1
;;;241    
;;;242          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;243          gnext1 = (q31_t) (((q63_t) fcurr1 * (k)) >> 32);
0000d0  fb53f307          SMMUL    r3,r3,r7
;;;244          gnext1 = gcurr1 + (gnext1 << 1u);
0000d4  eb060c43          ADD      r12,r6,r3,LSL #1
;;;245    
;;;246          /* f1(n) is saved in fcurr1        
;;;247             for next stage processing */
;;;248          fcurr1 = fnext1;
0000d8  464b              MOV      r3,r9
;;;249    
;;;250          stageCnt--;
0000da  1e6d              SUBS     r5,r5,#1
                  |L1.220|
0000dc  2d00              CMP      r5,#0                 ;226
0000de  d1ef              BNE      |L1.192|
;;;251    
;;;252        }
;;;253    
;;;254    
;;;255        /* y(n) = fN(n) */
;;;256        *pDst++ = fcurr1;
0000e0  c208              STM      r2!,{r3}
;;;257    
;;;258        blkCnt--;
0000e2  f1a80801          SUB      r8,r8,#1
                  |L1.230|
0000e6  f1b80f00          CMP      r8,#0                 ;190
0000ea  d1d8              BNE      |L1.158|
;;;259    
;;;260      }
;;;261    
;;;262    
;;;263    }
0000ec  b007              ADD      sp,sp,#0x1c
0000ee  e8bd8ff0          POP      {r4-r11,pc}
;;;264    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_lattice_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q31_c_18f0082c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_fir_lattice_q31_c_18f0082c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q31_c_18f0082c____REVSH|
#line 144
|__asm___21_arm_fir_lattice_q31_c_18f0082c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q31_c_18f0082c____RRX|
#line 300
|__asm___21_arm_fir_lattice_q31_c_18f0082c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
