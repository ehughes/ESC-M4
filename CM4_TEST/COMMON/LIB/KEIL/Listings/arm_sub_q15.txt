; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_sub_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sub_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_sub_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_sub_q15.c]
                          THUMB

                          AREA ||i.arm_sub_q15||, CODE, READONLY, ALIGN=1

                  arm_sub_q15 PROC
;;;65     
;;;66     void arm_sub_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;67       q15_t * pSrcA,
;;;68       q15_t * pSrcB,
;;;69       q15_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       q31_t inA1, inA2;
;;;79       q31_t inB1, inB2;
;;;80     
;;;81       /*loop Unrolling */
;;;82       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e00e              B        |L1.36|
                  |L1.6|
;;;83     
;;;84       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;85        ** a second loop below computes the remaining 1 to 3 samples. */
;;;86       while(blkCnt > 0u)
;;;87       {
;;;88         /* C = A - B */
;;;89         /* Subtract and then store the results in the destination buffer two samples at a time. */
;;;90         inA1 = *__SIMD32(pSrcA)++;
000006  6806              LDR      r6,[r0,#0]
;;;91         inA2 = *__SIMD32(pSrcA)++;
000008  6845              LDR      r5,[r0,#4]
00000a  3008              ADDS     r0,r0,#8
;;;92         inB1 = *__SIMD32(pSrcB)++;
00000c  f8517b04          LDR      r7,[r1],#4
;;;93         inB2 = *__SIMD32(pSrcB)++;
000010  f851cb04          LDR      r12,[r1],#4
;;;94     
;;;95         *__SIMD32(pDst)++ = __QSUB16(inA1, inB1);
000014  fad6f617          QSUB16   r6,r6,r7
000018  6016              STR      r6,[r2,#0]
;;;96         *__SIMD32(pDst)++ = __QSUB16(inA2, inB2);
00001a  fad5f51c          QSUB16   r5,r5,r12
00001e  6055              STR      r5,[r2,#4]
000020  3208              ADDS     r2,r2,#8
;;;97     
;;;98         /* Decrement the loop counter */
;;;99         blkCnt--;
000022  1e64              SUBS     r4,r4,#1
                  |L1.36|
000024  2c00              CMP      r4,#0                 ;86
000026  d1ee              BNE      |L1.6|
;;;100      }
;;;101    
;;;102      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;103       ** No loop unrolling is used. */
;;;104      blkCnt = blockSize % 0x4u;
000028  f0030303          AND      r3,r3,#3
;;;105    
;;;106      while(blkCnt > 0u)
00002c  e008              B        |L1.64|
                  |L1.46|
;;;107      {
;;;108        /* C = A - B */
;;;109        /* Subtract and then store the result in the destination buffer. */
;;;110        *pDst++ = (q15_t) __QSUB16(*pSrcA++, *pSrcB++);
00002e  f9304b02          LDRSH    r4,[r0],#2
000032  f9315b02          LDRSH    r5,[r1],#2
000036  fad4f415          QSUB16   r4,r4,r5
00003a  f8224b02          STRH     r4,[r2],#2
;;;111    
;;;112        /* Decrement the loop counter */
;;;113        blkCnt--;
00003e  1e5b              SUBS     r3,r3,#1
                  |L1.64|
000040  2b00              CMP      r3,#0                 ;106
000042  d1f4              BNE      |L1.46|
;;;114      }
;;;115    
;;;116    #else
;;;117    
;;;118      /* Run the below code for Cortex-M0 */
;;;119    
;;;120      /* Initialize blkCnt with number of samples */
;;;121      blkCnt = blockSize;
;;;122    
;;;123      while(blkCnt > 0u)
;;;124      {
;;;125        /* C = A - B */
;;;126        /* Subtract and then store the result in the destination buffer. */
;;;127        *pDst++ = (q15_t) __SSAT(((q31_t) * pSrcA++ - *pSrcB++), 16);
;;;128    
;;;129        /* Decrement the loop counter */
;;;130        blkCnt--;
;;;131      }
;;;132    
;;;133    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;134    
;;;135    
;;;136    }
000044  bdf0              POP      {r4-r7,pc}
;;;137    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_sub_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q15_c_1a6586c3____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_sub_q15_c_1a6586c3____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q15_c_1a6586c3____REVSH|
#line 144
|__asm___13_arm_sub_q15_c_1a6586c3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q15_c_1a6586c3____RRX|
#line 300
|__asm___13_arm_sub_q15_c_1a6586c3____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
