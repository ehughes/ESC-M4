; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix4_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix4_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cfft_radix4_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix4_q31.c]
                          THUMB

                          AREA ||i.arm_cfft_radix4_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix4_q31 PROC
;;;89     
;;;90     void arm_cfft_radix4_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;91       const arm_cfft_radix4_instance_q31 * S,
;;;92       q31_t * pSrc)
;;;93     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;94       if(S->ifftFlag == 1u)
000006  78a0              LDRB     r0,[r4,#2]
;;;95       {
;;;96         /* Complex IFFT radix-4 */
;;;97         arm_radix4_butterfly_inverse_q31(pSrc, S->fftLen, S->pTwiddle,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;94
00000e  2801              CMP      r0,#1                 ;94
000010  d00d              BEQ      |L1.46|
;;;98                                          S->twidCoefModifier);
;;;99       }
;;;100      else
;;;101      {
;;;102        /* Complex FFT radix-4 */
;;;103        arm_radix4_butterfly_q31(pSrc, S->fftLen, S->pTwiddle,
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       arm_radix4_butterfly_q31
                  |L1.24|
;;;104                                 S->twidCoefModifier);
;;;105      }
;;;106    
;;;107    
;;;108      if(S->bitReverseFlag == 1u)
000018  78e0              LDRB     r0,[r4,#3]
00001a  2801              CMP      r0,#1
00001c  d10b              BNE      |L1.54|
;;;109      {
;;;110        /*  Bit Reversal */
;;;111        arm_bitreversal_q31(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
00001e  89e2              LDRH     r2,[r4,#0xe]
000020  8821              LDRH     r1,[r4,#0]
000022  4628              MOV      r0,r5
000024  68a3              LDR      r3,[r4,#8]
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      arm_bitreversal_q31
                  |L1.46|
00002e  4628              MOV      r0,r5                 ;97
000030  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
000034  e7f0              B        |L1.24|
                  |L1.54|
;;;112      }
;;;113    
;;;114    }
000036  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP


                          AREA ||i.arm_radix4_butterfly_inverse_q31||, CODE, READONLY, ALIGN=1

                  arm_radix4_butterfly_inverse_q31 PROC
;;;818    
;;;819    void arm_radix4_butterfly_inverse_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;820      q31_t * pSrc,
;;;821      uint32_t fftLen,
;;;822      q31_t * pCoef,
;;;823      uint32_t twidCoefModifier)
;;;824    {
000004  b08f              SUB      sp,sp,#0x3c
;;;825    #if defined(ARM_MATH_CM7)
;;;826      uint32_t n1, n2, ia1, ia2, ia3, i0, i1, i2, i3, j, k;
;;;827      q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;828      q31_t xa, xb, xc, xd;
;;;829      q31_t ya, yb, yc, yd;
;;;830      q31_t xa_out, xb_out, xc_out, xd_out;
;;;831      q31_t ya_out, yb_out, yc_out, yd_out;
;;;832    
;;;833      q31_t *ptr1;
;;;834      q63_t xaya, xbyb, xcyc, xdyd;
;;;835    
;;;836      /* input is be 1.31(q31) format for all FFT sizes */
;;;837      /* Total process is divided into three stages */
;;;838      /* process first stage, middle stages, & last stage */
;;;839    
;;;840      /* Start of first stage process */
;;;841    
;;;842      /* Initializations for the first stage */
;;;843      n2 = fftLen;
;;;844      n1 = n2;
;;;845      /* n2 = fftLen/4 */
;;;846      n2 >>= 2u;
;;;847      i0 = 0u;
;;;848      ia1 = 0u;
;;;849    
;;;850      j = n2;
;;;851    
;;;852      do
;;;853      {
;;;854    
;;;855        /* input is in 1.31(q31) format and provide 4 guard bits for the input */
;;;856    
;;;857        /*  index calculation for the input as, */
;;;858        /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;859        i1 = i0 + n2;
;;;860        i2 = i1 + n2;
;;;861        i3 = i2 + n2;
;;;862    
;;;863        /*  Butterfly implementation */
;;;864        /* xa + xc */
;;;865        r1 = (pSrc[2u * i0] >> 4u) + (pSrc[2u * i2] >> 4u);
;;;866        /* xa - xc */
;;;867        r2 = (pSrc[2u * i0] >> 4u) - (pSrc[2u * i2] >> 4u);
;;;868    
;;;869        /* xb + xd */
;;;870        t1 = (pSrc[2u * i1] >> 4u) + (pSrc[2u * i3] >> 4u);
;;;871    
;;;872        /* ya + yc */
;;;873        s1 = (pSrc[(2u * i0) + 1u] >> 4u) + (pSrc[(2u * i2) + 1u] >> 4u);
;;;874        /* ya - yc */
;;;875        s2 = (pSrc[(2u * i0) + 1u] >> 4u) - (pSrc[(2u * i2) + 1u] >> 4u);
;;;876    
;;;877        /* xa' = xa + xb + xc + xd */
;;;878        pSrc[2u * i0] = (r1 + t1);
;;;879        /* (xa + xc) - (xb + xd) */
;;;880        r1 = r1 - t1;
;;;881        /* yb + yd */
;;;882        t2 = (pSrc[(2u * i1) + 1u] >> 4u) + (pSrc[(2u * i3) + 1u] >> 4u);
;;;883        /* ya' = ya + yb + yc + yd */
;;;884        pSrc[(2u * i0) + 1u] = (s1 + t2);
;;;885    
;;;886        /* (ya + yc) - (yb + yd) */
;;;887        s1 = s1 - t2;
;;;888    
;;;889        /* yb - yd */
;;;890        t1 = (pSrc[(2u * i1) + 1u] >> 4u) - (pSrc[(2u * i3) + 1u] >> 4u);
;;;891        /* xb - xd */
;;;892        t2 = (pSrc[2u * i1] >> 4u) - (pSrc[2u * i3] >> 4u);
;;;893    
;;;894        /*  index calculation for the coefficients */
;;;895        ia2 = 2u * ia1;
;;;896        co2 = pCoef[ia2 * 2u];
;;;897        si2 = pCoef[(ia2 * 2u) + 1u];
;;;898    
;;;899        /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;900        pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32)) -
;;;901                         ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;902    
;;;903        /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;904        pSrc[2u * i1 + 1u] = (((int32_t) (((q63_t) s1 * co2) >> 32)) +
;;;905                              ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;906    
;;;907        /* (xa - xc) - (yb - yd) */
;;;908        r1 = r2 - t1;
;;;909        /* (xa - xc) + (yb - yd) */
;;;910        r2 = r2 + t1;
;;;911    
;;;912        /* (ya - yc) + (xb - xd) */
;;;913        s1 = s2 + t2;
;;;914        /* (ya - yc) - (xb - xd) */
;;;915        s2 = s2 - t2;
;;;916    
;;;917        co1 = pCoef[ia1 * 2u];
;;;918        si1 = pCoef[(ia1 * 2u) + 1u];
;;;919    
;;;920        /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;921        pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
;;;922                         ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;923    
;;;924        /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;925        pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
;;;926                                ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;927    
;;;928        /*  index calculation for the coefficients */
;;;929        ia3 = 3u * ia1;
;;;930        co3 = pCoef[ia3 * 2u];
;;;931        si3 = pCoef[(ia3 * 2u) + 1u];
;;;932    
;;;933        /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;934        pSrc[2u * i3] = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
;;;935                         ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;936    
;;;937        /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;938        pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
;;;939                                ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;940    
;;;941        /*  Twiddle coefficients index modifier */
;;;942        ia1 = ia1 + twidCoefModifier;
;;;943    
;;;944        /*  Updating input index */
;;;945        i0 = i0 + 1u;
;;;946    
;;;947      } while(--j);
;;;948    
;;;949      /* data is in 5.27(q27) format */
;;;950      /* each stage provides two down scaling of the input */
;;;951    
;;;952    
;;;953      /* Start of Middle stages process */
;;;954    
;;;955      twidCoefModifier <<= 2u;
;;;956    
;;;957      /*  Calculation of second stage to excluding last stage */
;;;958      for (k = fftLen / 4u; k > 4u; k >>= 2u)
;;;959      {
;;;960        /*  Initializations for the first stage */
;;;961        n1 = n2;
;;;962        n2 >>= 2u;
;;;963        ia1 = 0u;
;;;964    
;;;965        for (j = 0; j <= (n2 - 1u); j++)
;;;966        {
;;;967          /*  index calculation for the coefficients */
;;;968          ia2 = ia1 + ia1;
;;;969          ia3 = ia2 + ia1;
;;;970          co1 = pCoef[ia1 * 2u];
;;;971          si1 = pCoef[(ia1 * 2u) + 1u];
;;;972          co2 = pCoef[ia2 * 2u];
;;;973          si2 = pCoef[(ia2 * 2u) + 1u];
;;;974          co3 = pCoef[ia3 * 2u];
;;;975          si3 = pCoef[(ia3 * 2u) + 1u];
;;;976          /*  Twiddle coefficients index modifier */
;;;977          ia1 = ia1 + twidCoefModifier;
;;;978    
;;;979          for (i0 = j; i0 < fftLen; i0 += n1)
;;;980          {
;;;981            /*  index calculation for the input as, */
;;;982            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;983            i1 = i0 + n2;
;;;984            i2 = i1 + n2;
;;;985            i3 = i2 + n2;
;;;986    
;;;987            /*  Butterfly implementation */
;;;988            /* xa + xc */
;;;989            r1 = pSrc[2u * i0] + pSrc[2u * i2];
;;;990            /* xa - xc */
;;;991            r2 = pSrc[2u * i0] - pSrc[2u * i2];
;;;992    
;;;993            /* ya + yc */
;;;994            s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;995            /* ya - yc */
;;;996            s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;997    
;;;998            /* xb + xd */
;;;999            t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;1000   
;;;1001           /* xa' = xa + xb + xc + xd */
;;;1002           pSrc[2u * i0] = (r1 + t1) >> 2u;
;;;1003           /* xa + xc -(xb + xd) */
;;;1004           r1 = r1 - t1;
;;;1005           /* yb + yd */
;;;1006           t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;1007           /* ya' = ya + yb + yc + yd */
;;;1008           pSrc[(2u * i0) + 1u] = (s1 + t2) >> 2u;
;;;1009   
;;;1010           /* (ya + yc) - (yb + yd) */
;;;1011           s1 = s1 - t2;
;;;1012   
;;;1013           /* (yb - yd) */
;;;1014           t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;1015           /* (xb - xd) */
;;;1016           t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;1017   
;;;1018           /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1019           pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32u)) -
;;;1020                            ((int32_t) (((q63_t) s1 * si2) >> 32u))) >> 1u;
;;;1021   
;;;1022           /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1023           pSrc[(2u * i1) + 1u] =
;;;1024             (((int32_t) (((q63_t) s1 * co2) >> 32u)) +
;;;1025              ((int32_t) (((q63_t) r1 * si2) >> 32u))) >> 1u;
;;;1026   
;;;1027           /* (xa - xc) - (yb - yd) */
;;;1028           r1 = r2 - t1;
;;;1029           /* (xa - xc) + (yb - yd) */
;;;1030           r2 = r2 + t1;
;;;1031   
;;;1032           /* (ya - yc) +  (xb - xd) */
;;;1033           s1 = s2 + t2;
;;;1034           /* (ya - yc) -  (xb - xd) */
;;;1035           s2 = s2 - t2;
;;;1036   
;;;1037           /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1038           pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
;;;1039                            ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;1040   
;;;1041           /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1042           pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
;;;1043                                   ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;1044   
;;;1045           /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1046           pSrc[(2u * i3)] = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
;;;1047                              ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;1048   
;;;1049           /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1050           pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
;;;1051                                   ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;1052         }
;;;1053       }
;;;1054       twidCoefModifier <<= 2u;
;;;1055     }
;;;1056   #else
;;;1057     uint32_t n1, n2, ia1, ia2, ia3, i0, j, k;
;;;1058     q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;1059     q31_t xa, xb, xc, xd;
;;;1060     q31_t ya, yb, yc, yd;
;;;1061     q31_t xa_out, xb_out, xc_out, xd_out;
;;;1062     q31_t ya_out, yb_out, yc_out, yd_out;
;;;1063   
;;;1064     q31_t *ptr1;
;;;1065     q31_t *pSi0;
;;;1066     q31_t *pSi1;
;;;1067     q31_t *pSi2;
;;;1068     q31_t *pSi3;
;;;1069     q63_t xaya, xbyb, xcyc, xdyd;
;;;1070   
;;;1071     /* input is be 1.31(q31) format for all FFT sizes */
;;;1072     /* Total process is divided into three stages */
;;;1073     /* process first stage, middle stages, & last stage */
;;;1074   
;;;1075     /* Start of first stage process */
;;;1076   
;;;1077     /* Initializations for the first stage */
;;;1078     n2 = fftLen;
000006  9810              LDR      r0,[sp,#0x40]
;;;1079     n1 = n2;
;;;1080     /* n2 = fftLen/4 */
;;;1081     n2 >>= 2u;
000008  0885              LSRS     r5,r0,#2
00000a  950e              STR      r5,[sp,#0x38]
;;;1082   
;;;1083     ia1 = 0u;
00000c  2300              MOVS     r3,#0
;;;1084   
;;;1085     j = n2;
00000e  950c              STR      r5,[sp,#0x30]
;;;1086     
;;;1087     pSi0 = pSrc;
000010  9c0f              LDR      r4,[sp,#0x3c]
;;;1088     pSi1 = pSi0 + 2 * n2;
000012  eb0400c5          ADD      r0,r4,r5,LSL #3
;;;1089     pSi2 = pSi1 + 2 * n2;
000016  eb0006c5          ADD      r6,r0,r5,LSL #3
;;;1090     pSi3 = pSi2 + 2 * n2;
00001a  eb0601c5          ADD      r1,r6,r5,LSL #3
                  |L2.30|
;;;1091   
;;;1092     do
;;;1093     {
;;;1094       /*  Butterfly implementation */
;;;1095       /* xa + xc */
;;;1096       r1 = (pSi0[0] >> 4u) + (pSi2[0] >> 4u);
00001e  6827              LDR      r7,[r4,#0]
000020  f8d68000          LDR      r8,[r6,#0]
000024  ea4f1c27          ASR      r12,r7,#4
000028  eb0c1728          ADD      r7,r12,r8,ASR #4
;;;1097       /* xa - xc */
;;;1098       r2 = (pSi0[0] >> 4u) - (pSi2[0] >> 4u);
00002c  ebac1928          SUB      r9,r12,r8,ASR #4
000030  f8cd9020          STR      r9,[sp,#0x20]
;;;1099   
;;;1100       /* xb + xd */
;;;1101       t1 = (pSi1[0] >> 4u) + (pSi3[0] >> 4u);
000034  f8d0c000          LDR      r12,[r0,#0]
000038  f8d18000          LDR      r8,[r1,#0]
00003c  ea4f1c2c          ASR      r12,r12,#4
000040  eb0c1828          ADD      r8,r12,r8,ASR #4
;;;1102   
;;;1103       /* ya + yc */
;;;1104       s1 = (pSi0[1] >> 4u) + (pSi2[1] >> 4u);
000044  f8d4c004          LDR      r12,[r4,#4]
000048  f8d6a004          LDR      r10,[r6,#4]
00004c  ea4f192c          ASR      r9,r12,#4
000050  eb091c2a          ADD      r12,r9,r10,ASR #4
;;;1105       /* ya - yc */
;;;1106       s2 = (pSi0[1] >> 4u) - (pSi2[1] >> 4u);
000054  eba9192a          SUB      r9,r9,r10,ASR #4
000058  f8cd9018          STR      r9,[sp,#0x18]
;;;1107   
;;;1108       /* xa' = xa + xb + xc + xd */
;;;1109       *pSi0++ = (r1 + t1);
00005c  eb070908          ADD      r9,r7,r8
000060  f8449b04          STR      r9,[r4],#4
;;;1110       /* (xa + xc) - (xb + xd) */
;;;1111       r1 = r1 - t1;
000064  eba70708          SUB      r7,r7,r8
;;;1112       /* yb + yd */
;;;1113       t2 = (pSi1[1] >> 4u) + (pSi3[1] >> 4u);
000068  f8d08004          LDR      r8,[r0,#4]
00006c  f8d19004          LDR      r9,[r1,#4]
000070  ea4f1828          ASR      r8,r8,#4
000074  eb081829          ADD      r8,r8,r9,ASR #4
;;;1114       /* ya' = ya + yb + yc + yd */
;;;1115       *pSi0++ = (s1 + t2);
000078  eb0c0908          ADD      r9,r12,r8
00007c  f8449b04          STR      r9,[r4],#4
;;;1116   
;;;1117       /* (ya + yc) - (yb + yd) */
;;;1118       s1 = s1 - t2;
000080  ebac0b08          SUB      r11,r12,r8
000084  f8cdb01c          STR      r11,[sp,#0x1c]
;;;1119   
;;;1120       /* yb - yd */
;;;1121       t1 = (pSi1[1] >> 4u) - (pSi3[1] >> 4u);
000088  f8d0c004          LDR      r12,[r0,#4]
00008c  f8d18004          LDR      r8,[r1,#4]
000090  ea4f1c2c          ASR      r12,r12,#4
000094  ebac1c28          SUB      r12,r12,r8,ASR #4
;;;1122       /* xb - xd */
;;;1123       t2 = (pSi1[0] >> 4u) - (pSi3[0] >> 4u);
000098  f8d08000          LDR      r8,[r0,#0]
00009c  ea4f1928          ASR      r9,r8,#4
0000a0  f8d18000          LDR      r8,[r1,#0]
0000a4  eba91828          SUB      r8,r9,r8,ASR #4
;;;1124   
;;;1125       /*  index calculation for the coefficients */
;;;1126       ia2 = 2u * ia1;
0000a8  ea4f0a43          LSL      r10,r3,#1
;;;1127       co2 = pCoef[ia2 * 2u];
0000ac  f852903a          LDR      r9,[r2,r10,LSL #3]
;;;1128       si2 = pCoef[(ia2 * 2u) + 1u];
0000b0  f04f0b01          MOV      r11,#1
0000b4  eb0b0a4a          ADD      r10,r11,r10,LSL #1
0000b8  f852a02a          LDR      r10,[r2,r10,LSL #2]
;;;1129   
;;;1130       /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1131       *pSi1++ = (((int32_t) (((q63_t) r1 * co2) >> 32)) -
0000bc  fb57fe09          SMMUL    lr,r7,r9
0000c0  f8ddb01c          LDR      r11,[sp,#0x1c]
0000c4  fb5bfb0a          SMMUL    r11,r11,r10
0000c8  ebae0b0b          SUB      r11,lr,r11
0000cc  ea4f0b4b          LSL      r11,r11,#1
0000d0  f8c0b000          STR      r11,[r0,#0]
;;;1132                        ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;1133   
;;;1134       /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1135       *pSi1++ = (((int32_t) (((q63_t) s1 * co2) >> 32)) +
0000d4  f8ddb01c          LDR      r11,[sp,#0x1c]
0000d8  fb5bf909          SMMUL    r9,r11,r9
0000dc  fb57f70a          SMMUL    r7,r7,r10
0000e0  444f              ADD      r7,r7,r9
0000e2  007f              LSLS     r7,r7,#1
0000e4  6047              STR      r7,[r0,#4]
0000e6  3008              ADDS     r0,r0,#8
;;;1136                             ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;1137   
;;;1138       /* (xa - xc) - (yb - yd) */
;;;1139       r1 = r2 - t1;
0000e8  f8dd9020          LDR      r9,[sp,#0x20]
0000ec  eba9070c          SUB      r7,r9,r12
;;;1140       /* (xa - xc) + (yb - yd) */
;;;1141       r2 = r2 + t1;
0000f0  f8dd9020          LDR      r9,[sp,#0x20]
0000f4  44e1              ADD      r9,r9,r12
0000f6  f8cd9020          STR      r9,[sp,#0x20]
;;;1142   
;;;1143       /* (ya - yc) + (xb - xd) */
;;;1144       s1 = s2 + t2;
0000fa  f8dd9018          LDR      r9,[sp,#0x18]
0000fe  eb090c08          ADD      r12,r9,r8
;;;1145       /* (ya - yc) - (xb - xd) */
;;;1146       s2 = s2 - t2;
000102  f8dd9018          LDR      r9,[sp,#0x18]
000106  eba90808          SUB      r8,r9,r8
;;;1147   
;;;1148       co1 = pCoef[ia1 * 2u];
00010a  f8529033          LDR      r9,[r2,r3,LSL #3]
;;;1149       si1 = pCoef[(ia1 * 2u) + 1u];
00010e  f04f0a01          MOV      r10,#1
000112  eb0a0a43          ADD      r10,r10,r3,LSL #1
000116  f852a02a          LDR      r10,[r2,r10,LSL #2]
;;;1150   
;;;1151       /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1152       *pSi2++ = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
00011a  fb57fb09          SMMUL    r11,r7,r9
00011e  fb5cfe0a          SMMUL    lr,r12,r10
000122  ebab0b0e          SUB      r11,r11,lr
000126  ea4f0b4b          LSL      r11,r11,#1
00012a  f8c6b000          STR      r11,[r6,#0]
;;;1153                        ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;1154   
;;;1155       /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1156       *pSi2++ = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
00012e  fb5cfc09          SMMUL    r12,r12,r9
000132  fb57f70a          SMMUL    r7,r7,r10
000136  4467              ADD      r7,r7,r12
000138  007f              LSLS     r7,r7,#1
00013a  6077              STR      r7,[r6,#4]
00013c  3608              ADDS     r6,r6,#8
;;;1157                               ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;1158   
;;;1159       /*  index calculation for the coefficients */
;;;1160       ia3 = 3u * ia1;
00013e  eb030c43          ADD      r12,r3,r3,LSL #1
;;;1161       co3 = pCoef[ia3 * 2u];
000142  f852703c          LDR      r7,[r2,r12,LSL #3]
;;;1162       si3 = pCoef[(ia3 * 2u) + 1u];
000146  f04f0901          MOV      r9,#1
00014a  eb090c4c          ADD      r12,r9,r12,LSL #1
00014e  f852c02c          LDR      r12,[r2,r12,LSL #2]
;;;1163   
;;;1164       /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1165       *pSi3++ = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
000152  f8dd9020          LDR      r9,[sp,#0x20]
000156  fb59f907          SMMUL    r9,r9,r7
00015a  fb58fa0c          SMMUL    r10,r8,r12
00015e  eba9090a          SUB      r9,r9,r10
000162  ea4f0949          LSL      r9,r9,#1
000166  f8c19000          STR      r9,[r1,#0]
;;;1166                        ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;1167   
;;;1168       /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1169       *pSi3++ = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
00016a  fb58f707          SMMUL    r7,r8,r7
00016e  f8dd9020          LDR      r9,[sp,#0x20]
000172  fb59fc0c          SMMUL    r12,r9,r12
000176  4467              ADD      r7,r7,r12
000178  007f              LSLS     r7,r7,#1
00017a  604f              STR      r7,[r1,#4]
00017c  3108              ADDS     r1,r1,#8
;;;1170                               ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;1171   
;;;1172       /*  Twiddle coefficients index modifier */
;;;1173       ia1 = ia1 + twidCoefModifier;
00017e  9f12              LDR      r7,[sp,#0x48]
000180  443b              ADD      r3,r3,r7
;;;1174   
;;;1175     } while(--j);
000182  9f0c              LDR      r7,[sp,#0x30]
000184  1e7f              SUBS     r7,r7,#1
000186  970c              STR      r7,[sp,#0x30]
000188  f47faf49          BNE      |L2.30|
;;;1176   
;;;1177     /* data is in 5.27(q27) format */
;;;1178     /* each stage provides two down scaling of the input */
;;;1179   
;;;1180   
;;;1181     /* Start of Middle stages process */
;;;1182   
;;;1183     twidCoefModifier <<= 2u;
00018c  9812              LDR      r0,[sp,#0x48]
00018e  0080              LSLS     r0,r0,#2
000190  9012              STR      r0,[sp,#0x48]
;;;1184   
;;;1185     /*  Calculation of second stage to excluding last stage */
;;;1186     for (k = fftLen / 4u; k > 4u; k >>= 2u)
000192  980e              LDR      r0,[sp,#0x38]
000194  900b              STR      r0,[sp,#0x2c]
000196  e0fa              B        |L2.910|
                  |L2.408|
;;;1187     {
;;;1188       /*  Initializations for the first stage */
;;;1189       n1 = n2;
000198  462e              MOV      r6,r5
;;;1190       n2 >>= 2u;
00019a  08ad              LSRS     r5,r5,#2
;;;1191       ia1 = 0u;
00019c  2700              MOVS     r7,#0
;;;1192   
;;;1193       for (j = 0; j <= (n2 - 1u); j++)
00019e  46bc              MOV      r12,r7
0001a0  1e68              SUBS     r0,r5,#1
0001a2  900d              STR      r0,[sp,#0x34]
0001a4  e0e9              B        |L2.890|
                  |L2.422|
;;;1194       {
;;;1195         /*  index calculation for the coefficients */
;;;1196         ia2 = ia1 + ia1;
0001a6  0078              LSLS     r0,r7,#1
;;;1197         ia3 = ia2 + ia1;
0001a8  19c1              ADDS     r1,r0,r7
;;;1198         co1 = pCoef[ia1 * 2u];
0001aa  f8523037          LDR      r3,[r2,r7,LSL #3]
0001ae  9305              STR      r3,[sp,#0x14]
;;;1199         si1 = pCoef[(ia1 * 2u) + 1u];
0001b0  2301              MOVS     r3,#1
0001b2  eb030447          ADD      r4,r3,r7,LSL #1
0001b6  f8524024          LDR      r4,[r2,r4,LSL #2]
0001ba  9402              STR      r4,[sp,#8]
;;;1200         co2 = pCoef[ia2 * 2u];
0001bc  f8524030          LDR      r4,[r2,r0,LSL #3]
0001c0  9404              STR      r4,[sp,#0x10]
;;;1201         si2 = pCoef[(ia2 * 2u) + 1u];
0001c2  eb030040          ADD      r0,r3,r0,LSL #1
0001c6  f8520020          LDR      r0,[r2,r0,LSL #2]
0001ca  9001              STR      r0,[sp,#4]
;;;1202         co3 = pCoef[ia3 * 2u];
0001cc  f8520031          LDR      r0,[r2,r1,LSL #3]
0001d0  9003              STR      r0,[sp,#0xc]
;;;1203         si3 = pCoef[(ia3 * 2u) + 1u];
0001d2  eb030041          ADD      r0,r3,r1,LSL #1
0001d6  f8520020          LDR      r0,[r2,r0,LSL #2]
0001da  9000              STR      r0,[sp,#0]
;;;1204         /*  Twiddle coefficients index modifier */
;;;1205         ia1 = ia1 + twidCoefModifier;
0001dc  9812              LDR      r0,[sp,#0x48]
0001de  4407              ADD      r7,r7,r0
;;;1206         
;;;1207         pSi0 = pSrc + 2 * j;
0001e0  980f              LDR      r0,[sp,#0x3c]
0001e2  eb0003cc          ADD      r3,r0,r12,LSL #3
;;;1208         pSi1 = pSi0 + 2 * n2;
0001e6  eb0300c5          ADD      r0,r3,r5,LSL #3
;;;1209         pSi2 = pSi1 + 2 * n2;
0001ea  eb0004c5          ADD      r4,r0,r5,LSL #3
;;;1210         pSi3 = pSi2 + 2 * n2;
0001ee  eb0401c5          ADD      r1,r4,r5,LSL #3
;;;1211   
;;;1212         for (i0 = j; i0 < fftLen; i0 += n1)
0001f2  46e0              MOV      r8,r12
0001f4  e0ba              B        |L2.876|
                  |L2.502|
;;;1213         {
;;;1214           /*  Butterfly implementation */
;;;1215           /* xa + xc */
;;;1216           r1 = pSi0[0] + pSi2[0];
0001f6  f8d3a000          LDR      r10,[r3,#0]
0001fa  f8d4b000          LDR      r11,[r4,#0]
0001fe  eb0a090b          ADD      r9,r10,r11
;;;1217   
;;;1218           /* xa - xc */
;;;1219           r2 = pSi0[0] - pSi2[0];
000202  ebaa0a0b          SUB      r10,r10,r11
000206  f8cda020          STR      r10,[sp,#0x20]
;;;1220   
;;;1221   
;;;1222           /* ya + yc */
;;;1223           s1 = pSi0[1] + pSi2[1];
00020a  f8d3e004          LDR      lr,[r3,#4]
00020e  f8d4b004          LDR      r11,[r4,#4]
000212  eb0e0a0b          ADD      r10,lr,r11
;;;1224   
;;;1225           /* ya - yc */
;;;1226           s2 = pSi0[1] - pSi2[1];
000216  ebae0b0b          SUB      r11,lr,r11
00021a  f8cdb018          STR      r11,[sp,#0x18]
;;;1227   
;;;1228   
;;;1229           /* xb + xd */
;;;1230           t1 = pSi1[0] + pSi3[0];
00021e  f8d0b000          LDR      r11,[r0,#0]
000222  f8d1e000          LDR      lr,[r1,#0]
000226  44f3              ADD      r11,r11,lr
;;;1231   
;;;1232   
;;;1233           /* xa' = xa + xb + xc + xd */
;;;1234           pSi0[0] = (r1 + t1) >> 2u;
000228  eb090e0b          ADD      lr,r9,r11
00022c  ea4f0eae          ASR      lr,lr,#2
000230  f8c3e000          STR      lr,[r3,#0]
;;;1235           /* xa + xc -(xb + xd) */
;;;1236           r1 = r1 - t1;
000234  eba90e0b          SUB      lr,r9,r11
000238  f8cde024          STR      lr,[sp,#0x24]
;;;1237           /* yb + yd */
;;;1238           t2 = pSi1[1] + pSi3[1];
00023c  f8d09004          LDR      r9,[r0,#4]
000240  f8d1b004          LDR      r11,[r1,#4]
000244  44d9              ADD      r9,r9,r11
;;;1239   
;;;1240           /* ya' = ya + yb + yc + yd */
;;;1241           pSi0[1] = (s1 + t2) >> 2u;
000246  eb0a0b09          ADD      r11,r10,r9
00024a  ea4f0bab          ASR      r11,r11,#2
00024e  f8c3b004          STR      r11,[r3,#4]
;;;1242           pSi0 += 2 * n1;
000252  eb0303c6          ADD      r3,r3,r6,LSL #3
;;;1243   
;;;1244           /* (ya + yc) - (yb + yd) */
;;;1245           s1 = s1 - t2;
000256  ebaa0b09          SUB      r11,r10,r9
;;;1246   
;;;1247           /* (yb - yd) */
;;;1248           t1 = pSi1[1] - pSi3[1];
00025a  f8d09004          LDR      r9,[r0,#4]
00025e  f8d1a004          LDR      r10,[r1,#4]
000262  eba9090a          SUB      r9,r9,r10
;;;1249   
;;;1250           /* (xb - xd) */
;;;1251           t2 = pSi1[0] - pSi3[0];
000266  f8d0a000          LDR      r10,[r0,#0]
00026a  f8d1e000          LDR      lr,[r1,#0]
00026e  ebaa0a0e          SUB      r10,r10,lr
000272  f8cda028          STR      r10,[sp,#0x28]
;;;1252   
;;;1253   
;;;1254           /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1255           pSi1[0] = (((int32_t) (((q63_t) r1 * co2) >> 32u)) -
000276  f8dde024          LDR      lr,[sp,#0x24]
00027a  f8dda010          LDR      r10,[sp,#0x10]
00027e  fb5efe0a          SMMUL    lr,lr,r10
000282  f8dda004          LDR      r10,[sp,#4]
000286  fb5bfa0a          SMMUL    r10,r11,r10
00028a  ebae0a0a          SUB      r10,lr,r10
00028e  ea4f0a6a          ASR      r10,r10,#1
000292  f8c0a000          STR      r10,[r0,#0]
;;;1256                            ((int32_t) (((q63_t) s1 * si2) >> 32u))) >> 1u;
;;;1257   
;;;1258           /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1259           pSi1[1] =
000296  f8dda010          LDR      r10,[sp,#0x10]
00029a  fb5bfb0a          SMMUL    r11,r11,r10
00029e  f8dde024          LDR      lr,[sp,#0x24]
0002a2  f8dda004          LDR      r10,[sp,#4]
0002a6  fb5efa0a          SMMUL    r10,lr,r10
0002aa  44da              ADD      r10,r10,r11
0002ac  ea4f0a6a          ASR      r10,r10,#1
0002b0  f8c0a004          STR      r10,[r0,#4]
;;;1260   
;;;1261             (((int32_t) (((q63_t) s1 * co2) >> 32u)) +
;;;1262              ((int32_t) (((q63_t) r1 * si2) >> 32u))) >> 1u;
;;;1263           pSi1 += 2 * n1;
0002b4  eb0000c6          ADD      r0,r0,r6,LSL #3
;;;1264   
;;;1265           /* (xa - xc) - (yb - yd) */
;;;1266           r1 = r2 - t1;
0002b8  f8dda020          LDR      r10,[sp,#0x20]
0002bc  ebaa0b09          SUB      r11,r10,r9
0002c0  f8cdb024          STR      r11,[sp,#0x24]
;;;1267           /* (xa - xc) + (yb - yd) */
;;;1268           r2 = r2 + t1;
0002c4  f8dda020          LDR      r10,[sp,#0x20]
0002c8  44d1              ADD      r9,r9,r10
0002ca  f8cd9020          STR      r9,[sp,#0x20]
;;;1269   
;;;1270           /* (ya - yc) +  (xb - xd) */
;;;1271           s1 = s2 + t2;
0002ce  f8ddb018          LDR      r11,[sp,#0x18]
0002d2  f8dda028          LDR      r10,[sp,#0x28]
0002d6  eb0b090a          ADD      r9,r11,r10
;;;1272           /* (ya - yc) -  (xb - xd) */
;;;1273           s2 = s2 - t2;
0002da  f8ddb018          LDR      r11,[sp,#0x18]
0002de  f8dda028          LDR      r10,[sp,#0x28]
0002e2  ebab0a0a          SUB      r10,r11,r10
;;;1274   
;;;1275           /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1276           pSi2[0] = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
0002e6  f8dde014          LDR      lr,[sp,#0x14]
0002ea  f8ddb024          LDR      r11,[sp,#0x24]
0002ee  fb5bfe0e          SMMUL    lr,r11,lr
0002f2  f8ddb008          LDR      r11,[sp,#8]
0002f6  fb59fb0b          SMMUL    r11,r9,r11
0002fa  ebae0b0b          SUB      r11,lr,r11
0002fe  ea4f0b6b          ASR      r11,r11,#1
000302  f8c4b000          STR      r11,[r4,#0]
;;;1277                            ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;1278   
;;;1279           /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1280           pSi2[1] = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
000306  f8ddb014          LDR      r11,[sp,#0x14]
00030a  fb59fe0b          SMMUL    lr,r9,r11
00030e  f8ddb024          LDR      r11,[sp,#0x24]
000312  f8dd9008          LDR      r9,[sp,#8]
000316  fb5bf909          SMMUL    r9,r11,r9
00031a  44f1              ADD      r9,r9,lr
00031c  ea4f0969          ASR      r9,r9,#1
000320  f8c49004          STR      r9,[r4,#4]
;;;1281                                   ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;1282           pSi2 += 2 * n1;
000324  eb0404c6          ADD      r4,r4,r6,LSL #3
;;;1283   
;;;1284           /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1285           pSi3[0] = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
000328  f8ddb00c          LDR      r11,[sp,#0xc]
00032c  f8dd9020          LDR      r9,[sp,#0x20]
000330  fb59fb0b          SMMUL    r11,r9,r11
000334  f8dd9000          LDR      r9,[sp,#0]
000338  fb5af909          SMMUL    r9,r10,r9
00033c  ebab0909          SUB      r9,r11,r9
000340  ea4f0969          ASR      r9,r9,#1
000344  f8c19000          STR      r9,[r1,#0]
;;;1286                              ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;1287   
;;;1288           /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1289           pSi3[1] = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
000348  f8dd900c          LDR      r9,[sp,#0xc]
00034c  fb5afb09          SMMUL    r11,r10,r9
000350  f8dda000          LDR      r10,[sp,#0]
000354  f8dd9020          LDR      r9,[sp,#0x20]
000358  fb59f90a          SMMUL    r9,r9,r10
00035c  44d9              ADD      r9,r9,r11
00035e  ea4f0969          ASR      r9,r9,#1
000362  f8c19004          STR      r9,[r1,#4]
;;;1290                                   ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;1291           pSi3 += 2 * n1;
000366  eb0101c6          ADD      r1,r1,r6,LSL #3
00036a  44b0              ADD      r8,r8,r6              ;1212
                  |L2.876|
00036c  f8dd9040          LDR      r9,[sp,#0x40]         ;1212
000370  45c8              CMP      r8,r9                 ;1212
000372  f4ffaf40          BCC      |L2.502|
000376  f10c0c01          ADD      r12,r12,#1            ;1193
                  |L2.890|
00037a  980d              LDR      r0,[sp,#0x34]         ;1193
00037c  4584              CMP      r12,r0                ;1193
00037e  f67faf12          BLS      |L2.422|
;;;1292         }
;;;1293       }
;;;1294       twidCoefModifier <<= 2u;
000382  9812              LDR      r0,[sp,#0x48]
000384  0080              LSLS     r0,r0,#2
000386  9012              STR      r0,[sp,#0x48]
000388  980b              LDR      r0,[sp,#0x2c]         ;1186
00038a  0880              LSRS     r0,r0,#2              ;1186
00038c  900b              STR      r0,[sp,#0x2c]         ;1186
                  |L2.910|
00038e  980b              LDR      r0,[sp,#0x2c]         ;1186
000390  2804              CMP      r0,#4                 ;1186
000392  f63faf01          BHI      |L2.408|
;;;1295     }
;;;1296   #endif
;;;1297   
;;;1298     /* End of Middle stages process */
;;;1299   
;;;1300     /* data is in 11.21(q21) format for the 1024 point as there are 3 middle stages */
;;;1301     /* data is in 9.23(q23) format for the 256 point as there are 2 middle stages */
;;;1302     /* data is in 7.25(q25) format for the 64 point as there are 1 middle stage */
;;;1303     /* data is in 5.27(q27) format for the 16 point as there are no middle stages */
;;;1304   
;;;1305   
;;;1306     /* Start of last stage process */
;;;1307   
;;;1308   
;;;1309     /*  Initializations for the last stage */
;;;1310     j = fftLen >> 2;
000396  f8dd8038          LDR      r8,[sp,#0x38]
;;;1311     ptr1 = &pSrc[0];
00039a  f8ddc03c          LDR      r12,[sp,#0x3c]
                  |L2.926|
;;;1312   
;;;1313     /*  Calculations of last stage */
;;;1314     do
;;;1315     {
;;;1316   #ifndef ARM_MATH_BIG_ENDIAN
;;;1317       /* Read xa (real), ya(imag) input */
;;;1318       xaya = *__SIMD64(ptr1)++;
00039e  e9dc0100          LDRD     r0,r1,[r12,#0]
0003a2  f10c0c08          ADD      r12,r12,#8
;;;1319       xa = (q31_t) xaya;
;;;1320       ya = (q31_t) (xaya >> 32);
0003a6  460d              MOV      r5,r1
;;;1321   
;;;1322       /* Read xb (real), yb(imag) input */
;;;1323       xbyb = *__SIMD64(ptr1)++;
0003a8  e9dc1200          LDRD     r1,r2,[r12,#0]
0003ac  f10c0c08          ADD      r12,r12,#8
;;;1324       xb = (q31_t) xbyb;
;;;1325       yb = (q31_t) (xbyb >> 32);
0003b0  4616              MOV      r6,r2
;;;1326   
;;;1327       /* Read xc (real), yc(imag) input */
;;;1328       xcyc = *__SIMD64(ptr1)++;
0003b2  e9dc2300          LDRD     r2,r3,[r12,#0]
0003b6  f10c0c08          ADD      r12,r12,#8
;;;1329       xc = (q31_t) xcyc;
;;;1330       yc = (q31_t) (xcyc >> 32);
0003ba  461f              MOV      r7,r3
;;;1331   
;;;1332       /* Read xc (real), yc(imag) input */
;;;1333       xdyd = *__SIMD64(ptr1)++;
0003bc  e9dc3400          LDRD     r3,r4,[r12,#0]
0003c0  f10c0c08          ADD      r12,r12,#8
;;;1334       xd = (q31_t) xdyd;
;;;1335       yd = (q31_t) (xdyd >> 32);
;;;1336   
;;;1337   #else
;;;1338   
;;;1339       /* Read xa (real), ya(imag) input */
;;;1340       xaya = *__SIMD64(ptr1)++;
;;;1341       ya = (q31_t) xaya;
;;;1342       xa = (q31_t) (xaya >> 32);
;;;1343   
;;;1344       /* Read xb (real), yb(imag) input */
;;;1345       xbyb = *__SIMD64(ptr1)++;
;;;1346       yb = (q31_t) xbyb;
;;;1347       xb = (q31_t) (xbyb >> 32);
;;;1348   
;;;1349       /* Read xc (real), yc(imag) input */
;;;1350       xcyc = *__SIMD64(ptr1)++;
;;;1351       yc = (q31_t) xcyc;
;;;1352       xc = (q31_t) (xcyc >> 32);
;;;1353   
;;;1354       /* Read xc (real), yc(imag) input */
;;;1355       xdyd = *__SIMD64(ptr1)++;
;;;1356       yd = (q31_t) xdyd;
;;;1357       xd = (q31_t) (xdyd >> 32);
;;;1358   
;;;1359   
;;;1360   #endif
;;;1361   
;;;1362       /* xa' = xa + xb + xc + xd */
;;;1363       xa_out = xa + xb + xc + xd;
0003c4  eb000901          ADD      r9,r0,r1
0003c8  4491              ADD      r9,r9,r2
0003ca  4499              ADD      r9,r9,r3
;;;1364   
;;;1365       /* ya' = ya + yb + yc + yd */
;;;1366       ya_out = ya + yb + yc + yd;
0003cc  eb050a06          ADD      r10,r5,r6
0003d0  44ba              ADD      r10,r10,r7
0003d2  44a2              ADD      r10,r10,r4
;;;1367   
;;;1368       /* pointer updation for writing */
;;;1369       ptr1 = ptr1 - 8u;
0003d4  f1ac0c20          SUB      r12,r12,#0x20
;;;1370   
;;;1371       /* writing xa' and ya' */
;;;1372       *ptr1++ = xa_out;
0003d8  f84c9b04          STR      r9,[r12],#4
;;;1373       *ptr1++ = ya_out;
0003dc  f84cab04          STR      r10,[r12],#4
;;;1374   
;;;1375       xc_out = (xa - xb + xc - xd);
0003e0  eba00901          SUB      r9,r0,r1
0003e4  4491              ADD      r9,r9,r2
0003e6  eba90a03          SUB      r10,r9,r3
;;;1376       yc_out = (ya - yb + yc - yd);
0003ea  eba50906          SUB      r9,r5,r6
0003ee  44b9              ADD      r9,r9,r7
0003f0  eba90904          SUB      r9,r9,r4
;;;1377   
;;;1378       /* writing xc' and yc' */
;;;1379       *ptr1++ = xc_out;
0003f4  f84cab04          STR      r10,[r12],#4
;;;1380       *ptr1++ = yc_out;
0003f8  f84c9b04          STR      r9,[r12],#4
;;;1381   
;;;1382       xb_out = (xa - yb - xc + yd);
0003fc  eba00906          SUB      r9,r0,r6
000400  eba90902          SUB      r9,r9,r2
000404  44a1              ADD      r9,r9,r4
;;;1383       yb_out = (ya + xb - yc - xd);
000406  eb050a01          ADD      r10,r5,r1
00040a  ebaa0a07          SUB      r10,r10,r7
00040e  ebaa0a03          SUB      r10,r10,r3
;;;1384   
;;;1385       /* writing xb' and yb' */
;;;1386       *ptr1++ = xb_out;
000412  f84c9b04          STR      r9,[r12],#4
;;;1387       *ptr1++ = yb_out;
000416  f84cab04          STR      r10,[r12],#4
;;;1388   
;;;1389       xd_out = (xa + yb - xc - yd);
00041a  4430              ADD      r0,r0,r6
00041c  1a80              SUBS     r0,r0,r2
00041e  1b00              SUBS     r0,r0,r4
;;;1390       yd_out = (ya - xb - yc + xd);
000420  1a69              SUBS     r1,r5,r1
000422  1bc9              SUBS     r1,r1,r7
000424  4419              ADD      r1,r1,r3
;;;1391   
;;;1392       /* writing xd' and yd' */
;;;1393       *ptr1++ = xd_out;
000426  f84c0b04          STR      r0,[r12],#4
;;;1394       *ptr1++ = yd_out;
00042a  f84c1b04          STR      r1,[r12],#4
;;;1395   
;;;1396     } while(--j);
00042e  f1b80801          SUBS     r8,r8,#1
000432  d1b4              BNE      |L2.926|
;;;1397   
;;;1398     /* output is in 11.21(q21) format for the 1024 point */
;;;1399     /* output is in 9.23(q23) format for the 256 point */
;;;1400     /* output is in 7.25(q25) format for the 64 point */
;;;1401     /* output is in 5.27(q27) format for the 16 point */
;;;1402   
;;;1403     /* End of last stage process */
;;;1404   }
000434  b013              ADD      sp,sp,#0x4c
000436  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i.arm_radix4_butterfly_q31||, CODE, READONLY, ALIGN=1

                  arm_radix4_butterfly_q31 PROC
;;;162    
;;;163    void arm_radix4_butterfly_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;164      q31_t * pSrc,
;;;165      uint32_t fftLen,
;;;166      q31_t * pCoef,
;;;167      uint32_t twidCoefModifier)
;;;168    {
000004  b08f              SUB      sp,sp,#0x3c
;;;169    #if defined(ARM_MATH_CM7)
;;;170      uint32_t n1, n2, ia1, ia2, ia3, i0, i1, i2, i3, j, k;
;;;171      q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;172    
;;;173      q31_t xa, xb, xc, xd;
;;;174      q31_t ya, yb, yc, yd;
;;;175      q31_t xa_out, xb_out, xc_out, xd_out;
;;;176      q31_t ya_out, yb_out, yc_out, yd_out;
;;;177    
;;;178      q31_t *ptr1;
;;;179      q63_t xaya, xbyb, xcyc, xdyd;
;;;180      /* Total process is divided into three stages */
;;;181    
;;;182      /* process first stage, middle stages, & last stage */
;;;183    
;;;184    
;;;185      /* start of first stage process */
;;;186    
;;;187      /*  Initializations for the first stage */
;;;188      n2 = fftLen;
;;;189      n1 = n2;
;;;190      /* n2 = fftLen/4 */
;;;191      n2 >>= 2u;
;;;192      i0 = 0u;
;;;193      ia1 = 0u;
;;;194    
;;;195      j = n2;
;;;196    
;;;197      /*  Calculation of first stage */
;;;198      do
;;;199      {
;;;200        /*  index calculation for the input as, */
;;;201        /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;202        i1 = i0 + n2;
;;;203        i2 = i1 + n2;
;;;204        i3 = i2 + n2;
;;;205    
;;;206        /* input is in 1.31(q31) format and provide 4 guard bits for the input */
;;;207    
;;;208        /*  Butterfly implementation */
;;;209        /* xa + xc */
;;;210        r1 = (pSrc[(2u * i0)] >> 4u) + (pSrc[(2u * i2)] >> 4u);
;;;211        /* xa - xc */
;;;212        r2 = (pSrc[2u * i0] >> 4u) - (pSrc[2u * i2] >> 4u);
;;;213    
;;;214        /* xb + xd */
;;;215        t1 = (pSrc[2u * i1] >> 4u) + (pSrc[2u * i3] >> 4u);
;;;216    
;;;217        /* ya + yc */
;;;218        s1 = (pSrc[(2u * i0) + 1u] >> 4u) + (pSrc[(2u * i2) + 1u] >> 4u);
;;;219        /* ya - yc */
;;;220        s2 = (pSrc[(2u * i0) + 1u] >> 4u) - (pSrc[(2u * i2) + 1u] >> 4u);
;;;221    
;;;222        /* xa' = xa + xb + xc + xd */
;;;223        pSrc[2u * i0] = (r1 + t1);
;;;224        /* (xa + xc) - (xb + xd) */
;;;225        r1 = r1 - t1;
;;;226        /* yb + yd */
;;;227        t2 = (pSrc[(2u * i1) + 1u] >> 4u) + (pSrc[(2u * i3) + 1u] >> 4u);
;;;228    
;;;229        /* ya' = ya + yb + yc + yd */
;;;230        pSrc[(2u * i0) + 1u] = (s1 + t2);
;;;231    
;;;232        /* (ya + yc) - (yb + yd) */
;;;233        s1 = s1 - t2;
;;;234    
;;;235        /* yb - yd */
;;;236        t1 = (pSrc[(2u * i1) + 1u] >> 4u) - (pSrc[(2u * i3) + 1u] >> 4u);
;;;237        /* xb - xd */
;;;238        t2 = (pSrc[2u * i1] >> 4u) - (pSrc[2u * i3] >> 4u);
;;;239    
;;;240        /*  index calculation for the coefficients */
;;;241        ia2 = 2u * ia1;
;;;242        co2 = pCoef[ia2 * 2u];
;;;243        si2 = pCoef[(ia2 * 2u) + 1u];
;;;244    
;;;245        /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;246        pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
;;;247                         ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;248    
;;;249        /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;250        pSrc[(2u * i1) + 1u] = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
;;;251                                ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;252    
;;;253        /* (xa - xc) + (yb - yd) */
;;;254        r1 = r2 + t1;
;;;255        /* (xa - xc) - (yb - yd) */
;;;256        r2 = r2 - t1;
;;;257    
;;;258        /* (ya - yc) - (xb - xd) */
;;;259        s1 = s2 - t2;
;;;260        /* (ya - yc) + (xb - xd) */
;;;261        s2 = s2 + t2;
;;;262    
;;;263        co1 = pCoef[ia1 * 2u];
;;;264        si1 = pCoef[(ia1 * 2u) + 1u];
;;;265    
;;;266        /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;267        pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
;;;268                         ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;269    
;;;270        /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;271        pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
;;;272                                ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;273    
;;;274        /*  index calculation for the coefficients */
;;;275        ia3 = 3u * ia1;
;;;276        co3 = pCoef[ia3 * 2u];
;;;277        si3 = pCoef[(ia3 * 2u) + 1u];
;;;278    
;;;279        /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;280        pSrc[2u * i3] = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
;;;281                         ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;282    
;;;283        /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;284        pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
;;;285                                ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;286    
;;;287        /*  Twiddle coefficients index modifier */
;;;288        ia1 = ia1 + twidCoefModifier;
;;;289    
;;;290        /*  Updating input index */
;;;291        i0 = i0 + 1u;
;;;292    
;;;293      } while(--j);
;;;294    
;;;295      /* end of first stage process */
;;;296    
;;;297      /* data is in 5.27(q27) format */
;;;298    
;;;299    
;;;300      /* start of Middle stages process */
;;;301    
;;;302    
;;;303      /* each stage in middle stages provides two down scaling of the input */
;;;304    
;;;305      twidCoefModifier <<= 2u;
;;;306    
;;;307    
;;;308      for (k = fftLen / 4u; k > 4u; k >>= 2u)
;;;309      {
;;;310        /*  Initializations for the first stage */
;;;311        n1 = n2;
;;;312        n2 >>= 2u;
;;;313        ia1 = 0u;
;;;314    
;;;315        /*  Calculation of first stage */
;;;316        for (j = 0u; j <= (n2 - 1u); j++)
;;;317        {
;;;318          /*  index calculation for the coefficients */
;;;319          ia2 = ia1 + ia1;
;;;320          ia3 = ia2 + ia1;
;;;321          co1 = pCoef[ia1 * 2u];
;;;322          si1 = pCoef[(ia1 * 2u) + 1u];
;;;323          co2 = pCoef[ia2 * 2u];
;;;324          si2 = pCoef[(ia2 * 2u) + 1u];
;;;325          co3 = pCoef[ia3 * 2u];
;;;326          si3 = pCoef[(ia3 * 2u) + 1u];
;;;327          /*  Twiddle coefficients index modifier */
;;;328          ia1 = ia1 + twidCoefModifier;
;;;329    
;;;330          for (i0 = j; i0 < fftLen; i0 += n1)
;;;331          {
;;;332            /*  index calculation for the input as, */
;;;333            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;334            i1 = i0 + n2;
;;;335            i2 = i1 + n2;
;;;336            i3 = i2 + n2;
;;;337    
;;;338            /*  Butterfly implementation */
;;;339            /* xa + xc */
;;;340            r1 = pSrc[2u * i0] + pSrc[2u * i2];
;;;341            /* xa - xc */
;;;342            r2 = pSrc[2u * i0] - pSrc[2u * i2];
;;;343    
;;;344            /* ya + yc */
;;;345            s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;346            /* ya - yc */
;;;347            s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;348    
;;;349            /* xb + xd */
;;;350            t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;351    
;;;352            /* xa' = xa + xb + xc + xd */
;;;353            pSrc[2u * i0] = (r1 + t1) >> 2u;
;;;354            /* xa + xc -(xb + xd) */
;;;355            r1 = r1 - t1;
;;;356    
;;;357            /* yb + yd */
;;;358            t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;359            /* ya' = ya + yb + yc + yd */
;;;360            pSrc[(2u * i0) + 1u] = (s1 + t2) >> 2u;
;;;361    
;;;362            /* (ya + yc) - (yb + yd) */
;;;363            s1 = s1 - t2;
;;;364    
;;;365            /* (yb - yd) */
;;;366            t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;367            /* (xb - xd) */
;;;368            t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;369    
;;;370            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;371            pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
;;;372                             ((int32_t) (((q63_t) s1 * si2) >> 32))) >> 1u;
;;;373    
;;;374            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;375            pSrc[(2u * i1) + 1u] = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
;;;376                                    ((int32_t) (((q63_t) r1 * si2) >> 32))) >> 1u;
;;;377    
;;;378            /* (xa - xc) + (yb - yd) */
;;;379            r1 = r2 + t1;
;;;380            /* (xa - xc) - (yb - yd) */
;;;381            r2 = r2 - t1;
;;;382    
;;;383            /* (ya - yc) -  (xb - xd) */
;;;384            s1 = s2 - t2;
;;;385            /* (ya - yc) +  (xb - xd) */
;;;386            s2 = s2 + t2;
;;;387    
;;;388            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;389            pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
;;;390                             ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;391    
;;;392            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;393            pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
;;;394                                    ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;395    
;;;396            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;397            pSrc[2u * i3] = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
;;;398                             ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;399    
;;;400            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;401            pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
;;;402                                    ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;403          }
;;;404        }
;;;405        twidCoefModifier <<= 2u;
;;;406      }
;;;407    #else
;;;408      uint32_t n1, n2, ia1, ia2, ia3, i0, j, k;
;;;409      q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;410    
;;;411      q31_t xa, xb, xc, xd;
;;;412      q31_t ya, yb, yc, yd;
;;;413      q31_t xa_out, xb_out, xc_out, xd_out;
;;;414      q31_t ya_out, yb_out, yc_out, yd_out;
;;;415    
;;;416      q31_t *ptr1;
;;;417      q31_t *pSi0;
;;;418      q31_t *pSi1;
;;;419      q31_t *pSi2;
;;;420      q31_t *pSi3;
;;;421      q63_t xaya, xbyb, xcyc, xdyd;
;;;422      /* Total process is divided into three stages */
;;;423    
;;;424      /* process first stage, middle stages, & last stage */
;;;425    
;;;426    
;;;427      /* start of first stage process */
;;;428    
;;;429      /*  Initializations for the first stage */
;;;430      n2 = fftLen;
000006  9810              LDR      r0,[sp,#0x40]
;;;431      n1 = n2;
;;;432      /* n2 = fftLen/4 */
;;;433      n2 >>= 2u;
000008  0885              LSRS     r5,r0,#2
00000a  950e              STR      r5,[sp,#0x38]
;;;434    
;;;435      ia1 = 0u;
00000c  2300              MOVS     r3,#0
;;;436    
;;;437      j = n2;
00000e  950c              STR      r5,[sp,#0x30]
;;;438      
;;;439      pSi0 = pSrc;
000010  9c0f              LDR      r4,[sp,#0x3c]
;;;440      pSi1 = pSi0 + 2 * n2;
000012  eb0400c5          ADD      r0,r4,r5,LSL #3
;;;441      pSi2 = pSi1 + 2 * n2;
000016  eb0006c5          ADD      r6,r0,r5,LSL #3
;;;442      pSi3 = pSi2 + 2 * n2;
00001a  eb0601c5          ADD      r1,r6,r5,LSL #3
                  |L3.30|
;;;443    
;;;444      /*  Calculation of first stage */
;;;445      do
;;;446      {
;;;447        /* input is in 1.31(q31) format and provide 4 guard bits for the input */
;;;448    
;;;449        /*  Butterfly implementation */
;;;450        /* xa + xc */
;;;451        r1 = (pSi0[0] >> 4u) + (pSi2[0] >> 4u);
00001e  6827              LDR      r7,[r4,#0]
000020  f8d68000          LDR      r8,[r6,#0]
000024  ea4f1c27          ASR      r12,r7,#4
000028  eb0c1728          ADD      r7,r12,r8,ASR #4
;;;452        /* xa - xc */
;;;453        r2 = (pSi0[0] >> 4u) - (pSi2[0] >> 4u);
00002c  ebac1928          SUB      r9,r12,r8,ASR #4
000030  f8cd9020          STR      r9,[sp,#0x20]
;;;454    
;;;455        /* xb + xd */
;;;456        t1 = (pSi1[0] >> 4u) + (pSi3[0] >> 4u);
000034  f8d0c000          LDR      r12,[r0,#0]
000038  f8d18000          LDR      r8,[r1,#0]
00003c  ea4f1c2c          ASR      r12,r12,#4
000040  eb0c1828          ADD      r8,r12,r8,ASR #4
;;;457    
;;;458        /* ya + yc */
;;;459        s1 = (pSi0[1] >> 4u) + (pSi2[1] >> 4u);
000044  f8d4c004          LDR      r12,[r4,#4]
000048  f8d6a004          LDR      r10,[r6,#4]
00004c  ea4f192c          ASR      r9,r12,#4
000050  eb091c2a          ADD      r12,r9,r10,ASR #4
;;;460        /* ya - yc */
;;;461        s2 = (pSi0[1] >> 4u) - (pSi2[1] >> 4u);
000054  eba9192a          SUB      r9,r9,r10,ASR #4
000058  f8cd9018          STR      r9,[sp,#0x18]
;;;462    
;;;463        /* xa' = xa + xb + xc + xd */
;;;464        *pSi0++ = (r1 + t1);
00005c  eb070908          ADD      r9,r7,r8
000060  f8449b04          STR      r9,[r4],#4
;;;465        /* (xa + xc) - (xb + xd) */
;;;466        r1 = r1 - t1;
000064  eba70708          SUB      r7,r7,r8
;;;467        /* yb + yd */
;;;468        t2 = (pSi1[1] >> 4u) + (pSi3[1] >> 4u);
000068  f8d08004          LDR      r8,[r0,#4]
00006c  f8d19004          LDR      r9,[r1,#4]
000070  ea4f1828          ASR      r8,r8,#4
000074  eb081829          ADD      r8,r8,r9,ASR #4
;;;469    
;;;470        /* ya' = ya + yb + yc + yd */
;;;471        *pSi0++ = (s1 + t2);
000078  eb0c0908          ADD      r9,r12,r8
00007c  f8449b04          STR      r9,[r4],#4
;;;472    
;;;473        /* (ya + yc) - (yb + yd) */
;;;474        s1 = s1 - t2;
000080  ebac0b08          SUB      r11,r12,r8
000084  f8cdb01c          STR      r11,[sp,#0x1c]
;;;475    
;;;476        /* yb - yd */
;;;477        t1 = (pSi1[1] >> 4u) - (pSi3[1] >> 4u);
000088  f8d0c004          LDR      r12,[r0,#4]
00008c  f8d18004          LDR      r8,[r1,#4]
000090  ea4f1c2c          ASR      r12,r12,#4
000094  ebac1c28          SUB      r12,r12,r8,ASR #4
;;;478        /* xb - xd */
;;;479        t2 = (pSi1[0] >> 4u) - (pSi3[0] >> 4u);
000098  f8d08000          LDR      r8,[r0,#0]
00009c  ea4f1928          ASR      r9,r8,#4
0000a0  f8d18000          LDR      r8,[r1,#0]
0000a4  eba91828          SUB      r8,r9,r8,ASR #4
;;;480    
;;;481        /*  index calculation for the coefficients */
;;;482        ia2 = 2u * ia1;
0000a8  ea4f0a43          LSL      r10,r3,#1
;;;483        co2 = pCoef[ia2 * 2u];
0000ac  f852903a          LDR      r9,[r2,r10,LSL #3]
;;;484        si2 = pCoef[(ia2 * 2u) + 1u];
0000b0  f04f0b01          MOV      r11,#1
0000b4  eb0b0a4a          ADD      r10,r11,r10,LSL #1
0000b8  f852a02a          LDR      r10,[r2,r10,LSL #2]
;;;485    
;;;486        /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;487        *pSi1++ = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
0000bc  fb57fe09          SMMUL    lr,r7,r9
0000c0  f8ddb01c          LDR      r11,[sp,#0x1c]
0000c4  fb5bfb0a          SMMUL    r11,r11,r10
0000c8  44f3              ADD      r11,r11,lr
0000ca  ea4f0b4b          LSL      r11,r11,#1
0000ce  f8c0b000          STR      r11,[r0,#0]
;;;488                         ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;489    
;;;490        /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;491        *pSi1++ = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
0000d2  f8ddb01c          LDR      r11,[sp,#0x1c]
0000d6  fb5bf909          SMMUL    r9,r11,r9
0000da  fb57f70a          SMMUL    r7,r7,r10
0000de  eba90707          SUB      r7,r9,r7
0000e2  007f              LSLS     r7,r7,#1
0000e4  6047              STR      r7,[r0,#4]
0000e6  3008              ADDS     r0,r0,#8
;;;492                                ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;493    
;;;494        /* (xa - xc) + (yb - yd) */
;;;495        r1 = r2 + t1;
0000e8  f8dd9020          LDR      r9,[sp,#0x20]
0000ec  eb09070c          ADD      r7,r9,r12
;;;496        /* (xa - xc) - (yb - yd) */
;;;497        r2 = r2 - t1;
0000f0  f8dd9020          LDR      r9,[sp,#0x20]
0000f4  eba9090c          SUB      r9,r9,r12
0000f8  f8cd9020          STR      r9,[sp,#0x20]
;;;498    
;;;499        /* (ya - yc) - (xb - xd) */
;;;500        s1 = s2 - t2;
0000fc  f8dd9018          LDR      r9,[sp,#0x18]
000100  eba90c08          SUB      r12,r9,r8
;;;501        /* (ya - yc) + (xb - xd) */
;;;502        s2 = s2 + t2;
000104  f8dd9018          LDR      r9,[sp,#0x18]
000108  44c8              ADD      r8,r8,r9
;;;503    
;;;504        co1 = pCoef[ia1 * 2u];
00010a  f8529033          LDR      r9,[r2,r3,LSL #3]
;;;505        si1 = pCoef[(ia1 * 2u) + 1u];
00010e  f04f0a01          MOV      r10,#1
000112  eb0a0a43          ADD      r10,r10,r3,LSL #1
000116  f852a02a          LDR      r10,[r2,r10,LSL #2]
;;;506    
;;;507        /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;508        *pSi2++ = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
00011a  fb57fb09          SMMUL    r11,r7,r9
00011e  fb5cfe0a          SMMUL    lr,r12,r10
000122  44f3              ADD      r11,r11,lr
000124  ea4f0b4b          LSL      r11,r11,#1
000128  f8c6b000          STR      r11,[r6,#0]
;;;509                         ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;510    
;;;511        /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;512        *pSi2++ = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
00012c  fb5cfc09          SMMUL    r12,r12,r9
000130  fb57f70a          SMMUL    r7,r7,r10
000134  ebac0707          SUB      r7,r12,r7
000138  007f              LSLS     r7,r7,#1
00013a  6077              STR      r7,[r6,#4]
00013c  3608              ADDS     r6,r6,#8
;;;513                                ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;514    
;;;515        /*  index calculation for the coefficients */
;;;516        ia3 = 3u * ia1;
00013e  eb030c43          ADD      r12,r3,r3,LSL #1
;;;517        co3 = pCoef[ia3 * 2u];
000142  f852703c          LDR      r7,[r2,r12,LSL #3]
;;;518        si3 = pCoef[(ia3 * 2u) + 1u];
000146  f04f0901          MOV      r9,#1
00014a  eb090c4c          ADD      r12,r9,r12,LSL #1
00014e  f852c02c          LDR      r12,[r2,r12,LSL #2]
;;;519    
;;;520        /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;521        *pSi3++ = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
000152  f8dd9020          LDR      r9,[sp,#0x20]
000156  fb59f907          SMMUL    r9,r9,r7
00015a  fb58fa0c          SMMUL    r10,r8,r12
00015e  44d1              ADD      r9,r9,r10
000160  ea4f0949          LSL      r9,r9,#1
000164  f8c19000          STR      r9,[r1,#0]
;;;522                         ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;523    
;;;524        /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;525        *pSi3++ = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
000168  fb58f707          SMMUL    r7,r8,r7
00016c  f8dd9020          LDR      r9,[sp,#0x20]
000170  fb59fc0c          SMMUL    r12,r9,r12
000174  eba7070c          SUB      r7,r7,r12
000178  007f              LSLS     r7,r7,#1
00017a  604f              STR      r7,[r1,#4]
00017c  3108              ADDS     r1,r1,#8
;;;526                                ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;527    
;;;528        /*  Twiddle coefficients index modifier */
;;;529        ia1 = ia1 + twidCoefModifier;
00017e  9f12              LDR      r7,[sp,#0x48]
000180  443b              ADD      r3,r3,r7
;;;530    
;;;531      } while(--j);
000182  9f0c              LDR      r7,[sp,#0x30]
000184  1e7f              SUBS     r7,r7,#1
000186  970c              STR      r7,[sp,#0x30]
000188  f47faf49          BNE      |L3.30|
;;;532    
;;;533      /* end of first stage process */
;;;534    
;;;535      /* data is in 5.27(q27) format */
;;;536    
;;;537    
;;;538      /* start of Middle stages process */
;;;539    
;;;540    
;;;541      /* each stage in middle stages provides two down scaling of the input */
;;;542    
;;;543      twidCoefModifier <<= 2u;
00018c  9812              LDR      r0,[sp,#0x48]
00018e  0080              LSLS     r0,r0,#2
000190  9012              STR      r0,[sp,#0x48]
;;;544    
;;;545    
;;;546      for (k = fftLen / 4u; k > 4u; k >>= 2u)
000192  980e              LDR      r0,[sp,#0x38]
000194  900b              STR      r0,[sp,#0x2c]
000196  e0fa              B        |L3.910|
                  |L3.408|
;;;547      {
;;;548        /*  Initializations for the first stage */
;;;549        n1 = n2;
000198  462e              MOV      r6,r5
;;;550        n2 >>= 2u;
00019a  08ad              LSRS     r5,r5,#2
;;;551        ia1 = 0u;
00019c  2700              MOVS     r7,#0
;;;552    
;;;553        /*  Calculation of first stage */
;;;554        for (j = 0u; j <= (n2 - 1u); j++)
00019e  46bc              MOV      r12,r7
0001a0  1e68              SUBS     r0,r5,#1
0001a2  900d              STR      r0,[sp,#0x34]
0001a4  e0e9              B        |L3.890|
                  |L3.422|
;;;555        {
;;;556          /*  index calculation for the coefficients */
;;;557          ia2 = ia1 + ia1;
0001a6  0078              LSLS     r0,r7,#1
;;;558          ia3 = ia2 + ia1;
0001a8  19c1              ADDS     r1,r0,r7
;;;559          co1 = pCoef[ia1 * 2u];
0001aa  f8523037          LDR      r3,[r2,r7,LSL #3]
0001ae  9305              STR      r3,[sp,#0x14]
;;;560          si1 = pCoef[(ia1 * 2u) + 1u];
0001b0  2301              MOVS     r3,#1
0001b2  eb030447          ADD      r4,r3,r7,LSL #1
0001b6  f8524024          LDR      r4,[r2,r4,LSL #2]
0001ba  9402              STR      r4,[sp,#8]
;;;561          co2 = pCoef[ia2 * 2u];
0001bc  f8524030          LDR      r4,[r2,r0,LSL #3]
0001c0  9404              STR      r4,[sp,#0x10]
;;;562          si2 = pCoef[(ia2 * 2u) + 1u];
0001c2  eb030040          ADD      r0,r3,r0,LSL #1
0001c6  f8520020          LDR      r0,[r2,r0,LSL #2]
0001ca  9001              STR      r0,[sp,#4]
;;;563          co3 = pCoef[ia3 * 2u];
0001cc  f8520031          LDR      r0,[r2,r1,LSL #3]
0001d0  9003              STR      r0,[sp,#0xc]
;;;564          si3 = pCoef[(ia3 * 2u) + 1u];
0001d2  eb030041          ADD      r0,r3,r1,LSL #1
0001d6  f8520020          LDR      r0,[r2,r0,LSL #2]
0001da  9000              STR      r0,[sp,#0]
;;;565          /*  Twiddle coefficients index modifier */
;;;566          ia1 = ia1 + twidCoefModifier;
0001dc  9812              LDR      r0,[sp,#0x48]
0001de  4407              ADD      r7,r7,r0
;;;567          
;;;568          pSi0 = pSrc + 2 * j;
0001e0  980f              LDR      r0,[sp,#0x3c]
0001e2  eb0003cc          ADD      r3,r0,r12,LSL #3
;;;569          pSi1 = pSi0 + 2 * n2;
0001e6  eb0300c5          ADD      r0,r3,r5,LSL #3
;;;570          pSi2 = pSi1 + 2 * n2;
0001ea  eb0004c5          ADD      r4,r0,r5,LSL #3
;;;571          pSi3 = pSi2 + 2 * n2;
0001ee  eb0401c5          ADD      r1,r4,r5,LSL #3
;;;572    
;;;573          for (i0 = j; i0 < fftLen; i0 += n1)
0001f2  46e0              MOV      r8,r12
0001f4  e0ba              B        |L3.876|
                  |L3.502|
;;;574          {
;;;575            /*  Butterfly implementation */
;;;576            /* xa + xc */
;;;577            r1 = pSi0[0] + pSi2[0];
0001f6  f8d3a000          LDR      r10,[r3,#0]
0001fa  f8d4b000          LDR      r11,[r4,#0]
0001fe  eb0a090b          ADD      r9,r10,r11
;;;578    
;;;579            /* xa - xc */
;;;580            r2 = pSi0[0] - pSi2[0];
000202  ebaa0a0b          SUB      r10,r10,r11
000206  f8cda020          STR      r10,[sp,#0x20]
;;;581    
;;;582    
;;;583            /* ya + yc */
;;;584            s1 = pSi0[1] + pSi2[1];
00020a  f8d3e004          LDR      lr,[r3,#4]
00020e  f8d4b004          LDR      r11,[r4,#4]
000212  eb0e0a0b          ADD      r10,lr,r11
;;;585    
;;;586            /* ya - yc */
;;;587            s2 = pSi0[1] - pSi2[1];
000216  ebae0b0b          SUB      r11,lr,r11
00021a  f8cdb018          STR      r11,[sp,#0x18]
;;;588    
;;;589    
;;;590            /* xb + xd */
;;;591            t1 = pSi1[0] + pSi3[0];
00021e  f8d0b000          LDR      r11,[r0,#0]
000222  f8d1e000          LDR      lr,[r1,#0]
000226  44f3              ADD      r11,r11,lr
;;;592    
;;;593    
;;;594            /* xa' = xa + xb + xc + xd */
;;;595            pSi0[0] = (r1 + t1) >> 2u;
000228  eb090e0b          ADD      lr,r9,r11
00022c  ea4f0eae          ASR      lr,lr,#2
000230  f8c3e000          STR      lr,[r3,#0]
;;;596            /* xa + xc -(xb + xd) */
;;;597            r1 = r1 - t1;
000234  eba90e0b          SUB      lr,r9,r11
000238  f8cde024          STR      lr,[sp,#0x24]
;;;598    
;;;599            /* yb + yd */
;;;600            t2 = pSi1[1] + pSi3[1];
00023c  f8d09004          LDR      r9,[r0,#4]
000240  f8d1b004          LDR      r11,[r1,#4]
000244  44d9              ADD      r9,r9,r11
;;;601    
;;;602            /* ya' = ya + yb + yc + yd */
;;;603            pSi0[1] = (s1 + t2) >> 2u;
000246  eb0a0b09          ADD      r11,r10,r9
00024a  ea4f0bab          ASR      r11,r11,#2
00024e  f8c3b004          STR      r11,[r3,#4]
;;;604            pSi0 += 2 * n1;
000252  eb0303c6          ADD      r3,r3,r6,LSL #3
;;;605    
;;;606            /* (ya + yc) - (yb + yd) */
;;;607            s1 = s1 - t2;
000256  ebaa0b09          SUB      r11,r10,r9
;;;608    
;;;609            /* (yb - yd) */
;;;610            t1 = pSi1[1] - pSi3[1];
00025a  f8d09004          LDR      r9,[r0,#4]
00025e  f8d1a004          LDR      r10,[r1,#4]
000262  eba9090a          SUB      r9,r9,r10
;;;611    
;;;612            /* (xb - xd) */
;;;613            t2 = pSi1[0] - pSi3[0];
000266  f8d0a000          LDR      r10,[r0,#0]
00026a  f8d1e000          LDR      lr,[r1,#0]
00026e  ebaa0a0e          SUB      r10,r10,lr
000272  f8cda028          STR      r10,[sp,#0x28]
;;;614    
;;;615    
;;;616            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;617            pSi1[0] = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
000276  f8dde024          LDR      lr,[sp,#0x24]
00027a  f8dda010          LDR      r10,[sp,#0x10]
00027e  fb5efe0a          SMMUL    lr,lr,r10
000282  f8dda004          LDR      r10,[sp,#4]
000286  fb5bfa0a          SMMUL    r10,r11,r10
00028a  44f2              ADD      r10,r10,lr
00028c  ea4f0a6a          ASR      r10,r10,#1
000290  f8c0a000          STR      r10,[r0,#0]
;;;618                             ((int32_t) (((q63_t) s1 * si2) >> 32))) >> 1u;
;;;619    
;;;620            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;621            pSi1[1] = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
000294  f8dda010          LDR      r10,[sp,#0x10]
000298  fb5bfb0a          SMMUL    r11,r11,r10
00029c  f8dde024          LDR      lr,[sp,#0x24]
0002a0  f8dda004          LDR      r10,[sp,#4]
0002a4  fb5efa0a          SMMUL    r10,lr,r10
0002a8  ebab0a0a          SUB      r10,r11,r10
0002ac  ea4f0a6a          ASR      r10,r10,#1
0002b0  f8c0a004          STR      r10,[r0,#4]
;;;622                                    ((int32_t) (((q63_t) r1 * si2) >> 32))) >> 1u;
;;;623            pSi1 += 2 * n1;
0002b4  eb0000c6          ADD      r0,r0,r6,LSL #3
;;;624    
;;;625            /* (xa - xc) + (yb - yd) */
;;;626            r1 = r2 + t1;
0002b8  f8dda020          LDR      r10,[sp,#0x20]
0002bc  eb0a0b09          ADD      r11,r10,r9
0002c0  f8cdb024          STR      r11,[sp,#0x24]
;;;627            /* (xa - xc) - (yb - yd) */
;;;628            r2 = r2 - t1;
0002c4  f8dda020          LDR      r10,[sp,#0x20]
0002c8  ebaa0909          SUB      r9,r10,r9
0002cc  f8cd9020          STR      r9,[sp,#0x20]
;;;629    
;;;630            /* (ya - yc) -  (xb - xd) */
;;;631            s1 = s2 - t2;
0002d0  f8ddb018          LDR      r11,[sp,#0x18]
0002d4  f8dda028          LDR      r10,[sp,#0x28]
0002d8  ebab090a          SUB      r9,r11,r10
;;;632            /* (ya - yc) +  (xb - xd) */
;;;633            s2 = s2 + t2;
0002dc  f8ddb018          LDR      r11,[sp,#0x18]
0002e0  f8dda028          LDR      r10,[sp,#0x28]
0002e4  44da              ADD      r10,r10,r11
;;;634    
;;;635            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;636            pSi2[0] = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
0002e6  f8dde014          LDR      lr,[sp,#0x14]
0002ea  f8ddb024          LDR      r11,[sp,#0x24]
0002ee  fb5bfe0e          SMMUL    lr,r11,lr
0002f2  f8ddb008          LDR      r11,[sp,#8]
0002f6  fb59fb0b          SMMUL    r11,r9,r11
0002fa  44f3              ADD      r11,r11,lr
0002fc  ea4f0b6b          ASR      r11,r11,#1
000300  f8c4b000          STR      r11,[r4,#0]
;;;637                             ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;638    
;;;639            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;640            pSi2[1] = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
000304  f8ddb014          LDR      r11,[sp,#0x14]
000308  fb59fe0b          SMMUL    lr,r9,r11
00030c  f8ddb024          LDR      r11,[sp,#0x24]
000310  f8dd9008          LDR      r9,[sp,#8]
000314  fb5bf909          SMMUL    r9,r11,r9
000318  ebae0909          SUB      r9,lr,r9
00031c  ea4f0969          ASR      r9,r9,#1
000320  f8c49004          STR      r9,[r4,#4]
;;;641                                    ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;642            pSi2 += 2 * n1;
000324  eb0404c6          ADD      r4,r4,r6,LSL #3
;;;643    
;;;644            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;645            pSi3[0] = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
000328  f8ddb00c          LDR      r11,[sp,#0xc]
00032c  f8dd9020          LDR      r9,[sp,#0x20]
000330  fb59fb0b          SMMUL    r11,r9,r11
000334  f8dd9000          LDR      r9,[sp,#0]
000338  fb5af909          SMMUL    r9,r10,r9
00033c  44d9              ADD      r9,r9,r11
00033e  ea4f0969          ASR      r9,r9,#1
000342  f8c19000          STR      r9,[r1,#0]
;;;646                             ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;647    
;;;648            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;649            pSi3[1] = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
000346  f8dd900c          LDR      r9,[sp,#0xc]
00034a  fb5afb09          SMMUL    r11,r10,r9
00034e  f8dda000          LDR      r10,[sp,#0]
000352  f8dd9020          LDR      r9,[sp,#0x20]
000356  fb59f90a          SMMUL    r9,r9,r10
00035a  ebab0909          SUB      r9,r11,r9
00035e  ea4f0969          ASR      r9,r9,#1
000362  f8c19004          STR      r9,[r1,#4]
;;;650                                    ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;651            pSi3 += 2 * n1;
000366  eb0101c6          ADD      r1,r1,r6,LSL #3
00036a  44b0              ADD      r8,r8,r6              ;573
                  |L3.876|
00036c  f8dd9040          LDR      r9,[sp,#0x40]         ;573
000370  45c8              CMP      r8,r9                 ;573
000372  f4ffaf40          BCC      |L3.502|
000376  f10c0c01          ADD      r12,r12,#1            ;554
                  |L3.890|
00037a  980d              LDR      r0,[sp,#0x34]         ;554
00037c  4584              CMP      r12,r0                ;554
00037e  f67faf12          BLS      |L3.422|
;;;652          }
;;;653        }
;;;654        twidCoefModifier <<= 2u;
000382  9812              LDR      r0,[sp,#0x48]
000384  0080              LSLS     r0,r0,#2
000386  9012              STR      r0,[sp,#0x48]
000388  980b              LDR      r0,[sp,#0x2c]         ;546
00038a  0880              LSRS     r0,r0,#2              ;546
00038c  900b              STR      r0,[sp,#0x2c]         ;546
                  |L3.910|
00038e  980b              LDR      r0,[sp,#0x2c]         ;546
000390  2804              CMP      r0,#4                 ;546
000392  f63faf01          BHI      |L3.408|
;;;655      }
;;;656    #endif
;;;657    
;;;658      /* End of Middle stages process */
;;;659    
;;;660      /* data is in 11.21(q21) format for the 1024 point as there are 3 middle stages */
;;;661      /* data is in 9.23(q23) format for the 256 point as there are 2 middle stages */
;;;662      /* data is in 7.25(q25) format for the 64 point as there are 1 middle stage */
;;;663      /* data is in 5.27(q27) format for the 16 point as there are no middle stages */
;;;664    
;;;665    
;;;666      /* start of Last stage process */
;;;667      /*  Initializations for the last stage */
;;;668      j = fftLen >> 2;
000396  f8dd8038          LDR      r8,[sp,#0x38]
;;;669      ptr1 = &pSrc[0];
00039a  f8ddc03c          LDR      r12,[sp,#0x3c]
                  |L3.926|
;;;670    
;;;671      /*  Calculations of last stage */
;;;672      do
;;;673      {
;;;674    
;;;675    #ifndef ARM_MATH_BIG_ENDIAN
;;;676    
;;;677        /* Read xa (real), ya(imag) input */
;;;678        xaya = *__SIMD64(ptr1)++;
00039e  e9dc0100          LDRD     r0,r1,[r12,#0]
0003a2  f10c0c08          ADD      r12,r12,#8
;;;679        xa = (q31_t) xaya;
;;;680        ya = (q31_t) (xaya >> 32);
0003a6  460d              MOV      r5,r1
;;;681    
;;;682        /* Read xb (real), yb(imag) input */
;;;683        xbyb = *__SIMD64(ptr1)++;
0003a8  e9dc1200          LDRD     r1,r2,[r12,#0]
0003ac  f10c0c08          ADD      r12,r12,#8
;;;684        xb = (q31_t) xbyb;
;;;685        yb = (q31_t) (xbyb >> 32);
0003b0  4616              MOV      r6,r2
;;;686    
;;;687        /* Read xc (real), yc(imag) input */
;;;688        xcyc = *__SIMD64(ptr1)++;
0003b2  e9dc2300          LDRD     r2,r3,[r12,#0]
0003b6  f10c0c08          ADD      r12,r12,#8
;;;689        xc = (q31_t) xcyc;
;;;690        yc = (q31_t) (xcyc >> 32);
0003ba  461f              MOV      r7,r3
;;;691    
;;;692        /* Read xc (real), yc(imag) input */
;;;693        xdyd = *__SIMD64(ptr1)++;
0003bc  e9dc3400          LDRD     r3,r4,[r12,#0]
0003c0  f10c0c08          ADD      r12,r12,#8
;;;694        xd = (q31_t) xdyd;
;;;695        yd = (q31_t) (xdyd >> 32);
;;;696    
;;;697    #else
;;;698    
;;;699        /* Read xa (real), ya(imag) input */
;;;700        xaya = *__SIMD64(ptr1)++;
;;;701        ya = (q31_t) xaya;
;;;702        xa = (q31_t) (xaya >> 32);
;;;703    
;;;704        /* Read xb (real), yb(imag) input */
;;;705        xbyb = *__SIMD64(ptr1)++;
;;;706        yb = (q31_t) xbyb;
;;;707        xb = (q31_t) (xbyb >> 32);
;;;708    
;;;709        /* Read xc (real), yc(imag) input */
;;;710        xcyc = *__SIMD64(ptr1)++;
;;;711        yc = (q31_t) xcyc;
;;;712        xc = (q31_t) (xcyc >> 32);
;;;713    
;;;714        /* Read xc (real), yc(imag) input */
;;;715        xdyd = *__SIMD64(ptr1)++;
;;;716        yd = (q31_t) xdyd;
;;;717        xd = (q31_t) (xdyd >> 32);
;;;718    
;;;719    
;;;720    #endif
;;;721    
;;;722        /* xa' = xa + xb + xc + xd */
;;;723        xa_out = xa + xb + xc + xd;
0003c4  eb000901          ADD      r9,r0,r1
0003c8  4491              ADD      r9,r9,r2
0003ca  4499              ADD      r9,r9,r3
;;;724    
;;;725        /* ya' = ya + yb + yc + yd */
;;;726        ya_out = ya + yb + yc + yd;
0003cc  eb050a06          ADD      r10,r5,r6
0003d0  44ba              ADD      r10,r10,r7
0003d2  44a2              ADD      r10,r10,r4
;;;727    
;;;728        /* pointer updation for writing */
;;;729        ptr1 = ptr1 - 8u;
0003d4  f1ac0c20          SUB      r12,r12,#0x20
;;;730    
;;;731        /* writing xa' and ya' */
;;;732        *ptr1++ = xa_out;
0003d8  f84c9b04          STR      r9,[r12],#4
;;;733        *ptr1++ = ya_out;
0003dc  f84cab04          STR      r10,[r12],#4
;;;734    
;;;735        xc_out = (xa - xb + xc - xd);
0003e0  eba00901          SUB      r9,r0,r1
0003e4  4491              ADD      r9,r9,r2
0003e6  eba90a03          SUB      r10,r9,r3
;;;736        yc_out = (ya - yb + yc - yd);
0003ea  eba50906          SUB      r9,r5,r6
0003ee  44b9              ADD      r9,r9,r7
0003f0  eba90904          SUB      r9,r9,r4
;;;737    
;;;738        /* writing xc' and yc' */
;;;739        *ptr1++ = xc_out;
0003f4  f84cab04          STR      r10,[r12],#4
;;;740        *ptr1++ = yc_out;
0003f8  f84c9b04          STR      r9,[r12],#4
;;;741    
;;;742        xb_out = (xa + yb - xc - yd);
0003fc  eb000906          ADD      r9,r0,r6
000400  eba90902          SUB      r9,r9,r2
000404  eba90904          SUB      r9,r9,r4
;;;743        yb_out = (ya - xb - yc + xd);
000408  eba50a01          SUB      r10,r5,r1
00040c  ebaa0a07          SUB      r10,r10,r7
000410  449a              ADD      r10,r10,r3
;;;744    
;;;745        /* writing xb' and yb' */
;;;746        *ptr1++ = xb_out;
000412  f84c9b04          STR      r9,[r12],#4
;;;747        *ptr1++ = yb_out;
000416  f84cab04          STR      r10,[r12],#4
;;;748    
;;;749        xd_out = (xa - yb - xc + yd);
00041a  1b80              SUBS     r0,r0,r6
00041c  1a80              SUBS     r0,r0,r2
00041e  4420              ADD      r0,r0,r4
;;;750        yd_out = (ya + xb - yc - xd);
000420  4429              ADD      r1,r1,r5
000422  1bc9              SUBS     r1,r1,r7
000424  1ac9              SUBS     r1,r1,r3
;;;751    
;;;752        /* writing xd' and yd' */
;;;753        *ptr1++ = xd_out;
000426  f84c0b04          STR      r0,[r12],#4
;;;754        *ptr1++ = yd_out;
00042a  f84c1b04          STR      r1,[r12],#4
;;;755    
;;;756    
;;;757      } while(--j);
00042e  f1b80801          SUBS     r8,r8,#1
000432  d1b4              BNE      |L3.926|
;;;758    
;;;759      /* output is in 11.21(q21) format for the 1024 point */
;;;760      /* output is in 9.23(q23) format for the 256 point */
;;;761      /* output is in 7.25(q25) format for the 64 point */
;;;762      /* output is in 5.27(q27) format for the 16 point */
;;;763    
;;;764      /* End of last stage process */
;;;765    
;;;766    }
000434  b013              ADD      sp,sp,#0x4c
000436  e8bd8ff0          POP      {r4-r11,pc}
;;;767    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix4_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_q31_c_eb61842b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix4_q31_c_eb61842b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_q31_c_eb61842b____REVSH|
#line 144
|__asm___21_arm_cfft_radix4_q31_c_eb61842b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_q31_c_eb61842b____RRX|
#line 300
|__asm___21_arm_cfft_radix4_q31_c_eb61842b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
