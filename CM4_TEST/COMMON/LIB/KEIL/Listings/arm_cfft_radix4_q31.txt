; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix4_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix4_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cfft_radix4_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix4_q31.c]
                          THUMB

                          AREA ||i.arm_cfft_radix4_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix4_q31 PROC
;;;89     
;;;90     void arm_cfft_radix4_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;91       const arm_cfft_radix4_instance_q31 * S,
;;;92       q31_t * pSrc)
;;;93     {
000002  4604              MOV      r4,r0
;;;94       if(S->ifftFlag == 1u)
000004  7880              LDRB     r0,[r0,#2]
000006  460d              MOV      r5,r1                 ;93
;;;95       {
;;;96         /* Complex IFFT radix-4 */
;;;97         arm_radix4_butterfly_inverse_q31(pSrc, S->fftLen, S->pTwiddle,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;94
00000e  2801              CMP      r0,#1                 ;94
;;;98                                          S->twidCoefModifier);
;;;99       }
;;;100      else
;;;101      {
;;;102        /* Complex FFT radix-4 */
;;;103        arm_radix4_butterfly_q31(pSrc, S->fftLen, S->pTwiddle,
000010  4628              MOV      r0,r5
000012  d00c              BEQ      |L1.46|
000014  f7fffffe          BL       arm_radix4_butterfly_q31
                  |L1.24|
;;;104                                 S->twidCoefModifier);
;;;105      }
;;;106    
;;;107    
;;;108      if(S->bitReverseFlag == 1u)
000018  78e0              LDRB     r0,[r4,#3]
00001a  2801              CMP      r0,#1
00001c  d10a              BNE      |L1.52|
;;;109      {
;;;110        /*  Bit Reversal */
;;;111        arm_bitreversal_q31(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
00001e  89e2              LDRH     r2,[r4,#0xe]
000020  8821              LDRH     r1,[r4,#0]
000022  4628              MOV      r0,r5
000024  68a3              LDR      r3,[r4,#8]
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      arm_bitreversal_q31
                  |L1.46|
00002e  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
000032  e7f1              B        |L1.24|
                  |L1.52|
;;;112      }
;;;113    
;;;114    }
000034  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP


                          AREA ||i.arm_radix4_butterfly_inverse_q31||, CODE, READONLY, ALIGN=2

                  arm_radix4_butterfly_inverse_q31 PROC
;;;818    
;;;819    void arm_radix4_butterfly_inverse_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;820      q31_t * pSrc,
;;;821      uint32_t fftLen,
;;;822      q31_t * pCoef,
;;;823      uint32_t twidCoefModifier)
;;;824    {
000004  b098              SUB      sp,sp,#0x60
;;;825    #if defined(ARM_MATH_CM7)
;;;826      uint32_t n1, n2, ia1, ia2, ia3, i0, i1, i2, i3, j, k;
;;;827      q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;828      q31_t xa, xb, xc, xd;
;;;829      q31_t ya, yb, yc, yd;
;;;830      q31_t xa_out, xb_out, xc_out, xd_out;
;;;831      q31_t ya_out, yb_out, yc_out, yd_out;
;;;832    
;;;833      q31_t *ptr1;
;;;834      q63_t xaya, xbyb, xcyc, xdyd;
;;;835    
;;;836      /* input is be 1.31(q31) format for all FFT sizes */
;;;837      /* Total process is divided into three stages */
;;;838      /* process first stage, middle stages, & last stage */
;;;839    
;;;840      /* Start of first stage process */
;;;841    
;;;842      /* Initializations for the first stage */
;;;843      n2 = fftLen;
;;;844      n1 = n2;
;;;845      /* n2 = fftLen/4 */
;;;846      n2 >>= 2u;
;;;847      i0 = 0u;
;;;848      ia1 = 0u;
;;;849    
;;;850      j = n2;
;;;851    
;;;852      do
;;;853      {
;;;854    
;;;855        /* input is in 1.31(q31) format and provide 4 guard bits for the input */
;;;856    
;;;857        /*  index calculation for the input as, */
;;;858        /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;859        i1 = i0 + n2;
;;;860        i2 = i1 + n2;
;;;861        i3 = i2 + n2;
;;;862    
;;;863        /*  Butterfly implementation */
;;;864        /* xa + xc */
;;;865        r1 = (pSrc[2u * i0] >> 4u) + (pSrc[2u * i2] >> 4u);
;;;866        /* xa - xc */
;;;867        r2 = (pSrc[2u * i0] >> 4u) - (pSrc[2u * i2] >> 4u);
;;;868    
;;;869        /* xb + xd */
;;;870        t1 = (pSrc[2u * i1] >> 4u) + (pSrc[2u * i3] >> 4u);
;;;871    
;;;872        /* ya + yc */
;;;873        s1 = (pSrc[(2u * i0) + 1u] >> 4u) + (pSrc[(2u * i2) + 1u] >> 4u);
;;;874        /* ya - yc */
;;;875        s2 = (pSrc[(2u * i0) + 1u] >> 4u) - (pSrc[(2u * i2) + 1u] >> 4u);
;;;876    
;;;877        /* xa' = xa + xb + xc + xd */
;;;878        pSrc[2u * i0] = (r1 + t1);
;;;879        /* (xa + xc) - (xb + xd) */
;;;880        r1 = r1 - t1;
;;;881        /* yb + yd */
;;;882        t2 = (pSrc[(2u * i1) + 1u] >> 4u) + (pSrc[(2u * i3) + 1u] >> 4u);
;;;883        /* ya' = ya + yb + yc + yd */
;;;884        pSrc[(2u * i0) + 1u] = (s1 + t2);
;;;885    
;;;886        /* (ya + yc) - (yb + yd) */
;;;887        s1 = s1 - t2;
;;;888    
;;;889        /* yb - yd */
;;;890        t1 = (pSrc[(2u * i1) + 1u] >> 4u) - (pSrc[(2u * i3) + 1u] >> 4u);
;;;891        /* xb - xd */
;;;892        t2 = (pSrc[2u * i1] >> 4u) - (pSrc[2u * i3] >> 4u);
;;;893    
;;;894        /*  index calculation for the coefficients */
;;;895        ia2 = 2u * ia1;
;;;896        co2 = pCoef[ia2 * 2u];
;;;897        si2 = pCoef[(ia2 * 2u) + 1u];
;;;898    
;;;899        /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;900        pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32)) -
;;;901                         ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;902    
;;;903        /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;904        pSrc[2u * i1 + 1u] = (((int32_t) (((q63_t) s1 * co2) >> 32)) +
;;;905                              ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;906    
;;;907        /* (xa - xc) - (yb - yd) */
;;;908        r1 = r2 - t1;
;;;909        /* (xa - xc) + (yb - yd) */
;;;910        r2 = r2 + t1;
;;;911    
;;;912        /* (ya - yc) + (xb - xd) */
;;;913        s1 = s2 + t2;
;;;914        /* (ya - yc) - (xb - xd) */
;;;915        s2 = s2 - t2;
;;;916    
;;;917        co1 = pCoef[ia1 * 2u];
;;;918        si1 = pCoef[(ia1 * 2u) + 1u];
;;;919    
;;;920        /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;921        pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
;;;922                         ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;923    
;;;924        /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;925        pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
;;;926                                ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;927    
;;;928        /*  index calculation for the coefficients */
;;;929        ia3 = 3u * ia1;
;;;930        co3 = pCoef[ia3 * 2u];
;;;931        si3 = pCoef[(ia3 * 2u) + 1u];
;;;932    
;;;933        /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;934        pSrc[2u * i3] = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
;;;935                         ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;936    
;;;937        /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;938        pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
;;;939                                ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;940    
;;;941        /*  Twiddle coefficients index modifier */
;;;942        ia1 = ia1 + twidCoefModifier;
;;;943    
;;;944        /*  Updating input index */
;;;945        i0 = i0 + 1u;
;;;946    
;;;947      } while(--j);
;;;948    
;;;949      /* data is in 5.27(q27) format */
;;;950      /* each stage provides two down scaling of the input */
;;;951    
;;;952    
;;;953      /* Start of Middle stages process */
;;;954    
;;;955      twidCoefModifier <<= 2u;
;;;956    
;;;957      /*  Calculation of second stage to excluding last stage */
;;;958      for (k = fftLen / 4u; k > 4u; k >>= 2u)
;;;959      {
;;;960        /*  Initializations for the first stage */
;;;961        n1 = n2;
;;;962        n2 >>= 2u;
;;;963        ia1 = 0u;
;;;964    
;;;965        for (j = 0; j <= (n2 - 1u); j++)
;;;966        {
;;;967          /*  index calculation for the coefficients */
;;;968          ia2 = ia1 + ia1;
;;;969          ia3 = ia2 + ia1;
;;;970          co1 = pCoef[ia1 * 2u];
;;;971          si1 = pCoef[(ia1 * 2u) + 1u];
;;;972          co2 = pCoef[ia2 * 2u];
;;;973          si2 = pCoef[(ia2 * 2u) + 1u];
;;;974          co3 = pCoef[ia3 * 2u];
;;;975          si3 = pCoef[(ia3 * 2u) + 1u];
;;;976          /*  Twiddle coefficients index modifier */
;;;977          ia1 = ia1 + twidCoefModifier;
;;;978    
;;;979          for (i0 = j; i0 < fftLen; i0 += n1)
;;;980          {
;;;981            /*  index calculation for the input as, */
;;;982            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;983            i1 = i0 + n2;
;;;984            i2 = i1 + n2;
;;;985            i3 = i2 + n2;
;;;986    
;;;987            /*  Butterfly implementation */
;;;988            /* xa + xc */
;;;989            r1 = pSrc[2u * i0] + pSrc[2u * i2];
;;;990            /* xa - xc */
;;;991            r2 = pSrc[2u * i0] - pSrc[2u * i2];
;;;992    
;;;993            /* ya + yc */
;;;994            s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;995            /* ya - yc */
;;;996            s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;997    
;;;998            /* xb + xd */
;;;999            t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;1000   
;;;1001           /* xa' = xa + xb + xc + xd */
;;;1002           pSrc[2u * i0] = (r1 + t1) >> 2u;
;;;1003           /* xa + xc -(xb + xd) */
;;;1004           r1 = r1 - t1;
;;;1005           /* yb + yd */
;;;1006           t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;1007           /* ya' = ya + yb + yc + yd */
;;;1008           pSrc[(2u * i0) + 1u] = (s1 + t2) >> 2u;
;;;1009   
;;;1010           /* (ya + yc) - (yb + yd) */
;;;1011           s1 = s1 - t2;
;;;1012   
;;;1013           /* (yb - yd) */
;;;1014           t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;1015           /* (xb - xd) */
;;;1016           t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;1017   
;;;1018           /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1019           pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32u)) -
;;;1020                            ((int32_t) (((q63_t) s1 * si2) >> 32u))) >> 1u;
;;;1021   
;;;1022           /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1023           pSrc[(2u * i1) + 1u] =
;;;1024             (((int32_t) (((q63_t) s1 * co2) >> 32u)) +
;;;1025              ((int32_t) (((q63_t) r1 * si2) >> 32u))) >> 1u;
;;;1026   
;;;1027           /* (xa - xc) - (yb - yd) */
;;;1028           r1 = r2 - t1;
;;;1029           /* (xa - xc) + (yb - yd) */
;;;1030           r2 = r2 + t1;
;;;1031   
;;;1032           /* (ya - yc) +  (xb - xd) */
;;;1033           s1 = s2 + t2;
;;;1034           /* (ya - yc) -  (xb - xd) */
;;;1035           s2 = s2 - t2;
;;;1036   
;;;1037           /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1038           pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
;;;1039                            ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;1040   
;;;1041           /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1042           pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
;;;1043                                   ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;1044   
;;;1045           /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1046           pSrc[(2u * i3)] = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
;;;1047                              ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;1048   
;;;1049           /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1050           pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
;;;1051                                   ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;1052         }
;;;1053       }
;;;1054       twidCoefModifier <<= 2u;
;;;1055     }
;;;1056   #else
;;;1057     uint32_t n1, n2, ia1, ia2, ia3, i0, j, k;
;;;1058     q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;1059     q31_t xa, xb, xc, xd;
;;;1060     q31_t ya, yb, yc, yd;
;;;1061     q31_t xa_out, xb_out, xc_out, xd_out;
;;;1062     q31_t ya_out, yb_out, yc_out, yd_out;
;;;1063   
;;;1064     q31_t *ptr1;
;;;1065     q31_t *pSi0;
;;;1066     q31_t *pSi1;
;;;1067     q31_t *pSi2;
;;;1068     q31_t *pSi3;
;;;1069     q63_t xaya, xbyb, xcyc, xdyd;
;;;1070   
;;;1071     /* input is be 1.31(q31) format for all FFT sizes */
;;;1072     /* Total process is divided into three stages */
;;;1073     /* process first stage, middle stages, & last stage */
;;;1074   
;;;1075     /* Start of first stage process */
;;;1076   
;;;1077     /* Initializations for the first stage */
;;;1078     n2 = fftLen;
;;;1079     n1 = n2;
;;;1080     /* n2 = fftLen/4 */
;;;1081     n2 >>= 2u;
000006  9819              LDR      r0,[sp,#0x64]
000008  0880              LSRS     r0,r0,#2
;;;1082   
;;;1083     ia1 = 0u;
;;;1084   
;;;1085     j = n2;
;;;1086     
;;;1087     pSi0 = pSrc;
00000a  9013              STR      r0,[sp,#0x4c]
;;;1088     pSi1 = pSi0 + 2 * n2;
00000c  9c18              LDR      r4,[sp,#0x60]
00000e  2600              MOVS     r6,#0                 ;1083
000010  eb0401c0          ADD      r1,r4,r0,LSL #3
;;;1089     pSi2 = pSi1 + 2 * n2;
000014  eb0105c0          ADD      r5,r1,r0,LSL #3
000018  9014              STR      r0,[sp,#0x50]         ;1085
;;;1090     pSi3 = pSi2 + 2 * n2;
00001a  eb0503c0          ADD      r3,r5,r0,LSL #3
                  |L2.30|
;;;1091   
;;;1092     do
;;;1093     {
;;;1094       /*  Butterfly implementation */
;;;1095       /* xa + xc */
;;;1096       r1 = (pSi0[0] >> 4u) + (pSi2[0] >> 4u);
00001e  cc80              LDM      r4!,{r7}
000020  f8558b04          LDR      r8,[r5],#4
000024  113f              ASRS     r7,r7,#4
;;;1097       /* xa - xc */
;;;1098       r2 = (pSi0[0] >> 4u) - (pSi2[0] >> 4u);
000026  eba71c28          SUB      r12,r7,r8,ASR #4
00002a  eb071928          ADD      r9,r7,r8,ASR #4       ;1096
;;;1099   
;;;1100       /* xb + xd */
;;;1101       t1 = (pSi1[0] >> 4u) + (pSi3[0] >> 4u);
00002e  f8cdc010          STR      r12,[sp,#0x10]
000032  c980              LDM      r1!,{r7}
000034  f853cb04          LDR      r12,[r3],#4
000038  113f              ASRS     r7,r7,#4
00003a  eb071a2c          ADD      r10,r7,r12,ASR #4
;;;1102   
;;;1103       /* ya + yc */
;;;1104       s1 = (pSi0[1] >> 4u) + (pSi2[1] >> 4u);
00003e  cc80              LDM      r4!,{r7}
000040  f855cb04          LDR      r12,[r5],#4
000044  ea4f1827          ASR      r8,r7,#4
000048  eb08172c          ADD      r7,r8,r12,ASR #4
;;;1105       /* ya - yc */
;;;1106       s2 = (pSi0[1] >> 4u) - (pSi2[1] >> 4u);
00004c  eba81c2c          SUB      r12,r8,r12,ASR #4
;;;1107   
;;;1108       /* xa' = xa + xb + xc + xd */
;;;1109       *pSi0++ = (r1 + t1);
000050  f8cdc00c          STR      r12,[sp,#0xc]
000054  eb090c0a          ADD      r12,r9,r10
000058  f844cc08          STR      r12,[r4,#-8]
;;;1110       /* (xa + xc) - (xb + xd) */
;;;1111       r1 = r1 - t1;
;;;1112       /* yb + yd */
;;;1113       t2 = (pSi1[1] >> 4u) + (pSi3[1] >> 4u);
00005c  f851cb04          LDR      r12,[r1],#4
000060  f8538b04          LDR      r8,[r3],#4
000064  ea4f1c2c          ASR      r12,r12,#4
000068  eb0c1c28          ADD      r12,r12,r8,ASR #4
00006c  eba90b0a          SUB      r11,r9,r10            ;1111
;;;1114       /* ya' = ya + yb + yc + yd */
;;;1115       *pSi0++ = (s1 + t2);
000070  eb07080c          ADD      r8,r7,r12
000074  f8448c04          STR      r8,[r4,#-4]
;;;1116   
;;;1117       /* (ya + yc) - (yb + yd) */
;;;1118       s1 = s1 - t2;
000078  eba7090c          SUB      r9,r7,r12
;;;1119   
;;;1120       /* yb - yd */
;;;1121       t1 = (pSi1[1] >> 4u) - (pSi3[1] >> 4u);
00007c  f8517c04          LDR      r7,[r1,#-4]
000080  f853cc04          LDR      r12,[r3,#-4]
000084  113f              ASRS     r7,r7,#4
000086  eba7172c          SUB      r7,r7,r12,ASR #4
;;;1122       /* xb - xd */
;;;1123       t2 = (pSi1[0] >> 4u) - (pSi3[0] >> 4u);
00008a  9709              STR      r7,[sp,#0x24]
00008c  f8517c08          LDR      r7,[r1,#-8]
000090  f853cc08          LDR      r12,[r3,#-8]
000094  113f              ASRS     r7,r7,#4
000096  eba71e2c          SUB      lr,r7,r12,ASR #4
;;;1124   
;;;1125       /*  index calculation for the coefficients */
;;;1126       ia2 = 2u * ia1;
00009a  0077              LSLS     r7,r6,#1
;;;1127       co2 = pCoef[ia2 * 2u];
00009c  f852a037          LDR      r10,[r2,r7,LSL #3]
;;;1128       si2 = pCoef[(ia2 * 2u) + 1u];
0000a0  eb0207c7          ADD      r7,r2,r7,LSL #3
0000a4  687f              LDR      r7,[r7,#4]
;;;1129   
;;;1130       /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1131       *pSi1++ = (((int32_t) (((q63_t) r1 * co2) >> 32)) -
0000a6  fb5bf80a          SMMUL    r8,r11,r10
0000aa  fb59fc07          SMMUL    r12,r9,r7
0000ae  eba80c0c          SUB      r12,r8,r12
0000b2  ea4f0c4c          LSL      r12,r12,#1
;;;1132                        ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;1133   
;;;1134       /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1135       *pSi1++ = (((int32_t) (((q63_t) s1 * co2) >> 32)) +
0000b6  fb59f80a          SMMUL    r8,r9,r10
0000ba  fb5bf707          SMMUL    r7,r11,r7
0000be  4447              ADD      r7,r7,r8
0000c0  007f              LSLS     r7,r7,#1
0000c2  e941c702          STRD     r12,r7,[r1,#-8]
;;;1136                             ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;1137   
;;;1138       /* (xa - xc) - (yb - yd) */
;;;1139       r1 = r2 - t1;
0000c6  f8ddc010          LDR      r12,[sp,#0x10]
0000ca  9f09              LDR      r7,[sp,#0x24]
0000cc  ebac0b07          SUB      r11,r12,r7
;;;1140       /* (xa - xc) + (yb - yd) */
;;;1141       r2 = r2 + t1;
0000d0  44bc              ADD      r12,r12,r7
;;;1142   
;;;1143       /* (ya - yc) + (xb - xd) */
;;;1144       s1 = s2 + t2;
0000d2  f8cdc010          STR      r12,[sp,#0x10]
0000d6  f8ddc00c          LDR      r12,[sp,#0xc]
;;;1145       /* (ya - yc) - (xb - xd) */
;;;1146       s2 = s2 - t2;
;;;1147   
;;;1148       co1 = pCoef[ia1 * 2u];
;;;1149       si1 = pCoef[(ia1 * 2u) + 1u];
0000da  eb0207c6          ADD      r7,r2,r6,LSL #3
0000de  eb0c0a0e          ADD      r10,r12,lr            ;1144
0000e2  f8529036          LDR      r9,[r2,r6,LSL #3]     ;1148
0000e6  687f              LDR      r7,[r7,#4]
0000e8  ebac0e0e          SUB      lr,r12,lr             ;1146
;;;1150   
;;;1151       /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1152       *pSi2++ = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
0000ec  fb5bf809          SMMUL    r8,r11,r9
0000f0  fb5afc07          SMMUL    r12,r10,r7
0000f4  eba80c0c          SUB      r12,r8,r12
0000f8  ea4f0c4c          LSL      r12,r12,#1
;;;1153                        ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;1154   
;;;1155       /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1156       *pSi2++ = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
0000fc  fb5af809          SMMUL    r8,r10,r9
000100  fb5bf707          SMMUL    r7,r11,r7
000104  4447              ADD      r7,r7,r8
000106  007f              LSLS     r7,r7,#1
000108  e945c702          STRD     r12,r7,[r5,#-8]
;;;1157                               ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;1158   
;;;1159       /*  index calculation for the coefficients */
;;;1160       ia3 = 3u * ia1;
00010c  eb060746          ADD      r7,r6,r6,LSL #1
;;;1161       co3 = pCoef[ia3 * 2u];
;;;1162       si3 = pCoef[(ia3 * 2u) + 1u];
;;;1163   
;;;1164       /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1165       *pSi3++ = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
000110  f8ddc010          LDR      r12,[sp,#0x10]
000114  f8529037          LDR      r9,[r2,r7,LSL #3]     ;1161
000118  eb0207c7          ADD      r7,r2,r7,LSL #3       ;1162
00011c  687f              LDR      r7,[r7,#4]            ;1162
00011e  fb5cf809          SMMUL    r8,r12,r9
000122  fb5efc07          SMMUL    r12,lr,r7
000126  eba80c0c          SUB      r12,r8,r12
00012a  ea4f0c4c          LSL      r12,r12,#1
00012e  f843cc08          STR      r12,[r3,#-8]
;;;1166                        ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;1167   
;;;1168       /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1169       *pSi3++ = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
000132  fb5ef809          SMMUL    r8,lr,r9
000136  f8ddc010          LDR      r12,[sp,#0x10]
00013a  fb5cf707          SMMUL    r7,r12,r7
00013e  4447              ADD      r7,r7,r8
000140  007f              LSLS     r7,r7,#1
000142  f8437c04          STR      r7,[r3,#-4]
;;;1170                               ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;1171   
;;;1172       /*  Twiddle coefficients index modifier */
;;;1173       ia1 = ia1 + twidCoefModifier;
000146  9f1b              LDR      r7,[sp,#0x6c]
000148  443e              ADD      r6,r6,r7
;;;1174   
;;;1175     } while(--j);
00014a  9f13              LDR      r7,[sp,#0x4c]
00014c  1e7f              SUBS     r7,r7,#1
00014e  9713              STR      r7,[sp,#0x4c]
000150  f47faf65          BNE      |L2.30|
;;;1176   
;;;1177     /* data is in 5.27(q27) format */
;;;1178     /* each stage provides two down scaling of the input */
;;;1179   
;;;1180   
;;;1181     /* Start of Middle stages process */
;;;1182   
;;;1183     twidCoefModifier <<= 2u;
000154  991b              LDR      r1,[sp,#0x6c]
000156  0089              LSLS     r1,r1,#2
000158  911b              STR      r1,[sp,#0x6c]
;;;1184   
;;;1185     /*  Calculation of second stage to excluding last stage */
;;;1186     for (k = fftLen / 4u; k > 4u; k >>= 2u)
00015a  9914              LDR      r1,[sp,#0x50]
00015c  e0de              B        |L2.796|
                  |L2.350|
;;;1187     {
;;;1188       /*  Initializations for the first stage */
;;;1189       n1 = n2;
00015e  4606              MOV      r6,r0
;;;1190       n2 >>= 2u;
000160  0880              LSRS     r0,r0,#2
;;;1191       ia1 = 0u;
000162  f04f0900          MOV      r9,#0
;;;1192   
;;;1193       for (j = 0; j <= (n2 - 1u); j++)
000166  1e41              SUBS     r1,r0,#1
000168  46cb              MOV      r11,r9
00016a  9115              STR      r1,[sp,#0x54]
00016c  e0cd              B        |L2.778|
;;;1194       {
;;;1195         /*  index calculation for the coefficients */
;;;1196         ia2 = ia1 + ia1;
00016e  bf00              NOP      
                  |L2.368|
;;;1197         ia3 = ia2 + ia1;
;;;1198         co1 = pCoef[ia1 * 2u];
000170  f8524039          LDR      r4,[r2,r9,LSL #3]
;;;1199         si1 = pCoef[(ia1 * 2u) + 1u];
000174  940f              STR      r4,[sp,#0x3c]
000176  eb0204c9          ADD      r4,r2,r9,LSL #3
00017a  ea4f0149          LSL      r1,r9,#1              ;1196
00017e  6864              LDR      r4,[r4,#4]
;;;1200         co2 = pCoef[ia2 * 2u];
000180  940e              STR      r4,[sp,#0x38]
000182  eb010309          ADD      r3,r1,r9              ;1197
000186  f8524031          LDR      r4,[r2,r1,LSL #3]
;;;1201         si2 = pCoef[(ia2 * 2u) + 1u];
00018a  eb0201c1          ADD      r1,r2,r1,LSL #3
00018e  9410              STR      r4,[sp,#0x40]
000190  6849              LDR      r1,[r1,#4]
;;;1202         co3 = pCoef[ia3 * 2u];
000192  9112              STR      r1,[sp,#0x48]
000194  f8521033          LDR      r1,[r2,r3,LSL #3]
;;;1203         si3 = pCoef[(ia3 * 2u) + 1u];
000198  9111              STR      r1,[sp,#0x44]
00019a  eb0201c3          ADD      r1,r2,r3,LSL #3
;;;1204         /*  Twiddle coefficients index modifier */
;;;1205         ia1 = ia1 + twidCoefModifier;
;;;1206         
;;;1207         pSi0 = pSrc + 2 * j;
;;;1208         pSi1 = pSi0 + 2 * n2;
;;;1209         pSi2 = pSi1 + 2 * n2;
;;;1210         pSi3 = pSi2 + 2 * n2;
;;;1211   
;;;1212         for (i0 = j; i0 < fftLen; i0 += n1)
00019e  46da              MOV      r10,r11
0001a0  6849              LDR      r1,[r1,#4]            ;1203
0001a2  910c              STR      r1,[sp,#0x30]         ;1205
0001a4  9918              LDR      r1,[sp,#0x60]         ;1207
0001a6  9b1b              LDR      r3,[sp,#0x6c]         ;1205
0001a8  eb0104cb          ADD      r4,r1,r11,LSL #3      ;1207
0001ac  eb0401c0          ADD      r1,r4,r0,LSL #3       ;1208
0001b0  4499              ADD      r9,r9,r3              ;1205
0001b2  eb0105c0          ADD      r5,r1,r0,LSL #3       ;1209
0001b6  eb0503c0          ADD      r3,r5,r0,LSL #3       ;1210
0001ba  e09f              B        |L2.764|
                  |L2.444|
;;;1213         {
;;;1214           /*  Butterfly implementation */
;;;1215           /* xa + xc */
;;;1216           r1 = pSi0[0] + pSi2[0];
0001bc  6827              LDR      r7,[r4,#0]
0001be  f8d5c000          LDR      r12,[r5,#0]
0001c2  eb070e0c          ADD      lr,r7,r12
;;;1217   
;;;1218           /* xa - xc */
;;;1219           r2 = pSi0[0] - pSi2[0];
0001c6  eba7070c          SUB      r7,r7,r12
;;;1220   
;;;1221   
;;;1222           /* ya + yc */
;;;1223           s1 = pSi0[1] + pSi2[1];
0001ca  9704              STR      r7,[sp,#0x10]
0001cc  f8d48004          LDR      r8,[r4,#4]
0001d0  686f              LDR      r7,[r5,#4]
0001d2  eb080c07          ADD      r12,r8,r7
;;;1224   
;;;1225           /* ya - yc */
;;;1226           s2 = pSi0[1] - pSi2[1];
0001d6  eba80707          SUB      r7,r8,r7
;;;1227   
;;;1228   
;;;1229           /* xb + xd */
;;;1230           t1 = pSi1[0] + pSi3[0];
0001da  9703              STR      r7,[sp,#0xc]
0001dc  680f              LDR      r7,[r1,#0]
0001de  f8d38000          LDR      r8,[r3,#0]
0001e2  4447              ADD      r7,r7,r8
;;;1231   
;;;1232   
;;;1233           /* xa' = xa + xb + xc + xd */
;;;1234           pSi0[0] = (r1 + t1) >> 2u;
0001e4  eb0e0807          ADD      r8,lr,r7
0001e8  ea4f08a8          ASR      r8,r8,#2
;;;1235           /* xa + xc -(xb + xd) */
;;;1236           r1 = r1 - t1;
0001ec  f8c48000          STR      r8,[r4,#0]
0001f0  ebae0807          SUB      r8,lr,r7
;;;1237           /* yb + yd */
;;;1238           t2 = pSi1[1] + pSi3[1];
0001f4  f8cd8004          STR      r8,[sp,#4]
0001f8  684f              LDR      r7,[r1,#4]
0001fa  f8d38004          LDR      r8,[r3,#4]
0001fe  4447              ADD      r7,r7,r8
;;;1239   
;;;1240           /* ya' = ya + yb + yc + yd */
;;;1241           pSi0[1] = (s1 + t2) >> 2u;
000200  eb0c0807          ADD      r8,r12,r7
000204  ea4f08a8          ASR      r8,r8,#2
;;;1242           pSi0 += 2 * n1;
000208  f8c48004          STR      r8,[r4,#4]
;;;1243   
;;;1244           /* (ya + yc) - (yb + yd) */
;;;1245           s1 = s1 - t2;
00020c  ebac0707          SUB      r7,r12,r7
;;;1246   
;;;1247           /* (yb - yd) */
;;;1248           t1 = pSi1[1] - pSi3[1];
000210  f8d1c004          LDR      r12,[r1,#4]
000214  f8d38004          LDR      r8,[r3,#4]
000218  eb0404c6          ADD      r4,r4,r6,LSL #3       ;1242
00021c  ebac0e08          SUB      lr,r12,r8
;;;1249   
;;;1250           /* (xb - xd) */
;;;1251           t2 = pSi1[0] - pSi3[0];
000220  f8d1c000          LDR      r12,[r1,#0]
000224  f8d38000          LDR      r8,[r3,#0]
000228  ebac0c08          SUB      r12,r12,r8
;;;1252   
;;;1253   
;;;1254           /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
;;;1255           pSi1[0] = (((int32_t) (((q63_t) r1 * co2) >> 32u)) -
00022c  f8cdc020          STR      r12,[sp,#0x20]
000230  f8ddc040          LDR      r12,[sp,#0x40]
000234  f8dd8004          LDR      r8,[sp,#4]
000238  fb58f80c          SMMUL    r8,r8,r12
00023c  f8ddc048          LDR      r12,[sp,#0x48]
000240  fb57fc0c          SMMUL    r12,r7,r12
000244  eba80c0c          SUB      r12,r8,r12
000248  ea4f0c6c          ASR      r12,r12,#1
;;;1256                            ((int32_t) (((q63_t) s1 * si2) >> 32u))) >> 1u;
;;;1257   
;;;1258           /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
;;;1259           pSi1[1] =
00024c  f8c1c000          STR      r12,[r1,#0]
000250  f8ddc040          LDR      r12,[sp,#0x40]
000254  fb57fc0c          SMMUL    r12,r7,r12
000258  f8dd8004          LDR      r8,[sp,#4]
00025c  9f12              LDR      r7,[sp,#0x48]
00025e  fb58f707          SMMUL    r7,r8,r7
000262  4467              ADD      r7,r7,r12
000264  107f              ASRS     r7,r7,#1
;;;1260   
;;;1261             (((int32_t) (((q63_t) s1 * co2) >> 32u)) +
;;;1262              ((int32_t) (((q63_t) r1 * si2) >> 32u))) >> 1u;
;;;1263           pSi1 += 2 * n1;
000266  604f              STR      r7,[r1,#4]
;;;1264   
;;;1265           /* (xa - xc) - (yb - yd) */
;;;1266           r1 = r2 - t1;
000268  9f04              LDR      r7,[sp,#0x10]
;;;1267           /* (xa - xc) + (yb - yd) */
;;;1268           r2 = r2 + t1;
;;;1269   
;;;1270           /* (ya - yc) +  (xb - xd) */
;;;1271           s1 = s2 + t2;
00026a  f8ddc020          LDR      r12,[sp,#0x20]
00026e  eba7070e          SUB      r7,r7,lr              ;1266
000272  9701              STR      r7,[sp,#4]            ;1268
000274  9f04              LDR      r7,[sp,#0x10]         ;1268
000276  eb0101c6          ADD      r1,r1,r6,LSL #3       ;1263
00027a  4477              ADD      r7,r7,lr              ;1268
00027c  9704              STR      r7,[sp,#0x10]
00027e  9f03              LDR      r7,[sp,#0xc]
000280  eb070e0c          ADD      lr,r7,r12
;;;1272           /* (ya - yc) -  (xb - xd) */
;;;1273           s2 = s2 - t2;
000284  eba7070c          SUB      r7,r7,r12
;;;1274   
;;;1275           /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
;;;1276           pSi2[0] = (((int32_t) (((q63_t) r1 * co1) >> 32)) -
000288  9703              STR      r7,[sp,#0xc]
00028a  f8ddc03c          LDR      r12,[sp,#0x3c]
00028e  9f01              LDR      r7,[sp,#4]
000290  fb57f80c          SMMUL    r8,r7,r12
000294  f8ddc038          LDR      r12,[sp,#0x38]
000298  fb5ef70c          SMMUL    r7,lr,r12
00029c  eba80707          SUB      r7,r8,r7
0002a0  107f              ASRS     r7,r7,#1
;;;1277                            ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;1278   
;;;1279           /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
;;;1280           pSi2[1] = (((int32_t) (((q63_t) s1 * co1) >> 32)) +
0002a2  602f              STR      r7,[r5,#0]
0002a4  f8ddc03c          LDR      r12,[sp,#0x3c]
0002a8  fb5ef80c          SMMUL    r8,lr,r12
0002ac  f8ddc038          LDR      r12,[sp,#0x38]
0002b0  9f01              LDR      r7,[sp,#4]
0002b2  fb57f70c          SMMUL    r7,r7,r12
0002b6  4447              ADD      r7,r7,r8
0002b8  107f              ASRS     r7,r7,#1
;;;1281                                   ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;1282           pSi2 += 2 * n1;
0002ba  606f              STR      r7,[r5,#4]
;;;1283   
;;;1284           /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
;;;1285           pSi3[0] = (((int32_t) (((q63_t) r2 * co3) >> 32)) -
0002bc  f8ddc044          LDR      r12,[sp,#0x44]
0002c0  9f04              LDR      r7,[sp,#0x10]
0002c2  eb0505c6          ADD      r5,r5,r6,LSL #3       ;1282
0002c6  fb57f80c          SMMUL    r8,r7,r12
0002ca  f8ddc030          LDR      r12,[sp,#0x30]
0002ce  9f03              LDR      r7,[sp,#0xc]
0002d0  fb57f70c          SMMUL    r7,r7,r12
0002d4  eba80707          SUB      r7,r8,r7
0002d8  107f              ASRS     r7,r7,#1
;;;1286                              ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;1287   
;;;1288           /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
;;;1289           pSi3[1] = (((int32_t) (((q63_t) s2 * co3) >> 32)) +
0002da  601f              STR      r7,[r3,#0]
0002dc  f8ddc044          LDR      r12,[sp,#0x44]
0002e0  9f03              LDR      r7,[sp,#0xc]
0002e2  fb57f80c          SMMUL    r8,r7,r12
0002e6  f8ddc030          LDR      r12,[sp,#0x30]
0002ea  9f04              LDR      r7,[sp,#0x10]
0002ec  fb57f70c          SMMUL    r7,r7,r12
0002f0  4447              ADD      r7,r7,r8
0002f2  107f              ASRS     r7,r7,#1
;;;1290                                   ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;1291           pSi3 += 2 * n1;
0002f4  605f              STR      r7,[r3,#4]
0002f6  eb0303c6          ADD      r3,r3,r6,LSL #3
0002fa  44b2              ADD      r10,r10,r6            ;1212
                  |L2.764|
0002fc  f8ddc064          LDR      r12,[sp,#0x64]        ;1212
000300  45e2              CMP      r10,r12               ;1212
000302  f4ffaf5b          BCC      |L2.444|
000306  f10b0b01          ADD      r11,r11,#1            ;1193
                  |L2.778|
00030a  9b15              LDR      r3,[sp,#0x54]         ;1193
00030c  459b              CMP      r11,r3                ;1193
00030e  f67faf2f          BLS      |L2.368|
;;;1292         }
;;;1293       }
;;;1294       twidCoefModifier <<= 2u;
000312  991b              LDR      r1,[sp,#0x6c]
000314  0089              LSLS     r1,r1,#2
000316  911b              STR      r1,[sp,#0x6c]         ;1186
000318  9917              LDR      r1,[sp,#0x5c]         ;1186
00031a  0889              LSRS     r1,r1,#2              ;1186
                  |L2.796|
00031c  9117              STR      r1,[sp,#0x5c]         ;1186
00031e  2904              CMP      r1,#4                 ;1186
000320  f63faf1d          BHI      |L2.350|
;;;1295     }
;;;1296   #endif
;;;1297   
;;;1298     /* End of Middle stages process */
;;;1299   
;;;1300     /* data is in 11.21(q21) format for the 1024 point as there are 3 middle stages */
;;;1301     /* data is in 9.23(q23) format for the 256 point as there are 2 middle stages */
;;;1302     /* data is in 7.25(q25) format for the 64 point as there are 1 middle stage */
;;;1303     /* data is in 5.27(q27) format for the 16 point as there are no middle stages */
;;;1304   
;;;1305   
;;;1306     /* Start of last stage process */
;;;1307   
;;;1308   
;;;1309     /*  Initializations for the last stage */
;;;1310     j = fftLen >> 2;
;;;1311     ptr1 = &pSrc[0];
000324  f8dd9050          LDR      r9,[sp,#0x50]
000328  f8dd0060          LDR.W    r0,[sp,#0x60]
                  |L2.812|
00032c  e8f05102          LDRD     r5,r1,[r0],#8
000330  e8f0c402          LDRD     r12,r4,[r0],#8
;;;1312   
;;;1313     /*  Calculations of last stage */
;;;1314     do
;;;1315     {
;;;1316   #ifndef ARM_MATH_BIG_ENDIAN
;;;1317       /* Read xa (real), ya(imag) input */
;;;1318       xaya = *__SIMD64(ptr1)++;
;;;1319       xa = (q31_t) xaya;
;;;1320       ya = (q31_t) (xaya >> 32);
;;;1321   
;;;1322       /* Read xb (real), yb(imag) input */
;;;1323       xbyb = *__SIMD64(ptr1)++;
;;;1324       xb = (q31_t) xbyb;
;;;1325       yb = (q31_t) (xbyb >> 32);
;;;1326   
;;;1327       /* Read xc (real), yc(imag) input */
;;;1328       xcyc = *__SIMD64(ptr1)++;
;;;1329       xc = (q31_t) xcyc;
;;;1330       yc = (q31_t) (xcyc >> 32);
;;;1331   
;;;1332       /* Read xc (real), yc(imag) input */
;;;1333       xdyd = *__SIMD64(ptr1)++;
;;;1334       xd = (q31_t) xdyd;
;;;1335       yd = (q31_t) (xdyd >> 32);
;;;1336   
;;;1337   #else
;;;1338   
;;;1339       /* Read xa (real), ya(imag) input */
;;;1340       xaya = *__SIMD64(ptr1)++;
;;;1341       ya = (q31_t) xaya;
;;;1342       xa = (q31_t) (xaya >> 32);
;;;1343   
;;;1344       /* Read xb (real), yb(imag) input */
;;;1345       xbyb = *__SIMD64(ptr1)++;
;;;1346       yb = (q31_t) xbyb;
;;;1347       xb = (q31_t) (xbyb >> 32);
;;;1348   
;;;1349       /* Read xc (real), yc(imag) input */
;;;1350       xcyc = *__SIMD64(ptr1)++;
;;;1351       yc = (q31_t) xcyc;
;;;1352       xc = (q31_t) (xcyc >> 32);
;;;1353   
;;;1354       /* Read xc (real), yc(imag) input */
;;;1355       xdyd = *__SIMD64(ptr1)++;
;;;1356       yd = (q31_t) xdyd;
;;;1357       xd = (q31_t) (xdyd >> 32);
;;;1358   
;;;1359   
;;;1360   #endif
;;;1361   
;;;1362       /* xa' = xa + xb + xc + xd */
;;;1363       xa_out = xa + xb + xc + xd;
;;;1364   
;;;1365       /* ya' = ya + yb + yc + yd */
;;;1366       ya_out = ya + yb + yc + yd;
;;;1367   
;;;1368       /* pointer updation for writing */
;;;1369       ptr1 = ptr1 - 8u;
;;;1370   
;;;1371       /* writing xa' and ya' */
;;;1372       *ptr1++ = xa_out;
;;;1373       *ptr1++ = ya_out;
;;;1374   
;;;1375       xc_out = (xa - xb + xc - xd);
000334  eba5080c          SUB      r8,r5,r12
000338  e8f07302          LDRD     r7,r3,[r0],#8         ;1311
00033c  44b8              ADD      r8,r8,r7
00033e  e8f06202          LDRD     r6,r2,[r0],#8         ;1311
000342  4683              MOV      r11,r0                ;1333
000344  eb05000c          ADD      r0,r5,r12             ;1363
000348  4438              ADD      r0,r0,r7              ;1363
00034a  eb000a06          ADD      r10,r0,r6             ;1363
00034e  1908              ADDS     r0,r1,r4              ;1366
000350  4418              ADD      r0,r0,r3              ;1366
000352  eb000e02          ADD      lr,r0,r2              ;1366
000356  f1ab0020          SUB      r0,r11,#0x20          ;1369
00035a  eba80806          SUB      r8,r8,r6
00035e  e8e0ae02          STRD     r10,lr,[r0],#8
000362  46c2              MOV      r10,r8
;;;1376       yc_out = (ya - yb + yc - yd);
000364  eba10804          SUB      r8,r1,r4
000368  4498              ADD      r8,r8,r3
00036a  eba80b02          SUB      r11,r8,r2
;;;1377   
;;;1378       /* writing xc' and yc' */
;;;1379       *ptr1++ = xc_out;
;;;1380       *ptr1++ = yc_out;
;;;1381   
;;;1382       xb_out = (xa - yb - xc + yd);
00036e  eba50804          SUB      r8,r5,r4
000372  eba80807          SUB      r8,r8,r7
000376  4490              ADD      r8,r8,r2
000378  e8e0ab02          STRD     r10,r11,[r0],#8
00037c  46c3              MOV      r11,r8
;;;1383       yb_out = (ya + xb - yc - xd);
00037e  eb01080c          ADD      r8,r1,r12
;;;1384   
;;;1385       /* writing xb' and yb' */
;;;1386       *ptr1++ = xb_out;
;;;1387       *ptr1++ = yb_out;
;;;1388   
;;;1389       xd_out = (xa + yb - xc - yd);
000382  442c              ADD      r4,r4,r5
000384  1be4              SUBS     r4,r4,r7
000386  1aa2              SUBS     r2,r4,r2
;;;1390       yd_out = (ya - xb - yc + xd);
000388  eba1010c          SUB      r1,r1,r12
00038c  1ac9              SUBS     r1,r1,r3
00038e  4431              ADD      r1,r1,r6
000390  e9c02102          STRD     r2,r1,[r0,#8]
000394  eba80803          SUB      r8,r8,r3              ;1383
000398  eba80a06          SUB      r10,r8,r6             ;1383
00039c  e8e0ba04          STRD     r11,r10,[r0],#0x10
;;;1391   
;;;1392       /* writing xd' and yd' */
;;;1393       *ptr1++ = xd_out;
;;;1394       *ptr1++ = yd_out;
;;;1395   
;;;1396     } while(--j);
0003a0  f1a90101          SUB      r1,r9,#1
0003a4  ea5f0901          MOVS     r9,r1
0003a8  d1c0              BNE      |L2.812|
;;;1397   
;;;1398     /* output is in 11.21(q21) format for the 1024 point */
;;;1399     /* output is in 9.23(q23) format for the 256 point */
;;;1400     /* output is in 7.25(q25) format for the 64 point */
;;;1401     /* output is in 5.27(q27) format for the 16 point */
;;;1402   
;;;1403     /* End of last stage process */
;;;1404   }
0003aa  b01c              ADD      sp,sp,#0x70
0003ac  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i.arm_radix4_butterfly_q31||, CODE, READONLY, ALIGN=2

                  arm_radix4_butterfly_q31 PROC
;;;162    
;;;163    void arm_radix4_butterfly_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;164      q31_t * pSrc,
;;;165      uint32_t fftLen,
;;;166      q31_t * pCoef,
;;;167      uint32_t twidCoefModifier)
;;;168    {
000004  b098              SUB      sp,sp,#0x60
;;;169    #if defined(ARM_MATH_CM7)
;;;170      uint32_t n1, n2, ia1, ia2, ia3, i0, i1, i2, i3, j, k;
;;;171      q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;172    
;;;173      q31_t xa, xb, xc, xd;
;;;174      q31_t ya, yb, yc, yd;
;;;175      q31_t xa_out, xb_out, xc_out, xd_out;
;;;176      q31_t ya_out, yb_out, yc_out, yd_out;
;;;177    
;;;178      q31_t *ptr1;
;;;179      q63_t xaya, xbyb, xcyc, xdyd;
;;;180      /* Total process is divided into three stages */
;;;181    
;;;182      /* process first stage, middle stages, & last stage */
;;;183    
;;;184    
;;;185      /* start of first stage process */
;;;186    
;;;187      /*  Initializations for the first stage */
;;;188      n2 = fftLen;
;;;189      n1 = n2;
;;;190      /* n2 = fftLen/4 */
;;;191      n2 >>= 2u;
;;;192      i0 = 0u;
;;;193      ia1 = 0u;
;;;194    
;;;195      j = n2;
;;;196    
;;;197      /*  Calculation of first stage */
;;;198      do
;;;199      {
;;;200        /*  index calculation for the input as, */
;;;201        /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;202        i1 = i0 + n2;
;;;203        i2 = i1 + n2;
;;;204        i3 = i2 + n2;
;;;205    
;;;206        /* input is in 1.31(q31) format and provide 4 guard bits for the input */
;;;207    
;;;208        /*  Butterfly implementation */
;;;209        /* xa + xc */
;;;210        r1 = (pSrc[(2u * i0)] >> 4u) + (pSrc[(2u * i2)] >> 4u);
;;;211        /* xa - xc */
;;;212        r2 = (pSrc[2u * i0] >> 4u) - (pSrc[2u * i2] >> 4u);
;;;213    
;;;214        /* xb + xd */
;;;215        t1 = (pSrc[2u * i1] >> 4u) + (pSrc[2u * i3] >> 4u);
;;;216    
;;;217        /* ya + yc */
;;;218        s1 = (pSrc[(2u * i0) + 1u] >> 4u) + (pSrc[(2u * i2) + 1u] >> 4u);
;;;219        /* ya - yc */
;;;220        s2 = (pSrc[(2u * i0) + 1u] >> 4u) - (pSrc[(2u * i2) + 1u] >> 4u);
;;;221    
;;;222        /* xa' = xa + xb + xc + xd */
;;;223        pSrc[2u * i0] = (r1 + t1);
;;;224        /* (xa + xc) - (xb + xd) */
;;;225        r1 = r1 - t1;
;;;226        /* yb + yd */
;;;227        t2 = (pSrc[(2u * i1) + 1u] >> 4u) + (pSrc[(2u * i3) + 1u] >> 4u);
;;;228    
;;;229        /* ya' = ya + yb + yc + yd */
;;;230        pSrc[(2u * i0) + 1u] = (s1 + t2);
;;;231    
;;;232        /* (ya + yc) - (yb + yd) */
;;;233        s1 = s1 - t2;
;;;234    
;;;235        /* yb - yd */
;;;236        t1 = (pSrc[(2u * i1) + 1u] >> 4u) - (pSrc[(2u * i3) + 1u] >> 4u);
;;;237        /* xb - xd */
;;;238        t2 = (pSrc[2u * i1] >> 4u) - (pSrc[2u * i3] >> 4u);
;;;239    
;;;240        /*  index calculation for the coefficients */
;;;241        ia2 = 2u * ia1;
;;;242        co2 = pCoef[ia2 * 2u];
;;;243        si2 = pCoef[(ia2 * 2u) + 1u];
;;;244    
;;;245        /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;246        pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
;;;247                         ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;248    
;;;249        /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;250        pSrc[(2u * i1) + 1u] = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
;;;251                                ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;252    
;;;253        /* (xa - xc) + (yb - yd) */
;;;254        r1 = r2 + t1;
;;;255        /* (xa - xc) - (yb - yd) */
;;;256        r2 = r2 - t1;
;;;257    
;;;258        /* (ya - yc) - (xb - xd) */
;;;259        s1 = s2 - t2;
;;;260        /* (ya - yc) + (xb - xd) */
;;;261        s2 = s2 + t2;
;;;262    
;;;263        co1 = pCoef[ia1 * 2u];
;;;264        si1 = pCoef[(ia1 * 2u) + 1u];
;;;265    
;;;266        /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;267        pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
;;;268                         ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;269    
;;;270        /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;271        pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
;;;272                                ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;273    
;;;274        /*  index calculation for the coefficients */
;;;275        ia3 = 3u * ia1;
;;;276        co3 = pCoef[ia3 * 2u];
;;;277        si3 = pCoef[(ia3 * 2u) + 1u];
;;;278    
;;;279        /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;280        pSrc[2u * i3] = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
;;;281                         ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;282    
;;;283        /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;284        pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
;;;285                                ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;286    
;;;287        /*  Twiddle coefficients index modifier */
;;;288        ia1 = ia1 + twidCoefModifier;
;;;289    
;;;290        /*  Updating input index */
;;;291        i0 = i0 + 1u;
;;;292    
;;;293      } while(--j);
;;;294    
;;;295      /* end of first stage process */
;;;296    
;;;297      /* data is in 5.27(q27) format */
;;;298    
;;;299    
;;;300      /* start of Middle stages process */
;;;301    
;;;302    
;;;303      /* each stage in middle stages provides two down scaling of the input */
;;;304    
;;;305      twidCoefModifier <<= 2u;
;;;306    
;;;307    
;;;308      for (k = fftLen / 4u; k > 4u; k >>= 2u)
;;;309      {
;;;310        /*  Initializations for the first stage */
;;;311        n1 = n2;
;;;312        n2 >>= 2u;
;;;313        ia1 = 0u;
;;;314    
;;;315        /*  Calculation of first stage */
;;;316        for (j = 0u; j <= (n2 - 1u); j++)
;;;317        {
;;;318          /*  index calculation for the coefficients */
;;;319          ia2 = ia1 + ia1;
;;;320          ia3 = ia2 + ia1;
;;;321          co1 = pCoef[ia1 * 2u];
;;;322          si1 = pCoef[(ia1 * 2u) + 1u];
;;;323          co2 = pCoef[ia2 * 2u];
;;;324          si2 = pCoef[(ia2 * 2u) + 1u];
;;;325          co3 = pCoef[ia3 * 2u];
;;;326          si3 = pCoef[(ia3 * 2u) + 1u];
;;;327          /*  Twiddle coefficients index modifier */
;;;328          ia1 = ia1 + twidCoefModifier;
;;;329    
;;;330          for (i0 = j; i0 < fftLen; i0 += n1)
;;;331          {
;;;332            /*  index calculation for the input as, */
;;;333            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2u], pSrc[i0 + 3fftLen/4] */
;;;334            i1 = i0 + n2;
;;;335            i2 = i1 + n2;
;;;336            i3 = i2 + n2;
;;;337    
;;;338            /*  Butterfly implementation */
;;;339            /* xa + xc */
;;;340            r1 = pSrc[2u * i0] + pSrc[2u * i2];
;;;341            /* xa - xc */
;;;342            r2 = pSrc[2u * i0] - pSrc[2u * i2];
;;;343    
;;;344            /* ya + yc */
;;;345            s1 = pSrc[(2u * i0) + 1u] + pSrc[(2u * i2) + 1u];
;;;346            /* ya - yc */
;;;347            s2 = pSrc[(2u * i0) + 1u] - pSrc[(2u * i2) + 1u];
;;;348    
;;;349            /* xb + xd */
;;;350            t1 = pSrc[2u * i1] + pSrc[2u * i3];
;;;351    
;;;352            /* xa' = xa + xb + xc + xd */
;;;353            pSrc[2u * i0] = (r1 + t1) >> 2u;
;;;354            /* xa + xc -(xb + xd) */
;;;355            r1 = r1 - t1;
;;;356    
;;;357            /* yb + yd */
;;;358            t2 = pSrc[(2u * i1) + 1u] + pSrc[(2u * i3) + 1u];
;;;359            /* ya' = ya + yb + yc + yd */
;;;360            pSrc[(2u * i0) + 1u] = (s1 + t2) >> 2u;
;;;361    
;;;362            /* (ya + yc) - (yb + yd) */
;;;363            s1 = s1 - t2;
;;;364    
;;;365            /* (yb - yd) */
;;;366            t1 = pSrc[(2u * i1) + 1u] - pSrc[(2u * i3) + 1u];
;;;367            /* (xb - xd) */
;;;368            t2 = pSrc[2u * i1] - pSrc[2u * i3];
;;;369    
;;;370            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;371            pSrc[2u * i1] = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
;;;372                             ((int32_t) (((q63_t) s1 * si2) >> 32))) >> 1u;
;;;373    
;;;374            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;375            pSrc[(2u * i1) + 1u] = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
;;;376                                    ((int32_t) (((q63_t) r1 * si2) >> 32))) >> 1u;
;;;377    
;;;378            /* (xa - xc) + (yb - yd) */
;;;379            r1 = r2 + t1;
;;;380            /* (xa - xc) - (yb - yd) */
;;;381            r2 = r2 - t1;
;;;382    
;;;383            /* (ya - yc) -  (xb - xd) */
;;;384            s1 = s2 - t2;
;;;385            /* (ya - yc) +  (xb - xd) */
;;;386            s2 = s2 + t2;
;;;387    
;;;388            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;389            pSrc[2u * i2] = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
;;;390                             ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;391    
;;;392            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;393            pSrc[(2u * i2) + 1u] = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
;;;394                                    ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;395    
;;;396            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;397            pSrc[2u * i3] = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
;;;398                             ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;399    
;;;400            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;401            pSrc[(2u * i3) + 1u] = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
;;;402                                    ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;403          }
;;;404        }
;;;405        twidCoefModifier <<= 2u;
;;;406      }
;;;407    #else
;;;408      uint32_t n1, n2, ia1, ia2, ia3, i0, j, k;
;;;409      q31_t t1, t2, r1, r2, s1, s2, co1, co2, co3, si1, si2, si3;
;;;410    
;;;411      q31_t xa, xb, xc, xd;
;;;412      q31_t ya, yb, yc, yd;
;;;413      q31_t xa_out, xb_out, xc_out, xd_out;
;;;414      q31_t ya_out, yb_out, yc_out, yd_out;
;;;415    
;;;416      q31_t *ptr1;
;;;417      q31_t *pSi0;
;;;418      q31_t *pSi1;
;;;419      q31_t *pSi2;
;;;420      q31_t *pSi3;
;;;421      q63_t xaya, xbyb, xcyc, xdyd;
;;;422      /* Total process is divided into three stages */
;;;423    
;;;424      /* process first stage, middle stages, & last stage */
;;;425    
;;;426    
;;;427      /* start of first stage process */
;;;428    
;;;429      /*  Initializations for the first stage */
;;;430      n2 = fftLen;
;;;431      n1 = n2;
;;;432      /* n2 = fftLen/4 */
;;;433      n2 >>= 2u;
000006  9819              LDR      r0,[sp,#0x64]
000008  0880              LSRS     r0,r0,#2
;;;434    
;;;435      ia1 = 0u;
;;;436    
;;;437      j = n2;
;;;438      
;;;439      pSi0 = pSrc;
00000a  9013              STR      r0,[sp,#0x4c]
;;;440      pSi1 = pSi0 + 2 * n2;
00000c  9c18              LDR      r4,[sp,#0x60]
00000e  2600              MOVS     r6,#0                 ;435
000010  eb0401c0          ADD      r1,r4,r0,LSL #3
;;;441      pSi2 = pSi1 + 2 * n2;
000014  eb0105c0          ADD      r5,r1,r0,LSL #3
000018  9014              STR      r0,[sp,#0x50]         ;437
;;;442      pSi3 = pSi2 + 2 * n2;
00001a  eb0503c0          ADD      r3,r5,r0,LSL #3
                  |L3.30|
;;;443    
;;;444      /*  Calculation of first stage */
;;;445      do
;;;446      {
;;;447        /* input is in 1.31(q31) format and provide 4 guard bits for the input */
;;;448    
;;;449        /*  Butterfly implementation */
;;;450        /* xa + xc */
;;;451        r1 = (pSi0[0] >> 4u) + (pSi2[0] >> 4u);
00001e  cc80              LDM      r4!,{r7}
000020  f8558b04          LDR      r8,[r5],#4
000024  113f              ASRS     r7,r7,#4
;;;452        /* xa - xc */
;;;453        r2 = (pSi0[0] >> 4u) - (pSi2[0] >> 4u);
000026  eba71c28          SUB      r12,r7,r8,ASR #4
00002a  eb071928          ADD      r9,r7,r8,ASR #4       ;451
;;;454    
;;;455        /* xb + xd */
;;;456        t1 = (pSi1[0] >> 4u) + (pSi3[0] >> 4u);
00002e  f8cdc010          STR      r12,[sp,#0x10]
000032  c980              LDM      r1!,{r7}
000034  f853cb04          LDR      r12,[r3],#4
000038  113f              ASRS     r7,r7,#4
00003a  eb071a2c          ADD      r10,r7,r12,ASR #4
;;;457    
;;;458        /* ya + yc */
;;;459        s1 = (pSi0[1] >> 4u) + (pSi2[1] >> 4u);
00003e  cc80              LDM      r4!,{r7}
000040  f855cb04          LDR      r12,[r5],#4
000044  ea4f1827          ASR      r8,r7,#4
000048  eb08172c          ADD      r7,r8,r12,ASR #4
;;;460        /* ya - yc */
;;;461        s2 = (pSi0[1] >> 4u) - (pSi2[1] >> 4u);
00004c  eba81c2c          SUB      r12,r8,r12,ASR #4
;;;462    
;;;463        /* xa' = xa + xb + xc + xd */
;;;464        *pSi0++ = (r1 + t1);
000050  f8cdc00c          STR      r12,[sp,#0xc]
000054  eb090c0a          ADD      r12,r9,r10
000058  f844cc08          STR      r12,[r4,#-8]
;;;465        /* (xa + xc) - (xb + xd) */
;;;466        r1 = r1 - t1;
;;;467        /* yb + yd */
;;;468        t2 = (pSi1[1] >> 4u) + (pSi3[1] >> 4u);
00005c  f851cb04          LDR      r12,[r1],#4
000060  f8538b04          LDR      r8,[r3],#4
000064  ea4f1c2c          ASR      r12,r12,#4
000068  eb0c1c28          ADD      r12,r12,r8,ASR #4
00006c  eba90b0a          SUB      r11,r9,r10            ;466
;;;469    
;;;470        /* ya' = ya + yb + yc + yd */
;;;471        *pSi0++ = (s1 + t2);
000070  eb07080c          ADD      r8,r7,r12
000074  f8448c04          STR      r8,[r4,#-4]
;;;472    
;;;473        /* (ya + yc) - (yb + yd) */
;;;474        s1 = s1 - t2;
000078  eba7090c          SUB      r9,r7,r12
;;;475    
;;;476        /* yb - yd */
;;;477        t1 = (pSi1[1] >> 4u) - (pSi3[1] >> 4u);
00007c  f8517c04          LDR      r7,[r1,#-4]
000080  f853cc04          LDR      r12,[r3,#-4]
000084  113f              ASRS     r7,r7,#4
000086  eba7172c          SUB      r7,r7,r12,ASR #4
;;;478        /* xb - xd */
;;;479        t2 = (pSi1[0] >> 4u) - (pSi3[0] >> 4u);
00008a  9709              STR      r7,[sp,#0x24]
00008c  f8517c08          LDR      r7,[r1,#-8]
000090  f853cc08          LDR      r12,[r3,#-8]
000094  113f              ASRS     r7,r7,#4
000096  eba71e2c          SUB      lr,r7,r12,ASR #4
;;;480    
;;;481        /*  index calculation for the coefficients */
;;;482        ia2 = 2u * ia1;
00009a  0077              LSLS     r7,r6,#1
;;;483        co2 = pCoef[ia2 * 2u];
00009c  f852a037          LDR      r10,[r2,r7,LSL #3]
;;;484        si2 = pCoef[(ia2 * 2u) + 1u];
0000a0  eb0207c7          ADD      r7,r2,r7,LSL #3
0000a4  687f              LDR      r7,[r7,#4]
;;;485    
;;;486        /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;487        *pSi1++ = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
0000a6  fb5bf80a          SMMUL    r8,r11,r10
0000aa  fb59fc07          SMMUL    r12,r9,r7
0000ae  44c4              ADD      r12,r12,r8
0000b0  ea4f0c4c          LSL      r12,r12,#1
;;;488                         ((int32_t) (((q63_t) s1 * si2) >> 32))) << 1u;
;;;489    
;;;490        /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;491        *pSi1++ = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
0000b4  fb59f80a          SMMUL    r8,r9,r10
0000b8  fb5bf707          SMMUL    r7,r11,r7
0000bc  eba80707          SUB      r7,r8,r7
0000c0  007f              LSLS     r7,r7,#1
0000c2  e941c702          STRD     r12,r7,[r1,#-8]
;;;492                                ((int32_t) (((q63_t) r1 * si2) >> 32))) << 1u;
;;;493    
;;;494        /* (xa - xc) + (yb - yd) */
;;;495        r1 = r2 + t1;
0000c6  f8ddc010          LDR      r12,[sp,#0x10]
0000ca  9f09              LDR      r7,[sp,#0x24]
0000cc  eb0c0b07          ADD      r11,r12,r7
;;;496        /* (xa - xc) - (yb - yd) */
;;;497        r2 = r2 - t1;
0000d0  ebac0c07          SUB      r12,r12,r7
;;;498    
;;;499        /* (ya - yc) - (xb - xd) */
;;;500        s1 = s2 - t2;
0000d4  f8cdc010          STR      r12,[sp,#0x10]
0000d8  f8ddc00c          LDR      r12,[sp,#0xc]
;;;501        /* (ya - yc) + (xb - xd) */
;;;502        s2 = s2 + t2;
;;;503    
;;;504        co1 = pCoef[ia1 * 2u];
;;;505        si1 = pCoef[(ia1 * 2u) + 1u];
0000dc  eb0207c6          ADD      r7,r2,r6,LSL #3
0000e0  ebac0a0e          SUB      r10,r12,lr            ;500
0000e4  f8529036          LDR      r9,[r2,r6,LSL #3]     ;504
0000e8  687f              LDR      r7,[r7,#4]
0000ea  44e6              ADD      lr,lr,r12             ;502
;;;506    
;;;507        /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;508        *pSi2++ = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
0000ec  fb5bf809          SMMUL    r8,r11,r9
0000f0  fb5afc07          SMMUL    r12,r10,r7
0000f4  44c4              ADD      r12,r12,r8
0000f6  ea4f0c4c          LSL      r12,r12,#1
;;;509                         ((int32_t) (((q63_t) s1 * si1) >> 32))) << 1u;
;;;510    
;;;511        /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;512        *pSi2++ = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
0000fa  fb5af809          SMMUL    r8,r10,r9
0000fe  fb5bf707          SMMUL    r7,r11,r7
000102  eba80707          SUB      r7,r8,r7
000106  007f              LSLS     r7,r7,#1
000108  e945c702          STRD     r12,r7,[r5,#-8]
;;;513                                ((int32_t) (((q63_t) r1 * si1) >> 32))) << 1u;
;;;514    
;;;515        /*  index calculation for the coefficients */
;;;516        ia3 = 3u * ia1;
00010c  eb060746          ADD      r7,r6,r6,LSL #1
;;;517        co3 = pCoef[ia3 * 2u];
;;;518        si3 = pCoef[(ia3 * 2u) + 1u];
;;;519    
;;;520        /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;521        *pSi3++ = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
000110  f8ddc010          LDR      r12,[sp,#0x10]
000114  f8529037          LDR      r9,[r2,r7,LSL #3]     ;517
000118  eb0207c7          ADD      r7,r2,r7,LSL #3       ;518
00011c  687f              LDR      r7,[r7,#4]            ;518
00011e  fb5cf809          SMMUL    r8,r12,r9
000122  fb5efc07          SMMUL    r12,lr,r7
000126  44c4              ADD      r12,r12,r8
000128  ea4f0c4c          LSL      r12,r12,#1
00012c  f843cc08          STR      r12,[r3,#-8]
;;;522                         ((int32_t) (((q63_t) s2 * si3) >> 32))) << 1u;
;;;523    
;;;524        /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;525        *pSi3++ = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
000130  fb5ef809          SMMUL    r8,lr,r9
000134  f8ddc010          LDR      r12,[sp,#0x10]
000138  fb5cf707          SMMUL    r7,r12,r7
00013c  eba80707          SUB      r7,r8,r7
000140  007f              LSLS     r7,r7,#1
000142  f8437c04          STR      r7,[r3,#-4]
;;;526                                ((int32_t) (((q63_t) r2 * si3) >> 32))) << 1u;
;;;527    
;;;528        /*  Twiddle coefficients index modifier */
;;;529        ia1 = ia1 + twidCoefModifier;
000146  9f1b              LDR      r7,[sp,#0x6c]
000148  443e              ADD      r6,r6,r7
;;;530    
;;;531      } while(--j);
00014a  9f13              LDR      r7,[sp,#0x4c]
00014c  1e7f              SUBS     r7,r7,#1
00014e  9713              STR      r7,[sp,#0x4c]
000150  f47faf65          BNE      |L3.30|
;;;532    
;;;533      /* end of first stage process */
;;;534    
;;;535      /* data is in 5.27(q27) format */
;;;536    
;;;537    
;;;538      /* start of Middle stages process */
;;;539    
;;;540    
;;;541      /* each stage in middle stages provides two down scaling of the input */
;;;542    
;;;543      twidCoefModifier <<= 2u;
000154  991b              LDR      r1,[sp,#0x6c]
000156  0089              LSLS     r1,r1,#2
000158  911b              STR      r1,[sp,#0x6c]
;;;544    
;;;545    
;;;546      for (k = fftLen / 4u; k > 4u; k >>= 2u)
00015a  9914              LDR      r1,[sp,#0x50]
00015c  e0dd              B        |L3.794|
                  |L3.350|
;;;547      {
;;;548        /*  Initializations for the first stage */
;;;549        n1 = n2;
00015e  4606              MOV      r6,r0
;;;550        n2 >>= 2u;
000160  0880              LSRS     r0,r0,#2
;;;551        ia1 = 0u;
000162  f04f0900          MOV      r9,#0
;;;552    
;;;553        /*  Calculation of first stage */
;;;554        for (j = 0u; j <= (n2 - 1u); j++)
000166  1e41              SUBS     r1,r0,#1
000168  46cb              MOV      r11,r9
00016a  9115              STR      r1,[sp,#0x54]
00016c  e0cc              B        |L3.776|
;;;555        {
;;;556          /*  index calculation for the coefficients */
;;;557          ia2 = ia1 + ia1;
00016e  bf00              NOP      
                  |L3.368|
;;;558          ia3 = ia2 + ia1;
;;;559          co1 = pCoef[ia1 * 2u];
000170  f8524039          LDR      r4,[r2,r9,LSL #3]
;;;560          si1 = pCoef[(ia1 * 2u) + 1u];
000174  940f              STR      r4,[sp,#0x3c]
000176  eb0204c9          ADD      r4,r2,r9,LSL #3
00017a  ea4f0149          LSL      r1,r9,#1              ;557
00017e  6864              LDR      r4,[r4,#4]
;;;561          co2 = pCoef[ia2 * 2u];
000180  940e              STR      r4,[sp,#0x38]
000182  eb010309          ADD      r3,r1,r9              ;558
000186  f8524031          LDR      r4,[r2,r1,LSL #3]
;;;562          si2 = pCoef[(ia2 * 2u) + 1u];
00018a  eb0201c1          ADD      r1,r2,r1,LSL #3
00018e  9410              STR      r4,[sp,#0x40]
000190  6849              LDR      r1,[r1,#4]
;;;563          co3 = pCoef[ia3 * 2u];
000192  9112              STR      r1,[sp,#0x48]
000194  f8521033          LDR      r1,[r2,r3,LSL #3]
;;;564          si3 = pCoef[(ia3 * 2u) + 1u];
000198  9111              STR      r1,[sp,#0x44]
00019a  eb0201c3          ADD      r1,r2,r3,LSL #3
;;;565          /*  Twiddle coefficients index modifier */
;;;566          ia1 = ia1 + twidCoefModifier;
;;;567          
;;;568          pSi0 = pSrc + 2 * j;
;;;569          pSi1 = pSi0 + 2 * n2;
;;;570          pSi2 = pSi1 + 2 * n2;
;;;571          pSi3 = pSi2 + 2 * n2;
;;;572    
;;;573          for (i0 = j; i0 < fftLen; i0 += n1)
00019e  46da              MOV      r10,r11
0001a0  6849              LDR      r1,[r1,#4]            ;564
0001a2  910c              STR      r1,[sp,#0x30]         ;566
0001a4  9918              LDR      r1,[sp,#0x60]         ;568
0001a6  9b1b              LDR      r3,[sp,#0x6c]         ;566
0001a8  eb0104cb          ADD      r4,r1,r11,LSL #3      ;568
0001ac  eb0401c0          ADD      r1,r4,r0,LSL #3       ;569
0001b0  4499              ADD      r9,r9,r3              ;566
0001b2  eb0105c0          ADD      r5,r1,r0,LSL #3       ;570
0001b6  eb0503c0          ADD      r3,r5,r0,LSL #3       ;571
0001ba  e09e              B        |L3.762|
                  |L3.444|
;;;574          {
;;;575            /*  Butterfly implementation */
;;;576            /* xa + xc */
;;;577            r1 = pSi0[0] + pSi2[0];
0001bc  6827              LDR      r7,[r4,#0]
0001be  f8d5c000          LDR      r12,[r5,#0]
0001c2  eb070e0c          ADD      lr,r7,r12
;;;578    
;;;579            /* xa - xc */
;;;580            r2 = pSi0[0] - pSi2[0];
0001c6  eba7070c          SUB      r7,r7,r12
;;;581    
;;;582    
;;;583            /* ya + yc */
;;;584            s1 = pSi0[1] + pSi2[1];
0001ca  9704              STR      r7,[sp,#0x10]
0001cc  f8d48004          LDR      r8,[r4,#4]
0001d0  686f              LDR      r7,[r5,#4]
0001d2  eb080c07          ADD      r12,r8,r7
;;;585    
;;;586            /* ya - yc */
;;;587            s2 = pSi0[1] - pSi2[1];
0001d6  eba80707          SUB      r7,r8,r7
;;;588    
;;;589    
;;;590            /* xb + xd */
;;;591            t1 = pSi1[0] + pSi3[0];
0001da  9703              STR      r7,[sp,#0xc]
0001dc  680f              LDR      r7,[r1,#0]
0001de  f8d38000          LDR      r8,[r3,#0]
0001e2  4447              ADD      r7,r7,r8
;;;592    
;;;593    
;;;594            /* xa' = xa + xb + xc + xd */
;;;595            pSi0[0] = (r1 + t1) >> 2u;
0001e4  eb0e0807          ADD      r8,lr,r7
0001e8  ea4f08a8          ASR      r8,r8,#2
;;;596            /* xa + xc -(xb + xd) */
;;;597            r1 = r1 - t1;
0001ec  f8c48000          STR      r8,[r4,#0]
0001f0  ebae0807          SUB      r8,lr,r7
;;;598    
;;;599            /* yb + yd */
;;;600            t2 = pSi1[1] + pSi3[1];
0001f4  f8cd8004          STR      r8,[sp,#4]
0001f8  684f              LDR      r7,[r1,#4]
0001fa  f8d38004          LDR      r8,[r3,#4]
0001fe  4447              ADD      r7,r7,r8
;;;601    
;;;602            /* ya' = ya + yb + yc + yd */
;;;603            pSi0[1] = (s1 + t2) >> 2u;
000200  eb0c0807          ADD      r8,r12,r7
000204  ea4f08a8          ASR      r8,r8,#2
;;;604            pSi0 += 2 * n1;
000208  f8c48004          STR      r8,[r4,#4]
;;;605    
;;;606            /* (ya + yc) - (yb + yd) */
;;;607            s1 = s1 - t2;
00020c  ebac0707          SUB      r7,r12,r7
;;;608    
;;;609            /* (yb - yd) */
;;;610            t1 = pSi1[1] - pSi3[1];
000210  f8d1c004          LDR      r12,[r1,#4]
000214  f8d38004          LDR      r8,[r3,#4]
000218  eb0404c6          ADD      r4,r4,r6,LSL #3       ;604
00021c  ebac0e08          SUB      lr,r12,r8
;;;611    
;;;612            /* (xb - xd) */
;;;613            t2 = pSi1[0] - pSi3[0];
000220  f8d1c000          LDR      r12,[r1,#0]
000224  f8d38000          LDR      r8,[r3,#0]
000228  ebac0c08          SUB      r12,r12,r8
;;;614    
;;;615    
;;;616            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
;;;617            pSi1[0] = (((int32_t) (((q63_t) r1 * co2) >> 32)) +
00022c  f8cdc020          STR      r12,[sp,#0x20]
000230  f8ddc040          LDR      r12,[sp,#0x40]
000234  f8dd8004          LDR      r8,[sp,#4]
000238  fb58f80c          SMMUL    r8,r8,r12
00023c  f8ddc048          LDR      r12,[sp,#0x48]
000240  fb57fc0c          SMMUL    r12,r7,r12
000244  44c4              ADD      r12,r12,r8
000246  ea4f0c6c          ASR      r12,r12,#1
;;;618                             ((int32_t) (((q63_t) s1 * si2) >> 32))) >> 1u;
;;;619    
;;;620            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
;;;621            pSi1[1] = (((int32_t) (((q63_t) s1 * co2) >> 32)) -
00024a  f8c1c000          STR      r12,[r1,#0]
00024e  f8ddc040          LDR      r12,[sp,#0x40]
000252  fb57fc0c          SMMUL    r12,r7,r12
000256  f8dd8004          LDR      r8,[sp,#4]
00025a  9f12              LDR      r7,[sp,#0x48]
00025c  fb58f707          SMMUL    r7,r8,r7
000260  ebac0707          SUB      r7,r12,r7
000264  107f              ASRS     r7,r7,#1
;;;622                                    ((int32_t) (((q63_t) r1 * si2) >> 32))) >> 1u;
;;;623            pSi1 += 2 * n1;
000266  604f              STR      r7,[r1,#4]
;;;624    
;;;625            /* (xa - xc) + (yb - yd) */
;;;626            r1 = r2 + t1;
000268  9f04              LDR      r7,[sp,#0x10]
;;;627            /* (xa - xc) - (yb - yd) */
;;;628            r2 = r2 - t1;
;;;629    
;;;630            /* (ya - yc) -  (xb - xd) */
;;;631            s1 = s2 - t2;
00026a  f8ddc020          LDR      r12,[sp,#0x20]
00026e  4477              ADD      r7,r7,lr              ;626
000270  9701              STR      r7,[sp,#4]            ;628
000272  9f04              LDR      r7,[sp,#0x10]         ;628
000274  eb0101c6          ADD      r1,r1,r6,LSL #3       ;623
000278  eba7070e          SUB      r7,r7,lr              ;628
00027c  9704              STR      r7,[sp,#0x10]
00027e  9f03              LDR      r7,[sp,#0xc]
000280  eba70e0c          SUB      lr,r7,r12
;;;632            /* (ya - yc) +  (xb - xd) */
;;;633            s2 = s2 + t2;
000284  4467              ADD      r7,r7,r12
;;;634    
;;;635            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
;;;636            pSi2[0] = (((int32_t) (((q63_t) r1 * co1) >> 32)) +
000286  9703              STR      r7,[sp,#0xc]
000288  f8ddc03c          LDR      r12,[sp,#0x3c]
00028c  9f01              LDR      r7,[sp,#4]
00028e  fb57f80c          SMMUL    r8,r7,r12
000292  f8ddc038          LDR      r12,[sp,#0x38]
000296  fb5ef70c          SMMUL    r7,lr,r12
00029a  4447              ADD      r7,r7,r8
00029c  107f              ASRS     r7,r7,#1
;;;637                             ((int32_t) (((q63_t) s1 * si1) >> 32))) >> 1u;
;;;638    
;;;639            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
;;;640            pSi2[1] = (((int32_t) (((q63_t) s1 * co1) >> 32)) -
00029e  602f              STR      r7,[r5,#0]
0002a0  f8ddc03c          LDR      r12,[sp,#0x3c]
0002a4  fb5ef80c          SMMUL    r8,lr,r12
0002a8  f8ddc038          LDR      r12,[sp,#0x38]
0002ac  9f01              LDR      r7,[sp,#4]
0002ae  fb57f70c          SMMUL    r7,r7,r12
0002b2  eba80707          SUB      r7,r8,r7
0002b6  107f              ASRS     r7,r7,#1
;;;641                                    ((int32_t) (((q63_t) r1 * si1) >> 32))) >> 1u;
;;;642            pSi2 += 2 * n1;
0002b8  606f              STR      r7,[r5,#4]
;;;643    
;;;644            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
;;;645            pSi3[0] = (((int32_t) (((q63_t) r2 * co3) >> 32)) +
0002ba  f8ddc044          LDR      r12,[sp,#0x44]
0002be  9f04              LDR      r7,[sp,#0x10]
0002c0  eb0505c6          ADD      r5,r5,r6,LSL #3       ;642
0002c4  fb57f80c          SMMUL    r8,r7,r12
0002c8  f8ddc030          LDR      r12,[sp,#0x30]
0002cc  9f03              LDR      r7,[sp,#0xc]
0002ce  fb57f70c          SMMUL    r7,r7,r12
0002d2  4447              ADD      r7,r7,r8
0002d4  107f              ASRS     r7,r7,#1
;;;646                             ((int32_t) (((q63_t) s2 * si3) >> 32))) >> 1u;
;;;647    
;;;648            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
;;;649            pSi3[1] = (((int32_t) (((q63_t) s2 * co3) >> 32)) -
0002d6  601f              STR      r7,[r3,#0]
0002d8  f8ddc044          LDR      r12,[sp,#0x44]
0002dc  9f03              LDR      r7,[sp,#0xc]
0002de  fb57f80c          SMMUL    r8,r7,r12
0002e2  f8ddc030          LDR      r12,[sp,#0x30]
0002e6  9f04              LDR      r7,[sp,#0x10]
0002e8  fb57f70c          SMMUL    r7,r7,r12
0002ec  eba80707          SUB      r7,r8,r7
0002f0  107f              ASRS     r7,r7,#1
;;;650                                    ((int32_t) (((q63_t) r2 * si3) >> 32))) >> 1u;
;;;651            pSi3 += 2 * n1;
0002f2  605f              STR      r7,[r3,#4]
0002f4  eb0303c6          ADD      r3,r3,r6,LSL #3
0002f8  44b2              ADD      r10,r10,r6            ;573
                  |L3.762|
0002fa  f8ddc064          LDR      r12,[sp,#0x64]        ;573
0002fe  45e2              CMP      r10,r12               ;573
000300  f4ffaf5c          BCC      |L3.444|
000304  f10b0b01          ADD      r11,r11,#1            ;554
                  |L3.776|
000308  9b15              LDR      r3,[sp,#0x54]         ;554
00030a  459b              CMP      r11,r3                ;554
00030c  f67faf30          BLS      |L3.368|
;;;652          }
;;;653        }
;;;654        twidCoefModifier <<= 2u;
000310  991b              LDR      r1,[sp,#0x6c]
000312  0089              LSLS     r1,r1,#2
000314  911b              STR      r1,[sp,#0x6c]         ;546
000316  9917              LDR      r1,[sp,#0x5c]         ;546
000318  0889              LSRS     r1,r1,#2              ;546
                  |L3.794|
00031a  9117              STR      r1,[sp,#0x5c]         ;546
00031c  2904              CMP      r1,#4                 ;546
00031e  f63faf1e          BHI      |L3.350|
;;;655      }
;;;656    #endif
;;;657    
;;;658      /* End of Middle stages process */
;;;659    
;;;660      /* data is in 11.21(q21) format for the 1024 point as there are 3 middle stages */
;;;661      /* data is in 9.23(q23) format for the 256 point as there are 2 middle stages */
;;;662      /* data is in 7.25(q25) format for the 64 point as there are 1 middle stage */
;;;663      /* data is in 5.27(q27) format for the 16 point as there are no middle stages */
;;;664    
;;;665    
;;;666      /* start of Last stage process */
;;;667      /*  Initializations for the last stage */
;;;668      j = fftLen >> 2;
;;;669      ptr1 = &pSrc[0];
000322  f8dd9050          LDR      r9,[sp,#0x50]
000326  9818              LDR      r0,[sp,#0x60]
                  |L3.808|
000328  e8f05102          LDRD     r5,r1,[r0],#8
00032c  e8f0c402          LDRD     r12,r4,[r0],#8
;;;670    
;;;671      /*  Calculations of last stage */
;;;672      do
;;;673      {
;;;674    
;;;675    #ifndef ARM_MATH_BIG_ENDIAN
;;;676    
;;;677        /* Read xa (real), ya(imag) input */
;;;678        xaya = *__SIMD64(ptr1)++;
;;;679        xa = (q31_t) xaya;
;;;680        ya = (q31_t) (xaya >> 32);
;;;681    
;;;682        /* Read xb (real), yb(imag) input */
;;;683        xbyb = *__SIMD64(ptr1)++;
;;;684        xb = (q31_t) xbyb;
;;;685        yb = (q31_t) (xbyb >> 32);
;;;686    
;;;687        /* Read xc (real), yc(imag) input */
;;;688        xcyc = *__SIMD64(ptr1)++;
;;;689        xc = (q31_t) xcyc;
;;;690        yc = (q31_t) (xcyc >> 32);
;;;691    
;;;692        /* Read xc (real), yc(imag) input */
;;;693        xdyd = *__SIMD64(ptr1)++;
;;;694        xd = (q31_t) xdyd;
;;;695        yd = (q31_t) (xdyd >> 32);
;;;696    
;;;697    #else
;;;698    
;;;699        /* Read xa (real), ya(imag) input */
;;;700        xaya = *__SIMD64(ptr1)++;
;;;701        ya = (q31_t) xaya;
;;;702        xa = (q31_t) (xaya >> 32);
;;;703    
;;;704        /* Read xb (real), yb(imag) input */
;;;705        xbyb = *__SIMD64(ptr1)++;
;;;706        yb = (q31_t) xbyb;
;;;707        xb = (q31_t) (xbyb >> 32);
;;;708    
;;;709        /* Read xc (real), yc(imag) input */
;;;710        xcyc = *__SIMD64(ptr1)++;
;;;711        yc = (q31_t) xcyc;
;;;712        xc = (q31_t) (xcyc >> 32);
;;;713    
;;;714        /* Read xc (real), yc(imag) input */
;;;715        xdyd = *__SIMD64(ptr1)++;
;;;716        yd = (q31_t) xdyd;
;;;717        xd = (q31_t) (xdyd >> 32);
;;;718    
;;;719    
;;;720    #endif
;;;721    
;;;722        /* xa' = xa + xb + xc + xd */
;;;723        xa_out = xa + xb + xc + xd;
;;;724    
;;;725        /* ya' = ya + yb + yc + yd */
;;;726        ya_out = ya + yb + yc + yd;
;;;727    
;;;728        /* pointer updation for writing */
;;;729        ptr1 = ptr1 - 8u;
;;;730    
;;;731        /* writing xa' and ya' */
;;;732        *ptr1++ = xa_out;
;;;733        *ptr1++ = ya_out;
;;;734    
;;;735        xc_out = (xa - xb + xc - xd);
000330  eba5080c          SUB      r8,r5,r12
000334  e8f07302          LDRD     r7,r3,[r0],#8         ;669
000338  44b8              ADD      r8,r8,r7
00033a  e8f06202          LDRD     r6,r2,[r0],#8         ;669
00033e  4683              MOV      r11,r0                ;693
000340  eb05000c          ADD      r0,r5,r12             ;723
000344  4438              ADD      r0,r0,r7              ;723
000346  eb000a06          ADD      r10,r0,r6             ;723
00034a  1908              ADDS     r0,r1,r4              ;726
00034c  4418              ADD      r0,r0,r3              ;726
00034e  eb000e02          ADD      lr,r0,r2              ;726
000352  f1ab0020          SUB      r0,r11,#0x20          ;729
000356  eba80806          SUB      r8,r8,r6
00035a  e8e0ae02          STRD     r10,lr,[r0],#8
00035e  46c2              MOV      r10,r8
;;;736        yc_out = (ya - yb + yc - yd);
000360  eba10804          SUB      r8,r1,r4
000364  4498              ADD      r8,r8,r3
000366  eba80b02          SUB      r11,r8,r2
;;;737    
;;;738        /* writing xc' and yc' */
;;;739        *ptr1++ = xc_out;
;;;740        *ptr1++ = yc_out;
;;;741    
;;;742        xb_out = (xa + yb - xc - yd);
00036a  eb050804          ADD      r8,r5,r4
00036e  eba80807          SUB      r8,r8,r7
000372  eba80802          SUB      r8,r8,r2
000376  e8e0ab02          STRD     r10,r11,[r0],#8
00037a  46c3              MOV      r11,r8
;;;743        yb_out = (ya - xb - yc + xd);
00037c  eba1080c          SUB      r8,r1,r12
;;;744    
;;;745        /* writing xb' and yb' */
;;;746        *ptr1++ = xb_out;
;;;747        *ptr1++ = yb_out;
;;;748    
;;;749        xd_out = (xa - yb - xc + yd);
000380  1b2c              SUBS     r4,r5,r4
000382  1be4              SUBS     r4,r4,r7
;;;750        yd_out = (ya + xb - yc - xd);
000384  4461              ADD      r1,r1,r12
000386  1ac9              SUBS     r1,r1,r3
000388  4422              ADD      r2,r2,r4              ;749
00038a  1b89              SUBS     r1,r1,r6
00038c  e9c02102          STRD     r2,r1,[r0,#8]
000390  eba80803          SUB      r8,r8,r3              ;743
000394  eb080a06          ADD      r10,r8,r6             ;743
000398  e8e0ba04          STRD     r11,r10,[r0],#0x10
;;;751    
;;;752        /* writing xd' and yd' */
;;;753        *ptr1++ = xd_out;
;;;754        *ptr1++ = yd_out;
;;;755    
;;;756    
;;;757      } while(--j);
00039c  f1a90101          SUB      r1,r9,#1
0003a0  ea5f0901          MOVS     r9,r1
0003a4  d1c0              BNE      |L3.808|
;;;758    
;;;759      /* output is in 11.21(q21) format for the 1024 point */
;;;760      /* output is in 9.23(q23) format for the 256 point */
;;;761      /* output is in 7.25(q25) format for the 64 point */
;;;762      /* output is in 5.27(q27) format for the 16 point */
;;;763    
;;;764      /* End of last stage process */
;;;765    
;;;766    }
0003a6  b01c              ADD      sp,sp,#0x70
0003a8  e8bd8ff0          POP      {r4-r11,pc}
;;;767    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix4_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_q31_c_eb61842b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix4_q31_c_eb61842b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_q31_c_eb61842b____REVSH|
#line 144
|__asm___21_arm_cfft_radix4_q31_c_eb61842b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix4_q31_c_eb61842b____RRX|
#line 300
|__asm___21_arm_cfft_radix4_q31_c_eb61842b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
