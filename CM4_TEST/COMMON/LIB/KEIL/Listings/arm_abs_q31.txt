; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_abs_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_abs_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_abs_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_abs_q31.c]
                          THUMB

                          AREA ||i.arm_abs_q31||, CODE, READONLY, ALIGN=1

                  arm_abs_q31 PROC
;;;65     
;;;66     void arm_abs_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;67       q31_t * pSrc,
;;;68       q31_t * pDst,
;;;69       uint32_t blockSize)
;;;70     {
;;;71       uint32_t blkCnt;                               /* loop counter */
;;;72       q31_t in;                                      /* Input value */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q31_t in1, in2, in3, in4;
;;;78     
;;;79       /*loop Unrolling */
;;;80       blkCnt = blockSize >> 2u;
000002  0897              LSRS     r7,r2,#2
;;;81     
;;;82       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;83        ** a second loop below computes the remaining 1 to 3 samples. */
;;;84       while(blkCnt > 0u)
000004  f04f0c00          MOV      r12,#0
000008  e019              B        |L1.62|
                  |L1.10|
;;;85       {
;;;86         /* C = |A| */
;;;87         /* Calculate absolute of input (if -1 then saturated to 0x7fffffff) and then store the results in the destination buffer. */
;;;88         in1 = *pSrc++;
00000a  6803              LDR      r3,[r0,#0]
;;;89         in2 = *pSrc++;
00000c  6844              LDR      r4,[r0,#4]
;;;90         in3 = *pSrc++;
00000e  6886              LDR      r6,[r0,#8]
;;;91         in4 = *pSrc++;
000010  68c5              LDR      r5,[r0,#0xc]
000012  3010              ADDS     r0,r0,#0x10
;;;92     
;;;93         *pDst++ = (in1 > 0) ? in1 : (q31_t)__QSUB(0, in1);
000014  2b00              CMP      r3,#0
000016  dc01              BGT      |L1.28|
000018  fa83f3ac          QSUB     r3,r12,r3
                  |L1.28|
00001c  c108              STM      r1!,{r3}
;;;94         *pDst++ = (in2 > 0) ? in2 : (q31_t)__QSUB(0, in2);
00001e  2c00              CMP      r4,#0
000020  dc01              BGT      |L1.38|
000022  fa84f4ac          QSUB     r4,r12,r4
                  |L1.38|
000026  c110              STM      r1!,{r4}
;;;95         *pDst++ = (in3 > 0) ? in3 : (q31_t)__QSUB(0, in3);
000028  2e00              CMP      r6,#0
00002a  dc01              BGT      |L1.48|
00002c  fa86f6ac          QSUB     r6,r12,r6
                  |L1.48|
000030  c140              STM      r1!,{r6}
;;;96         *pDst++ = (in4 > 0) ? in4 : (q31_t)__QSUB(0, in4);
000032  2d00              CMP      r5,#0
000034  dc01              BGT      |L1.58|
000036  fa85f5ac          QSUB     r5,r12,r5
                  |L1.58|
00003a  c120              STM      r1!,{r5}
;;;97     
;;;98         /* Decrement the loop counter */
;;;99         blkCnt--;
00003c  1e7f              SUBS     r7,r7,#1
                  |L1.62|
00003e  2f00              CMP      r7,#0                 ;84
000040  d1e3              BNE      |L1.10|
;;;100      }
;;;101    
;;;102      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;103       ** No loop unrolling is used. */
;;;104      blkCnt = blockSize % 0x4u;
000042  f0020303          AND      r3,r2,#3
;;;105    
;;;106    #else
;;;107    
;;;108      /* Run the below code for Cortex-M0 */
;;;109    
;;;110      /* Initialize blkCnt with number of samples */
;;;111      blkCnt = blockSize;
;;;112    
;;;113    #endif /*   #ifndef ARM_MATH_CM0_FAMILY   */
;;;114    
;;;115      while(blkCnt > 0u)
;;;116      {
;;;117        /* C = |A| */
;;;118        /* Calculate absolute value of the input (if -1 then saturated to 0x7fffffff) and then store the results in the destination buffer. */
;;;119        in = *pSrc++;
;;;120        *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);
000046  f04f4500          MOV      r5,#0x80000000
00004a  1e6c              SUBS     r4,r5,#1
00004c  e009              B        |L1.98|
                  |L1.78|
00004e  c804              LDM      r0!,{r2}              ;119
000050  2a00              CMP      r2,#0
000052  dc04              BGT      |L1.94|
000054  42aa              CMP      r2,r5
000056  d101              BNE      |L1.92|
000058  4622              MOV      r2,r4
00005a  e000              B        |L1.94|
                  |L1.92|
00005c  4252              RSBS     r2,r2,#0
                  |L1.94|
00005e  c104              STM      r1!,{r2}
;;;121    
;;;122        /* Decrement the loop counter */
;;;123        blkCnt--;
000060  1e5b              SUBS     r3,r3,#1
                  |L1.98|
000062  2b00              CMP      r3,#0                 ;115
000064  d1f3              BNE      |L1.78|
;;;124      }
;;;125    
;;;126    }
000066  bdf0              POP      {r4-r7,pc}
;;;127    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_abs_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_q31_c_9c2c21ae____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_abs_q31_c_9c2c21ae____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_q31_c_9c2c21ae____REVSH|
#line 144
|__asm___13_arm_abs_q31_c_9c2c21ae____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_q31_c_9c2c21ae____RRX|
#line 300
|__asm___13_arm_abs_q31_c_9c2c21ae____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
