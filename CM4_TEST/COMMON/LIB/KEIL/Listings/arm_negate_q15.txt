; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_negate_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_negate_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_negate_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_negate_q15.c]
                          THUMB

                          AREA ||i.arm_negate_q15||, CODE, READONLY, ALIGN=2

                  arm_negate_q15 PROC
;;;67     
;;;68     void arm_negate_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;69       q15_t * pSrc,
;;;70       q15_t * pDst,
;;;71       uint32_t blockSize)
;;;72     {
;;;73       uint32_t blkCnt;                               /* loop counter */
;;;74       q15_t in;
;;;75     
;;;76     #ifndef ARM_MATH_CM0_FAMILY
;;;77     
;;;78     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;79     
;;;80       q31_t in1, in2;                                /* Temporary variables */
;;;81     
;;;82     
;;;83       /*loop Unrolling */
;;;84       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  2400              MOVS     r4,#0
000006  e00c              B        |L1.34|
                  |L1.8|
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C = -A */
;;;91         /* Read two inputs at a time */
;;;92         in1 = _SIMD32_OFFSET(pSrc);
000008  f8506b04          LDR      r6,[r0],#4
;;;93         in2 = _SIMD32_OFFSET(pSrc + 2);
00000c  f8505b04          LDR      r5,[r0],#4
;;;94     
;;;95         /* negate two samples at a time */
;;;96         in1 = __QSUB16(0, in1);
000010  fad4f616          QSUB16   r6,r4,r6
;;;97     
;;;98         /* negate two samples at a time */
;;;99         in2 = __QSUB16(0, in2);
000014  fad4f515          QSUB16   r5,r4,r5
;;;100    
;;;101        /* store the result to destination 2 samples at a time */
;;;102        _SIMD32_OFFSET(pDst) = in1;
000018  f8416b04          STR      r6,[r1],#4
;;;103        /* store the result to destination 2 samples at a time */
;;;104        _SIMD32_OFFSET(pDst + 2) = in2;
00001c  1e5b              SUBS     r3,r3,#1
00001e  f8415b04          STR      r5,[r1],#4
                  |L1.34|
000022  2b00              CMP      r3,#0                 ;88
000024  d1f0              BNE      |L1.8|
;;;105    
;;;106    
;;;107        /* update pointers to process next samples */
;;;108        pSrc += 4u;
;;;109        pDst += 4u;
;;;110    
;;;111        /* Decrement the loop counter */
;;;112        blkCnt--;
;;;113      }
;;;114    
;;;115      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;116       ** No loop unrolling is used. */
;;;117      blkCnt = blockSize % 0x4u;
;;;118    
;;;119    #else
;;;120    
;;;121      /* Run the below code for Cortex-M0 */
;;;122    
;;;123      /* Initialize blkCnt with number of samples */
;;;124      blkCnt = blockSize;
;;;125    
;;;126    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;127    
;;;128      while(blkCnt > 0u)
;;;129      {
;;;130        /* C = -A */
;;;131        /* Negate and then store the result in the destination buffer. */
;;;132        in = *pSrc++;
;;;133        *pDst++ = (in == (q15_t) 0x8000) ? 0x7fff : -in;
000026  4c09              LDR      r4,|L1.76|
000028  f0020203          AND      r2,r2,#3              ;117
00002c  0c65              LSRS     r5,r4,#17
00002e  e009              B        |L1.68|
                  |L1.48|
000030  f9303b02          LDRSH    r3,[r0],#2            ;132
000034  42a3              CMP      r3,r4
000036  d101              BNE      |L1.60|
000038  462b              MOV      r3,r5
00003a  e000              B        |L1.62|
                  |L1.60|
00003c  425b              RSBS     r3,r3,#0
                  |L1.62|
00003e  f8213b02          STRH     r3,[r1],#2
000042  1e52              SUBS     r2,r2,#1
                  |L1.68|
000044  2a00              CMP      r2,#0                 ;128
000046  d1f3              BNE      |L1.48|
;;;134    
;;;135        /* Decrement the loop counter */
;;;136        blkCnt--;
;;;137      }
;;;138    }
000048  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0xffff8000

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_negate_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_q15_c_fe9ded60____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_negate_q15_c_fe9ded60____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_q15_c_fe9ded60____REVSH|
#line 144
|__asm___16_arm_negate_q15_c_fe9ded60____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_q15_c_fe9ded60____RRX|
#line 300
|__asm___16_arm_negate_q15_c_fe9ded60____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
