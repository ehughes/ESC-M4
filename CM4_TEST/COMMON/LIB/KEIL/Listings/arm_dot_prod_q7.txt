; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_dot_prod_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_dot_prod_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_dot_prod_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_dot_prod_q7.c]
                          THUMB

                          AREA ||i.arm_dot_prod_q7||, CODE, READONLY, ALIGN=1

                  arm_dot_prod_q7 PROC
;;;68     
;;;69     void arm_dot_prod_q7(
000000  b5f0              PUSH     {r4-r7,lr}
;;;70       q7_t * pSrcA,
;;;71       q7_t * pSrcB,
;;;72       uint32_t blockSize,
;;;73       q31_t * result)
;;;74     {
;;;75       uint32_t blkCnt;                               /* loop counter */
;;;76     
;;;77       q31_t sum = 0;                                 /* Temporary variables to store output */
000002  2400              MOVS     r4,#0
;;;78     
;;;79     #ifndef ARM_MATH_CM0_FAMILY
;;;80     
;;;81     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;82     
;;;83       q31_t input1, input2;                          /* Temporary variables to store input */
;;;84       q31_t inA1, inA2, inB1, inB2;                  /* Temporary variables to store input */
;;;85     
;;;86     
;;;87     
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
000004  0895              LSRS     r5,r2,#2
000006  e010              B        |L1.42|
                  |L1.8|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;92        ** a second loop below computes the remaining 1 to 3 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* read 4 samples at a time from sourceA */
;;;96         input1 = *__SIMD32(pSrcA)++;
000008  f8507b04          LDR      r7,[r0],#4
;;;97         /* read 4 samples at a time from sourceB */
;;;98         input2 = *__SIMD32(pSrcB)++;
00000c  f8516b04          LDR      r6,[r1],#4
;;;99     
;;;100        /* extract two q7_t samples to q15_t samples */
;;;101        inA1 = __SXTB16(__ROR(input1, 8));
000010  fa2ffe97          SXTB16   lr,r7,ROR #8
;;;102        /* extract reminaing two samples */
;;;103        inA2 = __SXTB16(input1);
000014  fa2ffc87          SXTB16   r12,r7
;;;104        /* extract two q7_t samples to q15_t samples */
;;;105        inB1 = __SXTB16(__ROR(input2, 8));
000018  fa2ff796          SXTB16   r7,r6,ROR #8
;;;106        /* extract reminaing two samples */
;;;107        inB2 = __SXTB16(input2);
00001c  fa2ff686          SXTB16   r6,r6
;;;108    
;;;109        /* multiply and accumulate two samples at a time */
;;;110        sum = __SMLAD(inA1, inB1, sum);
000020  fb2e4407          SMLAD    r4,lr,r7,r4
;;;111        sum = __SMLAD(inA2, inB2, sum);
000024  fb2c4406          SMLAD    r4,r12,r6,r4
000028  1e6d              SUBS     r5,r5,#1
                  |L1.42|
00002a  2d00              CMP      r5,#0                 ;93
00002c  d1ec              BNE      |L1.8|
;;;112    
;;;113        /* Decrement the loop counter */
;;;114        blkCnt--;
;;;115      }
;;;116    
;;;117      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;118       ** No loop unrolling is used. */
;;;119      blkCnt = blockSize % 0x4u;
00002e  f0020203          AND      r2,r2,#3
;;;120    
;;;121      while(blkCnt > 0u)
000032  e006              B        |L1.66|
                  |L1.52|
;;;122      {
;;;123        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;124        /* Dot product and then store the results in a temporary buffer. */
;;;125        sum = __SMLAD(*pSrcA++, *pSrcB++, sum);
000034  f9105b01          LDRSB    r5,[r0],#1
000038  f9116b01          LDRSB    r6,[r1],#1
00003c  fb254406          SMLAD    r4,r5,r6,r4
000040  1e52              SUBS     r2,r2,#1
                  |L1.66|
000042  2a00              CMP      r2,#0                 ;121
000044  d1f6              BNE      |L1.52|
;;;126    
;;;127        /* Decrement the loop counter */
;;;128        blkCnt--;
;;;129      }
;;;130    
;;;131    #else
;;;132    
;;;133      /* Run the below code for Cortex-M0 */
;;;134    
;;;135    
;;;136    
;;;137      /* Initialize blkCnt with number of samples */
;;;138      blkCnt = blockSize;
;;;139    
;;;140      while(blkCnt > 0u)
;;;141      {
;;;142        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;143        /* Dot product and then store the results in a temporary buffer. */
;;;144        sum += (q31_t) ((q15_t) * pSrcA++ * *pSrcB++);
;;;145    
;;;146        /* Decrement the loop counter */
;;;147        blkCnt--;
;;;148      }
;;;149    
;;;150    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;151    
;;;152    
;;;153      /* Store the result in the destination buffer in 18.14 format */
;;;154      *result = sum;
000046  601c              STR      r4,[r3,#0]
;;;155    }
000048  bdf0              POP      {r4-r7,pc}
;;;156    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_dot_prod_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_dot_prod_q7_c_2d5224b1____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_dot_prod_q7_c_2d5224b1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_dot_prod_q7_c_2d5224b1____REVSH|
#line 144
|__asm___17_arm_dot_prod_q7_c_2d5224b1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_dot_prod_q7_c_2d5224b1____RRX|
#line 300
|__asm___17_arm_dot_prod_q7_c_2d5224b1____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
