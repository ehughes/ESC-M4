; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_float_to_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_float_to_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_float_to_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_float_to_q31.c]
                          THUMB

                          AREA ||i.arm_float_to_q31||, CODE, READONLY, ALIGN=2

                  arm_float_to_q31 PROC
;;;79     
;;;80     void arm_float_to_q31(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;81       float32_t * pSrc,
;;;82       q31_t * pDst,
;;;83       uint32_t blockSize)
;;;84     {
000004  4605              MOV      r5,r0
000006  ed2d8b02          VPUSH    {d8}
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;85       float32_t *pIn = pSrc;                         /* Src pointer */
;;;86       uint32_t blkCnt;                               /* loop counter */
;;;87     
;;;88     #ifdef ARM_MATH_ROUNDING
;;;89     
;;;90       float32_t in;
;;;91     
;;;92     #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;93     
;;;94     #ifndef ARM_MATH_CM0_FAMILY
;;;95     
;;;96       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;97     
;;;98       /*loop Unrolling */
;;;99       blkCnt = blockSize >> 2u;
00000e  08bc              LSRS     r4,r7,#2
;;;100    
;;;101      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;102       ** a second loop below computes the remaining 1 to 3 samples. */
;;;103      while(blkCnt > 0u)
;;;104      {
;;;105    
;;;106    #ifdef ARM_MATH_ROUNDING
;;;107    
;;;108        /* C = A * 32768 */
;;;109        /* convert from float to Q31 and then store the results in the destination buffer */
;;;110        in = *pIn++;
;;;111        in = (in * 2147483648.0f);
;;;112        in += in > 0.0f ? 0.5f : -0.5f;
;;;113        *pDst++ = clip_q63_to_q31((q63_t) (in));
;;;114    
;;;115        in = *pIn++;
;;;116        in = (in * 2147483648.0f);
;;;117        in += in > 0.0f ? 0.5f : -0.5f;
;;;118        *pDst++ = clip_q63_to_q31((q63_t) (in));
;;;119    
;;;120        in = *pIn++;
;;;121        in = (in * 2147483648.0f);
;;;122        in += in > 0.0f ? 0.5f : -0.5f;
;;;123        *pDst++ = clip_q63_to_q31((q63_t) (in));
;;;124    
;;;125        in = *pIn++;
;;;126        in = (in * 2147483648.0f);
;;;127        in += in > 0.0f ? 0.5f : -0.5f;
;;;128        *pDst++ = clip_q63_to_q31((q63_t) (in));
;;;129    
;;;130    #else
;;;131    
;;;132        /* C = A * 2147483648 */
;;;133        /* convert from float to Q31 and then store the results in the destination buffer */
;;;134        *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
000010  ed9f8a23          VLDR     s16,|L1.160|
000014  e02d              B        |L1.114|
                  |L1.22|
000016  ecb50a01          VLDM     r5!,{s0}
00001a  ee200a08          VMUL.F32 s0,s0,s16
00001e  ee100a10          VMOV     r0,s0
000022  f7fffffe          BL       __aeabi_f2lz
000026  f7fffffe          BL       clip_q63_to_q31
00002a  6030              STR      r0,[r6,#0]
;;;135        *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
00002c  ecb50a01          VLDM     r5!,{s0}
000030  ee200a08          VMUL.F32 s0,s0,s16
000034  ee100a10          VMOV     r0,s0
000038  f7fffffe          BL       __aeabi_f2lz
00003c  f7fffffe          BL       clip_q63_to_q31
000040  6070              STR      r0,[r6,#4]
;;;136        *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
000042  ecb50a01          VLDM     r5!,{s0}
000046  ee200a08          VMUL.F32 s0,s0,s16
00004a  ee100a10          VMOV     r0,s0
00004e  f7fffffe          BL       __aeabi_f2lz
000052  f7fffffe          BL       clip_q63_to_q31
000056  60b0              STR      r0,[r6,#8]
;;;137        *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
000058  ecb50a01          VLDM     r5!,{s0}
00005c  ee200a08          VMUL.F32 s0,s0,s16
000060  ee100a10          VMOV     r0,s0
000064  f7fffffe          BL       __aeabi_f2lz
000068  f7fffffe          BL       clip_q63_to_q31
00006c  60f0              STR      r0,[r6,#0xc]
00006e  3610              ADDS     r6,r6,#0x10
;;;138    
;;;139    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;140    
;;;141        /* Decrement the loop counter */
;;;142        blkCnt--;
000070  1e64              SUBS     r4,r4,#1
                  |L1.114|
000072  2c00              CMP      r4,#0                 ;103
000074  d1cf              BNE      |L1.22|
;;;143      }
;;;144    
;;;145      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;146       ** No loop unrolling is used. */
;;;147      blkCnt = blockSize % 0x4u;
000076  f0070403          AND      r4,r7,#3
;;;148    
;;;149      while(blkCnt > 0u)
00007a  e00b              B        |L1.148|
                  |L1.124|
;;;150      {
;;;151    
;;;152    #ifdef ARM_MATH_ROUNDING
;;;153    
;;;154        /* C = A * 2147483648 */
;;;155        /* convert from float to Q31 and then store the results in the destination buffer */
;;;156        in = *pIn++;
;;;157        in = (in * 2147483648.0f);
;;;158        in += in > 0.0f ? 0.5f : -0.5f;
;;;159        *pDst++ = clip_q63_to_q31((q63_t) (in));
;;;160    
;;;161    #else
;;;162    
;;;163        /* C = A * 2147483648 */
;;;164        /* convert from float to Q31 and then store the results in the destination buffer */
;;;165        *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
00007c  ecb50a01          VLDM     r5!,{s0}
000080  ee200a08          VMUL.F32 s0,s0,s16
000084  ee100a10          VMOV     r0,s0
000088  f7fffffe          BL       __aeabi_f2lz
00008c  f7fffffe          BL       clip_q63_to_q31
000090  c601              STM      r6!,{r0}
;;;166    
;;;167    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;168    
;;;169        /* Decrement the loop counter */
;;;170        blkCnt--;
000092  1e64              SUBS     r4,r4,#1
                  |L1.148|
000094  2c00              CMP      r4,#0                 ;149
000096  d1f1              BNE      |L1.124|
;;;171      }
;;;172    
;;;173    
;;;174    #else
;;;175    
;;;176      /* Run the below code for Cortex-M0 */
;;;177    
;;;178      /* Loop over blockSize number of values */
;;;179      blkCnt = blockSize;
;;;180    
;;;181      while(blkCnt > 0u)
;;;182      {
;;;183    
;;;184    #ifdef ARM_MATH_ROUNDING
;;;185    
;;;186        /* C = A * 2147483648 */
;;;187        /* convert from float to Q31 and then store the results in the destination buffer */
;;;188        in = *pIn++;
;;;189        in = (in * 2147483648.0f);
;;;190        in += in > 0 ? 0.5f : -0.5f;
;;;191        *pDst++ = clip_q63_to_q31((q63_t) (in));
;;;192    
;;;193    #else
;;;194    
;;;195        /* C = A * 2147483648 */
;;;196        /* convert from float to Q31 and then store the results in the destination buffer */
;;;197        *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
;;;198    
;;;199    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;200    
;;;201        /* Decrement the loop counter */
;;;202        blkCnt--;
;;;203      }
;;;204    
;;;205    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;206    
;;;207    }
000098  ecbd8b02          VPOP     {d8}
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;208    
                          ENDP

                  |L1.160|
0000a0  4f000000          DCFS     0x4f000000 ; 2147483648

                          AREA ||i.clip_q63_to_q31||, CODE, READONLY, ALIGN=1

                  clip_q63_to_q31 PROC
;;;458       */
;;;459      static __INLINE q31_t clip_q63_to_q31(
000000  17ca              ASRS     r2,r1,#31
;;;460      q63_t x)
;;;461      {
;;;462        return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
000002  ebb17fe0          CMP      r1,r0,ASR #31
000006  d002              BEQ      |L2.14|
;;;463          ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
000008  f06f4000          MVN      r0,#0x80000000
00000c  4050              EORS     r0,r0,r2
                  |L2.14|
;;;464      }
00000e  4770              BX       lr
;;;465    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_float_to_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_float_to_q31_c_237ef7a3____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_float_to_q31_c_237ef7a3____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_float_to_q31_c_237ef7a3____REVSH|
#line 144
|__asm___18_arm_float_to_q31_c_237ef7a3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_float_to_q31_c_237ef7a3____RRX|
#line 300
|__asm___18_arm_float_to_q31_c_237ef7a3____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
