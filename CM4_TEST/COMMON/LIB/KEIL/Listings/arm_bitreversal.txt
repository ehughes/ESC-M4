; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_bitreversal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_bitreversal.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_bitreversal.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_bitreversal.c]
                          THUMB

                          AREA ||i.arm_bitreversal_f32||, CODE, READONLY, ALIGN=1

                  arm_bitreversal_f32 PROC
;;;63     		
;;;64     void arm_bitreversal_f32(
000000  b5f0              PUSH     {r4-r7,lr}
;;;65     float32_t * pSrc,
;;;66     uint16_t fftSize,
;;;67     uint16_t bitRevFactor,
;;;68     uint16_t * pBitRevTab)
;;;69     {
;;;70        uint16_t fftLenBy2, fftLenBy2p1;
;;;71        uint16_t i, j;
;;;72        float32_t in;
;;;73     
;;;74        /*  Initializations */
;;;75        j = 0u;
;;;76        fftLenBy2 = fftSize >> 1u;
;;;77        fftLenBy2p1 = (fftSize >> 1u) + 1u;
000002  2501              MOVS     r5,#1
000004  2400              MOVS     r4,#0                 ;75
000006  084e              LSRS     r6,r1,#1              ;76
000008  eb050e51          ADD      lr,r5,r1,LSR #1
;;;78     
;;;79        /* Bit Reversal Implementation */
;;;80        for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
00000c  4621              MOV      r1,r4
00000e  1eb5              SUBS     r5,r6,#2
000010  e047              B        |L1.162|
                  |L1.18|
;;;81        {
;;;82           if(i < j)
000012  42a1              CMP      r1,r4
000014  d22b              BCS      |L1.110|
;;;83           {
;;;84              /*  pSrc[i] <-> pSrc[j]; */
;;;85              in = pSrc[2u * i];
;;;86              pSrc[2u * i] = pSrc[2u * j];
000016  eb0007c4          ADD      r7,r0,r4,LSL #3
00001a  eb000cc1          ADD      r12,r0,r1,LSL #3      ;85
00001e  edd70a00          VLDR     s1,[r7,#0]
000022  ed9c0a00          VLDR     s0,[r12,#0]           ;85
000026  edcc0a00          VSTR     s1,[r12,#0]
;;;87              pSrc[2u * j] = in;
00002a  ed870a00          VSTR     s0,[r7,#0]
;;;88     
;;;89              /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;90              in = pSrc[(2u * i) + 1u];
;;;91              pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
00002e  edd70a01          VLDR     s1,[r7,#4]
000032  ed9c0a01          VLDR     s0,[r12,#4]           ;90
000036  edcc0a01          VSTR     s1,[r12,#4]
;;;92              pSrc[(2u * j) + 1u] = in;
00003a  ed870a01          VSTR     s0,[r7,#4]
;;;93     
;;;94              /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
;;;95              in = pSrc[2u * (i + fftLenBy2p1)];
00003e  eb01070e          ADD      r7,r1,lr
000042  eb000cc7          ADD      r12,r0,r7,LSL #3
;;;96              pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
000046  eb04070e          ADD      r7,r4,lr
00004a  eb0007c7          ADD      r7,r0,r7,LSL #3
00004e  ed9c0a00          VLDR     s0,[r12,#0]           ;95
000052  edd70a00          VLDR     s1,[r7,#0]
000056  edcc0a00          VSTR     s1,[r12,#0]
;;;97              pSrc[2u * (j + fftLenBy2p1)] = in;
00005a  ed870a00          VSTR     s0,[r7,#0]
;;;98     
;;;99              /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
;;;100             in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
;;;101             pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
00005e  edd70a01          VLDR     s1,[r7,#4]
000062  ed9c0a01          VLDR     s0,[r12,#4]           ;100
000066  edcc0a01          VSTR     s1,[r12,#4]
;;;102             pSrc[(2u * (j + fftLenBy2p1)) + 1u];
;;;103             pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
00006a  ed870a01          VSTR     s0,[r7,#4]
                  |L1.110|
;;;104    
;;;105          }
;;;106    
;;;107          /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;108          in = pSrc[2u * (i + 1u)];
;;;109          pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
00006e  4434              ADD      r4,r4,r6
000070  eb0007c1          ADD      r7,r0,r1,LSL #3       ;108
000074  eb0004c4          ADD      r4,r0,r4,LSL #3
000078  ed970a02          VLDR     s0,[r7,#8]            ;108
00007c  edd40a00          VLDR     s1,[r4,#0]
;;;110          pSrc[2u * (j + fftLenBy2)] = in;
;;;111    
;;;112          /*  pSrc[i+2u] <-> pSrc[j+2u] */
;;;113          in = pSrc[(2u * (i + 1u)) + 1u];
;;;114          pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
;;;115          pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
;;;116    
;;;117          /*  Reading the index for the bit reversal */
;;;118          j = *pBitRevTab;
;;;119    
;;;120          /*  Updating the bit reversal index depending on the fft length  */
;;;121          pBitRevTab += bitRevFactor;
000080  1c89              ADDS     r1,r1,#2
000082  edc70a02          VSTR     s1,[r7,#8]            ;109
000086  ed840a00          VSTR     s0,[r4,#0]            ;110
00008a  edd40a01          VLDR     s1,[r4,#4]            ;114
00008e  ed970a03          VLDR     s0,[r7,#0xc]          ;113
000092  edc70a03          VSTR     s1,[r7,#0xc]          ;114
000096  ed840a01          VSTR     s0,[r4,#4]            ;115
00009a  881c              LDRH     r4,[r3,#0]            ;118
00009c  eb030342          ADD      r3,r3,r2,LSL #1
0000a0  b289              UXTH     r1,r1                 ;80
                  |L1.162|
0000a2  42a9              CMP      r1,r5                 ;80
0000a4  d9b5              BLS      |L1.18|
;;;122       }
;;;123    }
0000a6  bdf0              POP      {r4-r7,pc}
;;;124    
                          ENDP


                          AREA ||i.arm_bitreversal_q15||, CODE, READONLY, ALIGN=1

                  arm_bitreversal_q15 PROC
;;;206    
;;;207    void arm_bitreversal_q15(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;208    q15_t * pSrc16,
;;;209    uint32_t fftLen,
;;;210    uint16_t bitRevFactor,
;;;211    uint16_t * pBitRevTab)
;;;212    {
000004  4692              MOV      r10,r2
;;;213       q31_t *pSrc = (q31_t *) pSrc16;
;;;214       q31_t in;
;;;215       uint32_t fftLenBy2, fftLenBy2p1;
;;;216       uint32_t i, j;
;;;217    
;;;218       /*  Initializations */
;;;219       j = 0u;
;;;220       fftLenBy2 = fftLen / 2u;
;;;221       fftLenBy2p1 = (fftLen / 2u) + 1u;
000006  2401              MOVS     r4,#1
000008  2200              MOVS     r2,#0                 ;219
00000a  084d              LSRS     r5,r1,#1              ;220
00000c  eb040651          ADD      r6,r4,r1,LSR #1
;;;222    
;;;223       /* Bit Reversal Implementation */
;;;224       for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
000010  4611              MOV      r1,r2
000012  1eac              SUBS     r4,r5,#2
000014  e023              B        |L2.94|
                  |L2.22|
;;;225       {
;;;226          if(i < j)
000016  4291              CMP      r1,r2
000018  d212              BCS      |L2.64|
;;;227          {
;;;228             /*  pSrc[i] <-> pSrc[j]; */
;;;229             /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;230             in = pSrc[i];
00001a  f8507021          LDR      r7,[r0,r1,LSL #2]
;;;231             pSrc[i] = pSrc[j];
00001e  f850c022          LDR      r12,[r0,r2,LSL #2]
000022  f840c021          STR      r12,[r0,r1,LSL #2]
;;;232             pSrc[j] = in;
000026  f8407022          STR      r7,[r0,r2,LSL #2]
;;;233    
;;;234             /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
;;;235             /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
;;;236             in = pSrc[i + fftLenBy2p1];
00002a  eb010c06          ADD      r12,r1,r6
;;;237             pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
00002e  1997              ADDS     r7,r2,r6
000030  f850902c          LDR      r9,[r0,r12,LSL #2]    ;236
000034  f8508027          LDR      r8,[r0,r7,LSL #2]
000038  f840802c          STR      r8,[r0,r12,LSL #2]
;;;238             pSrc[j + fftLenBy2p1] = in;
00003c  f8409027          STR      r9,[r0,r7,LSL #2]
                  |L2.64|
;;;239          }
;;;240    
;;;241          /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
;;;242          /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
;;;243          in = pSrc[i + 1u];
000040  eb000781          ADD      r7,r0,r1,LSL #2
;;;244          pSrc[i + 1u] = pSrc[j + fftLenBy2];
000044  442a              ADD      r2,r2,r5
000046  f8d7c004          LDR      r12,[r7,#4]
00004a  f8508022          LDR      r8,[r0,r2,LSL #2]
;;;245          pSrc[j + fftLenBy2] = in;
00004e  f8c78004          STR      r8,[r7,#4]
000052  f840c022          STR      r12,[r0,r2,LSL #2]
;;;246    
;;;247          /*  Reading the index for the bit reversal */
;;;248          j = *pBitRevTab;
000056  881a              LDRH     r2,[r3,#0]
;;;249    
;;;250          /*  Updating the bit reversal index depending on the fft length  */
;;;251          pBitRevTab += bitRevFactor;
000058  eb03034a          ADD      r3,r3,r10,LSL #1
00005c  1c89              ADDS     r1,r1,#2
                  |L2.94|
00005e  42a1              CMP      r1,r4                 ;224
000060  d9d9              BLS      |L2.22|
;;;252       }
;;;253    }
000062  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


                          AREA ||i.arm_bitreversal_q31||, CODE, READONLY, ALIGN=1

                  arm_bitreversal_q31 PROC
;;;135    
;;;136    void arm_bitreversal_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;137    q31_t * pSrc,
;;;138    uint32_t fftLen,
;;;139    uint16_t bitRevFactor,
;;;140    uint16_t * pBitRevTable)
;;;141    {
000004  4692              MOV      r10,r2
;;;142       uint32_t fftLenBy2, fftLenBy2p1, i, j;
;;;143       q31_t in;
;;;144    
;;;145       /*  Initializations      */
;;;146       j = 0u;
;;;147       fftLenBy2 = fftLen / 2u;
;;;148       fftLenBy2p1 = (fftLen / 2u) + 1u;
000006  2401              MOVS     r4,#1
000008  2200              MOVS     r2,#0                 ;146
00000a  084d              LSRS     r5,r1,#1              ;147
00000c  eb040651          ADD      r6,r4,r1,LSR #1
;;;149    
;;;150       /* Bit Reversal Implementation */
;;;151       for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
000010  4611              MOV      r1,r2
000012  1eac              SUBS     r4,r5,#2
000014  e045              B        |L3.162|
                  |L3.22|
;;;152       {
;;;153          if(i < j)
000016  4291              CMP      r1,r2
000018  d22a              BCS      |L3.112|
;;;154          {
;;;155             /*  pSrc[i] <-> pSrc[j]; */
;;;156             in = pSrc[2u * i];
00001a  f8507031          LDR      r7,[r0,r1,LSL #3]
;;;157             pSrc[2u * i] = pSrc[2u * j];
00001e  f850c032          LDR      r12,[r0,r2,LSL #3]
000022  f840c031          STR      r12,[r0,r1,LSL #3]
;;;158             pSrc[2u * j] = in;
000026  f8407032          STR      r7,[r0,r2,LSL #3]
;;;159    
;;;160             /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;161             in = pSrc[(2u * i) + 1u];
00002a  eb000cc1          ADD      r12,r0,r1,LSL #3
;;;162             pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
00002e  eb0007c2          ADD      r7,r0,r2,LSL #3
000032  f8dc9004          LDR      r9,[r12,#4]
000036  f8d78004          LDR      r8,[r7,#4]
;;;163             pSrc[(2u * j) + 1u] = in;
00003a  f8cc8004          STR      r8,[r12,#4]
;;;164    
;;;165             /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
;;;166             in = pSrc[2u * (i + fftLenBy2p1)];
00003e  f8c79004          STR      r9,[r7,#4]
000042  198f              ADDS     r7,r1,r6
;;;167             pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
000044  eb020c06          ADD      r12,r2,r6
000048  f8509037          LDR      r9,[r0,r7,LSL #3]     ;166
00004c  f850803c          LDR      r8,[r0,r12,LSL #3]
000050  f8408037          STR      r8,[r0,r7,LSL #3]
;;;168             pSrc[2u * (j + fftLenBy2p1)] = in;
000054  f840903c          STR      r9,[r0,r12,LSL #3]
;;;169    
;;;170             /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
;;;171             in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
000058  eb0007c7          ADD      r7,r0,r7,LSL #3
;;;172             pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
00005c  eb000ccc          ADD      r12,r0,r12,LSL #3
000060  f8d79004          LDR      r9,[r7,#4]
000064  f8dc8004          LDR      r8,[r12,#4]
;;;173             pSrc[(2u * (j + fftLenBy2p1)) + 1u];
;;;174             pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
000068  f8c78004          STR      r8,[r7,#4]
00006c  f8cc9004          STR      r9,[r12,#4]
                  |L3.112|
;;;175    
;;;176          }
;;;177    
;;;178          /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;179          in = pSrc[2u * (i + 1u)];
000070  eb0007c1          ADD      r7,r0,r1,LSL #3
;;;180          pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
000074  442a              ADD      r2,r2,r5
000076  f8d7c008          LDR      r12,[r7,#8]
00007a  f8508032          LDR      r8,[r0,r2,LSL #3]
;;;181          pSrc[2u * (j + fftLenBy2)] = in;
00007e  f8c78008          STR      r8,[r7,#8]
000082  f840c032          STR      r12,[r0,r2,LSL #3]
;;;182    
;;;183          /*  pSrc[i+2u] <-> pSrc[j+2u] */
;;;184          in = pSrc[(2u * (i + 1u)) + 1u];
;;;185          pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
000086  eb0002c2          ADD      r2,r0,r2,LSL #3
00008a  f8d7c00c          LDR      r12,[r7,#0xc]
00008e  f8d28004          LDR      r8,[r2,#4]
;;;186          pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
000092  f8c7800c          STR      r8,[r7,#0xc]
;;;187    
;;;188          /*  Reading the index for the bit reversal */
;;;189          j = *pBitRevTable;
000096  f8c2c004          STR      r12,[r2,#4]
00009a  881a              LDRH     r2,[r3,#0]
;;;190    
;;;191          /*  Updating the bit reversal index depending on the fft length */
;;;192          pBitRevTable += bitRevFactor;
00009c  eb03034a          ADD      r3,r3,r10,LSL #1
0000a0  1c89              ADDS     r1,r1,#2
                  |L3.162|
0000a2  42a1              CMP      r1,r4                 ;151
0000a4  d9b7              BLS      |L3.22|
;;;193       }
;;;194    }
0000a6  e8bd87f0          POP      {r4-r10,pc}
;;;195    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_bitreversal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_bitreversal_c_740a7790____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_bitreversal_c_740a7790____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_bitreversal_c_740a7790____REVSH|
#line 144
|__asm___17_arm_bitreversal_c_740a7790____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_bitreversal_c_740a7790____RRX|
#line 300
|__asm___17_arm_bitreversal_c_740a7790____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
