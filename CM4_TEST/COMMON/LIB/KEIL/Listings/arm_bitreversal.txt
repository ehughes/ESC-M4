; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_bitreversal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_bitreversal.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_bitreversal.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_bitreversal.c]
                          THUMB

                          AREA ||i.arm_bitreversal_f32||, CODE, READONLY, ALIGN=1

                  arm_bitreversal_f32 PROC
;;;52     
;;;53     void arm_bitreversal_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;54     float32_t * pSrc,
;;;55     uint16_t fftSize,
;;;56     uint16_t bitRevFactor,
;;;57     uint16_t * pBitRevTab)
;;;58     {
;;;59        uint16_t fftLenBy2, fftLenBy2p1;
;;;60        uint16_t i, j;
;;;61        float32_t in;
;;;62     
;;;63        /*  Initializations */
;;;64        j = 0u;
000004  2400              MOVS     r4,#0
;;;65        fftLenBy2 = fftSize >> 1u;
000006  ea4f0851          LSR      r8,r1,#1
;;;66        fftLenBy2p1 = (fftSize >> 1u) + 1u;
00000a  2701              MOVS     r7,#1
00000c  eb070c51          ADD      r12,r7,r1,LSR #1
;;;67     
;;;68        /* Bit Reversal Implementation */
;;;69        for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
000010  2100              MOVS     r1,#0
000012  f1a80a02          SUB      r10,r8,#2
000016  e061              B        |L1.220|
                  |L1.24|
;;;70        {
;;;71           if(i < j)
000018  42a1              CMP      r1,r4
00001a  d23b              BCS      |L1.148|
;;;72           {
;;;73              /*  pSrc[i] <-> pSrc[j]; */
;;;74              in = pSrc[2u * i];
00001c  eb0005c1          ADD      r5,r0,r1,LSL #3
000020  ed950a00          VLDR     s0,[r5,#0]
;;;75              pSrc[2u * i] = pSrc[2u * j];
000024  eb0006c4          ADD      r6,r0,r4,LSL #3
000028  edd60a00          VLDR     s1,[r6,#0]
00002c  edc50a00          VSTR     s1,[r5,#0]
;;;76              pSrc[2u * j] = in;
000030  ed860a00          VSTR     s0,[r6,#0]
;;;77     
;;;78              /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;79              in = pSrc[(2u * i) + 1u];
000034  eb070541          ADD      r5,r7,r1,LSL #1
000038  eb000585          ADD      r5,r0,r5,LSL #2
00003c  ed950a00          VLDR     s0,[r5,#0]
;;;80              pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
000040  eb070644          ADD      r6,r7,r4,LSL #1
000044  eb000686          ADD      r6,r0,r6,LSL #2
000048  edd60a00          VLDR     s1,[r6,#0]
00004c  edc50a00          VSTR     s1,[r5,#0]
;;;81              pSrc[(2u * j) + 1u] = in;
000050  ed860a00          VSTR     s0,[r6,#0]
;;;82     
;;;83              /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
;;;84              in = pSrc[2u * (i + fftLenBy2p1)];
000054  eb01090c          ADD      r9,r1,r12
000058  eb000bc9          ADD      r11,r0,r9,LSL #3
00005c  ed9b0a00          VLDR     s0,[r11,#0]
;;;85              pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
000060  eb04050c          ADD      r5,r4,r12
000064  eb0006c5          ADD      r6,r0,r5,LSL #3
000068  edd60a00          VLDR     s1,[r6,#0]
00006c  edcb0a00          VSTR     s1,[r11,#0]
;;;86              pSrc[2u * (j + fftLenBy2p1)] = in;
000070  ed860a00          VSTR     s0,[r6,#0]
;;;87     
;;;88              /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
;;;89              in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
000074  eb070649          ADD      r6,r7,r9,LSL #1
000078  eb000686          ADD      r6,r0,r6,LSL #2
00007c  ed960a00          VLDR     s0,[r6,#0]
;;;90              pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
000080  eb070545          ADD      r5,r7,r5,LSL #1
000084  eb000585          ADD      r5,r0,r5,LSL #2
000088  edd50a00          VLDR     s1,[r5,#0]
00008c  edc60a00          VSTR     s1,[r6,#0]
;;;91              pSrc[(2u * (j + fftLenBy2p1)) + 1u];
;;;92              pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
000090  ed850a00          VSTR     s0,[r5,#0]
                  |L1.148|
;;;93     
;;;94           }
;;;95     
;;;96           /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;97           in = pSrc[2u * (i + 1u)];
000094  1c4d              ADDS     r5,r1,#1
000096  46a9              MOV      r9,r5
000098  eb0005c5          ADD      r5,r0,r5,LSL #3
00009c  ed950a00          VLDR     s0,[r5,#0]
;;;98           pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
0000a0  4444              ADD      r4,r4,r8
0000a2  eb0006c4          ADD      r6,r0,r4,LSL #3
0000a6  edd60a00          VLDR     s1,[r6,#0]
0000aa  edc50a00          VSTR     s1,[r5,#0]
;;;99           pSrc[2u * (j + fftLenBy2)] = in;
0000ae  ed860a00          VSTR     s0,[r6,#0]
;;;100    
;;;101          /*  pSrc[i+2u] <-> pSrc[j+2u] */
;;;102          in = pSrc[(2u * (i + 1u)) + 1u];
0000b2  eb070549          ADD      r5,r7,r9,LSL #1
0000b6  eb000585          ADD      r5,r0,r5,LSL #2
0000ba  ed950a00          VLDR     s0,[r5,#0]
;;;103          pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
0000be  eb070444          ADD      r4,r7,r4,LSL #1
0000c2  eb000484          ADD      r4,r0,r4,LSL #2
0000c6  edd40a00          VLDR     s1,[r4,#0]
0000ca  edc50a00          VSTR     s1,[r5,#0]
;;;104          pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
0000ce  ed840a00          VSTR     s0,[r4,#0]
;;;105    
;;;106          /*  Reading the index for the bit reversal */
;;;107          j = *pBitRevTab;
0000d2  881c              LDRH     r4,[r3,#0]
;;;108    
;;;109          /*  Updating the bit reversal index depending on the fft length  */
;;;110          pBitRevTab += bitRevFactor;
0000d4  eb030342          ADD      r3,r3,r2,LSL #1
0000d8  1c89              ADDS     r1,r1,#2              ;69
0000da  b289              UXTH     r1,r1                 ;69
                  |L1.220|
0000dc  4551              CMP      r1,r10                ;69
0000de  d99b              BLS      |L1.24|
;;;111       }
;;;112    }
0000e0  e8bd8ff0          POP      {r4-r11,pc}
;;;113    
                          ENDP


                          AREA ||i.arm_bitreversal_q15||, CODE, READONLY, ALIGN=1

                  arm_bitreversal_q15 PROC
;;;195    
;;;196    void arm_bitreversal_q15(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;197    q15_t * pSrc16,
;;;198    uint32_t fftLen,
;;;199    uint16_t bitRevFactor,
;;;200    uint16_t * pBitRevTab)
;;;201    {
;;;202       q31_t *pSrc = (q31_t *) pSrc16;
;;;203       q31_t in;
;;;204       uint32_t fftLenBy2, fftLenBy2p1;
;;;205       uint32_t i, j;
;;;206    
;;;207       /*  Initializations */
;;;208       j = 0u;
000004  2400              MOVS     r4,#0
;;;209       fftLenBy2 = fftLen / 2u;
000006  ea4f0c51          LSR      r12,r1,#1
;;;210       fftLenBy2p1 = (fftLen / 2u) + 1u;
00000a  2501              MOVS     r5,#1
00000c  eb050751          ADD      r7,r5,r1,LSR #1
;;;211    
;;;212       /* Bit Reversal Implementation */
;;;213       for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
000010  2100              MOVS     r1,#0
000012  f1ac0902          SUB      r9,r12,#2
000016  e021              B        |L2.92|
                  |L2.24|
;;;214       {
;;;215          if(i < j)
000018  42a1              CMP      r1,r4
00001a  d211              BCS      |L2.64|
;;;216          {
;;;217             /*  pSrc[i] <-> pSrc[j]; */
;;;218             /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;219             in = pSrc[i];
00001c  f8505021          LDR      r5,[r0,r1,LSL #2]
;;;220             pSrc[i] = pSrc[j];
000020  f8506024          LDR      r6,[r0,r4,LSL #2]
000024  f8406021          STR      r6,[r0,r1,LSL #2]
;;;221             pSrc[j] = in;
000028  f8405024          STR      r5,[r0,r4,LSL #2]
;;;222    
;;;223             /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
;;;224             /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
;;;225             in = pSrc[i + fftLenBy2p1];
00002c  19ce              ADDS     r6,r1,r7
00002e  f8508026          LDR      r8,[r0,r6,LSL #2]
;;;226             pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
000032  19e5              ADDS     r5,r4,r7
000034  f850a025          LDR      r10,[r0,r5,LSL #2]
000038  f840a026          STR      r10,[r0,r6,LSL #2]
;;;227             pSrc[j + fftLenBy2p1] = in;
00003c  f8408025          STR      r8,[r0,r5,LSL #2]
                  |L2.64|
;;;228          }
;;;229    
;;;230          /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
;;;231          /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
;;;232          in = pSrc[i + 1u];
000040  1c4d              ADDS     r5,r1,#1
000042  f8506025          LDR      r6,[r0,r5,LSL #2]
;;;233          pSrc[i + 1u] = pSrc[j + fftLenBy2];
000046  4464              ADD      r4,r4,r12
000048  f8508024          LDR      r8,[r0,r4,LSL #2]
00004c  f8408025          STR      r8,[r0,r5,LSL #2]
;;;234          pSrc[j + fftLenBy2] = in;
000050  f8406024          STR      r6,[r0,r4,LSL #2]
;;;235    
;;;236          /*  Reading the index for the bit reversal */
;;;237          j = *pBitRevTab;
000054  881c              LDRH     r4,[r3,#0]
;;;238    
;;;239          /*  Updating the bit reversal index depending on the fft length  */
;;;240          pBitRevTab += bitRevFactor;
000056  eb030342          ADD      r3,r3,r2,LSL #1
00005a  1c89              ADDS     r1,r1,#2              ;213
                  |L2.92|
00005c  4549              CMP      r1,r9                 ;213
00005e  d9db              BLS      |L2.24|
;;;241       }
;;;242    }
000060  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


                          AREA ||i.arm_bitreversal_q31||, CODE, READONLY, ALIGN=1

                  arm_bitreversal_q31 PROC
;;;124    
;;;125    void arm_bitreversal_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;126    q31_t * pSrc,
;;;127    uint32_t fftLen,
;;;128    uint16_t bitRevFactor,
;;;129    uint16_t * pBitRevTable)
;;;130    {
;;;131       uint32_t fftLenBy2, fftLenBy2p1, i, j;
;;;132       q31_t in;
;;;133    
;;;134       /*  Initializations      */
;;;135       j = 0u;
000004  2400              MOVS     r4,#0
;;;136       fftLenBy2 = fftLen / 2u;
000006  ea4f0851          LSR      r8,r1,#1
;;;137       fftLenBy2p1 = (fftLen / 2u) + 1u;
00000a  2701              MOVS     r7,#1
00000c  eb070c51          ADD      r12,r7,r1,LSR #1
;;;138    
;;;139       /* Bit Reversal Implementation */
;;;140       for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
000010  2100              MOVS     r1,#0
000012  f1a80a02          SUB      r10,r8,#2
000016  e047              B        |L3.168|
                  |L3.24|
;;;141       {
;;;142          if(i < j)
000018  42a1              CMP      r1,r4
00001a  d22b              BCS      |L3.116|
;;;143          {
;;;144             /*  pSrc[i] <-> pSrc[j]; */
;;;145             in = pSrc[2u * i];
00001c  f8505031          LDR      r5,[r0,r1,LSL #3]
;;;146             pSrc[2u * i] = pSrc[2u * j];
000020  f8506034          LDR      r6,[r0,r4,LSL #3]
000024  f8406031          STR      r6,[r0,r1,LSL #3]
;;;147             pSrc[2u * j] = in;
000028  f8405034          STR      r5,[r0,r4,LSL #3]
;;;148    
;;;149             /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;150             in = pSrc[(2u * i) + 1u];
00002c  eb070541          ADD      r5,r7,r1,LSL #1
000030  f8509025          LDR      r9,[r0,r5,LSL #2]
;;;151             pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
000034  eb070644          ADD      r6,r7,r4,LSL #1
000038  f850b026          LDR      r11,[r0,r6,LSL #2]
00003c  f840b025          STR      r11,[r0,r5,LSL #2]
;;;152             pSrc[(2u * j) + 1u] = in;
000040  f8409026          STR      r9,[r0,r6,LSL #2]
;;;153    
;;;154             /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
;;;155             in = pSrc[2u * (i + fftLenBy2p1)];
000044  eb01050c          ADD      r5,r1,r12
000048  f8509035          LDR      r9,[r0,r5,LSL #3]
;;;156             pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
00004c  eb04060c          ADD      r6,r4,r12
000050  f850b036          LDR      r11,[r0,r6,LSL #3]
000054  f840b035          STR      r11,[r0,r5,LSL #3]
;;;157             pSrc[2u * (j + fftLenBy2p1)] = in;
000058  f8409036          STR      r9,[r0,r6,LSL #3]
;;;158    
;;;159             /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
;;;160             in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
00005c  eb070545          ADD      r5,r7,r5,LSL #1
000060  f8509025          LDR      r9,[r0,r5,LSL #2]
;;;161             pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
000064  eb070646          ADD      r6,r7,r6,LSL #1
000068  f850b026          LDR      r11,[r0,r6,LSL #2]
00006c  f840b025          STR      r11,[r0,r5,LSL #2]
;;;162             pSrc[(2u * (j + fftLenBy2p1)) + 1u];
;;;163             pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
000070  f8409026          STR      r9,[r0,r6,LSL #2]
                  |L3.116|
;;;164    
;;;165          }
;;;166    
;;;167          /*  pSrc[i+1u] <-> pSrc[j+1u] */
;;;168          in = pSrc[2u * (i + 1u)];
000074  1c4d              ADDS     r5,r1,#1
000076  f8506035          LDR      r6,[r0,r5,LSL #3]
;;;169          pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
00007a  4444              ADD      r4,r4,r8
00007c  f8509034          LDR      r9,[r0,r4,LSL #3]
000080  f8409035          STR      r9,[r0,r5,LSL #3]
;;;170          pSrc[2u * (j + fftLenBy2)] = in;
000084  f8406034          STR      r6,[r0,r4,LSL #3]
;;;171    
;;;172          /*  pSrc[i+2u] <-> pSrc[j+2u] */
;;;173          in = pSrc[(2u * (i + 1u)) + 1u];
000088  eb070545          ADD      r5,r7,r5,LSL #1
00008c  f8506025          LDR      r6,[r0,r5,LSL #2]
;;;174          pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
000090  eb070444          ADD      r4,r7,r4,LSL #1
000094  f8509024          LDR      r9,[r0,r4,LSL #2]
000098  f8409025          STR      r9,[r0,r5,LSL #2]
;;;175          pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
00009c  f8406024          STR      r6,[r0,r4,LSL #2]
;;;176    
;;;177          /*  Reading the index for the bit reversal */
;;;178          j = *pBitRevTable;
0000a0  881c              LDRH     r4,[r3,#0]
;;;179    
;;;180          /*  Updating the bit reversal index depending on the fft length */
;;;181          pBitRevTable += bitRevFactor;
0000a2  eb030342          ADD      r3,r3,r2,LSL #1
0000a6  1c89              ADDS     r1,r1,#2              ;140
                  |L3.168|
0000a8  4551              CMP      r1,r10                ;140
0000aa  d9b5              BLS      |L3.24|
;;;182       }
;;;183    }
0000ac  e8bd8ff0          POP      {r4-r11,pc}
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_bitreversal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_bitreversal_c_740a7790____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_bitreversal_c_740a7790____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_bitreversal_c_740a7790____REVSH|
#line 144
|__asm___17_arm_bitreversal_c_740a7790____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_bitreversal_c_740a7790____RRX|
#line 300
|__asm___17_arm_bitreversal_c_740a7790____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
