; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_negate_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_negate_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_negate_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_negate_q7.c]
                          THUMB

                          AREA ||i.arm_negate_q7||, CODE, READONLY, ALIGN=1

                  arm_negate_q7 PROC
;;;64     
;;;65     void arm_negate_q7(
000000  b530              PUSH     {r4,r5,lr}
;;;66       q7_t * pSrc,
;;;67       q7_t * pDst,
;;;68       uint32_t blockSize)
;;;69     {
;;;70       uint32_t blkCnt;                               /* loop counter */
;;;71       q7_t in;
;;;72     
;;;73     #ifndef ARM_MATH_CM0_FAMILY
;;;74     
;;;75     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;76       q31_t input;                                   /* Input values1-4 */
;;;77       q31_t zero = 0x00000000;
000002  2500              MOVS     r5,#0
;;;78     
;;;79     
;;;80       /*loop Unrolling */
;;;81       blkCnt = blockSize >> 2u;
000004  0893              LSRS     r3,r2,#2
000006  e006              B        |L1.22|
                  |L1.8|
;;;82     
;;;83       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;84        ** a second loop below computes the remaining 1 to 3 samples. */
;;;85       while(blkCnt > 0u)
;;;86       {
;;;87         /* C = -A */
;;;88         /* Read four inputs */
;;;89         input = *__SIMD32(pSrc)++;
000008  f8504b04          LDR      r4,[r0],#4
;;;90     
;;;91         /* Store the Negated results in the destination buffer in a single cycle by packing the results */
;;;92         *__SIMD32(pDst)++ = __QSUB8(zero, input);
00000c  fac5f414          QSUB8    r4,r5,r4
000010  f8414b04          STR      r4,[r1],#4
;;;93     
;;;94         /* Decrement the loop counter */
;;;95         blkCnt--;
000014  1e5b              SUBS     r3,r3,#1
                  |L1.22|
000016  2b00              CMP      r3,#0                 ;85
000018  d1f6              BNE      |L1.8|
;;;96       }
;;;97     
;;;98       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;99        ** No loop unrolling is used. */
;;;100      blkCnt = blockSize % 0x4u;
00001a  f0020203          AND      r2,r2,#3
;;;101    
;;;102    #else
;;;103    
;;;104      /* Run the below code for Cortex-M0 */
;;;105    
;;;106      /* Initialize blkCnt with number of samples */
;;;107      blkCnt = blockSize;
;;;108    
;;;109    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;110    
;;;111      while(blkCnt > 0u)
00001e  e008              B        |L1.50|
                  |L1.32|
;;;112      {
;;;113        /* C = -A */
;;;114        /* Negate and then store the results in the destination buffer. */ \
;;;115          in = *pSrc++;
000020  f9103b01          LDRSB    r3,[r0],#1
;;;116        *pDst++ = (in == (q7_t) 0x80) ? 0x7f : -in;
000024  f1130f80          CMN      r3,#0x80
000028  d006              BEQ      |L1.56|
00002a  425b              RSBS     r3,r3,#0
                  |L1.44|
00002c  f8013b01          STRB     r3,[r1],#1
;;;117    
;;;118        /* Decrement the loop counter */
;;;119        blkCnt--;
000030  1e52              SUBS     r2,r2,#1
                  |L1.50|
000032  2a00              CMP      r2,#0                 ;111
000034  d1f4              BNE      |L1.32|
;;;120      }
;;;121    }
000036  bd30              POP      {r4,r5,pc}
                  |L1.56|
000038  237f              MOVS     r3,#0x7f              ;116
00003a  e7f7              B        |L1.44|
;;;122    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_negate_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_negate_q7_c_afffc3be____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_negate_q7_c_afffc3be____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_negate_q7_c_afffc3be____REVSH|
#line 144
|__asm___15_arm_negate_q7_c_afffc3be____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_negate_q7_c_afffc3be____RRX|
#line 300
|__asm___15_arm_negate_q7_c_afffc3be____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
