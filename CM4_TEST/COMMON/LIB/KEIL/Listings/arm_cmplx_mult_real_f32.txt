; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mult_real_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mult_real_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mult_real_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mult_real_f32.c]
                          THUMB

                          AREA ||i.arm_cmplx_mult_real_f32||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mult_real_f32 PROC
;;;84     
;;;85     void arm_cmplx_mult_real_f32(
000000  b510              PUSH     {r4,lr}
;;;86       float32_t * pSrcCmplx,
;;;87       float32_t * pSrcReal,
;;;88       float32_t * pCmplxDst,
;;;89       uint32_t numSamples)
;;;90     {
;;;91       float32_t in;                                  /* Temporary variable to store input value */
;;;92       uint32_t blkCnt;                               /* loop counters */
;;;93     
;;;94     #ifndef ARM_MATH_CM0_FAMILY
;;;95     
;;;96       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;97       float32_t inA1, inA2, inA3, inA4;              /* Temporary variables to hold input data */
;;;98       float32_t inA5, inA6, inA7, inA8;              /* Temporary variables to hold input data */
;;;99       float32_t inB1, inB2, inB3, inB4;              /* Temporary variables to hold input data */
;;;100      float32_t out1, out2, out3, out4;              /* Temporary variables to hold output data */
;;;101      float32_t out5, out6, out7, out8;              /* Temporary variables to hold output data */
;;;102    
;;;103      /* loop Unrolling */
;;;104      blkCnt = numSamples >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e03a              B        |L1.124|
000006  bf00              NOP                            ;90
                  |L1.8|
000008  ec901a02          VLDM     r0,{s2-s3}            ;90
;;;105    
;;;106      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;107       ** a second loop below computes the remaining 1 to 3 samples. */
;;;108      while(blkCnt > 0u)
;;;109      {
;;;110        /* C[2 * i] = A[2 * i] * B[i].            */
;;;111        /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;112        /* read input from complex input buffer */
;;;113        inA1 = pSrcCmplx[0];
;;;114        inA2 = pSrcCmplx[1];
;;;115        /* read input from real input buffer */
;;;116        inB1 = pSrcReal[0];
00000c  ed910a00          VLDR     s0,[r1,#0]
;;;117    
;;;118        /* read input from complex input buffer */
;;;119        inA3 = pSrcCmplx[2];
000010  edd00a02          VLDR     s1,[r0,#8]
;;;120    
;;;121        /* multiply complex buffer real input with real buffer input */
;;;122        out1 = inA1 * inB1;
;;;123    
;;;124        /* read input from complex input buffer */
;;;125        inA4 = pSrcCmplx[3];
000014  ed903a03          VLDR     s6,[r0,#0xc]
;;;126    
;;;127        /* multiply complex buffer imaginary input with real buffer input */
;;;128        out2 = inA2 * inB1;
;;;129    
;;;130        /* read input from real input buffer */
;;;131        inB2 = pSrcReal[1];
;;;132        /* read input from complex input buffer */
;;;133        inA5 = pSrcCmplx[4];
000018  ed904a04          VLDR     s8,[r0,#0x10]
00001c  ee211a00          VMUL.F32 s2,s2,s0              ;122
000020  ee611a80          VMUL.F32 s3,s3,s0              ;128
000024  ed910a01          VLDR     s0,[r1,#4]            ;131
;;;134    
;;;135        /* multiply complex buffer real input with real buffer input */
;;;136        out3 = inA3 * inB2;
;;;137    
;;;138        /* read input from complex input buffer */
;;;139        inA6 = pSrcCmplx[5];
000028  edd02a05          VLDR     s5,[r0,#0x14]
00002c  ee202a80          VMUL.F32 s4,s1,s0              ;136
;;;140        /* read input from real input buffer */
;;;141        inB3 = pSrcReal[2];
000030  edd10a02          VLDR     s1,[r1,#8]
;;;142    
;;;143        /* multiply complex buffer imaginary input with real buffer input */
;;;144        out4 = inA4 * inB2;
000034  ee633a00          VMUL.F32 s7,s6,s0
;;;145    
;;;146        /* read input from complex input buffer */
;;;147        inA7 = pSrcCmplx[6];
000038  ed903a06          VLDR     s6,[r0,#0x18]
;;;148    
;;;149        /* multiply complex buffer real input with real buffer input */
;;;150        out5 = inA5 * inB3;
00003c  ee644a20          VMUL.F32 s9,s8,s1
;;;151    
;;;152        /* read input from complex input buffer */
;;;153        inA8 = pSrcCmplx[7];
000040  ed904a07          VLDR     s8,[r0,#0x1c]
;;;154    
;;;155        /* multiply complex buffer imaginary input with real buffer input */
;;;156        out6 = inA6 * inB3;
;;;157    
;;;158        /* read input from real input buffer */
;;;159        inB4 = pSrcReal[3];
000044  ed910a03          VLDR     s0,[r1,#0xc]
;;;160    
;;;161        /* store result to destination bufer */
;;;162        pCmplxDst[0] = out1;
000048  ed821a00          VSTR     s2,[r2,#0]
;;;163    
;;;164        /* multiply complex buffer real input with real buffer input */
;;;165        out7 = inA7 * inB4;
;;;166    
;;;167        /* store result to destination bufer */
;;;168        pCmplxDst[1] = out2;
00004c  edc21a01          VSTR     s3,[r2,#4]
000050  ee620aa0          VMUL.F32 s1,s5,s1              ;156
;;;169    
;;;170        /* multiply complex buffer imaginary input with real buffer input */
;;;171        out8 = inA8 * inB4;
;;;172    
;;;173        /* store result to destination bufer */
;;;174        pCmplxDst[2] = out3;
000054  ed822a02          VSTR     s4,[r2,#8]
000058  ee231a00          VMUL.F32 s2,s6,s0              ;165
;;;175        pCmplxDst[3] = out4;
00005c  edc23a03          VSTR     s7,[r2,#0xc]
000060  ee240a00          VMUL.F32 s0,s8,s0              ;171
;;;176        pCmplxDst[4] = out5;
000064  edc24a04          VSTR     s9,[r2,#0x10]
;;;177    
;;;178        /* incremnet complex input buffer by 8 to process next samples */
;;;179        pSrcCmplx += 8u;
;;;180    
;;;181        /* store result to destination bufer */
;;;182        pCmplxDst[5] = out6;
000068  edc20a05          VSTR     s1,[r2,#0x14]
;;;183    
;;;184        /* increment real input buffer by 4 to process next samples */
;;;185        pSrcReal += 4u;
;;;186    
;;;187        /* store result to destination bufer */
;;;188        pCmplxDst[6] = out7;
00006c  ed821a06          VSTR     s2,[r2,#0x18]
;;;189        pCmplxDst[7] = out8;
000070  ed820a07          VSTR     s0,[r2,#0x1c]
000074  3020              ADDS     r0,r0,#0x20
000076  3110              ADDS     r1,r1,#0x10
000078  3220              ADDS     r2,r2,#0x20
00007a  1e64              SUBS     r4,r4,#1
                  |L1.124|
00007c  2c00              CMP      r4,#0                 ;108
00007e  d1c3              BNE      |L1.8|
;;;190    
;;;191        /* increment destination buffer by 8 to process next sampels */
;;;192        pCmplxDst += 8u;
;;;193    
;;;194        /* Decrement the numSamples loop counter */
;;;195        blkCnt--;
;;;196      }
;;;197    
;;;198      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
;;;199       ** No loop unrolling is used. */
;;;200      blkCnt = numSamples % 0x4u;
000080  f0030303          AND      r3,r3,#3
;;;201    
;;;202    #else
;;;203    
;;;204      /* Run the below code for Cortex-M0 */
;;;205      blkCnt = numSamples;
;;;206    
;;;207    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;208    
;;;209      while(blkCnt > 0u)
000084  e011              B        |L1.170|
;;;210      {
;;;211        /* C[2 * i] = A[2 * i] * B[i].            */
;;;212        /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;213        in = *pSrcReal++;
000086  bf00              NOP      
                  |L1.136|
000088  ecb10a01          VLDM     r1!,{s0}
;;;214        /* store the result in the destination buffer. */
;;;215        *pCmplxDst++ = (*pSrcCmplx++) * (in);
00008c  edd00a00          VLDR     s1,[r0,#0]
000090  ee600a80          VMUL.F32 s1,s1,s0
000094  edc20a00          VSTR     s1,[r2,#0]
;;;216        *pCmplxDst++ = (*pSrcCmplx++) * (in);
000098  edd00a01          VLDR     s1,[r0,#4]
00009c  3008              ADDS     r0,r0,#8
00009e  ee200a80          VMUL.F32 s0,s1,s0
0000a2  ed820a01          VSTR     s0,[r2,#4]
0000a6  3208              ADDS     r2,r2,#8
0000a8  1e5b              SUBS     r3,r3,#1
                  |L1.170|
0000aa  2b00              CMP      r3,#0                 ;209
0000ac  d1ec              BNE      |L1.136|
;;;217    
;;;218        /* Decrement the numSamples loop counter */
;;;219        blkCnt--;
;;;220      }
;;;221    }
0000ae  bd10              POP      {r4,pc}
;;;222    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mult_real_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_f32_c_615c5a73____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___25_arm_cmplx_mult_real_f32_c_615c5a73____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_f32_c_615c5a73____REVSH|
#line 144
|__asm___25_arm_cmplx_mult_real_f32_c_615c5a73____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_f32_c_615c5a73____RRX|
#line 300
|__asm___25_arm_cmplx_mult_real_f32_c_615c5a73____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
