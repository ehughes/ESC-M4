; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_offset_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_offset_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_offset_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_offset_q15.c]
                          THUMB

                          AREA ||i.arm_offset_q15||, CODE, READONLY, ALIGN=1

                  arm_offset_q15 PROC
;;;65     
;;;66     void arm_offset_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q15_t * pSrc,
;;;68       q15_t offset,
;;;69       q15_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q31_t offset_packed;                           /* Offset packed to 32 bit */
;;;78     
;;;79     
;;;80       /*loop Unrolling */
;;;81       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
;;;82     
;;;83       /* Offset is packed to 32 bit in order to use SIMD32 for addition */
;;;84       offset_packed = __PKHBT(offset, offset, 16);
000004  eac14501          PKHBT    r5,r1,r1,LSL #16
000008  e00a              B        |L1.32|
                  |L1.10|
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C = A + offset */
;;;91         /* Add offset and then store the results in the destination buffer, 2 samples at a time. */
;;;92         *__SIMD32(pDst)++ = __QADD16(*__SIMD32(pSrc)++, offset_packed);
00000a  6806              LDR      r6,[r0,#0]
00000c  fa96f615          QADD16   r6,r6,r5
000010  6016              STR      r6,[r2,#0]
;;;93         *__SIMD32(pDst)++ = __QADD16(*__SIMD32(pSrc)++, offset_packed);
000012  6846              LDR      r6,[r0,#4]
000014  3008              ADDS     r0,r0,#8
000016  fa96f615          QADD16   r6,r6,r5
00001a  6056              STR      r6,[r2,#4]
00001c  3208              ADDS     r2,r2,#8
;;;94     
;;;95         /* Decrement the loop counter */
;;;96         blkCnt--;
00001e  1e64              SUBS     r4,r4,#1
                  |L1.32|
000020  2c00              CMP      r4,#0                 ;88
000022  d1f2              BNE      |L1.10|
;;;97       }
;;;98     
;;;99       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;100       ** No loop unrolling is used. */
;;;101      blkCnt = blockSize % 0x4u;
000024  f0030303          AND      r3,r3,#3
;;;102    
;;;103      while(blkCnt > 0u)
000028  e006              B        |L1.56|
                  |L1.42|
;;;104      {
;;;105        /* C = A + offset */
;;;106        /* Add offset and then store the results in the destination buffer. */
;;;107        *pDst++ = (q15_t) __QADD16(*pSrc++, offset);
00002a  f9304b02          LDRSH    r4,[r0],#2
00002e  fa94f411          QADD16   r4,r4,r1
000032  f8224b02          STRH     r4,[r2],#2
;;;108    
;;;109        /* Decrement the loop counter */
;;;110        blkCnt--;
000036  1e5b              SUBS     r3,r3,#1
                  |L1.56|
000038  2b00              CMP      r3,#0                 ;103
00003a  d1f6              BNE      |L1.42|
;;;111      }
;;;112    
;;;113    #else
;;;114    
;;;115      /* Run the below code for Cortex-M0 */
;;;116    
;;;117      /* Initialize blkCnt with number of samples */
;;;118      blkCnt = blockSize;
;;;119    
;;;120      while(blkCnt > 0u)
;;;121      {
;;;122        /* C = A + offset */
;;;123        /* Add offset and then store the results in the destination buffer. */
;;;124        *pDst++ = (q15_t) __SSAT(((q31_t) * pSrc++ + offset), 16);
;;;125    
;;;126        /* Decrement the loop counter */
;;;127        blkCnt--;
;;;128      }
;;;129    
;;;130    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;131    
;;;132    }
00003c  bd70              POP      {r4-r6,pc}
;;;133    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_offset_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_offset_q15_c_813358ee____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_offset_q15_c_813358ee____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_offset_q15_c_813358ee____REVSH|
#line 144
|__asm___16_arm_offset_q15_c_813358ee____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_offset_q15_c_813358ee____RRX|
#line 300
|__asm___16_arm_offset_q15_c_813358ee____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
