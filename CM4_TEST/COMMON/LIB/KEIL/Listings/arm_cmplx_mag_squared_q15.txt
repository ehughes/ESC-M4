; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_squared_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_squared_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mag_squared_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_squared_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_squared_q15||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mag_squared_q15 PROC
;;;63     
;;;64     void arm_cmplx_mag_squared_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;65       q15_t * pSrc,
;;;66       q15_t * pDst,
;;;67       uint32_t numSamples)
;;;68     {
;;;69       q31_t acc0, acc1;                              /* Accumulators */
;;;70     
;;;71     #ifndef ARM_MATH_CM0_FAMILY
;;;72     
;;;73       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;74       uint32_t blkCnt;                               /* loop counter */
;;;75       q31_t in1, in2, in3, in4;
;;;76       q31_t acc2, acc3;
;;;77     
;;;78       /*loop Unrolling */
;;;79       blkCnt = numSamples >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e01d              B        |L1.66|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;86         in1 = *__SIMD32(pSrc)++;
000006  bf00              NOP      
                  |L1.8|
000008  f8505b04          LDR      r5,[r0],#4
;;;87         in2 = *__SIMD32(pSrc)++;
00000c  f8504b04          LDR      r4,[r0],#4
;;;88         in3 = *__SIMD32(pSrc)++;
000010  f8506b08          LDR      r6,[r0],#8
;;;89         in4 = *__SIMD32(pSrc)++;
000014  f8507c04          LDR      r7,[r0,#-4]
;;;90     
;;;91         acc0 = __SMUAD(in1, in1);
000018  fb25f505          SMUAD    r5,r5,r5
;;;92         acc1 = __SMUAD(in2, in2);
00001c  fb24f404          SMUAD    r4,r4,r4
;;;93         acc2 = __SMUAD(in3, in3);
000020  fb26f606          SMUAD    r6,r6,r6
;;;94         acc3 = __SMUAD(in4, in4);
000024  fb27f707          SMUAD    r7,r7,r7
;;;95     
;;;96         /* store the result in 3.13 format in the destination buffer. */
;;;97         *pDst++ = (q15_t) (acc0 >> 17);
000028  146d              ASRS     r5,r5,#17
00002a  f8215b02          STRH     r5,[r1],#2
;;;98         *pDst++ = (q15_t) (acc1 >> 17);
00002e  1464              ASRS     r4,r4,#17
000030  f8214b02          STRH     r4,[r1],#2
;;;99         *pDst++ = (q15_t) (acc2 >> 17);
000034  1474              ASRS     r4,r6,#17
000036  f8214b04          STRH     r4,[r1],#4
;;;100        *pDst++ = (q15_t) (acc3 >> 17);
00003a  147c              ASRS     r4,r7,#17
00003c  f8214c02          STRH     r4,[r1,#-2]
000040  1e5b              SUBS     r3,r3,#1
                  |L1.66|
000042  2b00              CMP      r3,#0                 ;83
000044  d1e0              BNE      |L1.8|
;;;101    
;;;102        /* Decrement the loop counter */
;;;103        blkCnt--;
;;;104      }
;;;105    
;;;106      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;107       ** No loop unrolling is used. */
;;;108      blkCnt = numSamples % 0x4u;
000046  f0020203          AND      r2,r2,#3
;;;109    
;;;110      while(blkCnt > 0u)
00004a  e007              B        |L1.92|
                  |L1.76|
;;;111      {
;;;112        /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;113        in1 = *__SIMD32(pSrc)++;
00004c  f8503b04          LDR      r3,[r0],#4
;;;114        acc0 = __SMUAD(in1, in1);
000050  fb23f303          SMUAD    r3,r3,r3
;;;115    
;;;116        /* store the result in 3.13 format in the destination buffer. */
;;;117        *pDst++ = (q15_t) (acc0 >> 17);
000054  145b              ASRS     r3,r3,#17
000056  f8213b02          STRH     r3,[r1],#2
00005a  1e52              SUBS     r2,r2,#1
                  |L1.92|
00005c  2a00              CMP      r2,#0                 ;110
00005e  d1f5              BNE      |L1.76|
;;;118    
;;;119        /* Decrement the loop counter */
;;;120        blkCnt--;
;;;121      }
;;;122    
;;;123    #else
;;;124    
;;;125      /* Run the below code for Cortex-M0 */
;;;126      q15_t real, imag;                              /* Temporary variables to store real and imaginary values */
;;;127    
;;;128      while(numSamples > 0u)
;;;129      {
;;;130        /* out = ((real * real) + (imag * imag)) */
;;;131        real = *pSrc++;
;;;132        imag = *pSrc++;
;;;133        acc0 = (real * real);
;;;134        acc1 = (imag * imag);
;;;135        /* store the result in 3.13 format in the destination buffer. */
;;;136        *pDst++ = (q15_t) (((q63_t) acc0 + acc1) >> 17);
;;;137    
;;;138        /* Decrement the loop counter */
;;;139        numSamples--;
;;;140      }
;;;141    
;;;142    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;143    
;;;144    }
000060  bdf0              POP      {r4-r7,pc}
;;;145    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_squared_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q15_c_8f725eb7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_cmplx_mag_squared_q15_c_8f725eb7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q15_c_8f725eb7____REVSH|
#line 144
|__asm___27_arm_cmplx_mag_squared_q15_c_8f725eb7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q15_c_8f725eb7____RRX|
#line 300
|__asm___27_arm_cmplx_mag_squared_q15_c_8f725eb7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
