; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_fast_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_fast_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fir_decimate_fast_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_fast_q31.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_fast_q31||, CODE, READONLY, ALIGN=1

                  arm_fir_decimate_fast_q31 PROC
;;;75     
;;;76     void arm_fir_decimate_fast_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;77       arm_fir_decimate_instance_q31 * S,
;;;78       q31_t * pSrc,
;;;79       q31_t * pDst,
;;;80       uint32_t blockSize)
;;;81     {
000004  b089              SUB      sp,sp,#0x24
;;;82       q31_t *pState = S->pState;                     /* State pointer */
000006  6886              LDR      r6,[r0,#8]
;;;83       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000008  6844              LDR      r4,[r0,#4]
00000a  9406              STR      r4,[sp,#0x18]
;;;84       q31_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;85       q31_t x0, c0;                                  /* Temporary variables to hold state and coefficient values */
;;;86       q31_t *px;                                     /* Temporary pointers for state buffer */
;;;87       q31_t *pb;                                     /* Temporary pointers for coefficient buffer */
;;;88       q31_t sum0;                                    /* Accumulator */
;;;89       uint32_t numTaps = S->numTaps;                 /* Number of taps */
00000c  f8b0a002          LDRH     r10,[r0,#2]
;;;90       uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
000010  7804              LDRB     r4,[r0,#0]
000012  fbb3f3f4          UDIV     r3,r3,r4
;;;91       uint32_t blkCntN2;
;;;92       q31_t x1;
;;;93       q31_t acc0, acc1;
;;;94       q31_t *px0, *px1;
;;;95     
;;;96       /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;97       /* pStateCurnt points to the location where the new input data should be written */
;;;98       pStateCurnt = S->pState + (numTaps - 1u);
000016  f1aa0401          SUB      r4,r10,#1
00001a  eb060784          ADD      r7,r6,r4,LSL #2
00001e  9408              STR      r4,[sp,#0x20]
;;;99     
;;;100      /* Total number of output samples to be computed */
;;;101    
;;;102      blkCnt = outBlockSize / 2;
000020  085c              LSRS     r4,r3,#1
000022  9404              STR      r4,[sp,#0x10]
;;;103      blkCntN2 = outBlockSize - (2 * blkCnt);
000024  9c04              LDR      r4,[sp,#0x10]
000026  4264              RSBS     r4,r4,#0
000028  eb030344          ADD      r3,r3,r4,LSL #1
00002c  9303              STR      r3,[sp,#0xc]
00002e  e083              B        |L1.312|
                  |L1.48|
;;;104    
;;;105      while(blkCnt > 0u)
;;;106      {
;;;107        /* Copy decimation factor number of new input samples into the state buffer */
;;;108        i = 2 * S->M;
000030  7803              LDRB     r3,[r0,#0]
000032  005b              LSLS     r3,r3,#1
                  |L1.52|
;;;109    
;;;110        do
;;;111        {
;;;112          *pStateCurnt++ = *pSrc++;
000034  c910              LDM      r1!,{r4}
000036  c710              STM      r7!,{r4}
;;;113    
;;;114        } while(--i);
000038  1e5b              SUBS     r3,r3,#1
00003a  d1fb              BNE      |L1.52|
;;;115    
;;;116        /* Set accumulator to zero */
;;;117        acc0 = 0;
00003c  469c              MOV      r12,r3
;;;118        acc1 = 0;
00003e  4698              MOV      r8,r3
;;;119    
;;;120        /* Initialize state pointer */
;;;121        px0 = pState;
000040  4634              MOV      r4,r6
;;;122        px1 = pState + S->M;
000042  7803              LDRB     r3,[r0,#0]
000044  9307              STR      r3,[sp,#0x1c]
000046  eb060583          ADD      r5,r6,r3,LSL #2
;;;123    
;;;124        /* Initialize coeff pointer */
;;;125        pb = pCoeffs;
00004a  9b06              LDR      r3,[sp,#0x18]
;;;126    
;;;127        /* Loop unrolling.  Process 4 taps at a time. */
;;;128        tapCnt = numTaps >> 2;
00004c  ea4f099a          LSR      r9,r10,#2
;;;129    
;;;130        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;131         ** Repeat until we've computed numTaps-4 coefficients. */
;;;132        while(tapCnt > 0u)
000050  e048              B        |L1.228|
                  |L1.82|
;;;133        {
;;;134          /* Read the b[numTaps-1] coefficient */
;;;135          c0 = *(pb);
000052  f8d3b000          LDR      r11,[r3,#0]
;;;136    
;;;137          /* Read x[n-numTaps-1] for sample 0 sample 1 */
;;;138          x0 = *(px0);
000056  f8d4e000          LDR      lr,[r4,#0]
00005a  f8cde014          STR      lr,[sp,#0x14]
;;;139          x1 = *(px1);
00005e  f8d5e000          LDR      lr,[r5,#0]
000062  f8cde008          STR      lr,[sp,#8]
;;;140    
;;;141          /* Perform the multiply-accumulate */
;;;142          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
000066  f8dde014          LDR      lr,[sp,#0x14]
00006a  fb5ecc0b          SMMLA    r12,lr,r11,r12
;;;143          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
00006e  f8dde008          LDR      lr,[sp,#8]
000072  fb5e8e0b          SMMLA    lr,lr,r11,r8
000076  f8cde000          STR      lr,[sp,#0]
;;;144    
;;;145          /* Read the b[numTaps-2] coefficient */
;;;146          c0 = *(pb + 1u);
00007a  f8d38004          LDR      r8,[r3,#4]
;;;147    
;;;148          /* Read x[n-numTaps-2]  for sample 0 sample 1  */
;;;149          x0 = *(px0 + 1u);
00007e  f8d4e004          LDR      lr,[r4,#4]
;;;150          x1 = *(px1 + 1u);
000082  f8d5b004          LDR      r11,[r5,#4]
;;;151    
;;;152          /* Perform the multiply-accumulate */
;;;153          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
000086  fb5ece08          SMMLA    lr,lr,r8,r12
00008a  f8cde004          STR      lr,[sp,#4]
;;;154          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
00008e  f8dde000          LDR      lr,[sp,#0]
000092  fb5beb08          SMMLA    r11,r11,r8,lr
000096  f8cdb000          STR      r11,[sp,#0]
;;;155    
;;;156          /* Read the b[numTaps-3] coefficient */
;;;157          c0 = *(pb + 2u);
00009a  f8d3c008          LDR      r12,[r3,#8]
;;;158    
;;;159          /* Read x[n-numTaps-3]  for sample 0 sample 1 */
;;;160          x0 = *(px0 + 2u);
00009e  f8d4b008          LDR      r11,[r4,#8]
;;;161          x1 = *(px1 + 2u);
0000a2  f8d58008          LDR      r8,[r5,#8]
;;;162          pb += 4u;
0000a6  3310              ADDS     r3,r3,#0x10
;;;163    
;;;164          /* Perform the multiply-accumulate */
;;;165          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
0000a8  f8dde004          LDR      lr,[sp,#4]
0000ac  fb5bee0c          SMMLA    lr,r11,r12,lr
0000b0  f8cde004          STR      lr,[sp,#4]
;;;166          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
0000b4  f8ddb000          LDR      r11,[sp,#0]
0000b8  fb58be0c          SMMLA    lr,r8,r12,r11
0000bc  f8cde000          STR      lr,[sp,#0]
;;;167    
;;;168          /* Read the b[numTaps-4] coefficient */
;;;169          c0 = *(pb - 1u);
0000c0  f8538c04          LDR      r8,[r3,#-4]
;;;170    
;;;171          /* Read x[n-numTaps-4] for sample 0 sample 1 */
;;;172          x0 = *(px0 + 3u);
0000c4  f8d4c00c          LDR      r12,[r4,#0xc]
;;;173          x1 = *(px1 + 3u);
0000c8  f8d5b00c          LDR      r11,[r5,#0xc]
;;;174    
;;;175    
;;;176          /* Perform the multiply-accumulate */
;;;177          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
0000cc  f8dde004          LDR      lr,[sp,#4]
0000d0  fb5cec08          SMMLA    r12,r12,r8,lr
;;;178          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
0000d4  f8dde000          LDR      lr,[sp,#0]
0000d8  fb5be808          SMMLA    r8,r11,r8,lr
;;;179    
;;;180          /* update state pointers */
;;;181          px0 += 4u;
0000dc  3410              ADDS     r4,r4,#0x10
;;;182          px1 += 4u;
0000de  3510              ADDS     r5,r5,#0x10
;;;183    
;;;184          /* Decrement the loop counter */
;;;185          tapCnt--;
0000e0  f1a90901          SUB      r9,r9,#1
                  |L1.228|
0000e4  f1b90f00          CMP      r9,#0                 ;132
0000e8  d1b3              BNE      |L1.82|
;;;186        }
;;;187    
;;;188        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;189        tapCnt = numTaps % 0x4u;
0000ea  f00a0903          AND      r9,r10,#3
;;;190    
;;;191        while(tapCnt > 0u)
0000ee  e013              B        |L1.280|
                  |L1.240|
;;;192        {
;;;193          /* Read coefficients */
;;;194          c0 = *(pb++);
0000f0  f853bb04          LDR      r11,[r3],#4
;;;195    
;;;196          /* Fetch 1 state variable */
;;;197          x0 = *(px0++);
0000f4  f854eb04          LDR      lr,[r4],#4
0000f8  f8cde014          STR      lr,[sp,#0x14]
;;;198          x1 = *(px1++);
0000fc  f855eb04          LDR      lr,[r5],#4
000100  f8cde008          STR      lr,[sp,#8]
;;;199    
;;;200          /* Perform the multiply-accumulate */
;;;201          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
000104  f8dde014          LDR      lr,[sp,#0x14]
000108  fb5ecc0b          SMMLA    r12,lr,r11,r12
;;;202          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
00010c  f8dde008          LDR      lr,[sp,#8]
000110  fb5e880b          SMMLA    r8,lr,r11,r8
;;;203    
;;;204          /* Decrement the loop counter */
;;;205          tapCnt--;
000114  f1a90901          SUB      r9,r9,#1
                  |L1.280|
000118  f1b90f00          CMP      r9,#0                 ;191
00011c  d1e8              BNE      |L1.240|
;;;206        }
;;;207    
;;;208        /* Advance the state pointer by the decimation factor       
;;;209         * to process the next group of decimation factor number samples */
;;;210        pState = pState + S->M * 2;
00011e  9b07              LDR      r3,[sp,#0x1c]
000120  eb0606c3          ADD      r6,r6,r3,LSL #3
;;;211    
;;;212        /* The result is in the accumulator, store in the destination buffer. */
;;;213        *pDst++ = (q31_t) (acc0 << 1);
000124  ea4f034c          LSL      r3,r12,#1
000128  6013              STR      r3,[r2,#0]
;;;214        *pDst++ = (q31_t) (acc1 << 1);
00012a  ea4f0348          LSL      r3,r8,#1
00012e  6053              STR      r3,[r2,#4]
000130  3208              ADDS     r2,r2,#8
;;;215    
;;;216        /* Decrement the loop counter */
;;;217        blkCnt--;
000132  9b04              LDR      r3,[sp,#0x10]
000134  1e5b              SUBS     r3,r3,#1
000136  9304              STR      r3,[sp,#0x10]
                  |L1.312|
000138  9b04              LDR      r3,[sp,#0x10]         ;105
00013a  2b00              CMP      r3,#0                 ;105
00013c  f47faf78          BNE      |L1.48|
000140  e03c              B        |L1.444|
                  |L1.322|
;;;218      }
;;;219    
;;;220      while(blkCntN2 > 0u)
;;;221      {
;;;222        /* Copy decimation factor number of new input samples into the state buffer */
;;;223        i = S->M;
000142  7803              LDRB     r3,[r0,#0]
                  |L1.324|
;;;224    
;;;225        do
;;;226        {
;;;227          *pStateCurnt++ = *pSrc++;
000144  c910              LDM      r1!,{r4}
000146  c710              STM      r7!,{r4}
;;;228    
;;;229        } while(--i);
000148  1e5b              SUBS     r3,r3,#1
00014a  d1fb              BNE      |L1.324|
;;;230    
;;;231        /* Set accumulator to zero */
;;;232        sum0 = 0;
00014c  2500              MOVS     r5,#0
;;;233    
;;;234        /* Initialize state pointer */
;;;235        px = pState;
00014e  4633              MOV      r3,r6
;;;236    
;;;237        /* Initialize coeff pointer */
;;;238        pb = pCoeffs;
000150  9c06              LDR      r4,[sp,#0x18]
;;;239    
;;;240        /* Loop unrolling.  Process 4 taps at a time. */
;;;241        tapCnt = numTaps >> 2;
000152  ea4f0c9a          LSR      r12,r10,#2
;;;242    
;;;243        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;244         ** Repeat until we've computed numTaps-4 coefficients. */
;;;245        while(tapCnt > 0u)
000156  e018              B        |L1.394|
                  |L1.344|
;;;246        {
;;;247          /* Read the b[numTaps-1] coefficient */
;;;248          c0 = *(pb++);
000158  f8d48000          LDR      r8,[r4,#0]
;;;249    
;;;250          /* Read x[n-numTaps-1] sample */
;;;251          x0 = *(px++);
00015c  f8539b04          LDR      r9,[r3],#4
;;;252    
;;;253          /* Perform the multiply-accumulate */
;;;254          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
000160  fb595808          SMMLA    r8,r9,r8,r5
;;;255    
;;;256          /* Read the b[numTaps-2] coefficient */
;;;257          c0 = *(pb++);
000164  6865              LDR      r5,[r4,#4]
;;;258    
;;;259          /* Read x[n-numTaps-2] sample */
;;;260          x0 = *(px++);
000166  f8539b04          LDR      r9,[r3],#4
;;;261    
;;;262          /* Perform the multiply-accumulate */
;;;263          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
00016a  fb598505          SMMLA    r5,r9,r5,r8
;;;264    
;;;265          /* Read the b[numTaps-3] coefficient */
;;;266          c0 = *(pb++);
00016e  f8d48008          LDR      r8,[r4,#8]
;;;267    
;;;268          /* Read x[n-numTaps-3] sample */
;;;269          x0 = *(px++);
000172  f8539b04          LDR      r9,[r3],#4
;;;270    
;;;271          /* Perform the multiply-accumulate */
;;;272          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
000176  fb595808          SMMLA    r8,r9,r8,r5
;;;273    
;;;274          /* Read the b[numTaps-4] coefficient */
;;;275          c0 = *(pb++);
00017a  68e5              LDR      r5,[r4,#0xc]
00017c  3410              ADDS     r4,r4,#0x10
;;;276    
;;;277          /* Read x[n-numTaps-4] sample */
;;;278          x0 = *(px++);
00017e  f8539b04          LDR      r9,[r3],#4
;;;279    
;;;280          /* Perform the multiply-accumulate */
;;;281          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
000182  fb598505          SMMLA    r5,r9,r5,r8
;;;282    
;;;283          /* Decrement the loop counter */
;;;284          tapCnt--;
000186  f1ac0c01          SUB      r12,r12,#1
                  |L1.394|
00018a  f1bc0f00          CMP      r12,#0                ;245
00018e  d1e3              BNE      |L1.344|
;;;285        }
;;;286    
;;;287        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;288        tapCnt = numTaps % 0x4u;
000190  f00a0c03          AND      r12,r10,#3
;;;289    
;;;290        while(tapCnt > 0u)
000194  e007              B        |L1.422|
                  |L1.406|
;;;291        {
;;;292          /* Read coefficients */
;;;293          c0 = *(pb++);
000196  f8549b04          LDR      r9,[r4],#4
;;;294    
;;;295          /* Fetch 1 state variable */
;;;296          x0 = *(px++);
00019a  f8538b04          LDR      r8,[r3],#4
;;;297    
;;;298          /* Perform the multiply-accumulate */
;;;299          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
00019e  fb585509          SMMLA    r5,r8,r9,r5
;;;300    
;;;301          /* Decrement the loop counter */
;;;302          tapCnt--;
0001a2  f1ac0c01          SUB      r12,r12,#1
                  |L1.422|
0001a6  f1bc0f00          CMP      r12,#0                ;290
0001aa  d1f4              BNE      |L1.406|
;;;303        }
;;;304    
;;;305        /* Advance the state pointer by the decimation factor       
;;;306         * to process the next group of decimation factor number samples */
;;;307        pState = pState + S->M;
0001ac  7803              LDRB     r3,[r0,#0]
0001ae  eb060683          ADD      r6,r6,r3,LSL #2
;;;308    
;;;309        /* The result is in the accumulator, store in the destination buffer. */
;;;310        *pDst++ = (q31_t) (sum0 << 1);
0001b2  006b              LSLS     r3,r5,#1
0001b4  c208              STM      r2!,{r3}
;;;311    
;;;312        /* Decrement the loop counter */
;;;313        blkCntN2--;
0001b6  9b03              LDR      r3,[sp,#0xc]
0001b8  1e5b              SUBS     r3,r3,#1
0001ba  9303              STR      r3,[sp,#0xc]
                  |L1.444|
0001bc  9b03              LDR      r3,[sp,#0xc]          ;220
0001be  2b00              CMP      r3,#0                 ;220
0001c0  d1bf              BNE      |L1.322|
;;;314      }
;;;315    
;;;316      /* Processing is complete.       
;;;317       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
;;;318       ** This prepares the state buffer for the next function call. */
;;;319    
;;;320      /* Points to the start of the state buffer */
;;;321      pStateCurnt = S->pState;
0001c2  6880              LDR      r0,[r0,#8]
;;;322    
;;;323      i = (numTaps - 1u) >> 2u;
0001c4  9908              LDR      r1,[sp,#0x20]
0001c6  0889              LSRS     r1,r1,#2
;;;324    
;;;325      /* copy data */
;;;326      while(i > 0u)
0001c8  e00a              B        |L1.480|
                  |L1.458|
;;;327      {
;;;328        *pStateCurnt++ = *pState++;
0001ca  6832              LDR      r2,[r6,#0]
0001cc  6002              STR      r2,[r0,#0]
;;;329        *pStateCurnt++ = *pState++;
0001ce  6872              LDR      r2,[r6,#4]
0001d0  6042              STR      r2,[r0,#4]
;;;330        *pStateCurnt++ = *pState++;
0001d2  68b2              LDR      r2,[r6,#8]
0001d4  6082              STR      r2,[r0,#8]
;;;331        *pStateCurnt++ = *pState++;
0001d6  68f2              LDR      r2,[r6,#0xc]
0001d8  3610              ADDS     r6,r6,#0x10
0001da  60c2              STR      r2,[r0,#0xc]
0001dc  3010              ADDS     r0,r0,#0x10
;;;332    
;;;333        /* Decrement the loop counter */
;;;334        i--;
0001de  1e49              SUBS     r1,r1,#1
                  |L1.480|
0001e0  2900              CMP      r1,#0                 ;326
0001e2  d1f2              BNE      |L1.458|
;;;335      }
;;;336    
;;;337      i = (numTaps - 1u) % 0x04u;
0001e4  9908              LDR      r1,[sp,#0x20]
0001e6  f0010103          AND      r1,r1,#3
;;;338    
;;;339      /* copy data */
;;;340      while(i > 0u)
0001ea  e002              B        |L1.498|
                  |L1.492|
;;;341      {
;;;342        *pStateCurnt++ = *pState++;
0001ec  ce04              LDM      r6!,{r2}
0001ee  c004              STM      r0!,{r2}
;;;343    
;;;344        /* Decrement the loop counter */
;;;345        i--;
0001f0  1e49              SUBS     r1,r1,#1
                  |L1.498|
0001f2  2900              CMP      r1,#0                 ;340
0001f4  d1fa              BNE      |L1.492|
;;;346      }
;;;347    }
0001f6  b009              ADD      sp,sp,#0x24
0001f8  e8bd8ff0          POP      {r4-r11,pc}
;;;348    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_fast_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REVSH|
#line 144
|__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q31_c_f382e515____RRX|
#line 300
|__asm___27_arm_fir_decimate_fast_q31_c_f382e515____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
