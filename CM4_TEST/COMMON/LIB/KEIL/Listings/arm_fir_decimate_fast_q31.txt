; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_fast_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_fast_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_fir_decimate_fast_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_fast_q31.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_fast_q31||, CODE, READONLY, ALIGN=2

                  arm_fir_decimate_fast_q31 PROC
;;;75     
;;;76     void arm_fir_decimate_fast_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;77       arm_fir_decimate_instance_q31 * S,
;;;78       q31_t * pSrc,
;;;79       q31_t * pDst,
;;;80       uint32_t blockSize)
;;;81     {
000004  e9d04201          LDRD     r4,r2,[r0,#4]
000008  b086              SUB      sp,sp,#0x18
;;;82       q31_t *pState = S->pState;                     /* State pointer */
;;;83       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
;;;84       q31_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;85       q31_t x0, c0;                                  /* Temporary variables to hold state and coefficient values */
;;;86       q31_t *px;                                     /* Temporary pointers for state buffer */
;;;87       q31_t *pb;                                     /* Temporary pointers for coefficient buffer */
;;;88       q31_t sum0;                                    /* Accumulator */
;;;89       uint32_t numTaps = S->numTaps;                 /* Number of taps */
;;;90       uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
;;;91       uint32_t blkCntN2;
;;;92       q31_t x1;
;;;93       q31_t acc0, acc1;
;;;94       q31_t *px0, *px1;
;;;95     
;;;96       /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;97       /* pStateCurnt points to the location where the new input data should be written */
;;;98       pStateCurnt = S->pState + (numTaps - 1u);
00000a  f06f0503          MVN      r5,#3
00000e  9402              STR      r4,[sp,#8]            ;89
000010  7804              LDRB     r4,[r0,#0]            ;90
000012  f8b0e002          LDRH     lr,[r0,#2]            ;89
000016  fbb3f3f4          UDIV     r3,r3,r4              ;90
00001a  eb05048e          ADD      r4,r5,lr,LSL #2
00001e  1915              ADDS     r5,r2,r4
;;;99     
;;;100      /* Total number of output samples to be computed */
;;;101    
;;;102      blkCnt = outBlockSize / 2;
000020  085c              LSRS     r4,r3,#1
;;;103      blkCntN2 = outBlockSize - (2 * blkCnt);
000022  9400              STR      r4,[sp,#0]
000024  4264              RSBS     r4,r4,#0
000026  eb030344          ADD      r3,r3,r4,LSL #1
;;;104    
;;;105      while(blkCnt > 0u)
00002a  9301              STR      r3,[sp,#4]
00002c  9b00              LDR      r3,[sp,#0]            ;81
00002e  e06e              B        |L1.270|
                  |L1.48|
;;;106      {
;;;107        /* Copy decimation factor number of new input samples into the state buffer */
;;;108        i = 2 * S->M;
000030  7803              LDRB     r3,[r0,#0]
000032  005b              LSLS     r3,r3,#1
                  |L1.52|
;;;109    
;;;110        do
;;;111        {
;;;112          *pStateCurnt++ = *pSrc++;
000034  c910              LDM      r1!,{r4}
000036  1e5b              SUBS     r3,r3,#1
000038  c510              STM      r5!,{r4}
;;;113    
;;;114        } while(--i);
00003a  d1fb              BNE      |L1.52|
;;;115    
;;;116        /* Set accumulator to zero */
;;;117        acc0 = 0;
;;;118        acc1 = 0;
;;;119    
;;;120        /* Initialize state pointer */
;;;121        px0 = pState;
;;;122        px1 = pState + S->M;
00003c  7804              LDRB     r4,[r0,#0]
00003e  469a              MOV      r10,r3                ;117
000040  eb020684          ADD      r6,r2,r4,LSL #2
;;;123    
;;;124        /* Initialize coeff pointer */
;;;125        pb = pCoeffs;
000044  9403              STR      r4,[sp,#0xc]
000046  46d1              MOV      r9,r10                ;118
000048  4613              MOV      r3,r2                 ;121
;;;126    
;;;127        /* Loop unrolling.  Process 4 taps at a time. */
;;;128        tapCnt = numTaps >> 2;
00004a  ea4f079e          LSR      r7,lr,#2
;;;129    
;;;130        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;131         ** Repeat until we've computed numTaps-4 coefficients. */
;;;132        while(tapCnt > 0u)
00004e  9c02              LDR      r4,[sp,#8]
000050  e037              B        |L1.194|
                  |L1.82|
;;;133        {
;;;134          /* Read the b[numTaps-1] coefficient */
;;;135          c0 = *(pb);
000052  cc80              LDM      r4!,{r7}
;;;136    
;;;137          /* Read x[n-numTaps-1] for sample 0 sample 1 */
;;;138          x0 = *(px0);
000054  f8538b04          LDR      r8,[r3],#4
;;;139          x1 = *(px1);
000058  f856cb04          LDR      r12,[r6],#4
;;;140    
;;;141          /* Perform the multiply-accumulate */
;;;142          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
00005c  fb58a807          SMMLA    r8,r8,r7,r10
000060  e9cd8c04          STRD     r8,r12,[sp,#0x10]
;;;143          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
000064  f8ddc014          LDR      r12,[sp,#0x14]
000068  fb5c9a07          SMMLA    r10,r12,r7,r9
;;;144    
;;;145          /* Read the b[numTaps-2] coefficient */
;;;146          c0 = *(pb + 1u);
00006c  cc80              LDM      r4!,{r7}
;;;147    
;;;148          /* Read x[n-numTaps-2]  for sample 0 sample 1  */
;;;149          x0 = *(px0 + 1u);
00006e  f853cb04          LDR      r12,[r3],#4
;;;150          x1 = *(px1 + 1u);
000072  f8569b04          LDR      r9,[r6],#4
;;;151    
;;;152          /* Perform the multiply-accumulate */
;;;153          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
000076  f8dd8010          LDR      r8,[sp,#0x10]
00007a  fb5c8807          SMMLA    r8,r12,r7,r8
;;;154          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
00007e  fb59ac07          SMMLA    r12,r9,r7,r10
000082  e9cd8c04          STRD     r8,r12,[sp,#0x10]
;;;155    
;;;156          /* Read the b[numTaps-3] coefficient */
;;;157          c0 = *(pb + 2u);
000086  f8547b08          LDR      r7,[r4],#8
;;;158    
;;;159          /* Read x[n-numTaps-3]  for sample 0 sample 1 */
;;;160          x0 = *(px0 + 2u);
00008a  f853cb08          LDR      r12,[r3],#8
;;;161          x1 = *(px1 + 2u);
00008e  f8569b08          LDR      r9,[r6],#8
;;;162          pb += 4u;
;;;163    
;;;164          /* Perform the multiply-accumulate */
;;;165          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
000092  f8dd8010          LDR      r8,[sp,#0x10]
000096  fb5c8a07          SMMLA    r10,r12,r7,r8
;;;166          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
00009a  f8ddc014          LDR      r12,[sp,#0x14]
00009e  fb59c807          SMMLA    r8,r9,r7,r12
;;;167    
;;;168          /* Read the b[numTaps-4] coefficient */
;;;169          c0 = *(pb - 1u);
0000a2  f8cd8010          STR      r8,[sp,#0x10]
0000a6  f8547c04          LDR      r7,[r4,#-4]
;;;170    
;;;171          /* Read x[n-numTaps-4] for sample 0 sample 1 */
;;;172          x0 = *(px0 + 3u);
0000aa  f8538c04          LDR      r8,[r3,#-4]
;;;173          x1 = *(px1 + 3u);
0000ae  f856cc04          LDR      r12,[r6,#-4]
;;;174    
;;;175    
;;;176          /* Perform the multiply-accumulate */
;;;177          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
0000b2  fb58aa07          SMMLA    r10,r8,r7,r10
;;;178          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
0000b6  f8dd8010          LDR      r8,[sp,#0x10]
0000ba  fb5c8907          SMMLA    r9,r12,r7,r8
;;;179    
;;;180          /* update state pointers */
;;;181          px0 += 4u;
;;;182          px1 += 4u;
;;;183    
;;;184          /* Decrement the loop counter */
;;;185          tapCnt--;
0000be  f1ab0701          SUB      r7,r11,#1
                  |L1.194|
0000c2  ea5f0b07          MOVS     r11,r7                ;128
0000c6  d1c4              BNE      |L1.82|
;;;186        }
;;;187    
;;;188        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;189        tapCnt = numTaps % 0x4u;
0000c8  f00e0703          AND      r7,lr,#3
;;;190    
;;;191        while(tapCnt > 0u)
0000cc  e00c              B        |L1.232|
                  |L1.206|
;;;192        {
;;;193          /* Read coefficients */
;;;194          c0 = *(pb++);
0000ce  cc80              LDM      r4!,{r7}
;;;195    
;;;196          /* Fetch 1 state variable */
;;;197          x0 = *(px0++);
0000d0  f8538b04          LDR      r8,[r3],#4
;;;198          x1 = *(px1++);
0000d4  f856cb04          LDR      r12,[r6],#4
;;;199    
;;;200          /* Perform the multiply-accumulate */
;;;201          acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
0000d8  fb58aa07          SMMLA    r10,r8,r7,r10
;;;202          acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
0000dc  fb5c9907          SMMLA    r9,r12,r7,r9
;;;203    
;;;204          /* Decrement the loop counter */
;;;205          tapCnt--;
0000e0  f1ab0701          SUB      r7,r11,#1
0000e4  f8cdc010          STR      r12,[sp,#0x10]
                  |L1.232|
0000e8  ea5f0b07          MOVS     r11,r7                ;189
0000ec  d1ef              BNE      |L1.206|
;;;206        }
;;;207    
;;;208        /* Advance the state pointer by the decimation factor       
;;;209         * to process the next group of decimation factor number samples */
;;;210        pState = pState + S->M * 2;
0000ee  9b03              LDR      r3,[sp,#0xc]
;;;211    
;;;212        /* The result is in the accumulator, store in the destination buffer. */
;;;213        *pDst++ = (q31_t) (acc0 << 1);
0000f0  ea4f044a          LSL      r4,r10,#1
0000f4  eb0202c3          ADD      r2,r2,r3,LSL #3       ;210
0000f8  9b08              LDR      r3,[sp,#0x20]
0000fa  601c              STR      r4,[r3,#0]
;;;214        *pDst++ = (q31_t) (acc1 << 1);
0000fc  9b08              LDR      r3,[sp,#0x20]
0000fe  ea4f0449          LSL      r4,r9,#1
000102  605c              STR      r4,[r3,#4]
000104  3308              ADDS     r3,r3,#8
;;;215    
;;;216        /* Decrement the loop counter */
;;;217        blkCnt--;
000106  9308              STR      r3,[sp,#0x20]
000108  9b00              LDR      r3,[sp,#0]
00010a  1e5b              SUBS     r3,r3,#1
00010c  9300              STR      r3,[sp,#0]
                  |L1.270|
00010e  2b00              CMP      r3,#0                 ;105
000110  d18e              BNE      |L1.48|
;;;218      }
;;;219    
;;;220      while(blkCntN2 > 0u)
;;;221      {
;;;222        /* Copy decimation factor number of new input samples into the state buffer */
;;;223        i = S->M;
;;;224    
;;;225        do
;;;226        {
;;;227          *pStateCurnt++ = *pSrc++;
;;;228    
;;;229        } while(--i);
;;;230    
;;;231        /* Set accumulator to zero */
;;;232        sum0 = 0;
;;;233    
;;;234        /* Initialize state pointer */
;;;235        px = pState;
;;;236    
;;;237        /* Initialize coeff pointer */
;;;238        pb = pCoeffs;
;;;239    
;;;240        /* Loop unrolling.  Process 4 taps at a time. */
;;;241        tapCnt = numTaps >> 2;
;;;242    
;;;243        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;244         ** Repeat until we've computed numTaps-4 coefficients. */
;;;245        while(tapCnt > 0u)
;;;246        {
;;;247          /* Read the b[numTaps-1] coefficient */
;;;248          c0 = *(pb++);
;;;249    
;;;250          /* Read x[n-numTaps-1] sample */
;;;251          x0 = *(px++);
;;;252    
;;;253          /* Perform the multiply-accumulate */
;;;254          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;255    
;;;256          /* Read the b[numTaps-2] coefficient */
;;;257          c0 = *(pb++);
;;;258    
;;;259          /* Read x[n-numTaps-2] sample */
;;;260          x0 = *(px++);
;;;261    
;;;262          /* Perform the multiply-accumulate */
;;;263          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;264    
;;;265          /* Read the b[numTaps-3] coefficient */
;;;266          c0 = *(pb++);
;;;267    
;;;268          /* Read x[n-numTaps-3] sample */
;;;269          x0 = *(px++);
;;;270    
;;;271          /* Perform the multiply-accumulate */
;;;272          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;273    
;;;274          /* Read the b[numTaps-4] coefficient */
;;;275          c0 = *(pb++);
;;;276    
;;;277          /* Read x[n-numTaps-4] sample */
;;;278          x0 = *(px++);
;;;279    
;;;280          /* Perform the multiply-accumulate */
;;;281          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;282    
;;;283          /* Decrement the loop counter */
;;;284          tapCnt--;
;;;285        }
;;;286    
;;;287        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;288        tapCnt = numTaps % 0x4u;
;;;289    
;;;290        while(tapCnt > 0u)
;;;291        {
;;;292          /* Read coefficients */
;;;293          c0 = *(pb++);
;;;294    
;;;295          /* Fetch 1 state variable */
;;;296          x0 = *(px++);
;;;297    
;;;298          /* Perform the multiply-accumulate */
;;;299          sum0 = (q31_t) ((((q63_t) sum0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;300    
;;;301          /* Decrement the loop counter */
;;;302          tapCnt--;
;;;303        }
;;;304    
;;;305        /* Advance the state pointer by the decimation factor       
;;;306         * to process the next group of decimation factor number samples */
;;;307        pState = pState + S->M;
;;;308    
;;;309        /* The result is in the accumulator, store in the destination buffer. */
;;;310        *pDst++ = (q31_t) (sum0 << 1);
;;;311    
;;;312        /* Decrement the loop counter */
;;;313        blkCntN2--;
000112  9b01              LDR      r3,[sp,#4]
000114  e03d              B        |L1.402|
                  |L1.278|
000116  7803              LDRB     r3,[r0,#0]            ;223
                  |L1.280|
000118  c910              LDM      r1!,{r4}              ;227
00011a  1e5b              SUBS     r3,r3,#1              ;227
00011c  c510              STM      r5!,{r4}              ;227
00011e  d1fb              BNE      |L1.280|
000120  2700              MOVS     r7,#0                 ;232
000122  4614              MOV      r4,r2                 ;235
000124  ea4f069e          LSR      r6,lr,#2              ;241
000128  9b02              LDR      r3,[sp,#8]            ;245
00012a  e017              B        |L1.348|
                  |L1.300|
00012c  f8538b04          LDR      r8,[r3],#4            ;248
000130  f854cb04          LDR      r12,[r4],#4           ;251
000134  fb5c7c08          SMMLA    r12,r12,r8,r7         ;254
000138  cb80              LDM      r3!,{r7}              ;257
00013a  f8548b04          LDR      r8,[r4],#4            ;260
00013e  fb58c807          SMMLA    r8,r8,r7,r12          ;263
000142  f8537b08          LDR      r7,[r3],#8            ;266
000146  f854cb04          LDR      r12,[r4],#4           ;269
00014a  fb5c8807          SMMLA    r8,r12,r7,r8          ;272
00014e  f8537c04          LDR      r7,[r3,#-4]           ;275
000152  f854cb04          LDR      r12,[r4],#4           ;278
000156  fb5c8707          SMMLA    r7,r12,r7,r8          ;281
00015a  1e76              SUBS     r6,r6,#1              ;281
                  |L1.348|
00015c  2e00              CMP      r6,#0                 ;245
00015e  d1e5              BNE      |L1.300|
000160  f00e0603          AND      r6,lr,#3              ;288
000164  e007              B        |L1.374|
000166  bf00              NOP                            ;293
                  |L1.360|
000168  f853cb04          LDR      r12,[r3],#4           ;293
00016c  f8548b04          LDR      r8,[r4],#4            ;296
000170  fb58770c          SMMLA    r7,r8,r12,r7          ;299
000174  1e76              SUBS     r6,r6,#1              ;299
                  |L1.374|
000176  2e00              CMP      r6,#0                 ;290
000178  d1f6              BNE      |L1.360|
00017a  7803              LDRB     r3,[r0,#0]            ;307
00017c  007c              LSLS     r4,r7,#1              ;310
00017e  eb020283          ADD      r2,r2,r3,LSL #2       ;307
000182  9b08              LDR      r3,[sp,#0x20]         ;310
000184  601c              STR      r4,[r3,#0]            ;310
000186  9b08              LDR      r3,[sp,#0x20]         ;310
000188  1d1b              ADDS     r3,r3,#4              ;310
00018a  9308              STR      r3,[sp,#0x20]
00018c  9b01              LDR      r3,[sp,#4]
00018e  1e5b              SUBS     r3,r3,#1
000190  9301              STR      r3,[sp,#4]
                  |L1.402|
000192  2b00              CMP      r3,#0                 ;220
000194  d1bf              BNE      |L1.278|
;;;314      }
;;;315    
;;;316      /* Processing is complete.       
;;;317       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
;;;318       ** This prepares the state buffer for the next function call. */
;;;319    
;;;320      /* Points to the start of the state buffer */
;;;321      pStateCurnt = S->pState;
;;;322    
;;;323      i = (numTaps - 1u) >> 2u;
000196  f1ae0301          SUB      r3,lr,#1
00019a  6880              LDR      r0,[r0,#8]            ;321
00019c  0899              LSRS     r1,r3,#2
;;;324    
;;;325      /* copy data */
;;;326      while(i > 0u)
00019e  e00c              B        |L1.442|
                  |L1.416|
;;;327      {
;;;328        *pStateCurnt++ = *pState++;
0001a0  ca10              LDM      r2!,{r4}
;;;329        *pStateCurnt++ = *pState++;
;;;330        *pStateCurnt++ = *pState++;
;;;331        *pStateCurnt++ = *pState++;
0001a2  1e49              SUBS     r1,r1,#1
0001a4  c010              STM      r0!,{r4}              ;328
0001a6  ca10              LDM      r2!,{r4}              ;329
0001a8  c010              STM      r0!,{r4}              ;329
0001aa  f8524b08          LDR      r4,[r2],#8            ;330
0001ae  f8404b08          STR      r4,[r0],#8            ;330
0001b2  f8524c04          LDR      r4,[r2,#-4]
0001b6  f8404c04          STR      r4,[r0,#-4]
                  |L1.442|
0001ba  2900              CMP      r1,#0                 ;326
0001bc  d1f0              BNE      |L1.416|
;;;332    
;;;333        /* Decrement the loop counter */
;;;334        i--;
;;;335      }
;;;336    
;;;337      i = (numTaps - 1u) % 0x04u;
0001be  f0030103          AND      r1,r3,#3
;;;338    
;;;339      /* copy data */
;;;340      while(i > 0u)
0001c2  e002              B        |L1.458|
                  |L1.452|
;;;341      {
;;;342        *pStateCurnt++ = *pState++;
0001c4  ca08              LDM      r2!,{r3}
0001c6  1e49              SUBS     r1,r1,#1
0001c8  c008              STM      r0!,{r3}
                  |L1.458|
0001ca  2900              CMP      r1,#0                 ;340
0001cc  d1fa              BNE      |L1.452|
;;;343    
;;;344        /* Decrement the loop counter */
;;;345        i--;
;;;346      }
;;;347    }
0001ce  b00a              ADD      sp,sp,#0x28
0001d0  e8bd8ff0          POP      {r4-r11,pc}
;;;348    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_fast_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REVSH|
#line 144
|__asm___27_arm_fir_decimate_fast_q31_c_f382e515____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q31_c_f382e515____RRX|
#line 300
|__asm___27_arm_fir_decimate_fast_q31_c_f382e515____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
