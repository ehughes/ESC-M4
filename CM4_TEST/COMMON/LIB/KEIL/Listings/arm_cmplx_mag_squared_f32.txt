; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_squared_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_squared_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mag_squared_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_squared_f32.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_squared_f32||, CODE, READONLY, ALIGN=1

                  arm_cmplx_mag_squared_f32 PROC
;;;83     
;;;84     void arm_cmplx_mag_squared_f32(
000000  0893              LSRS     r3,r2,#2
;;;85       float32_t * pSrc,
;;;86       float32_t * pDst,
;;;87       uint32_t numSamples)
;;;88     {
000002  e032              B        |L1.106|
                  |L1.4|
;;;89       float32_t real, imag;                          /* Temporary variables to store real and imaginary values */
;;;90       uint32_t blkCnt;                               /* loop counter */
;;;91     
;;;92     #ifndef ARM_MATH_CM0_FAMILY
;;;93       float32_t real1, real2, real3, real4;          /* Temporary variables to hold real values */
;;;94       float32_t imag1, imag2, imag3, imag4;          /* Temporary variables to hold imaginary values */
;;;95       float32_t mul1, mul2, mul3, mul4;              /* Temporary variables */
;;;96       float32_t mul5, mul6, mul7, mul8;              /* Temporary variables */
;;;97       float32_t out1, out2, out3, out4;              /* Temporary variables to hold output values */
;;;98     
;;;99       /*loop Unrolling */
;;;100      blkCnt = numSamples >> 2u;
;;;101    
;;;102      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;103       ** a second loop below computes the remaining 1 to 3 samples. */
;;;104      while(blkCnt > 0u)
;;;105      {
;;;106        /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;107        /* read real input sample from source buffer */
;;;108        real1 = pSrc[0];
000004  edd00a00          VLDR     s1,[r0,#0]
;;;109        /* read imaginary input sample from source buffer */
;;;110        imag1 = pSrc[1];
000008  ed900a01          VLDR     s0,[r0,#4]
;;;111    
;;;112        /* calculate power of real value */
;;;113        mul1 = real1 * real1;
;;;114    
;;;115        /* read real input sample from source buffer */
;;;116        real2 = pSrc[2];
00000c  ed901a02          VLDR     s2,[r0,#8]
000010  ee202aa0          VMUL.F32 s4,s1,s1              ;113
;;;117    
;;;118        /* calculate power of imaginary value */
;;;119        mul2 = imag1 * imag1;
000014  ee200a00          VMUL.F32 s0,s0,s0
;;;120    
;;;121        /* read imaginary input sample from source buffer */
;;;122        imag2 = pSrc[3];
;;;123    
;;;124        /* calculate power of real value */
;;;125        mul3 = real2 * real2;
000018  ee213a01          VMUL.F32 s6,s2,s2
00001c  edd00a03          VLDR     s1,[r0,#0xc]          ;122
;;;126    
;;;127        /* read real input sample from source buffer */
;;;128        real3 = pSrc[4];
000020  ed901a04          VLDR     s2,[r0,#0x10]
;;;129    
;;;130        /* calculate power of imaginary value */
;;;131        mul4 = imag2 * imag2;
;;;132    
;;;133        /* read imaginary input sample from source buffer */
;;;134        imag3 = pSrc[5];
000024  edd01a05          VLDR     s3,[r0,#0x14]
000028  ee600aa0          VMUL.F32 s1,s1,s1              ;131
;;;135    
;;;136        /* calculate power of real value */
;;;137        mul5 = real3 * real3;
00002c  ee612a01          VMUL.F32 s5,s2,s2
;;;138        /* calculate power of imaginary value */
;;;139        mul6 = imag3 * imag3;
;;;140    
;;;141        /* read real input sample from source buffer */
;;;142        real4 = pSrc[6];
;;;143    
;;;144        /* accumulate real and imaginary powers */
;;;145        out1 = mul1 + mul2;
000030  ee320a00          VADD.F32 s0,s4,s0
000034  ed901a06          VLDR     s2,[r0,#0x18]         ;142
;;;146    
;;;147        /* read imaginary input sample from source buffer */
;;;148        imag4 = pSrc[7];
000038  ed902a07          VLDR     s4,[r0,#0x1c]
00003c  ee611aa1          VMUL.F32 s3,s3,s3              ;139
;;;149    
;;;150        /* accumulate real and imaginary powers */
;;;151        out2 = mul3 + mul4;
000040  ee730a20          VADD.F32 s1,s6,s1
;;;152    
;;;153        /* calculate power of real value */
;;;154        mul7 = real4 * real4;
000044  ee211a01          VMUL.F32 s2,s2,s2
;;;155        /* calculate power of imaginary value */
;;;156        mul8 = imag4 * imag4;
000048  ee222a02          VMUL.F32 s4,s4,s4
;;;157    
;;;158        /* store output to destination */
;;;159        pDst[0] = out1;
00004c  ed810a00          VSTR     s0,[r1,#0]
;;;160    
;;;161        /* accumulate real and imaginary powers */
;;;162        out3 = mul5 + mul6;
000050  ee320aa1          VADD.F32 s0,s5,s3
;;;163    
;;;164        /* store output to destination */
;;;165        pDst[1] = out2;
000054  edc10a01          VSTR     s1,[r1,#4]
;;;166    
;;;167        /* accumulate real and imaginary powers */
;;;168        out4 = mul7 + mul8;
000058  ee710a02          VADD.F32 s1,s2,s4
;;;169    
;;;170        /* store output to destination */
;;;171        pDst[2] = out3;
00005c  ed810a02          VSTR     s0,[r1,#8]
;;;172    
;;;173        /* increment destination pointer by 8 to process next samples */
;;;174        pSrc += 8u;
;;;175    
;;;176        /* store output to destination */
;;;177        pDst[3] = out4;
000060  3020              ADDS     r0,r0,#0x20
000062  edc10a03          VSTR     s1,[r1,#0xc]
000066  3110              ADDS     r1,r1,#0x10
000068  1e5b              SUBS     r3,r3,#1
                  |L1.106|
00006a  2b00              CMP      r3,#0                 ;104
00006c  d1ca              BNE      |L1.4|
;;;178    
;;;179        /* increment destination pointer by 4 to process next samples */
;;;180        pDst += 4u;
;;;181    
;;;182        /* Decrement the loop counter */
;;;183        blkCnt--;
;;;184      }
;;;185    
;;;186      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
;;;187       ** No loop unrolling is used. */
;;;188      blkCnt = numSamples % 0x4u;
00006e  f0020203          AND      r2,r2,#3
;;;189    
;;;190    #else
;;;191    
;;;192      /* Run the below code for Cortex-M0 */
;;;193    
;;;194      blkCnt = numSamples;
;;;195    
;;;196    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;197    
;;;198      while(blkCnt > 0u)
000072  e00b              B        |L1.140|
                  |L1.116|
;;;199      {
;;;200        /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;201        real = *pSrc++;
000074  edd00a00          VLDR     s1,[r0,#0]
;;;202        imag = *pSrc++;
000078  ed900a01          VLDR     s0,[r0,#4]
;;;203    
;;;204        /* out = (real * real) + (imag * imag) */
;;;205        /* store the result in the destination buffer. */
;;;206        *pDst++ = (real * real) + (imag * imag);
00007c  3008              ADDS     r0,r0,#8
00007e  ee600aa0          VMUL.F32 s1,s1,s1
000082  1e52              SUBS     r2,r2,#1
000084  ee400a00          VMLA.F32 s1,s0,s0
000088  ece10a01          VSTM     r1!,{s1}
                  |L1.140|
00008c  2a00              CMP      r2,#0                 ;198
00008e  d1f1              BNE      |L1.116|
;;;207    
;;;208        /* Decrement the loop counter */
;;;209        blkCnt--;
;;;210      }
;;;211    }
000090  4770              BX       lr
;;;212    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_squared_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_f32_c_3a491c63____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_cmplx_mag_squared_f32_c_3a491c63____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_f32_c_3a491c63____REVSH|
#line 144
|__asm___27_arm_cmplx_mag_squared_f32_c_3a491c63____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_f32_c_3a491c63____RRX|
#line 300
|__asm___27_arm_cmplx_mag_squared_f32_c_3a491c63____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
