; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_conj_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_conj_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_conj_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_conj_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_conj_q31||, CODE, READONLY, ALIGN=1

                  arm_cmplx_conj_q31 PROC
;;;63     
;;;64     void arm_cmplx_conj_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;65       q31_t * pSrc,
;;;66       q31_t * pDst,
;;;67       uint32_t numSamples)
;;;68     {
;;;69       uint32_t blkCnt;                               /* loop counter */
;;;70       q31_t in;                                      /* Input value */
;;;71     
;;;72     #ifndef ARM_MATH_CM0_FAMILY
;;;73     
;;;74       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;75       q31_t inR1, inR2, inR3, inR4;                  /* Temporary real variables */
;;;76       q31_t inI1, inI2, inI3, inI4;                  /* Temporary imaginary variables */
;;;77     
;;;78       /*loop Unrolling */
;;;79       blkCnt = numSamples >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e022              B        |L1.76|
                  |L1.6|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;86         /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;87         /* Saturated to 0x7fffffff if the input is -1(0x80000000) */
;;;88         /* read real input sample */
;;;89         inR1 = pSrc[0];
000006  c810              LDM      r0!,{r4}
;;;90         /* store real input sample */
;;;91         pDst[0] = inR1;
000008  f8414b08          STR      r4,[r1],#8
00000c  e8f05402          LDRD     r5,r4,[r0],#8
;;;92     
;;;93         /* read imaginary input sample */
;;;94         inI1 = pSrc[1];
;;;95     
;;;96         /* read real input sample */
;;;97         inR2 = pSrc[2];
;;;98         /* store real input sample */
;;;99         pDst[2] = inR2;
000010  f8414b08          STR      r4,[r1],#8
;;;100    
;;;101        /* read imaginary input sample */
;;;102        inI2 = pSrc[3];
;;;103    
;;;104        /* negate imaginary input sample */
;;;105        inI1 = __QSUB(0, inI1);
000014  2400              MOVS     r4,#0
000016  fa85f5a4          QSUB     r5,r4,r5
00001a  e8f06702          LDRD     r6,r7,[r0],#8
;;;106    
;;;107        /* read real input sample */
;;;108        inR3 = pSrc[4];
;;;109        /* store real input sample */
;;;110        pDst[4] = inR3;
00001e  f8417b10          STR      r7,[r1],#0x10
;;;111    
;;;112        /* read imaginary input sample */
;;;113        inI3 = pSrc[5];
;;;114    
;;;115        /* negate imaginary input sample */
;;;116        inI2 = __QSUB(0, inI2);
000022  fa86f6a4          QSUB     r6,r4,r6
000026  e8f07c02          LDRD     r7,r12,[r0],#8
;;;117    
;;;118        /* read real input sample */
;;;119        inR4 = pSrc[6];
;;;120        /* store real input sample */
;;;121        pDst[6] = inR4;
00002a  f841cc08          STR      r12,[r1,#-8]
;;;122    
;;;123        /* negate imaginary input sample */
;;;124        inI3 = __QSUB(0, inI3);
00002e  fa87f7a4          QSUB     r7,r4,r7
;;;125    
;;;126        /* store imaginary input sample */
;;;127        inI4 = pSrc[7];
000032  f850cb04          LDR      r12,[r0],#4
;;;128    
;;;129        /* store imaginary input samples */
;;;130        pDst[1] = inI1;
000036  f8415c1c          STR      r5,[r1,#-0x1c]
;;;131    
;;;132        /* negate imaginary input sample */
;;;133        inI4 = __QSUB(0, inI4);
00003a  fa8cf4a4          QSUB     r4,r4,r12
;;;134    
;;;135        /* store imaginary input samples */
;;;136        pDst[3] = inI2;
00003e  f8416c14          STR      r6,[r1,#-0x14]
;;;137    
;;;138        /* increment source pointer by 8 to proecess next samples */
;;;139        pSrc += 8u;
;;;140    
;;;141        /* store imaginary input samples */
;;;142        pDst[5] = inI3;
000042  f8417c0c          STR      r7,[r1,#-0xc]
;;;143        pDst[7] = inI4;
000046  f8414c04          STR      r4,[r1,#-4]
00004a  1e5b              SUBS     r3,r3,#1
                  |L1.76|
00004c  2b00              CMP      r3,#0                 ;83
00004e  d1da              BNE      |L1.6|
;;;144    
;;;145        /* increment destination pointer by 8 to process next samples */
;;;146        pDst += 8u;
;;;147    
;;;148        /* Decrement the loop counter */
;;;149        blkCnt--;
;;;150      }
;;;151    
;;;152      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
;;;153       ** No loop unrolling is used. */
;;;154      blkCnt = numSamples % 0x4u;
;;;155    
;;;156    #else
;;;157    
;;;158      /* Run the below code for Cortex-M0 */
;;;159      blkCnt = numSamples;
;;;160    
;;;161    
;;;162    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;163    
;;;164      while(blkCnt > 0u)
;;;165      {
;;;166        /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;167        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;168        /* Saturated to 0x7fffffff if the input is -1(0x80000000) */
;;;169        *pDst++ = *pSrc++;
;;;170        in = *pSrc++;
;;;171        *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
000050  f04f4400          MOV      r4,#0x80000000
000054  f0020203          AND      r2,r2,#3              ;154
000058  1e65              SUBS     r5,r4,#1
00005a  e009              B        |L1.112|
                  |L1.92|
00005c  c808              LDM      r0!,{r3}              ;169
00005e  c108              STM      r1!,{r3}              ;169
000060  c808              LDM      r0!,{r3}              ;170
000062  42a3              CMP      r3,r4
000064  d101              BNE      |L1.106|
000066  462b              MOV      r3,r5
000068  e000              B        |L1.108|
                  |L1.106|
00006a  425b              RSBS     r3,r3,#0
                  |L1.108|
00006c  c108              STM      r1!,{r3}
00006e  1e52              SUBS     r2,r2,#1
                  |L1.112|
000070  2a00              CMP      r2,#0                 ;164
000072  d1f3              BNE      |L1.92|
;;;172    
;;;173        /* Decrement the loop counter */
;;;174        blkCnt--;
;;;175      }
;;;176    }
000074  bdf0              POP      {r4-r7,pc}
;;;177    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_conj_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q31_c_1b8c3b20____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___20_arm_cmplx_conj_q31_c_1b8c3b20____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q31_c_1b8c3b20____REVSH|
#line 144
|__asm___20_arm_cmplx_conj_q31_c_1b8c3b20____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q31_c_1b8c3b20____RRX|
#line 300
|__asm___20_arm_cmplx_conj_q31_c_1b8c3b20____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
