; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_rfft_fast_init_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rfft_fast_init_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_rfft_fast_init_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_rfft_fast_init_f32.c]
                          THUMB

                          AREA ||i.arm_rfft_fast_init_f32||, CODE, READONLY, ALIGN=2

                  arm_rfft_fast_init_f32 PROC
;;;64     */
;;;65     arm_status arm_rfft_fast_init_f32(
000000  084b              LSRS     r3,r1,#1
;;;66       arm_rfft_fast_instance_f32 * S,
;;;67       uint16_t fftLen)
;;;68     {
;;;69       arm_cfft_instance_f32 * Sint;
;;;70       /*  Initialise the default arm status */
;;;71       arm_status status = ARM_MATH_SUCCESS;
000002  2200              MOVS     r2,#0
;;;72       /*  Initialise the FFT length */
;;;73       Sint = &(S->Sint);
;;;74       Sint->fftLen = fftLen/2;
000004  8003              STRH     r3,[r0,#0]
;;;75       S->fftLenRFFT = fftLen;
000006  8201              STRH     r1,[r0,#0x10]
;;;76     
;;;77       /*  Initializations of structure parameters depending on the FFT length */
;;;78       switch (Sint->fftLen)
000008  f5b37f80          CMP      r3,#0x100
00000c  d032              BEQ      |L1.116|
00000e  dc08              BGT      |L1.34|
000010  2b10              CMP      r3,#0x10
000012  d050              BEQ      |L1.182|
000014  2b20              CMP      r3,#0x20
000016  d046              BEQ      |L1.166|
000018  2b40              CMP      r3,#0x40
00001a  d03c              BEQ      |L1.150|
00001c  2b80              CMP      r3,#0x80
00001e  d109              BNE      |L1.52|
000020  e031              B        |L1.134|
                  |L1.34|
000022  f5b37f00          CMP      r3,#0x200
000026  d01c              BEQ      |L1.98|
000028  f5b36f80          CMP      r3,#0x400
00002c  d00f              BEQ      |L1.78|
00002e  f5b36f00          CMP      r3,#0x800
000032  d003              BEQ      |L1.60|
                  |L1.52|
;;;79       {
;;;80       case 2048u:
;;;81         /*  Initializations of structure parameters for 2048 point FFT */
;;;82         /*  Initialise the bit reversal table length */
;;;83         Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
;;;84         /*  Initialise the bit reversal table pointer */
;;;85         Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
;;;86         /*  Initialise the Twiddle coefficient pointers */
;;;87     		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
;;;88     		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
;;;89         break;
;;;90       case 1024u:
;;;91         Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
;;;92         Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
;;;93     		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
;;;94     		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
;;;95         break;
;;;96       case 512u:
;;;97         Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
;;;98         Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
;;;99     		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
;;;100    		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
;;;101        break;
;;;102      case 256u:
;;;103        Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
;;;104        Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
;;;105    		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
;;;106    		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
;;;107        break;
;;;108      case 128u:
;;;109        Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
;;;110        Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
;;;111    		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
;;;112    		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
;;;113        break;
;;;114      case 64u:
;;;115        Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
;;;116        Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
;;;117    		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
;;;118    		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
;;;119        break;
;;;120      case 32u:
;;;121        Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
;;;122        Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
;;;123    		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
;;;124    		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
;;;125        break;
;;;126      case 16u:
;;;127        Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
;;;128        Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
;;;129    		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
;;;130    		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
;;;131        break;
;;;132      default:
;;;133        /*  Reporting argument error if fftSize is not valid value */
;;;134        status = ARM_MATH_ARGUMENT_ERROR;
000034  f04f32ff          MOV      r2,#0xffffffff
                  |L1.56|
;;;135        break;
;;;136      }
;;;137    
;;;138      return (status);
000038  4610              MOV      r0,r2
;;;139    }
00003a  4770              BX       lr
                  |L1.60|
00003c  f44f636e          MOV      r3,#0xee0             ;83
000040  8183              STRH     r3,[r0,#0xc]          ;83
000042  4b21              LDR      r3,|L1.200|
000044  6083              STR      r3,[r0,#8]            ;87
000046  4b21              LDR      r3,|L1.204|
000048  4921              LDR      r1,|L1.208|
00004a  6043              STR      r3,[r0,#4]            ;89
00004c  e007              B        |L1.94|
                  |L1.78|
00004e  f44f63e1          MOV      r3,#0x708             ;91
000052  8183              STRH     r3,[r0,#0xc]          ;91
000054  4b1f              LDR      r3,|L1.212|
000056  6083              STR      r3,[r0,#8]            ;93
000058  4b1f              LDR      r3,|L1.216|
00005a  4920              LDR      r1,|L1.220|
00005c  6043              STR      r3,[r0,#4]            ;94
                  |L1.94|
00005e  6141              STR      r1,[r0,#0x14]         ;88
000060  e7ea              B        |L1.56|
                  |L1.98|
000062  f44f73e0          MOV      r3,#0x1c0             ;97
000066  8183              STRH     r3,[r0,#0xc]          ;97
000068  4b1d              LDR      r3,|L1.224|
00006a  6083              STR      r3,[r0,#8]            ;99
00006c  4b1d              LDR      r3,|L1.228|
00006e  491e              LDR      r1,|L1.232|
000070  6043              STR      r3,[r0,#4]            ;101
000072  e7f4              B        |L1.94|
                  |L1.116|
000074  f44f73dc          MOV      r3,#0x1b8             ;103
000078  8183              STRH     r3,[r0,#0xc]          ;103
00007a  4b1c              LDR      r3,|L1.236|
00007c  6083              STR      r3,[r0,#8]            ;105
00007e  4b1c              LDR      r3,|L1.240|
000080  491c              LDR      r1,|L1.244|
000082  6043              STR      r3,[r0,#4]            ;107
000084  e7eb              B        |L1.94|
                  |L1.134|
000086  23d0              MOVS     r3,#0xd0              ;109
000088  8183              STRH     r3,[r0,#0xc]          ;109
00008a  4b1b              LDR      r3,|L1.248|
00008c  6083              STR      r3,[r0,#8]            ;111
00008e  4b1b              LDR      r3,|L1.252|
000090  491b              LDR      r1,|L1.256|
000092  6043              STR      r3,[r0,#4]            ;113
000094  e7e3              B        |L1.94|
                  |L1.150|
000096  2338              MOVS     r3,#0x38              ;115
000098  8183              STRH     r3,[r0,#0xc]          ;115
00009a  4b1a              LDR      r3,|L1.260|
00009c  6083              STR      r3,[r0,#8]            ;117
00009e  4b1a              LDR      r3,|L1.264|
0000a0  491a              LDR      r1,|L1.268|
0000a2  6043              STR      r3,[r0,#4]            ;119
0000a4  e7db              B        |L1.94|
                  |L1.166|
0000a6  2330              MOVS     r3,#0x30              ;121
0000a8  8183              STRH     r3,[r0,#0xc]          ;121
0000aa  4b19              LDR      r3,|L1.272|
0000ac  6083              STR      r3,[r0,#8]            ;123
0000ae  4b19              LDR      r3,|L1.276|
0000b0  4919              LDR      r1,|L1.280|
0000b2  6043              STR      r3,[r0,#4]            ;125
0000b4  e7d3              B        |L1.94|
                  |L1.182|
0000b6  2314              MOVS     r3,#0x14              ;127
0000b8  8183              STRH     r3,[r0,#0xc]          ;127
0000ba  4b18              LDR      r3,|L1.284|
0000bc  6083              STR      r3,[r0,#8]            ;129
0000be  4b18              LDR      r3,|L1.288|
0000c0  4918              LDR      r1,|L1.292|
0000c2  6043              STR      r3,[r0,#4]            ;131
0000c4  e7cb              B        |L1.94|
;;;140    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L1.200|
                          DCD      armBitRevIndexTable2048
                  |L1.204|
                          DCD      twiddleCoef_2048
                  |L1.208|
                          DCD      twiddleCoef_rfft_4096
                  |L1.212|
                          DCD      armBitRevIndexTable1024
                  |L1.216|
                          DCD      twiddleCoef_1024
                  |L1.220|
                          DCD      twiddleCoef_rfft_2048
                  |L1.224|
                          DCD      armBitRevIndexTable512
                  |L1.228|
                          DCD      twiddleCoef_512
                  |L1.232|
                          DCD      twiddleCoef_rfft_1024
                  |L1.236|
                          DCD      armBitRevIndexTable256
                  |L1.240|
                          DCD      twiddleCoef_256
                  |L1.244|
                          DCD      twiddleCoef_rfft_512
                  |L1.248|
                          DCD      armBitRevIndexTable128
                  |L1.252|
                          DCD      twiddleCoef_128
                  |L1.256|
                          DCD      twiddleCoef_rfft_256
                  |L1.260|
                          DCD      armBitRevIndexTable64
                  |L1.264|
                          DCD      twiddleCoef_64
                  |L1.268|
                          DCD      twiddleCoef_rfft_128
                  |L1.272|
                          DCD      armBitRevIndexTable32
                  |L1.276|
                          DCD      twiddleCoef_32
                  |L1.280|
                          DCD      twiddleCoef_rfft_64
                  |L1.284|
                          DCD      armBitRevIndexTable16
                  |L1.288|
                          DCD      twiddleCoef_16
                  |L1.292|
                          DCD      twiddleCoef_rfft_32

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_rfft_fast_init_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_rfft_fast_init_f32_c_c63f21fa____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___24_arm_rfft_fast_init_f32_c_c63f21fa____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_rfft_fast_init_f32_c_c63f21fa____REVSH|
#line 144
|__asm___24_arm_rfft_fast_init_f32_c_c63f21fa____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_rfft_fast_init_f32_c_c63f21fa____RRX|
#line 300
|__asm___24_arm_rfft_fast_init_f32_c_c63f21fa____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
