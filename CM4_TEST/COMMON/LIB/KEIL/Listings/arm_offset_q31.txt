; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_offset_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_offset_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_offset_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_offset_q31.c]
                          THUMB

                          AREA ||i.arm_offset_q31||, CODE, READONLY, ALIGN=1

                  arm_offset_q31 PROC
;;;65     
;;;66     void arm_offset_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;67       q31_t * pSrc,
;;;68       q31_t offset,
;;;69       q31_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q31_t in1, in2, in3, in4;
;;;78     
;;;79     
;;;80       /*loop Unrolling */
;;;81       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e014              B        |L1.48|
                  |L1.6|
;;;82     
;;;83       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;84        ** a second loop below computes the remaining 1 to 3 samples. */
;;;85       while(blkCnt > 0u)
;;;86       {
;;;87         /* C = A + offset */
;;;88         /* Add offset and then store the results in the destination buffer. */
;;;89         in1 = *pSrc++;
000006  f8d0c000          LDR      r12,[r0,#0]
;;;90         in2 = *pSrc++;
00000a  6845              LDR      r5,[r0,#4]
;;;91         in3 = *pSrc++;
00000c  6886              LDR      r6,[r0,#8]
;;;92         in4 = *pSrc++;
00000e  68c7              LDR      r7,[r0,#0xc]
000010  3010              ADDS     r0,r0,#0x10
;;;93     
;;;94         *pDst++ = __QADD(in1, offset);
000012  fa81fc8c          QADD     r12,r12,r1
000016  f8c2c000          STR      r12,[r2,#0]
;;;95         *pDst++ = __QADD(in2, offset);
00001a  fa81f585          QADD     r5,r5,r1
00001e  6055              STR      r5,[r2,#4]
;;;96         *pDst++ = __QADD(in3, offset);
000020  fa81f586          QADD     r5,r6,r1
000024  6095              STR      r5,[r2,#8]
;;;97         *pDst++ = __QADD(in4, offset);
000026  fa81f587          QADD     r5,r7,r1
00002a  60d5              STR      r5,[r2,#0xc]
00002c  3210              ADDS     r2,r2,#0x10
;;;98     
;;;99         /* Decrement the loop counter */
;;;100        blkCnt--;
00002e  1e64              SUBS     r4,r4,#1
                  |L1.48|
000030  2c00              CMP      r4,#0                 ;85
000032  d1e8              BNE      |L1.6|
;;;101      }
;;;102    
;;;103      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;104       ** No loop unrolling is used. */
;;;105      blkCnt = blockSize % 0x4u;
000034  f0030303          AND      r3,r3,#3
;;;106    
;;;107      while(blkCnt > 0u)
000038  e004              B        |L1.68|
                  |L1.58|
;;;108      {
;;;109        /* C = A + offset */
;;;110        /* Add offset and then store the result in the destination buffer. */
;;;111        *pDst++ = __QADD(*pSrc++, offset);
00003a  c810              LDM      r0!,{r4}
00003c  fa81f484          QADD     r4,r4,r1
000040  c210              STM      r2!,{r4}
;;;112    
;;;113        /* Decrement the loop counter */
;;;114        blkCnt--;
000042  1e5b              SUBS     r3,r3,#1
                  |L1.68|
000044  2b00              CMP      r3,#0                 ;107
000046  d1f8              BNE      |L1.58|
;;;115      }
;;;116    
;;;117    #else
;;;118    
;;;119      /* Run the below code for Cortex-M0 */
;;;120    
;;;121      /* Initialize blkCnt with number of samples */
;;;122      blkCnt = blockSize;
;;;123    
;;;124      while(blkCnt > 0u)
;;;125      {
;;;126        /* C = A + offset */
;;;127        /* Add offset and then store the result in the destination buffer. */
;;;128        *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
;;;129    
;;;130        /* Decrement the loop counter */
;;;131        blkCnt--;
;;;132      }
;;;133    
;;;134    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;135    
;;;136    }
000048  bdf0              POP      {r4-r7,pc}
;;;137    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_offset_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_offset_q31_c_b468fe75____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_offset_q31_c_b468fe75____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_offset_q31_c_b468fe75____REVSH|
#line 144
|__asm___16_arm_offset_q31_c_b468fe75____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_offset_q31_c_b468fe75____RRX|
#line 300
|__asm___16_arm_offset_q31_c_b468fe75____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
