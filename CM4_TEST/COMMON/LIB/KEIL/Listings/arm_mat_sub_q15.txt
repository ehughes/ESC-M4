; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_sub_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_sub_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mat_sub_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_sub_q15.c]
                          THUMB

                          AREA ||i.arm_mat_sub_q15||, CODE, READONLY, ALIGN=1

                  arm_mat_sub_q15 PROC
;;;65     
;;;66     arm_status arm_mat_sub_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;67       const arm_matrix_instance_q15 * pSrcA,
;;;68       const arm_matrix_instance_q15 * pSrcB,
;;;69       arm_matrix_instance_q15 * pDst)
;;;70     {
;;;71       q15_t *pInA = pSrcA->pData;                    /* input data matrix pointer A */
000002  6843              LDR      r3,[r0,#4]
;;;72       q15_t *pInB = pSrcB->pData;                    /* input data matrix pointer B */
000004  6849              LDR      r1,[r1,#4]
;;;73       q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
000006  6852              LDR      r2,[r2,#4]
;;;74       uint32_t numSamples;                           /* total number of elements in the matrix */
;;;75       uint32_t blkCnt;                               /* loop counters  */
;;;76       arm_status status;                             /* status of matrix subtraction  */
;;;77     
;;;78     
;;;79     #ifdef ARM_MATH_MATRIX_CHECK
;;;80     
;;;81     
;;;82       /* Check for matrix mismatch condition */
;;;83       if((pSrcA->numRows != pSrcB->numRows) ||
;;;84          (pSrcA->numCols != pSrcB->numCols) ||
;;;85          (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
;;;86       {
;;;87         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;88         status = ARM_MATH_SIZE_MISMATCH;
;;;89       }
;;;90       else
;;;91     #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
;;;92     
;;;93       {
;;;94         /* Total number of samples in the input matrix */
;;;95         numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
000008  8804              LDRH     r4,[r0,#0]
00000a  8840              LDRH     r0,[r0,#2]
00000c  4344              MULS     r4,r0,r4
;;;96     
;;;97     #ifndef ARM_MATH_CM0_FAMILY
;;;98     
;;;99         /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;100    
;;;101        /* Apply loop unrolling */
;;;102        blkCnt = numSamples >> 2u;
00000e  08a0              LSRS     r0,r4,#2
000010  e00d              B        |L1.46|
                  |L1.18|
;;;103    
;;;104        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;105         ** a second loop below computes the remaining 1 to 3 samples. */
;;;106        while(blkCnt > 0u)
;;;107        {
;;;108          /* C(m,n) = A(m,n) - B(m,n) */
;;;109          /* Subtract, Saturate and then store the results in the destination buffer. */
;;;110          *__SIMD32(pOut)++ = __QSUB16(*__SIMD32(pInA)++, *__SIMD32(pInB)++);
000012  681d              LDR      r5,[r3,#0]
000014  680e              LDR      r6,[r1,#0]
000016  fad5f516          QSUB16   r5,r5,r6
00001a  6015              STR      r5,[r2,#0]
;;;111          *__SIMD32(pOut)++ = __QSUB16(*__SIMD32(pInA)++, *__SIMD32(pInB)++);
00001c  685d              LDR      r5,[r3,#4]
00001e  3308              ADDS     r3,r3,#8
000020  684e              LDR      r6,[r1,#4]
000022  3108              ADDS     r1,r1,#8
000024  fad5f516          QSUB16   r5,r5,r6
000028  6055              STR      r5,[r2,#4]
00002a  3208              ADDS     r2,r2,#8
;;;112    
;;;113          /* Decrement the loop counter */
;;;114          blkCnt--;
00002c  1e40              SUBS     r0,r0,#1
                  |L1.46|
00002e  2800              CMP      r0,#0                 ;106
000030  d1ef              BNE      |L1.18|
;;;115        }
;;;116    
;;;117        /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;118         ** No loop unrolling is used. */
;;;119        blkCnt = numSamples % 0x4u;
000032  f0040003          AND      r0,r4,#3
;;;120    
;;;121        while(blkCnt > 0u)
000036  e008              B        |L1.74|
                  |L1.56|
;;;122        {
;;;123          /* C(m,n) = A(m,n) - B(m,n) */
;;;124          /* Subtract and then store the results in the destination buffer. */
;;;125          *pOut++ = (q15_t) __QSUB16(*pInA++, *pInB++);
000038  f9334b02          LDRSH    r4,[r3],#2
00003c  f9315b02          LDRSH    r5,[r1],#2
000040  fad4f415          QSUB16   r4,r4,r5
000044  f8224b02          STRH     r4,[r2],#2
;;;126    
;;;127          /* Decrement the loop counter */
;;;128          blkCnt--;
000048  1e40              SUBS     r0,r0,#1
                  |L1.74|
00004a  2800              CMP      r0,#0                 ;121
00004c  d1f4              BNE      |L1.56|
;;;129        }
;;;130    
;;;131    #else
;;;132    
;;;133        /* Run the below code for Cortex-M0 */
;;;134    
;;;135        /* Initialize blkCnt with number of samples */
;;;136        blkCnt = numSamples;
;;;137    
;;;138        while(blkCnt > 0u)
;;;139        {
;;;140          /* C(m,n) = A(m,n) - B(m,n) */
;;;141          /* Subtract and then store the results in the destination buffer. */
;;;142          *pOut++ = (q15_t) __SSAT(((q31_t) * pInA++ - *pInB++), 16);
;;;143    
;;;144          /* Decrement the loop counter */
;;;145          blkCnt--;
;;;146        }
;;;147    
;;;148    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;149    
;;;150        /* Set status as ARM_MATH_SUCCESS */
;;;151        status = ARM_MATH_SUCCESS;
;;;152      }
;;;153    
;;;154      /* Return to application */
;;;155      return (status);
;;;156    }
00004e  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_sub_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_sub_q15_c_9725fe70____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_mat_sub_q15_c_9725fe70____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_sub_q15_c_9725fe70____REVSH|
#line 144
|__asm___17_arm_mat_sub_q15_c_9725fe70____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_sub_q15_c_9725fe70____RRX|
#line 300
|__asm___17_arm_mat_sub_q15_c_9725fe70____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
