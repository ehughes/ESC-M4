; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mult_real_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mult_real_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mult_real_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mult_real_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_mult_real_q15||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mult_real_q15 PROC
;;;66     
;;;67     void arm_cmplx_mult_real_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;68       q15_t * pSrcCmplx,
;;;69       q15_t * pSrcReal,
;;;70       q15_t * pCmplxDst,
;;;71       uint32_t numSamples)
;;;72     {
;;;73       q15_t in;                                      /* Temporary variable to store input value */
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       uint32_t blkCnt;                               /* loop counters */
;;;79       q31_t inA1, inA2;                              /* Temporary variables to hold input data */
;;;80       q31_t inB1;                                    /* Temporary variables to hold input data */
;;;81       q15_t out1, out2, out3, out4;                  /* Temporary variables to hold output data */
;;;82       q31_t mul1, mul2, mul3, mul4;                  /* Temporary variables to hold intermediate data */
;;;83     
;;;84       /* loop Unrolling */
;;;85       blkCnt = numSamples >> 2u;
000002  089d              LSRS     r5,r3,#2
000004  e041              B        |L1.138|
;;;86     
;;;87       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;88        ** a second loop below computes the remaining 1 to 3 samples. */
;;;89       while(blkCnt > 0u)
;;;90       {
;;;91         /* C[2 * i] = A[2 * i] * B[i].            */
;;;92         /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;93         /* read complex number both real and imaginary from complex input buffer */
;;;94         inA1 = *__SIMD32(pSrcCmplx)++;
000006  bf00              NOP      
                  |L1.8|
000008  f8506b04          LDR      r6,[r0],#4
;;;95         /* read two real values at a time from real input buffer */
;;;96         inB1 = *__SIMD32(pSrcReal)++;
00000c  f8514b04          LDR      r4,[r1],#4
;;;97         /* read complex number both real and imaginary from complex input buffer */
;;;98         inA2 = *__SIMD32(pSrcCmplx)++;
000010  f8507b04          LDR      r7,[r0],#4
;;;99     
;;;100        /* multiply complex number with real numbers */
;;;101    #ifndef ARM_MATH_BIG_ENDIAN
;;;102    
;;;103        mul1 = (q31_t) ((q15_t) (inA1) * (q15_t) (inB1));
000014  fb16fc04          SMULBB   r12,r6,r4
;;;104        mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1));
000018  fb16f624          SMULTB   r6,r6,r4
;;;105        mul3 = (q31_t) ((q15_t) (inA2) * (q15_t) (inB1 >> 16));
00001c  ea4f4e24          ASR      lr,r4,#16
000020  fb1ef407          SMULBB   r4,lr,r7
;;;106        mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB1 >> 16));
000024  fb17f72e          SMULTB   r7,r7,lr
;;;107    
;;;108    #else
;;;109    
;;;110        mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
;;;111        mul1 = (q31_t) ((q15_t) inA1 * (q15_t) (inB1 >> 16));
;;;112        mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) inB1);
;;;113        mul3 = (q31_t) ((q15_t) inA2 * (q15_t) inB1);
;;;114    
;;;115    #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
;;;116    
;;;117        /* saturate the result */
;;;118        out1 = (q15_t) __SSAT(mul1 >> 15u, 16);
000028  f32c3ccf          SSAT     r12,#16,r12,ASR #15
;;;119        out2 = (q15_t) __SSAT(mul2 >> 15u, 16);
00002c  f32636cf          SSAT     r6,#16,r6,ASR #15
;;;120        out3 = (q15_t) __SSAT(mul3 >> 15u, 16);
000030  f32434cf          SSAT     r4,#16,r4,ASR #15
;;;121        out4 = (q15_t) __SSAT(mul4 >> 15u, 16);
000034  f32737cf          SSAT     r7,#16,r7,ASR #15
;;;122    
;;;123        /* pack real and imaginary outputs and store them to destination */
;;;124        *__SIMD32(pCmplxDst)++ = __PKHBT(out1, out2, 16);
000038  eacc4606          PKHBT    r6,r12,r6,LSL #16
00003c  f8426b04          STR      r6,[r2],#4
;;;125        *__SIMD32(pCmplxDst)++ = __PKHBT(out3, out4, 16);
000040  eac44407          PKHBT    r4,r4,r7,LSL #16
000044  f8424b04          STR      r4,[r2],#4
;;;126    
;;;127        inA1 = *__SIMD32(pSrcCmplx)++;
000048  f8506b08          LDR      r6,[r0],#8
;;;128        inB1 = *__SIMD32(pSrcReal)++;
00004c  f8514b04          LDR      r4,[r1],#4
;;;129        inA2 = *__SIMD32(pSrcCmplx)++;
000050  f8507c04          LDR      r7,[r0,#-4]
;;;130    
;;;131    #ifndef ARM_MATH_BIG_ENDIAN
;;;132    
;;;133        mul1 = (q31_t) ((q15_t) (inA1) * (q15_t) (inB1));
000054  fb16fc04          SMULBB   r12,r6,r4
;;;134        mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1));
000058  fb16f624          SMULTB   r6,r6,r4
;;;135        mul3 = (q31_t) ((q15_t) (inA2) * (q15_t) (inB1 >> 16));
00005c  ea4f4e24          ASR      lr,r4,#16
000060  fb1ef407          SMULBB   r4,lr,r7
;;;136        mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB1 >> 16));
000064  fb17f72e          SMULTB   r7,r7,lr
;;;137    
;;;138    #else
;;;139    
;;;140        mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
;;;141        mul1 = (q31_t) ((q15_t) inA1 * (q15_t) (inB1 >> 16));
;;;142        mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) inB1);
;;;143        mul3 = (q31_t) ((q15_t) inA2 * (q15_t) inB1);
;;;144    
;;;145    #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
;;;146    
;;;147        out1 = (q15_t) __SSAT(mul1 >> 15u, 16);
;;;148        out2 = (q15_t) __SSAT(mul2 >> 15u, 16);
;;;149        out3 = (q15_t) __SSAT(mul3 >> 15u, 16);
000068  f3243ecf          SSAT     lr,#16,r4,ASR #15
00006c  f32c3ccf          SSAT     r12,#16,r12,ASR #15   ;147
000070  f32636cf          SSAT     r6,#16,r6,ASR #15     ;148
;;;150        out4 = (q15_t) __SSAT(mul4 >> 15u, 16);
000074  f32734cf          SSAT     r4,#16,r7,ASR #15
;;;151    
;;;152        *__SIMD32(pCmplxDst)++ = __PKHBT(out1, out2, 16);
000078  eacc4606          PKHBT    r6,r12,r6,LSL #16
00007c  f8426b08          STR      r6,[r2],#8
;;;153        *__SIMD32(pCmplxDst)++ = __PKHBT(out3, out4, 16);
000080  eace4404          PKHBT    r4,lr,r4,LSL #16
000084  f8424c04          STR      r4,[r2,#-4]
000088  1e6d              SUBS     r5,r5,#1
                  |L1.138|
00008a  2d00              CMP      r5,#0                 ;89
00008c  d1bc              BNE      |L1.8|
;;;154    
;;;155        /* Decrement the numSamples loop counter */
;;;156        blkCnt--;
;;;157      }
;;;158    
;;;159      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;160       ** No loop unrolling is used. */
;;;161      blkCnt = numSamples % 0x4u;
00008e  f0030303          AND      r3,r3,#3
;;;162    
;;;163      while(blkCnt > 0u)
000092  e012              B        |L1.186|
                  |L1.148|
;;;164      {
;;;165        /* C[2 * i] = A[2 * i] * B[i].            */
;;;166        /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;167        in = *pSrcReal++;
000094  f8314b02          LDRH     r4,[r1],#2
;;;168        /* store the result in the destination buffer. */
;;;169        *pCmplxDst++ =
000098  f8305b02          LDRH     r5,[r0],#2
00009c  fb15f504          SMULBB   r5,r5,r4
0000a0  f32535cf          SSAT     r5,#16,r5,ASR #15
0000a4  f8225b02          STRH     r5,[r2],#2
;;;170          (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
;;;171        *pCmplxDst++ =
0000a8  f8305b02          LDRH     r5,[r0],#2
0000ac  fb15f404          SMULBB   r4,r5,r4
0000b0  f32434cf          SSAT     r4,#16,r4,ASR #15
0000b4  f8224b02          STRH     r4,[r2],#2
0000b8  1e5b              SUBS     r3,r3,#1
                  |L1.186|
0000ba  2b00              CMP      r3,#0                 ;163
0000bc  d1ea              BNE      |L1.148|
;;;172          (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
;;;173    
;;;174        /* Decrement the numSamples loop counter */
;;;175        blkCnt--;
;;;176      }
;;;177    
;;;178    #else
;;;179    
;;;180      /* Run the below code for Cortex-M0 */
;;;181    
;;;182      while(numSamples > 0u)
;;;183      {
;;;184        /* realOut = realA * realB.            */
;;;185        /* imagOut = imagA * realB.                */
;;;186        in = *pSrcReal++;
;;;187        /* store the result in the destination buffer. */
;;;188        *pCmplxDst++ =
;;;189          (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
;;;190        *pCmplxDst++ =
;;;191          (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
;;;192    
;;;193        /* Decrement the numSamples loop counter */
;;;194        numSamples--;
;;;195      }
;;;196    
;;;197    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;198    
;;;199    }
0000be  bdf0              POP      {r4-r7,pc}
;;;200    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mult_real_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q15_c_d46718a7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___25_arm_cmplx_mult_real_q15_c_d46718a7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q15_c_d46718a7____REVSH|
#line 144
|__asm___25_arm_cmplx_mult_real_q15_c_d46718a7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q15_c_d46718a7____RRX|
#line 300
|__asm___25_arm_cmplx_mult_real_q15_c_d46718a7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
