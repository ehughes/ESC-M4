; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_float_to_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_float_to_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_float_to_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_float_to_q15.c]
                          THUMB

                          AREA ||i.arm_float_to_q15||, CODE, READONLY, ALIGN=2

                  arm_float_to_q15 PROC
;;;75     
;;;76     void arm_float_to_q15(
000000  b510              PUSH     {r4,lr}
;;;77       float32_t * pSrc,
;;;78       q15_t * pDst,
;;;79       uint32_t blockSize)
;;;80     {
;;;81       float32_t *pIn = pSrc;                         /* Src pointer */
;;;82       uint32_t blkCnt;                               /* loop counter */
;;;83     
;;;84     #ifdef ARM_MATH_ROUNDING
;;;85     
;;;86       float32_t in;
;;;87     
;;;88     #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;89     
;;;90     #ifndef ARM_MATH_CM0_FAMILY
;;;91     
;;;92       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;93     
;;;94       /*loop Unrolling */
;;;95       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
;;;96     
;;;97       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;98        ** a second loop below computes the remaining 1 to 3 samples. */
;;;99       while(blkCnt > 0u)
;;;100      {
;;;101    
;;;102    #ifdef ARM_MATH_ROUNDING
;;;103        /* C = A * 32768 */
;;;104        /* convert from float to q15 and then store the results in the destination buffer */
;;;105        in = *pIn++;
;;;106        in = (in * 32768.0f);
;;;107        in += in > 0.0f ? 0.5f : -0.5f;
;;;108        *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
;;;109    
;;;110        in = *pIn++;
;;;111        in = (in * 32768.0f);
;;;112        in += in > 0.0f ? 0.5f : -0.5f;
;;;113        *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
;;;114    
;;;115        in = *pIn++;
;;;116        in = (in * 32768.0f);
;;;117        in += in > 0.0f ? 0.5f : -0.5f;
;;;118        *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
;;;119    
;;;120        in = *pIn++;
;;;121        in = (in * 32768.0f);
;;;122        in += in > 0.0f ? 0.5f : -0.5f;
;;;123        *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
;;;124    
;;;125    #else
;;;126    
;;;127        /* C = A * 32768 */
;;;128        /* convert from float to q15 and then store the results in the destination buffer */
;;;129        *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
000004  ed9f0a25          VLDR     s0,|L1.156|
000008  e032              B        |L1.112|
00000a  bf00              NOP      
                  |L1.12|
00000c  edd00a00          VLDR     s1,[r0,#0]
000010  ee600a80          VMUL.F32 s1,s1,s0
000014  eefd0ae0          VCVT.S32.F32 s1,s1
000018  ee104a90          VMOV     r4,s1
00001c  f304040f          SSAT     r4,#16,r4
000020  f8214b02          STRH     r4,[r1],#2
;;;130        *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
000024  edd00a01          VLDR     s1,[r0,#4]
000028  ee600a80          VMUL.F32 s1,s1,s0
00002c  eefd0ae0          VCVT.S32.F32 s1,s1
000030  ee104a90          VMOV     r4,s1
000034  f304040f          SSAT     r4,#16,r4
000038  f8214b02          STRH     r4,[r1],#2
;;;131        *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
00003c  edd00a02          VLDR     s1,[r0,#8]
000040  ee600a80          VMUL.F32 s1,s1,s0
000044  eefd0ae0          VCVT.S32.F32 s1,s1
000048  ee104a90          VMOV     r4,s1
00004c  f304040f          SSAT     r4,#16,r4
000050  f8214b04          STRH     r4,[r1],#4
;;;132        *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
000054  edd00a03          VLDR     s1,[r0,#0xc]
000058  3010              ADDS     r0,r0,#0x10
00005a  1e5b              SUBS     r3,r3,#1
00005c  ee600a80          VMUL.F32 s1,s1,s0
000060  eefd0ae0          VCVT.S32.F32 s1,s1
000064  ee104a90          VMOV     r4,s1
000068  f304040f          SSAT     r4,#16,r4
00006c  f8214c02          STRH     r4,[r1,#-2]
                  |L1.112|
000070  2b00              CMP      r3,#0                 ;99
000072  d1cb              BNE      |L1.12|
;;;133    
;;;134    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;135    
;;;136        /* Decrement the loop counter */
;;;137        blkCnt--;
;;;138      }
;;;139    
;;;140      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;141       ** No loop unrolling is used. */
;;;142      blkCnt = blockSize % 0x4u;
000074  f0020203          AND      r2,r2,#3
;;;143    
;;;144      while(blkCnt > 0u)
000078  e00d              B        |L1.150|
;;;145      {
;;;146    
;;;147    #ifdef ARM_MATH_ROUNDING
;;;148        /* C = A * 32768 */
;;;149        /* convert from float to q15 and then store the results in the destination buffer */
;;;150        in = *pIn++;
;;;151        in = (in * 32768.0f);
;;;152        in += in > 0.0f ? 0.5f : -0.5f;
;;;153        *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
;;;154    
;;;155    #else
;;;156    
;;;157        /* C = A * 32768 */
;;;158        /* convert from float to q15 and then store the results in the destination buffer */
;;;159        *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
00007a  bf00              NOP      
                  |L1.124|
00007c  ecf00a01          VLDM     r0!,{s1}
000080  1e52              SUBS     r2,r2,#1
000082  ee600a80          VMUL.F32 s1,s1,s0
000086  eefd0ae0          VCVT.S32.F32 s1,s1
00008a  ee103a90          VMOV     r3,s1
00008e  f303030f          SSAT     r3,#16,r3
000092  f8213b02          STRH     r3,[r1],#2
                  |L1.150|
000096  2a00              CMP      r2,#0                 ;144
000098  d1f0              BNE      |L1.124|
;;;160    
;;;161    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;162    
;;;163        /* Decrement the loop counter */
;;;164        blkCnt--;
;;;165      }
;;;166    
;;;167    
;;;168    #else
;;;169    
;;;170      /* Run the below code for Cortex-M0 */
;;;171    
;;;172      /* Loop over blockSize number of values */
;;;173      blkCnt = blockSize;
;;;174    
;;;175      while(blkCnt > 0u)
;;;176      {
;;;177    
;;;178    #ifdef ARM_MATH_ROUNDING
;;;179        /* C = A * 32768 */
;;;180        /* convert from float to q15 and then store the results in the destination buffer */
;;;181        in = *pIn++;
;;;182        in = (in * 32768.0f);
;;;183        in += in > 0 ? 0.5f : -0.5f;
;;;184        *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
;;;185    
;;;186    #else
;;;187    
;;;188        /* C = A * 32768 */
;;;189        /* convert from float to q15 and then store the results in the destination buffer */
;;;190        *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
;;;191    
;;;192    #endif /*      #ifdef ARM_MATH_ROUNDING        */
;;;193    
;;;194        /* Decrement the loop counter */
;;;195        blkCnt--;
;;;196      }
;;;197    
;;;198    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;199    
;;;200    }
00009a  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  |L1.156|
00009c  47000000          DCFS     0x47000000 ; 32768

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_float_to_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_float_to_q15_c_16255138____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_float_to_q15_c_16255138____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_float_to_q15_c_16255138____REVSH|
#line 144
|__asm___18_arm_float_to_q15_c_16255138____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_float_to_q15_c_16255138____RRX|
#line 300
|__asm___18_arm_float_to_q15_c_16255138____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
