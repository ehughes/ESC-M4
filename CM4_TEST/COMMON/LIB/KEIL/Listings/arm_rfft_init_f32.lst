L 1 "..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_rfft_init_f32.c"
N/* ----------------------------------------------------------------------    
N* Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
N*    
N* $Date:        19. March 2015 
N* $Revision: 	V.1.4.5  
N*    
N* Project: 	    CMSIS DSP Library    
N* Title:	    arm_rfft_init_f32.c    
N*    
N* Description:	RFFT & RIFFT Floating point initialisation function    
N*    
N* Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
N*  
N* Redistribution and use in source and binary forms, with or without 
N* modification, are permitted provided that the following conditions
N* are met:
N*   - Redistributions of source code must retain the above copyright
N*     notice, this list of conditions and the following disclaimer.
N*   - Redistributions in binary form must reproduce the above copyright
N*     notice, this list of conditions and the following disclaimer in
N*     the documentation and/or other materials provided with the 
N*     distribution.
N*   - Neither the name of ARM LIMITED nor the names of its contributors
N*     may be used to endorse or promote products derived from this
N*     software without specific prior written permission.
N*
N* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
N* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
N* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N* POSSIBILITY OF SUCH DAMAGE.     
N* -------------------------------------------------------------------- */
N
N
N#include "arm_math.h"
L 1 "..\..\SRC\CMSIS_DSP_4_5\inc\arm_math.h" 1
N/* ----------------------------------------------------------------------
N* Copyright (C) 2010-2014 ARM Limited. All rights reserved.
N*
N* $Date:        12. March 2014
N* $Revision: 	V1.4.4
N*
N* Project: 	    CMSIS DSP Library
N* Title:	    arm_math.h
N*
N* Description:	Public header file for CMSIS DSP Library
N*
N* Target Processor: Cortex-M7/Cortex-M4/Cortex-M3/Cortex-M0
N*
N* Redistribution and use in source and binary forms, with or without
N* modification, are permitted provided that the following conditions
N* are met:
N*   - Redistributions of source code must retain the above copyright
N*     notice, this list of conditions and the following disclaimer.
N*   - Redistributions in binary form must reproduce the above copyright
N*     notice, this list of conditions and the following disclaimer in
N*     the documentation and/or other materials provided with the
N*     distribution.
N*   - Neither the name of ARM LIMITED nor the names of its contributors
N*     may be used to endorse or promote products derived from this
N*     software without specific prior written permission.
N*
N* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
N* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
N* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N* POSSIBILITY OF SUCH DAMAGE.
N * -------------------------------------------------------------------- */
N
N/**
N   \mainpage CMSIS DSP Software Library
N   *
N   * Introduction
N   * ------------
N   *
N   * This user manual describes the CMSIS DSP software library,
N   * a suite of common signal processing functions for use on Cortex-M processor based devices.
N   *
N   * The library is divided into a number of functions each covering a specific category:
N   * - Basic math functions
N   * - Fast math functions
N   * - Complex math functions
N   * - Filters
N   * - Matrix functions
N   * - Transforms
N   * - Motor control functions
N   * - Statistical functions
N   * - Support functions
N   * - Interpolation functions
N   *
N   * The library has separate functions for operating on 8-bit integers, 16-bit integers,
N   * 32-bit integer and 32-bit floating-point values.
N   *
N   * Using the Library
N   * ------------
N   *
N   * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> folder.
N   * - arm_cortexM4lf_math.lib (Little endian and Floating Point Unit on Cortex-M4)
N   * - arm_cortexM4bf_math.lib (Big endian and Floating Point Unit on Cortex-M4)
N   * - arm_cortexM4l_math.lib (Little endian on Cortex-M4)
N   * - arm_cortexM4b_math.lib (Big endian on Cortex-M4)
N   * - arm_cortexM3l_math.lib (Little endian on Cortex-M3)
N   * - arm_cortexM3b_math.lib (Big endian on Cortex-M3)
N   * - arm_cortexM0l_math.lib (Little endian on Cortex-M0)
N   * - arm_cortexM0b_math.lib (Big endian on Cortex-M3)
N   *
N   * The library functions are declared in the public file <code>arm_math.h</code> which is placed in the <code>Include</code> folder.
N   * Simply include this file and link the appropriate library in the application and begin calling the library functions. The Library supports single
N   * public header file <code> arm_math.h</code> for Cortex-M4/M3/M0 with little endian and big endian. Same header file will be used for floating point unit(FPU) variants.
N   * Define the appropriate pre processor MACRO ARM_MATH_CM4 or  ARM_MATH_CM3 or
N   * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
N   *
N   * Examples
N   * --------
N   *
N   * The library ships with a number of examples which demonstrate how to use the library functions.
N   *
N   * Toolchain Support
N   * ------------
N   *
N   * The library has been developed and tested with MDK-ARM version 4.60.
N   * The library is being tested in GCC and IAR toolchains and updates on this activity will be made available shortly.
N   *
N   * Building the Library
N   * ------------
N   *
N   * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in the <code>CMSIS\\DSP_Lib\\Source\\ARM</code> folder.
N   * - arm_cortexM_math.uvproj
N   *
N   *
N   * The libraries can be built by opening the arm_cortexM_math.uvproj project in MDK-ARM, selecting a specific target, and defining the optional pre processor MACROs detailed above.
N   *
N   * Pre-processor Macros
N   * ------------
N   *
N   * Each library project have differant pre-processor macros.
N   *
N   * - UNALIGNED_SUPPORT_DISABLE:
N   *
N   * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory access
N   *
N   * - ARM_MATH_BIG_ENDIAN:
N   *
N   * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default library builds for little endian targets.
N   *
N   * - ARM_MATH_MATRIX_CHECK:
N   *
N   * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
N   *
N   * - ARM_MATH_ROUNDING:
N   *
N   * Define macro ARM_MATH_ROUNDING for rounding on support functions
N   *
N   * - ARM_MATH_CMx:
N   *
N   * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for building library on Cortex-M3 target
N   * and ARM_MATH_CM0 for building library on cortex-M0 target, ARM_MATH_CM0PLUS for building library on cortex-M0+ target.
N   *
N   * - __FPU_PRESENT:
N   *
N   * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro for M4bf and M4lf libraries
N   *
N   * <hr>
N   * CMSIS-DSP in ARM::CMSIS Pack
N   * -----------------------------
N   * 
N   * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directories:
N   * |File/Folder                   |Content                                                                 |
N   * |------------------------------|------------------------------------------------------------------------|
N   * |\b CMSIS\\Documentation\\DSP  | This documentation                                                     |
N   * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                               |
N   * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library functions      |
N   * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                                |
N   * 
N   * <hr>
N   * Revision History of CMSIS-DSP
N   * ------------
N   * Please refer to \ref ChangeLog_pg.
N   *
N   * Copyright Notice
N   * ------------
N   *
N   * Copyright (C) 2010-2014 ARM Limited. All rights reserved.
N   */
N
N
N/**
N * @defgroup groupMath Basic Math Functions
N */
N
N/**
N * @defgroup groupFastMath Fast Math Functions
N * This set of functions provides a fast approximation to sine, cosine, and square root.
N * As compared to most of the other functions in the CMSIS math library, the fast math functions
N * operate on individual values and not arrays.
N * There are separate functions for Q15, Q31, and floating-point data.
N *
N */
N
N/**
N * @defgroup groupCmplxMath Complex Math Functions
N * This set of functions operates on complex data vectors.
N * The data in the complex arrays is stored in an interleaved fashion
N * (real, imag, real, imag, ...).
N * In the API functions, the number of samples in a complex array refers
N * to the number of complex values; the array contains twice this number of
N * real values.
N */
N
N/**
N * @defgroup groupFilters Filtering Functions
N */
N
N/**
N * @defgroup groupMatrix Matrix Functions
N *
N * This set of functions provides basic matrix math operations.
N * The functions operate on matrix data structures.  For example,
N * the type
N * definition for the floating-point matrix structure is shown
N * below:
N * <pre>
N *     typedef struct
N *     {
N *       uint16_t numRows;     // number of rows of the matrix.
N *       uint16_t numCols;     // number of columns of the matrix.
N *       float32_t *pData;     // points to the data of the matrix.
N *     } arm_matrix_instance_f32;
N * </pre>
N * There are similar definitions for Q15 and Q31 data types.
N *
N * The structure specifies the size of the matrix and then points to
N * an array of data.  The array is of size <code>numRows X numCols</code>
N * and the values are arranged in row order.  That is, the
N * matrix element (i, j) is stored at:
N * <pre>
N *     pData[i*numCols + j]
N * </pre>
N *
N * \par Init Functions
N * There is an associated initialization function for each type of matrix
N * data structure.
N * The initialization function sets the values of the internal structure fields.
N * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
N * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
N *
N * \par
N * Use of the initialization function is optional. However, if initialization function is used
N * then the instance structure cannot be placed into a const data section.
N * To place the instance structure in a const data
N * section, manually initialize the data structure.  For example:
N * <pre>
N * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
N * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
N * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
N * </pre>
N * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
N * specifies the number of columns, and <code>pData</code> points to the
N * data array.
N *
N * \par Size Checking
N * By default all of the matrix functions perform size checking on the input and
N * output matrices.  For example, the matrix addition function verifies that the
N * two input matrices and the output matrix all have the same number of rows and
N * columns.  If the size check fails the functions return:
N * <pre>
N *     ARM_MATH_SIZE_MISMATCH
N * </pre>
N * Otherwise the functions return
N * <pre>
N *     ARM_MATH_SUCCESS
N * </pre>
N * There is some overhead associated with this matrix size checking.
N * The matrix size checking is enabled via the \#define
N * <pre>
N *     ARM_MATH_MATRIX_CHECK
N * </pre>
N * within the library project settings.  By default this macro is defined
N * and size checking is enabled.  By changing the project settings and
N * undefining this macro size checking is eliminated and the functions
N * run a bit faster.  With size checking disabled the functions always
N * return <code>ARM_MATH_SUCCESS</code>.
N */
N
N/**
N * @defgroup groupTransforms Transform Functions
N */
N
N/**
N * @defgroup groupController Controller Functions
N */
N
N/**
N * @defgroup groupStats Statistics Functions
N */
N/**
N * @defgroup groupSupport Support Functions
N */
N
N/**
N * @defgroup groupInterpolation Interpolation Functions
N * These functions perform 1- and 2-dimensional interpolation of data.
N * Linear interpolation is used for 1-dimensional data and
N * bilinear interpolation is used for 2-dimensional data.
N */
N
N/**
N * @defgroup groupExamples Examples
N */
N#ifndef _ARM_MATH_H
N#define _ARM_MATH_H
N
N#define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
N
N#if defined(ARM_MATH_CM7)
X#if 0L
S  #include "core_cm7.h"
N#elif defined (ARM_MATH_CM4)
X#elif 1L
N  #include "core_cm4.h"
L 1 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cm4.h" 1
N/**************************************************************************//**
N * @file     core_cm4.h
N * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
N * @version  V4.00
N * @date     22. August 2014
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2014 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if defined ( __ICCARM__ )
X#if 0L
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifndef __CORE_CM4_H_GENERIC
N#define __CORE_CM4_H_GENERIC
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/** \ingroup Cortex_M4
N  @{
N */
N
N/*  CMSIS CM4 definitions */
N#define __CM4_CMSIS_VERSION_MAIN  (0x04)                                   /*!< [31:16] CMSIS HAL main version   */
N#define __CM4_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL sub version    */
N#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
N                                    __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version number         */
X#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) |                                     __CM4_CMSIS_VERSION_SUB          )      
N
N#define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core                    */
N
N
N#if   defined ( __CC_ARM )
X#if   1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N  #define __STATIC_INLINE  static __inline
N
N#elif defined ( __GNUC__ )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __ICCARM__ )
S  #define __ASM            __asm                                      /*!< asm keyword for IAR Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for IAR Compiler. Only available in High optimization mode! */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TMS470__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TI CCS Compiler       */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TASKING__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __CSMC__ )
S  #define __packed
S  #define __ASM            _asm                                      /*!< asm keyword for COSMIC Compiler      */
S  #define __INLINE         inline                                    /*use -pc99 on compile line !< inline keyword for COSMIC Compiler   */
S  #define __STATIC_INLINE  static inline
S
N#endif
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and functions.
N*/
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 1L
N    #if (__FPU_PRESENT == 1)
X    #if (1 == 1)
N      #define __FPU_USED       1
N    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
N    #endif
N  #else
S    #define __FPU_USED         0
N  #endif
N
N#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __TMS470__ )
S  #if defined __TI_VFP_SUPPORT__
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __CSMC__ )		/* Cosmic */
S  #if ( __CSMC__ & 0x400)		// FPU present for parser
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
N#endif
N
N#include <stdint.h>                      /* standard types definitions                      */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 188 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cm4.h" 2
N#include <core_cmInstr.h>                /* Core Instruction Access                         */
L 1 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V4.00
N * @date     28. August 2014
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2014 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CORE_CMINSTR_H
N#define __CORE_CMINSTR_H
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N#if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
X#if   1L  
N/* ARM armcc specific functions */
N
N#if (__ARMCC_VERSION < 400677)
X#if (5060422 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N
N/** \brief  No Operation
N
N    No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/** \brief  Wait For Interrupt
N
N    Wait For Interrupt is a hint instruction that suspends execution
N    until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/** \brief  Wait For Event
N
N    Wait For Event is a hint instruction that permits the processor to enter
N    a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/** \brief  Send Event
N
N    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/** \brief  Instruction Synchronization Barrier
N
N    Instruction Synchronization Barrier flushes the pipeline in the processor,
N    so that all instructions following the ISB are fetched from cache or
N    memory, after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N
N/** \brief  Data Synchronization Barrier
N
N    This function acts as a special kind of Data Memory Barrier.
N    It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N
N/** \brief  Data Memory Barrier
N
N    This function ensures the apparent order of the explicit memory operations before
N    and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/** \brief  Reverse byte order (32 bit)
N
N    This function reverses the byte order in integer value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/** \brief  Reverse byte order (16 bit)
N
N    This function reverses the byte order in two unsigned short values.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N/** \brief  Reverse byte order in signed short value
N
N    This function reverses the byte order in a signed short value with sign extension to integer.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/** \brief  Rotate Right in unsigned value (32 bit)
N
N    This function Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N
N    \param [in]    value  Value to rotate
N    \param [in]    value  Number of Bits to rotate
N    \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/** \brief  Breakpoint
N
N    This function causes the processor to enter Debug state.
N    Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N
N    \param [in]    value  is ignored by the processor.
N                   If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
X#if       ((0x04) >= 0x03) || (__CORTEX_SC >= 300)
N
N/** \brief  Reverse bit order of value
N
N    This function reverses the bit order of the given value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __RBIT                            __rbit
N
N
N/** \brief  LDR Exclusive (8 bit)
N
N    This function executes a exclusive LDR instruction for 8 bit value.
N
N    \param [in]    ptr  Pointer to data
N    \return             value of type uint8_t at (*ptr)
N */
N#define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
N
N
N/** \brief  LDR Exclusive (16 bit)
N
N    This function executes a exclusive LDR instruction for 16 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint16_t at (*ptr)
N */
N#define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
N
N
N/** \brief  LDR Exclusive (32 bit)
N
N    This function executes a exclusive LDR instruction for 32 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint32_t at (*ptr)
N */
N#define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
N
N
N/** \brief  STR Exclusive (8 bit)
N
N    This function executes a exclusive STR instruction for 8 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXB(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  STR Exclusive (16 bit)
N
N    This function executes a exclusive STR instruction for 16 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXH(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  STR Exclusive (32 bit)
N
N    This function executes a exclusive STR instruction for 32 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXW(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  Remove the exclusive lock
N
N    This function removes the exclusive lock which is created by LDREX.
N
N */
N#define __CLREX                           __clrex
N
N
N/** \brief  Signed Saturate
N
N    This function saturates a signed value.
N
N    \param [in]  value  Value to be saturated
N    \param [in]    sat  Bit position to saturate to (1..32)
N    \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/** \brief  Unsigned Saturate
N
N    This function saturates an unsigned value.
N
N    \param [in]  value  Value to be saturated
N    \param [in]    sat  Bit position to saturate to (0..31)
N    \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/** \brief  Count leading zeros
N
N    This function counts the number of leading zeros of a data value.
N
N    \param [in]  value  Value to count the leading zeros
N    \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N/** \brief  Rotate Right with Extend (32 bit)
N
N    This function moves each bit of a bitstring right by one bit. The carry input is shifted in at the left end of the bitstring.
N
N    \param [in]    value  Value to rotate
N    \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/** \brief  LDRT Unprivileged (8 bit)
N
N    This function executes a Unprivileged LDRT instruction for 8 bit value.
N
N    \param [in]    ptr  Pointer to data
N    \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/** \brief  LDRT Unprivileged (16 bit)
N
N    This function executes a Unprivileged LDRT instruction for 16 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/** \brief  LDRT Unprivileged (32 bit)
N
N    This function executes a Unprivileged LDRT instruction for 32 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/** \brief  STRT Unprivileged (8 bit)
N
N    This function executes a Unprivileged STRT instruction for 8 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/** \brief  STRT Unprivileged (16 bit)
N
N    This function executes a Unprivileged STRT instruction for 16 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/** \brief  STRT Unprivileged (32 bit)
N
N    This function executes a Unprivileged STRT instruction for 32 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
N
N
N#elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/* Define macros for porting to both thumb1 and thumb2.
S * For thumb1, use low register (r0-r7), specified by constrant "l"
S * Otherwise, use general registers, specified by constrant "r" */
S#if defined (__thumb__) && !defined (__thumb2__)
S#define __CMSIS_GCC_OUT_REG(r) "=l" (r)
S#define __CMSIS_GCC_USE_REG(r) "l" (r)
S#else
S#define __CMSIS_GCC_OUT_REG(r) "=r" (r)
S#define __CMSIS_GCC_USE_REG(r) "r" (r)
S#endif
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
S{
S  __ASM volatile ("nop");
S}
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
S{
S  __ASM volatile ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
S{
S  __ASM volatile ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
S{
S  __ASM volatile ("sev");
S}
S
S
S/** \brief  Instruction Synchronization Barrier
S
S    Instruction Synchronization Barrier flushes the pipeline in the processor,
S    so that all instructions following the ISB are fetched from cache or
S    memory, after the instruction has been completed.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
S{
S  __ASM volatile ("isb");
S}
S
S
S/** \brief  Data Synchronization Barrier
S
S    This function acts as a special kind of Data Memory Barrier.
S    It completes when all explicit memory accesses before this instruction complete.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
S{
S  __ASM volatile ("dsb");
S}
S
S
S/** \brief  Data Memory Barrier
S
S    This function ensures the apparent order of the explicit memory operations before
S    and after the instruction, without ensuring their completion.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
S{
S  __ASM volatile ("dmb");
S}
S
S
S/** \brief  Reverse byte order (32 bit)
S
S    This function reverses the byte order in integer value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
S{
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
S  return __builtin_bswap32(value);
S#else
S  uint32_t result;
S
S  __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S#endif
S}
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
S{
S  uint32_t result;
S
S  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order in signed short value
S
S    This function reverses the byte order in a signed short value with sign extension to integer.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)
S{
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S  return (short)__builtin_bswap16(value);
S#else
S  uint32_t result;
S
S  __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S#endif
S}
S
S
S/** \brief  Rotate Right in unsigned value (32 bit)
S
S    This function Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
S
S    \param [in]    value  Value to rotate
S    \param [in]    value  Number of Bits to rotate
S    \return               Rotated value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
S{
S  return (op1 >> op2) | (op1 << (32 - op2)); 
S}
S
S
S/** \brief  Breakpoint
S
S    This function causes the processor to enter Debug state.
S    Debug tools can use this to investigate system state when the instruction at a particular address is reached.
S
S    \param [in]    value  is ignored by the processor.
S                   If required, a debugger can use it to store additional information about the breakpoint.
S */
S#define __BKPT(value)                       __ASM volatile ("bkpt "#value)
S
S
S#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S
S   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function executes a exclusive LDR instruction for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
S{
S    uint32_t result;
S
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
S#else
S    /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
S       accepted by assembler. So has to use following less efficient pattern.
S    */
S   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
S#endif
S   return ((uint8_t) result);    /* Add explicit type cast here */
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function executes a exclusive LDR instruction for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
S{
S    uint32_t result;
S
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S   __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
S#else
S    /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
S       accepted by assembler. So has to use following less efficient pattern.
S    */
S   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
S#endif
S   return ((uint16_t) result);    /* Add explicit type cast here */
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function executes a exclusive LDR instruction for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
S{
S    uint32_t result;
S
S   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function executes a exclusive STR instruction for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S   uint32_t result;
S
S   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function executes a exclusive STR instruction for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S   uint32_t result;
S
S   __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function executes a exclusive STR instruction for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S   uint32_t result;
S
S   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)
S{
S  __ASM volatile ("clrex" ::: "memory");
S}
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
S{
S  uint32_t result;
S
S  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
S   return ((uint8_t) result);    /* Add explicit type cast here */
S}
S
S
S/** \brief  Rotate Right with Extend (32 bit)
S
S    This function moves each bit of a bitstring right by one bit. The carry input is shifted in at the left end of the bitstring.
S
S    \param [in]    value  Value to rotate
S    \return               Rotated value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RRX(uint32_t value)
S{
S  uint32_t result;
S
S  __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S}
S
S
S/** \brief  LDRT Unprivileged (8 bit)
S
S    This function executes a Unprivileged LDRT instruction for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDRBT(volatile uint8_t *addr)
S{
S    uint32_t result;
S
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S   __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*addr) );
S#else
S    /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
S       accepted by assembler. So has to use following less efficient pattern.
S    */
S   __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
S#endif
S   return ((uint8_t) result);    /* Add explicit type cast here */
S}
S
S
S/** \brief  LDRT Unprivileged (16 bit)
S
S    This function executes a Unprivileged LDRT instruction for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDRHT(volatile uint16_t *addr)
S{
S    uint32_t result;
S
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S   __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*addr) );
S#else
S    /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
S       accepted by assembler. So has to use following less efficient pattern.
S    */
S   __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
S#endif
S   return ((uint16_t) result);    /* Add explicit type cast here */
S}
S
S
S/** \brief  LDRT Unprivileged (32 bit)
S
S    This function executes a Unprivileged LDRT instruction for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDRT(volatile uint32_t *addr)
S{
S    uint32_t result;
S
S   __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*addr) );
S   return(result);
S}
S
S
S/** \brief  STRT Unprivileged (8 bit)
S
S    This function executes a Unprivileged STRT instruction for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __STRBT(uint8_t value, volatile uint8_t *addr)
S{
S   __ASM volatile ("strbt %1, %0" : "=Q" (*addr) : "r" ((uint32_t)value) );
S}
S
S
S/** \brief  STRT Unprivileged (16 bit)
S
S    This function executes a Unprivileged STRT instruction for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __STRHT(uint16_t value, volatile uint16_t *addr)
S{
S   __ASM volatile ("strht %1, %0" : "=Q" (*addr) : "r" ((uint32_t)value) );
S}
S
S
S/** \brief  STRT Unprivileged (32 bit)
S
S    This function executes a Unprivileged STRT instruction for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __STRT(uint32_t value, volatile uint32_t *addr)
S{
S   __ASM volatile ("strt %1, %0" : "=Q" (*addr) : "r" (value) );
S}
S
S#endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
S
S
S#elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S#include <cmsis_iar.h>
S
S
S#elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
S/* TI CCS specific functions */
S#include <cmsis_ccs.h>
S
S
S#elif defined ( __TASKING__ ) /*------------------ TASKING Compiler --------------*/
S/* TASKING carm specific functions */
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all intrinsics,
S * Including the CMSIS ones.
S */
S
S
S#elif defined ( __CSMC__ ) /*------------------ COSMIC Compiler -------------------*/
S/* Cosmic specific functions */
S#include <cmsis_csm.h>
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H */
L 189 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cm4.h" 2
N#include <core_cmFunc.h>                 /* Core Function Access                            */
L 1 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V4.00
N * @date     28. August 2014
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2014 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CORE_CMFUNC_H
N#define __CORE_CMFUNC_H
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N#if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
X#if   1L  
N/* ARM armcc specific functions */
N
N#if (__ARMCC_VERSION < 400677)
X#if (5060422 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/** \brief  Get Control Register
N
N    This function returns the content of the Control Register.
N
N    \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/** \brief  Set Control Register
N
N    This function writes the given value to the Control Register.
N
N    \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/** \brief  Get IPSR Register
N
N    This function returns the content of the IPSR Register.
N
N    \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/** \brief  Get APSR Register
N
N    This function returns the content of the APSR Register.
N
N    \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/** \brief  Get xPSR Register
N
N    This function returns the content of the xPSR Register.
N
N    \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/** \brief  Get Process Stack Pointer
N
N    This function returns the current value of the Process Stack Pointer (PSP).
N
N    \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/** \brief  Set Process Stack Pointer
N
N    This function assigns the given value to the Process Stack Pointer (PSP).
N
N    \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/** \brief  Get Main Stack Pointer
N
N    This function returns the current value of the Main Stack Pointer (MSP).
N
N    \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/** \brief  Set Main Stack Pointer
N
N    This function assigns the given value to the Main Stack Pointer (MSP).
N
N    \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/** \brief  Get Priority Mask
N
N    This function returns the current state of the priority mask bit from the Priority Mask Register.
N
N    \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/** \brief  Set Priority Mask
N
N    This function assigns the given value to the Priority Mask Register.
N
N    \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
X#if       ((0x04) >= 0x03) || (__CORTEX_SC >= 300)
N
N/** \brief  Enable FIQ
N
N    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
N    Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/** \brief  Disable FIQ
N
N    This function disables FIQ interrupts by setting the F-bit in the CPSR.
N    Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/** \brief  Get Base Priority
N
N    This function returns the current value of the Base Priority register.
N
N    \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/** \brief  Set Base Priority
N
N    This function assigns the given value to the Base Priority register.
N
N    \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xff);
N}
N
N
N/** \brief  Get Fault Mask
N
N    This function returns the current value of the Fault Mask register.
N
N    \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/** \brief  Set Fault Mask
N
N    This function assigns the given value to the Fault Mask register.
N
N    \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1);
N}
N
N#endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
N
N
N#if       (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07)
X#if       ((0x04) == 0x04) || ((0x04) == 0x07)
N
N/** \brief  Get FPSCR
N
N    This function returns the current value of the Floating Point Status/Control register.
N
N    \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
X#if (1 == 1) && (1 == 1)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  return(__regfpscr);
N#else
S   return(0);
N#endif
N}
N
N
N/** \brief  Set FPSCR
N
N    This function assigns the given value to the Floating Point Status/Control register.
N
N    \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
X#if (1 == 1) && (1 == 1)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  __regfpscr = (fpscr);
N#endif
N}
N
N#endif /* (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07) */
N
N
N#elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
S{
S  __ASM volatile ("cpsie i" : : : "memory");
S}
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
S{
S  __ASM volatile ("cpsid i" : : : "memory");
S}
S
S
S/** \brief  Get Control Register
S
S    This function returns the content of the Control Register.
S
S    \return               Control Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, control" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Control Register
S
S    This function writes the given value to the Control Register.
S
S    \param [in]    control  Control Register value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
S{
S  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
S}
S
S
S/** \brief  Get IPSR Register
S
S    This function returns the content of the IPSR Register.
S
S    \return               IPSR Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, apsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
S}
S
S
S/** \brief  Get Priority Mask
S
S    This function returns the current state of the priority mask bit from the Priority Mask Register.
S
S    \return               Priority Mask value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, primask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Priority Mask
S
S    This function assigns the given value to the Priority Mask Register.
S
S    \param [in]    priMask  Priority Mask
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
S{
S  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
S}
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
S{
S  __ASM volatile ("cpsie f" : : : "memory");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
S{
S  __ASM volatile ("cpsid f" : : : "memory");
S}
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
S{
S  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
S}
S
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
S  uint32_t result;
S
S  /* Empty asm statement works as a scheduling barrier */
S  __ASM volatile ("");
S  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
S  __ASM volatile ("");
S  return(result);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
S  /* Empty asm statement works as a scheduling barrier */
S  __ASM volatile ("");
S  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
S  __ASM volatile ("");
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07) */
S
S
S#elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S#include <cmsis_iar.h>
S
S
S#elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
S/* TI CCS specific functions */
S#include <cmsis_ccs.h>
S
S
S#elif defined ( __TASKING__ ) /*------------------ TASKING Compiler --------------*/
S/* TASKING carm specific functions */
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all intrinsics,
S * Including the CMSIS ones.
S */
S
S
S#elif defined ( __CSMC__ ) /*------------------ COSMIC Compiler -------------------*/
S/* Cosmic specific functions */
S#include <cmsis_csm.h>
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N#endif /* __CORE_CMFUNC_H */
L 190 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cm4.h" 2
N#include <core_cmSimd.h>                 /* Compiler specific SIMD Intrinsics               */
L 1 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cmSimd.h" 1
N/**************************************************************************//**
N * @file     core_cmSimd.h
N * @brief    CMSIS Cortex-M SIMD Header File
N * @version  V4.00
N * @date     22. August 2014
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2014 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if defined ( __ICCARM__ )
X#if 0L
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifndef __CORE_CMSIMD_H
N#define __CORE_CMSIMD_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
X#if   1L  
N/* ARM armcc specific functions */
N#define __SADD8                           __sadd8
N#define __QADD8                           __qadd8
N#define __SHADD8                          __shadd8
N#define __UADD8                           __uadd8
N#define __UQADD8                          __uqadd8
N#define __UHADD8                          __uhadd8
N#define __SSUB8                           __ssub8
N#define __QSUB8                           __qsub8
N#define __SHSUB8                          __shsub8
N#define __USUB8                           __usub8
N#define __UQSUB8                          __uqsub8
N#define __UHSUB8                          __uhsub8
N#define __SADD16                          __sadd16
N#define __QADD16                          __qadd16
N#define __SHADD16                         __shadd16
N#define __UADD16                          __uadd16
N#define __UQADD16                         __uqadd16
N#define __UHADD16                         __uhadd16
N#define __SSUB16                          __ssub16
N#define __QSUB16                          __qsub16
N#define __SHSUB16                         __shsub16
N#define __USUB16                          __usub16
N#define __UQSUB16                         __uqsub16
N#define __UHSUB16                         __uhsub16
N#define __SASX                            __sasx
N#define __QASX                            __qasx
N#define __SHASX                           __shasx
N#define __UASX                            __uasx
N#define __UQASX                           __uqasx
N#define __UHASX                           __uhasx
N#define __SSAX                            __ssax
N#define __QSAX                            __qsax
N#define __SHSAX                           __shsax
N#define __USAX                            __usax
N#define __UQSAX                           __uqsax
N#define __UHSAX                           __uhsax
N#define __USAD8                           __usad8
N#define __USADA8                          __usada8
N#define __SSAT16                          __ssat16
N#define __USAT16                          __usat16
N#define __UXTB16                          __uxtb16
N#define __UXTAB16                         __uxtab16
N#define __SXTB16                          __sxtb16
N#define __SXTAB16                         __sxtab16
N#define __SMUAD                           __smuad
N#define __SMUADX                          __smuadx
N#define __SMLAD                           __smlad
N#define __SMLADX                          __smladx
N#define __SMLALD                          __smlald
N#define __SMLALDX                         __smlaldx
N#define __SMUSD                           __smusd
N#define __SMUSDX                          __smusdx
N#define __SMLSD                           __smlsd
N#define __SMLSDX                          __smlsdx
N#define __SMLSLD                          __smlsld
N#define __SMLSLDX                         __smlsldx
N#define __SEL                             __sel
N#define __QADD                            __qadd
N#define __QSUB                            __qsub
N
N#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
N                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
N
N#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
N                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
N
N#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
N                                                      ((int64_t)(ARG3) << 32)      ) >> 32))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32)      ) >> 32))
N
N
N#elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USAD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S#define __SSAT16(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT16(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S#define __USAT16(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT16(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UXTB16(uint32_t op1)
S{
S  uint32_t result;
S
S  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SXTB16(uint32_t op1)
S{
S  uint32_t result;
S
S  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUADX (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
S{
S  union llreg_u{
S    uint32_t w32[2];
S    uint64_t w64;
S  } llr;
S  llr.w64 = acc;
S
S#ifndef __ARMEB__   // Little endian
S  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
S#else               // Big endian
S  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
S#endif
S
S  return(llr.w64);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
S{
S  union llreg_u{
S    uint32_t w32[2];
S    uint64_t w64;
S  } llr;
S  llr.w64 = acc;
S
S#ifndef __ARMEB__   // Little endian
S  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
S#else               // Big endian
S  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
S#endif
S
S  return(llr.w64);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSD  (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
S{
S  union llreg_u{
S    uint32_t w32[2];
S    uint64_t w64;
S  } llr;
S  llr.w64 = acc;
S
S#ifndef __ARMEB__   // Little endian
S  __ASM volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
S#else               // Big endian
S  __ASM volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
S#endif
S
S  return(llr.w64);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
S{
S  union llreg_u{
S    uint32_t w32[2];
S    uint64_t w64;
S  } llr;
S  llr.w64 = acc;
S
S#ifndef __ARMEB__   // Little endian
S  __ASM volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
S#else               // Big endian
S  __ASM volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
S#endif
S
S  return(llr.w64);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SEL  (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S#define __PKHBT(ARG1,ARG2,ARG3) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); \
S  __ASM ("pkhbt %0, %1, %2, lsl %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  ); \
S  __RES; \
S })
X#define __PKHBT(ARG1,ARG2,ARG3) ({                            uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2);   __ASM ("pkhbt %0, %1, %2, lsl %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  );   __RES;  })
S
S#define __PKHTB(ARG1,ARG2,ARG3) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); \
S  if (ARG3 == 0) \
S    __ASM ("pkhtb %0, %1, %2" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2)  ); \
S  else \
S    __ASM ("pkhtb %0, %1, %2, asr %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  ); \
S  __RES; \
S })
X#define __PKHTB(ARG1,ARG2,ARG3) ({                            uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2);   if (ARG3 == 0)     __ASM ("pkhtb %0, %1, %2" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2)  );   else     __ASM ("pkhtb %0, %1, %2, asr %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  );   __RES;  })
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
S{
S int32_t result;
S
S __ASM volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r"  (op1), "r" (op2), "r" (op3) );
S return(result);
S}
S
S
S#elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S#include <cmsis_iar.h>
S
S
S#elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
S/* TI CCS specific functions */
S#include <cmsis_ccs.h>
S
S
S#elif defined ( __TASKING__ ) /*------------------ TASKING Compiler --------------*/
S/* TASKING carm specific functions */
S/* not yet supported */
S
S
S#elif defined ( __CSMC__ ) /*------------------ COSMIC Compiler -------------------*/
S/* Cosmic specific functions */
S#include <cmsis_csm.h>
S
N#endif
N
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CMSIMD_H */
L 191 "..\..\SRC\CMSIS_DSP_4_5\inc\core_cm4.h" 2
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
S
S#ifndef __CORE_CM4_H_DEPENDANT
S#define __CORE_CM4_H_DEPENDANT
S
S#ifdef __cplusplus
S extern "C" {
S#endif
S
S/* check device defines and use defaults */
S#if defined __CHECK_DEVICE_DEFINES
S  #ifndef __CM4_REV
S    #define __CM4_REV               0x0000
S    #warning "__CM4_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __FPU_PRESENT
S    #define __FPU_PRESENT             0
S    #warning "__FPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          4
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
S#endif
S
S/* IO definitions (access restrictions to peripheral registers) */
S/**
S    \defgroup CMSIS_glob_defs CMSIS Global Defines
S
S    <strong>IO Type Qualifiers</strong> are used
S    \li to specify the access to peripheral variables.
S    \li for automatic generation of peripheral register debug information.
S*/
S#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions                 */
S#else
S  #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
S#endif
S#define     __O     volatile             /*!< Defines 'write only' permissions                */
S#define     __IO    volatile             /*!< Defines 'read / write' permissions              */
S
S/*@} end of group Cortex_M4 */
S
S
S
S/*******************************************************************************
S *                 Register Abstraction
S  Core Register contain:
S  - Core Register
S  - Core NVIC Register
S  - Core SCB Register
S  - Core SysTick Register
S  - Core Debug Register
S  - Core MPU Register
S  - Core FPU Register
S ******************************************************************************/
S/** \defgroup CMSIS_core_register Defines and Type Definitions
S    \brief Type definitions and defines for Cortex-M processor based devices.
S*/
S
S/** \ingroup    CMSIS_core_register
S    \defgroup   CMSIS_CORE  Status and Control Registers
S    \brief  Core Register type definitions.
S  @{
S */
S
S/** \brief  Union type to access the Application Program Status Register (APSR).
S */
Stypedef union
S{
S  struct
S  {
S#if (__CORTEX_M != 0x04)
S    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
S#else
S    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
S#endif
S    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
S    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
S    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
S    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
S    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} APSR_Type;
S
S
S/** \brief  Union type to access the Interrupt Program Status Register (IPSR).
S */
Stypedef union
S{
S  struct
S  {
S    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
S    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} IPSR_Type;
S
S
S/** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
S */
Stypedef union
S{
S  struct
S  {
S    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
S#if (__CORTEX_M != 0x04)
S    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
S#else
S    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
S#endif
S    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
S    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
S    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
S    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
S    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
S    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
S    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} xPSR_Type;
S
S
S/** \brief  Union type to access the Control Registers (CONTROL).
S */
Stypedef union
S{
S  struct
S  {
S    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
S    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
S    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
S    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} CONTROL_Type;
S
S/*@} end of group CMSIS_CORE */
S
S
S/** \ingroup    CMSIS_core_register
S    \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
S    \brief      Type definitions for the NVIC Registers
S  @{
S */
S
S/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
S */
Stypedef struct
S{
S  __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register           */
S       uint32_t RESERVED0[24];
S  __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register         */
S       uint32_t RSERVED1[24];
S  __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register          */
S       uint32_t RESERVED2[24];
S  __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register        */
S       uint32_t RESERVED3[24];
S  __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register           */
S       uint32_t RESERVED4[56];
S  __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
S       uint32_t RESERVED5[644];
S  __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register     */
S}  NVIC_Type;
S
S/* Software Triggered Interrupt Register Definitions */
S#define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: INTLINESNUM Position */
S#define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: INTLINESNUM Mask */
S
S/*@} end of group CMSIS_NVIC */
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_SCB     System Control Block (SCB)
S    \brief      Type definitions for the System Control Block Registers
S  @{
S */
S
S/** \brief  Structure type to access the System Control Block (SCB).
S */
Stypedef struct
S{
S  __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
S  __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */
S  __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
S  __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */
S  __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
S  __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
S  __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
S  __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
S  __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register                    */
S  __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register                             */
S  __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
S  __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register                      */
S  __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register                             */
S  __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register                       */
S  __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register                            */
S  __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register                                */
S  __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register                            */
S  __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register                         */
S  __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register                   */
S       uint32_t RESERVED0[5];
S  __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register                   */
S} SCB_Type;
S
S/* SCB CPUID Register Definitions */
S#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
S#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
S
S#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
S#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
S
S#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
S#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
S
S#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
S#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
S
S#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
S#define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
S
S/* SCB Interrupt Control State Register Definitions */
S#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
S#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
S
S#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
S#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
S
S#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
S#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
S
S#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
S#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
S
S#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
S#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
S
S#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
S#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
S
S#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
S#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
S
S#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
S#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
S
S#define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB ICSR: RETTOBASE Position */
S#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
S
S#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
S#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
S
S/* SCB Vector Table Offset Register Definitions */
S#define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB VTOR: TBLOFF Position */
S#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
S
S/* SCB Application Interrupt and Reset Control Register Definitions */
S#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
S#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
S
S#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
S#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
S
S#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
S#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
S
S#define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
S#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
S
S#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
S#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
S
S#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
S#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
S
S#define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */
S#define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB AIRCR: VECTRESET Mask */
S
S/* SCB System Control Register Definitions */
S#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
S#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
S
S#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
S#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
S
S#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
S#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
S
S/* SCB Configuration Control Register Definitions */
S#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
S#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
S
S#define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB CCR: BFHFNMIGN Position */
S#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
S
S#define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB CCR: DIV_0_TRP Position */
S#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
S
S#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
S#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
S
S#define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB CCR: USERSETMPEND Position */
S#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
S
S#define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB CCR: NONBASETHRDENA Position */
S#define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB CCR: NONBASETHRDENA Mask */
S
S/* SCB System Handler Control and State Register Definitions */
S#define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB SHCSR: USGFAULTENA Position */
S#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
S
S#define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB SHCSR: BUSFAULTENA Position */
S#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
S
S#define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB SHCSR: MEMFAULTENA Position */
S#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
S
S#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
S#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
S
S#define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB SHCSR: BUSFAULTPENDED Position */
S#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
S
S#define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB SHCSR: MEMFAULTPENDED Position */
S#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
S
S#define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB SHCSR: USGFAULTPENDED Position */
S#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
S
S#define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB SHCSR: SYSTICKACT Position */
S#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
S
S#define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB SHCSR: PENDSVACT Position */
S#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
S
S#define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB SHCSR: MONITORACT Position */
S#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
S
S#define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB SHCSR: SVCALLACT Position */
S#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
S
S#define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB SHCSR: USGFAULTACT Position */
S#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
S
S#define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB SHCSR: BUSFAULTACT Position */
S#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
S
S#define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB SHCSR: MEMFAULTACT Position */
S#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB SHCSR: MEMFAULTACT Mask */
S
S/* SCB Configurable Fault Status Registers Definitions */
S#define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB CFSR: Usage Fault Status Register Position */
S#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
S
S#define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB CFSR: Bus Fault Status Register Position */
S#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
S
S#define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB CFSR: Memory Manage Fault Status Register Position */
S#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
S
S/* SCB Hard Fault Status Registers Definitions */
S#define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB HFSR: DEBUGEVT Position */
S#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
S
S#define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB HFSR: FORCED Position */
S#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
S
S#define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB HFSR: VECTTBL Position */
S#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
S
S/* SCB Debug Fault Status Register Definitions */
S#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
S#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
S
S#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
S#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
S
S#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
S#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
S
S#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
S#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
S
S#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
S#define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
S
S/*@} end of group CMSIS_SCB */
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
S    \brief      Type definitions for the System Control and ID Register not in the SCB
S  @{
S */
S
S/** \brief  Structure type to access the System Control and ID Register not in the SCB.
S */
Stypedef struct
S{
S       uint32_t RESERVED0[1];
S  __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register      */
S  __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register              */
S} SCnSCB_Type;
S
S/* Interrupt Controller Type Register Definitions */
S#define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: INTLINESNUM Position */
S#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: INTLINESNUM Mask */
S
S/* Auxiliary Control Register Definitions */
S#define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: DISOOFP Position */
S#define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: DISOOFP Mask */
S
S#define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: DISFPCA Position */
S#define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: DISFPCA Mask */
S
S#define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: DISFOLD Position */
S#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
S
S#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: DISDEFWBUF Position */
S#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
S
S#define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: DISMCYCINT Position */
S#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: DISMCYCINT Mask */
S
S/*@} end of group CMSIS_SCnotSCB */
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
S    \brief      Type definitions for the System Timer Registers.
S  @{
S */
S
S/** \brief  Structure type to access the System Timer (SysTick).
S */
Stypedef struct
S{
S  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
S  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
S  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
S  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
S} SysTick_Type;
S
S/* SysTick Control / Status Register Definitions */
S#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
S#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
S
S#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
S#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
S
S#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
S#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
S
S#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
S#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
S
S/* SysTick Reload Register Definitions */
S#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
S#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
S
S/* SysTick Current Register Definitions */
S#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
S#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
S
S/* SysTick Calibration Register Definitions */
S#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
S#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
S
S#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
S#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
S
S#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
S#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_CALIB_TENMS_Pos)        /*!< SysTick CALIB: TENMS Mask */
S
S/*@} end of group CMSIS_SysTick */
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
S    \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
S  @{
S */
S
S/** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
S */
Stypedef struct
S{
S  __O  union
S  {
S    __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit                   */
S    __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit                  */
S    __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit                  */
S  }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers               */
S       uint32_t RESERVED0[864];
S  __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register                 */
S       uint32_t RESERVED1[15];
S  __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register              */
S       uint32_t RESERVED2[15];
S  __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register                */
S       uint32_t RESERVED3[29];
S  __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register            */
S  __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register             */
S  __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register     */
S       uint32_t RESERVED4[43];
S  __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register                  */
S  __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register                  */
S       uint32_t RESERVED5[6];
S  __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
S  __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
S  __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
S  __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
S  __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
S  __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
S  __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
S  __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
S  __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
S  __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
S  __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
S  __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
S} ITM_Type;
S
S/* ITM Trace Privilege Register Definitions */
S#define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM TPR: PRIVMASK Position */
S#define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM TPR: PRIVMASK Mask */
S
S/* ITM Trace Control Register Definitions */
S#define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM TCR: BUSY Position */
S#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
S
S#define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM TCR: ATBID Position */
S#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
S
S#define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM TCR: Global timestamp frequency Position */
S#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
S
S#define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM TCR: TSPrescale Position */
S#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
S
S#define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM TCR: SWOENA Position */
S#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
S
S#define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM TCR: DWTENA Position */
S#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
S
S#define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM TCR: SYNCENA Position */
S#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
S
S#define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM TCR: TSENA Position */
S#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
S
S#define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM TCR: ITM Enable bit Position */
S#define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM TCR: ITM Enable bit Mask */
S
S/* ITM Integration Write Register Definitions */
S#define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM IWR: ATVALIDM Position */
S#define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM IWR: ATVALIDM Mask */
S
S/* ITM Integration Read Register Definitions */
S#define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM IRR: ATREADYM Position */
S#define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM IRR: ATREADYM Mask */
S
S/* ITM Integration Mode Control Register Definitions */
S#define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM IMCR: INTEGRATION Position */
S#define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM IMCR: INTEGRATION Mask */
S
S/* ITM Lock Status Register Definitions */
S#define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM LSR: ByteAcc Position */
S#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
S
S#define ITM_LSR_Access_Pos                  1                                             /*!< ITM LSR: Access Position */
S#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
S
S#define ITM_LSR_Present_Pos                 0                                             /*!< ITM LSR: Present Position */
S#define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM LSR: Present Mask */
S
S/*@}*/ /* end of group CMSIS_ITM */
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
S    \brief      Type definitions for the Data Watchpoint and Trace (DWT)
S  @{
S */
S
S/** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
S */
Stypedef struct
S{
S  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                          */
S  __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register                      */
S  __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register                        */
S  __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register         */
S  __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register                      */
S  __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register                        */
S  __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register         */
S  __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register           */
S  __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0                     */
S  __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                           */
S  __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0                       */
S       uint32_t RESERVED0[1];
S  __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1                     */
S  __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                           */
S  __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1                       */
S       uint32_t RESERVED1[1];
S  __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2                     */
S  __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                           */
S  __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2                       */
S       uint32_t RESERVED2[1];
S  __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3                     */
S  __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                           */
S  __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3                       */
S} DWT_Type;
S
S/* DWT Control Register Definitions */
S#define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTRL: NUMCOMP Position */
S#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
S
S#define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTRL: NOTRCPKT Position */
S#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
S
S#define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTRL: NOEXTTRIG Position */
S#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
S
S#define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTRL: NOCYCCNT Position */
S#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
S
S#define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTRL: NOPRFCNT Position */
S#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
S
S#define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTRL: CYCEVTENA Position */
S#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
S
S#define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTRL: FOLDEVTENA Position */
S#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
S
S#define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTRL: LSUEVTENA Position */
S#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
S
S#define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTRL: SLEEPEVTENA Position */
S#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
S
S#define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTRL: EXCEVTENA Position */
S#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
S
S#define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTRL: CPIEVTENA Position */
S#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
S
S#define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTRL: EXCTRCENA Position */
S#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
S
S#define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTRL: PCSAMPLENA Position */
S#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
S
S#define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTRL: SYNCTAP Position */
S#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
S
S#define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTRL: CYCTAP Position */
S#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
S
S#define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTRL: POSTINIT Position */
S#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
S
S#define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTRL: POSTPRESET Position */
S#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
S
S#define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTRL: CYCCNTENA Position */
S#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTRL: CYCCNTENA Mask */
S
S/* DWT CPI Count Register Definitions */
S#define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPICNT: CPICNT Position */
S#define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPICNT: CPICNT Mask */
S
S/* DWT Exception Overhead Count Register Definitions */
S#define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXCCNT: EXCCNT Position */
S#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXCCNT: EXCCNT Mask */
S
S/* DWT Sleep Count Register Definitions */
S#define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLEEPCNT: SLEEPCNT Position */
S#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLEEPCNT: SLEEPCNT Mask */
S
S/* DWT LSU Count Register Definitions */
S#define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSUCNT: LSUCNT Position */
S#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSUCNT: LSUCNT Mask */
S
S/* DWT Folded-instruction Count Register Definitions */
S#define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOLDCNT: FOLDCNT Position */
S#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOLDCNT: FOLDCNT Mask */
S
S/* DWT Comparator Mask Register Definitions */
S#define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MASK: MASK Position */
S#define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MASK: MASK Mask */
S
S/* DWT Comparator Function Register Definitions */
S#define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUNCTION: MATCHED Position */
S#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
S
S#define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUNCTION: DATAVADDR1 Position */
S#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
S
S#define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUNCTION: DATAVADDR0 Position */
S#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
S
S#define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUNCTION: DATAVSIZE Position */
S#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
S
S#define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUNCTION: LNK1ENA Position */
S#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
S
S#define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUNCTION: DATAVMATCH Position */
S#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
S
S#define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUNCTION: CYCMATCH Position */
S#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
S
S#define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUNCTION: EMITRANGE Position */
S#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
S
S#define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUNCTION: FUNCTION Position */
S#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUNCTION: FUNCTION Mask */
S
S/*@}*/ /* end of group CMSIS_DWT */
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_TPI     Trace Port Interface (TPI)
S    \brief      Type definitions for the Trace Port Interface (TPI)
S  @{
S */
S
S/** \brief  Structure type to access the Trace Port Interface Register (TPI).
S */
Stypedef struct
S{
S  __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register     */
S  __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
S       uint32_t RESERVED0[2];
S  __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
S       uint32_t RESERVED1[55];
S  __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
S       uint32_t RESERVED2[131];
S  __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
S  __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
S  __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
S       uint32_t RESERVED3[759];
S  __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
S  __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
S  __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
S       uint32_t RESERVED4[1];
S  __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
S  __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
S  __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
S       uint32_t RESERVED5[39];
S  __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
S  __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
S       uint32_t RESERVED7[8];
S  __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
S  __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
S} TPI_Type;
S
S/* TPI Asynchronous Clock Prescaler Register Definitions */
S#define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACPR: PRESCALER Position */
S#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACPR: PRESCALER Mask */
S
S/* TPI Selected Pin Protocol Register Definitions */
S#define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPPR: TXMODE Position */
S#define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPPR: TXMODE Mask */
S
S/* TPI Formatter and Flush Status Register Definitions */
S#define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFSR: FtNonStop Position */
S#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
S
S#define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFSR: TCPresent Position */
S#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
S
S#define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFSR: FtStopped Position */
S#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
S
S#define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFSR: FlInProg Position */
S#define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFSR: FlInProg Mask */
S
S/* TPI Formatter and Flush Control Register Definitions */
S#define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFCR: TrigIn Position */
S#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
S
S#define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFCR: EnFCont Position */
S#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
S
S/* TPI TRIGGER Register Definitions */
S#define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRIGGER: TRIGGER Position */
S#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRIGGER: TRIGGER Mask */
S
S/* TPI Integration ETM Data Register Definitions (FIFO0) */
S#define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIFO0: ITM_ATVALID Position */
S#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
S
S#define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIFO0: ITM_bytecount Position */
S#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
S
S#define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIFO0: ETM_ATVALID Position */
S#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
S
S#define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIFO0: ETM_bytecount Position */
S#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
S
S#define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIFO0: ETM2 Position */
S#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
S
S#define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIFO0: ETM1 Position */
S#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
S
S#define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIFO0: ETM0 Position */
S#define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIFO0: ETM0 Mask */
S
S/* TPI ITATBCTR2 Register Definitions */
S#define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITATBCTR2: ATREADY Position */
S#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITATBCTR2: ATREADY Mask */
S
S/* TPI Integration ITM Data Register Definitions (FIFO1) */
S#define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIFO1: ITM_ATVALID Position */
S#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
S
S#define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIFO1: ITM_bytecount Position */
S#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
S
S#define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIFO1: ETM_ATVALID Position */
S#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
S
S#define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIFO1: ETM_bytecount Position */
S#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
S
S#define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIFO1: ITM2 Position */
S#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
S
S#define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIFO1: ITM1 Position */
S#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
S
S#define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIFO1: ITM0 Position */
S#define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIFO1: ITM0 Mask */
S
S/* TPI ITATBCTR0 Register Definitions */
S#define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITATBCTR0: ATREADY Position */
S#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITATBCTR0: ATREADY Mask */
S
S/* TPI Integration Mode Control Register Definitions */
S#define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITCTRL: Mode Position */
S#define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITCTRL: Mode Mask */
S
S/* TPI DEVID Register Definitions */
S#define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEVID: NRZVALID Position */
S#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
S
S#define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEVID: MANCVALID Position */
S#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
S
S#define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEVID: PTINVALID Position */
S#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
S
S#define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEVID: MinBufSz Position */
S#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
S
S#define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEVID: AsynClkIn Position */
S#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
S
S#define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEVID: NrTraceInput Position */
S#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEVID: NrTraceInput Mask */
S
S/* TPI DEVTYPE Register Definitions */
S#define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEVTYPE: SubType Position */
S#define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEVTYPE: SubType Mask */
S
S#define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEVTYPE: MajorType Position */
S#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
S
S/*@}*/ /* end of group CMSIS_TPI */
S
S
S#if (__MPU_PRESENT == 1)
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
S    \brief      Type definitions for the Memory Protection Unit (MPU)
S  @{
S */
S
S/** \brief  Structure type to access the Memory Protection Unit (MPU).
S */
Stypedef struct
S{
S  __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register                              */
S  __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register                           */
S  __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register                     */
S  __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register               */
S  __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register         */
S  __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register       */
S  __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
S  __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register       */
S  __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
S  __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register       */
S  __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
S} MPU_Type;
S
S/* MPU Type Register */
S#define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU TYPE: IREGION Position */
S#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
S
S#define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU TYPE: DREGION Position */
S#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
S
S#define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU TYPE: SEPARATE Position */
S#define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU TYPE: SEPARATE Mask */
S
S/* MPU Control Register */
S#define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU CTRL: PRIVDEFENA Position */
S#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
S
S#define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU CTRL: HFNMIENA Position */
S#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
S
S#define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU CTRL: ENABLE Position */
S#define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU CTRL: ENABLE Mask */
S
S/* MPU Region Number Register */
S#define MPU_RNR_REGION_Pos                  0                                             /*!< MPU RNR: REGION Position */
S#define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU RNR: REGION Mask */
S
S/* MPU Region Base Address Register */
S#define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU RBAR: ADDR Position */
S#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
S
S#define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU RBAR: VALID Position */
S#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
S
S#define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU RBAR: REGION Position */
S#define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU RBAR: REGION Mask */
S
S/* MPU Region Attribute and Size Register */
S#define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU RASR: MPU Region Attribute field Position */
S#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
S
S#define MPU_RASR_XN_Pos                    28                                             /*!< MPU RASR: ATTRS.XN Position */
S#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
S
S#define MPU_RASR_AP_Pos                    24                                             /*!< MPU RASR: ATTRS.AP Position */
S#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
S
S#define MPU_RASR_TEX_Pos                   19                                             /*!< MPU RASR: ATTRS.TEX Position */
S#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
S
S#define MPU_RASR_S_Pos                     18                                             /*!< MPU RASR: ATTRS.S Position */
S#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
S
S#define MPU_RASR_C_Pos                     17                                             /*!< MPU RASR: ATTRS.C Position */
S#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
S
S#define MPU_RASR_B_Pos                     16                                             /*!< MPU RASR: ATTRS.B Position */
S#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
S
S#define MPU_RASR_SRD_Pos                    8                                             /*!< MPU RASR: Sub-Region Disable Position */
S#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
S
S#define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU RASR: Region Size Field Position */
S#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
S
S#define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU RASR: Region enable bit Position */
S#define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU RASR: Region enable bit Disable Mask */
S
S/*@} end of group CMSIS_MPU */
S#endif
S
S
S#if (__FPU_PRESENT == 1)
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_FPU     Floating Point Unit (FPU)
S    \brief      Type definitions for the Floating Point Unit (FPU)
S  @{
S */
S
S/** \brief  Structure type to access the Floating Point Unit (FPU).
S */
Stypedef struct
S{
S       uint32_t RESERVED0[1];
S  __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control Register               */
S  __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address Register               */
S  __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register        */
S  __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0                       */
S  __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1                       */
S} FPU_Type;
S
S/* Floating-Point Context Control Register */
S#define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCCR: ASPEN bit Position */
S#define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCCR: ASPEN bit Mask */
S
S#define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCCR: LSPEN Position */
S#define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCCR: LSPEN bit Mask */
S
S#define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCCR: MONRDY Position */
S#define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCCR: MONRDY bit Mask */
S
S#define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCCR: BFRDY Position */
S#define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCCR: BFRDY bit Mask */
S
S#define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCCR: MMRDY Position */
S#define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCCR: MMRDY bit Mask */
S
S#define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCCR: HFRDY Position */
S#define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCCR: HFRDY bit Mask */
S
S#define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCCR: processor mode bit Position */
S#define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCCR: processor mode active bit Mask */
S
S#define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCCR: privilege level bit Position */
S#define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCCR: privilege level bit Mask */
S
S#define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCCR: Lazy state preservation active bit Position */
S#define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCCR: Lazy state preservation active bit Mask */
S
S/* Floating-Point Context Address Register */
S#define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCAR: ADDRESS bit Position */
S#define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCAR: ADDRESS bit Mask */
S
S/* Floating-Point Default Status Control Register */
S#define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDSCR: AHP bit Position */
S#define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDSCR: AHP bit Mask */
S
S#define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDSCR: DN bit Position */
S#define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDSCR: DN bit Mask */
S
S#define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDSCR: FZ bit Position */
S#define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDSCR: FZ bit Mask */
S
S#define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDSCR: RMode bit Position */
S#define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDSCR: RMode bit Mask */
S
S/* Media and FP Feature Register 0 */
S#define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR0: FP rounding modes bits Position */
S#define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR0: FP rounding modes bits Mask */
S
S#define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR0: Short vectors bits Position */
S#define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR0: Short vectors bits Mask */
S
S#define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR0: Square root bits Position */
S#define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR0: Square root bits Mask */
S
S#define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR0: Divide bits Position */
S#define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR0: Divide bits Mask */
S
S#define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR0: FP exception trapping bits Position */
S#define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR0: FP exception trapping bits Mask */
S
S#define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR0: Double-precision bits Position */
S#define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR0: Double-precision bits Mask */
S
S#define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR0: Single-precision bits Position */
S#define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR0: Single-precision bits Mask */
S
S#define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR0: A_SIMD registers bits Position */
S#define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR0: A_SIMD registers bits Mask */
S
S/* Media and FP Feature Register 1 */
S#define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR1: FP fused MAC bits Position */
S#define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR1: FP fused MAC bits Mask */
S
S#define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR1: FP HPFP bits Position */
S#define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR1: FP HPFP bits Mask */
S
S#define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR1: D_NaN mode bits Position */
S#define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR1: D_NaN mode bits Mask */
S
S#define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR1: FtZ mode bits Position */
S#define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR1: FtZ mode bits Mask */
S
S/*@} end of group CMSIS_FPU */
S#endif
S
S
S/** \ingroup  CMSIS_core_register
S    \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
S    \brief      Type definitions for the Core Debug Registers
S  @{
S */
S
S/** \brief  Structure type to access the Core Debug Register (CoreDebug).
S */
Stypedef struct
S{
S  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */
S  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */
S  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */
S  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
S} CoreDebug_Type;
S
S/* Debug Halting Control and Status Register */
S#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
S#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
S
S#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
S#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
S
S#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
S#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
S
S#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
S#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
S
S#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
S#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
S
S#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
S#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
S
S#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
S#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
S
S#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
S#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
S
S#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
S#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
S
S#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
S#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
S
S#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
S#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
S
S#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
S#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
S
S/* Debug Core Register Selector Register */
S#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
S#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
S
S#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
S#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
S
S/* Debug Exception and Monitor Control Register */
S#define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< CoreDebug DEMCR: TRCENA Position */
S#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
S
S#define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< CoreDebug DEMCR: MON_REQ Position */
S#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
S
S#define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< CoreDebug DEMCR: MON_STEP Position */
S#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
S
S#define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< CoreDebug DEMCR: MON_PEND Position */
S#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
S
S#define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< CoreDebug DEMCR: MON_EN Position */
S#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
S
S#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
S#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
S
S#define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< CoreDebug DEMCR: VC_INTERR Position */
S#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
S
S#define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< CoreDebug DEMCR: VC_BUSERR Position */
S#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
S
S#define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< CoreDebug DEMCR: VC_STATERR Position */
S#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
S
S#define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< CoreDebug DEMCR: VC_CHKERR Position */
S#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
S
S#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< CoreDebug DEMCR: VC_NOCPERR Position */
S#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
S
S#define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< CoreDebug DEMCR: VC_MMERR Position */
S#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
S
S#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
S#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
S
S/*@} end of group CMSIS_CoreDebug */
S
S
S/** \ingroup    CMSIS_core_register
S    \defgroup   CMSIS_core_base     Core Definitions
S    \brief      Definitions for base addresses, unions, and structures.
S  @{
S */
S
S/* Memory mapping of Cortex-M4 Hardware */
S#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address  */
S#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address                   */
S#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address                   */
S#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address                   */
S#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address            */
S#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address               */
S#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address                  */
S#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address  */
S
S#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
S#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct           */
S#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct       */
S#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct          */
S#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct           */
S#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct           */
S#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct           */
S#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct    */
S
S#if (__MPU_PRESENT == 1)
S  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit             */
S  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit             */
S#endif
S
S#if (__FPU_PRESENT == 1)
S  #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit                */
S  #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit                */
S#endif
S
S/*@} */
S
S
S
S/*******************************************************************************
S *                Hardware Abstraction Layer
S  Core Function Interface contains:
S  - Core NVIC Functions
S  - Core SysTick Functions
S  - Core Debug Functions
S  - Core Register Access Functions
S ******************************************************************************/
S/** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
S*/
S
S
S
S/* ##########################   NVIC functions  #################################### */
S/** \ingroup  CMSIS_Core_FunctionInterface
S    \defgroup CMSIS_Core_NVICFunctions NVIC Functions
S    \brief      Functions that manage interrupts and exceptions via the NVIC.
S    @{
S */
S
S/** \brief  Set Priority Grouping
S
S  The function sets the priority grouping field using the required unlock sequence.
S  The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
S  Only values from 0..7 are used.
S  In case of a conflict between priority grouping and available
S  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
S
S    \param [in]      PriorityGroup  Priority grouping field.
S */
S__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
S{
S  uint32_t reg_value;
S  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
S
S  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
S  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
S  reg_value  =  (reg_value                                 |
S                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
S                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
S  SCB->AIRCR =  reg_value;
S}
S
S
S/** \brief  Get Priority Grouping
S
S  The function reads the priority grouping field from the NVIC Interrupt Controller.
S
S    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
S */
S__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
S{
S  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
S}
S
S
S/** \brief  Enable External Interrupt
S
S    The function enables a device-specific interrupt in the NVIC interrupt controller.
S
S    \param [in]      IRQn  External interrupt number. Value cannot be negative.
S */
S__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
S{
S/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
S  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
S}
S
S
S/** \brief  Disable External Interrupt
S
S    The function disables a device-specific interrupt in the NVIC interrupt controller.
S
S    \param [in]      IRQn  External interrupt number. Value cannot be negative.
S */
S__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
S{
S  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
S}
S
S
S/** \brief  Get Pending Interrupt
S
S    The function reads the pending register in the NVIC and returns the pending bit
S    for the specified interrupt.
S
S    \param [in]      IRQn  Interrupt number.
S
S    \return             0  Interrupt status is not pending.
S    \return             1  Interrupt status is pending.
S */
S__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
S{
S  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
S}
S
S
S/** \brief  Set Pending Interrupt
S
S    The function sets the pending bit of an external interrupt.
S
S    \param [in]      IRQn  Interrupt number. Value cannot be negative.
S */
S__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
S{
S  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
S}
S
S
S/** \brief  Clear Pending Interrupt
S
S    The function clears the pending bit of an external interrupt.
S
S    \param [in]      IRQn  External interrupt number. Value cannot be negative.
S */
S__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
S{
S  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
S}
S
S
S/** \brief  Get Active Interrupt
S
S    The function reads the active register in NVIC and returns the active bit.
S
S    \param [in]      IRQn  Interrupt number.
S
S    \return             0  Interrupt status is not active.
S    \return             1  Interrupt status is active.
S */
S__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
S{
S  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
S}
S
S
S/** \brief  Set Interrupt Priority
S
S    The function sets the priority of an interrupt.
S
S    \note The priority cannot be set for every core interrupt.
S
S    \param [in]      IRQn  Interrupt number.
S    \param [in]  priority  Priority to set.
S */
S__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
S{
S  if(IRQn < 0) {
S    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
S  else {
S    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
S}
S
S
S/** \brief  Get Interrupt Priority
S
S    The function reads the priority of an interrupt. The interrupt
S    number can be positive to specify an external (device specific)
S    interrupt, or negative to specify an internal (core) interrupt.
S
S
S    \param [in]   IRQn  Interrupt number.
S    \return             Interrupt Priority. Value is aligned automatically to the implemented
S                        priority bits of the microcontroller.
S */
S__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
S{
S
S  if(IRQn < 0) {
S    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
S  else {
S    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
S}
S
S
S/** \brief  Encode Priority
S
S    The function encodes the priority for an interrupt with the given priority group,
S    preemptive priority value, and subpriority value.
S    In case of a conflict between priority grouping and available
S    priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
S
S    \param [in]     PriorityGroup  Used priority group.
S    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
S    \param [in]       SubPriority  Subpriority value (starting from 0).
S    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
S */
S__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
S{
S  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
S  uint32_t PreemptPriorityBits;
S  uint32_t SubPriorityBits;
S
S  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
S  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
S
S  return (
S           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
S           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
S         );
S}
S
S
S/** \brief  Decode Priority
S
S    The function decodes an interrupt priority value with a given priority group to
S    preemptive priority value and subpriority value.
S    In case of a conflict between priority grouping and available
S    priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
S
S    \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
S    \param [in]     PriorityGroup  Used priority group.
S    \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
S    \param [out]     pSubPriority  Subpriority value (starting from 0).
S */
S__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
S{
S  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
S  uint32_t PreemptPriorityBits;
S  uint32_t SubPriorityBits;
S
S  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
S  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
S
S  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
S  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
S}
S
S
S/** \brief  System Reset
S
S    The function initiates a system reset request to reset the MCU.
S */
S__STATIC_INLINE void NVIC_SystemReset(void)
S{
S  __DSB();                                                     /* Ensure all outstanding memory accesses included
S                                                                  buffered write are completed before reset */
S  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
S                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
S                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
S  __DSB();                                                     /* Ensure completion of memory access */
S  while(1);                                                    /* wait until reset */
S}
S
S/*@} end of CMSIS_Core_NVICFunctions */
S
S
S
S/* ##################################    SysTick function  ############################################ */
S/** \ingroup  CMSIS_Core_FunctionInterface
S    \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
S    \brief      Functions that configure the System.
S  @{
S */
S
S#if (__Vendor_SysTickConfig == 0)
S
S/** \brief  System Tick Configuration
S
S    The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
S    Counter is in free running mode to generate periodic interrupts.
S
S    \param [in]  ticks  Number of ticks between two interrupts.
S
S    \return          0  Function succeeded.
S    \return          1  Function failed.
S
S    \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
S    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
S    must contain a vendor-specific implementation of this function.
S
S */
S__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
S{
S  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
S
S  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
S  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
S  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
S  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
S                   SysTick_CTRL_TICKINT_Msk   |
S                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
S  return (0);                                                  /* Function successful */
S}
S
S#endif
S
S/*@} end of CMSIS_Core_SysTickFunctions */
S
S
S
S/* ##################################### Debug In/Output function ########################################### */
S/** \ingroup  CMSIS_Core_FunctionInterface
S    \defgroup CMSIS_core_DebugFunctions ITM Functions
S    \brief   Functions that access the ITM debug interface.
S  @{
S */
S
Sextern volatile int32_t ITM_RxBuffer;                    /*!< External variable to receive characters.                         */
S#define                 ITM_RXBUFFER_EMPTY    0x5AA55AA5 /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
S
S
S/** \brief  ITM Send Character
S
S    The function transmits a character via the ITM channel 0, and
S    \li Just returns when no debugger is connected that has booked the output.
S    \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
S
S    \param [in]     ch  Character to transmit.
S
S    \returns            Character to transmit.
S */
S__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
S{
S  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
S      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
S  {
S    while (ITM->PORT[0].u32 == 0);
S    ITM->PORT[0].u8 = (uint8_t) ch;
S  }
S  return (ch);
S}
S
S
S/** \brief  ITM Receive Character
S
S    The function inputs a character via the external variable \ref ITM_RxBuffer.
S
S    \return             Received character.
S    \return         -1  No character pending.
S */
S__STATIC_INLINE int32_t ITM_ReceiveChar (void) {
S  int32_t ch = -1;                           /* no character available */
S
S  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY) {
S    ch = ITM_RxBuffer;
S    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
S  }
S
S  return (ch);
S}
S
S
S/** \brief  ITM Check Character
S
S    The function checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
S
S    \return          0  No character available.
S    \return          1  Character available.
S */
S__STATIC_INLINE int32_t ITM_CheckChar (void) {
S
S  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY) {
S    return (0);                                 /* no character available */
S  } else {
S    return (1);                                 /*    character available */
S  }
S}
S
S/*@} end of CMSIS_core_DebugFunctions */
S
S
S
S
S#ifdef __cplusplus
S}
S#endif
S
S#endif /* __CORE_CM4_H_DEPENDANT */
S
N#endif /* __CMSIS_GENERIC */
L 290 "..\..\SRC\CMSIS_DSP_4_5\inc\arm_math.h" 2
N#elif defined (ARM_MATH_CM3)
S  #include "core_cm3.h"
S#elif defined (ARM_MATH_CM0)
S  #include "core_cm0.h"
S#define ARM_MATH_CM0_FAMILY
S  #elif defined (ARM_MATH_CM0PLUS)
S#include "core_cm0plus.h"
S  #define ARM_MATH_CM0_FAMILY
S#else
S  #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_CM0PLUS or ARM_MATH_CM0"
N#endif
N
N#undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
N#include "string.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 304 "..\..\SRC\CMSIS_DSP_4_5\inc\arm_math.h" 2
N#include "math.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\math.h" 1
N/*
N * math.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.5
N * Copyright (C) Codemist Ltd., 1988
N * Copyright 1991-1998,2004-2006,2014 ARM Limited. All rights reserved
N */
N
N/*
N * RCS $Revision$ Codemist 0.03
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * Parts of this file are based upon fdlibm:
N *
N * ====================================================
N * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
N *
N * Developed at SunSoft, a Sun Microsystems, Inc. business.
N * Permission to use, copy, modify, and distribute this
N * software is freely granted, provided that this notice
N * is preserved.
N * ====================================================
N */
N
N#ifndef __math_h
N#define __math_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N/*
N * Some of these declarations are new in C99.  To access them in C++
N * you can use -D__USE_C99_MATH (or -D__USE_C99_ALL).
N */
N#ifndef __USE_C99_MATH
N  #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X  #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N    #define __USE_C99_MATH 1
N  #endif
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#ifdef __TARGET_ARCH_AARCH64
S# define _ARMABI_SOFTFP __declspec(__nothrow)
N#else
N# define _ARMABI_SOFTFP __declspec(__nothrow) __attribute__((__pcs__("aapcs")))
N# define __HAVE_LONGDOUBLE 1
N#endif
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#ifdef __FP_FENV_EXCEPTIONS
S# define _ARMABI_FPEXCEPT _ARMABI
N#else
N# define _ARMABI_FPEXCEPT _ARMABI __attribute__((const))
N#endif
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF inline
S#elif defined __GNUC__ || defined _USE_STATIC_INLINE
X#elif 0L || 0L
S#define _ARMABI_INLINE static __inline
S#define _ARMABI_INLINE_DEF static __inline
N#elif (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE inline
N#define _ARMABI_INLINE_DEF static inline
N#else
S#define _ARMABI_INLINE __inline
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N#ifdef __TARGET_ARCH_AARCH64
S#  define _SOFTFP
N#else
N#  define _SOFTFP __attribute__((__pcs__("aapcs")))
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain the nans function, as well as the
N    * FP_NANS and FP_NANQ classification macros.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
N/*
N * Macros for our inline functions down below.
N * unsigned& __FLT(float x) - returns the bit pattern of x
N * unsigned& __HI(double x) - returns the bit pattern of the high part of x
N *                            (high part has exponent & sign bit in it)
N * unsigned& __LO(double x) - returns the bit pattern of the low part of x
N *
N * We can assign to __FLT, __HI, and __LO and the appropriate bits get set in
N * the floating point variable used.
N *
N * __HI & __LO are affected by the endianness and the target FPU.
N */
N#define __FLT(x) (*(unsigned *)&(x))
N#if defined(__ARM_BIG_ENDIAN) || defined(__BIG_ENDIAN)
X#if 0L || 0L
S#  define __LO(x) (*(1 + (unsigned *)&(x)))
S#  define __HI(x) (*(unsigned *)&(x))
N#else /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N#  define __HI(x) (*(1 + (unsigned *)&(x)))
N#  define __LO(x) (*(unsigned *)&(x))
N#endif /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N
N#   ifndef __MATH_DECLS
N#   define __MATH_DECLS
N
N
N/*
N * A set of functions that we don't actually want to put in the standard
N * namespace ever.  These are all called by the C99 macros.  As they're
N * not specified by any standard they can't belong in ::std::.  The
N * macro #defines are below amongst the standard function declarations.
N * We only include these if we actually need them later on
N */
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N#   ifdef __cplusplus
S      extern "C" {
N#   endif /* __cplusplus */
N
Nextern _SOFTFP unsigned __ARM_dcmp4(double /*x*/, double /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
Nextern _SOFTFP unsigned __ARM_fcmp4(float /*x*/, float /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
N    /*
N     * Compare x and y and return the CPSR in r0.  These means we can test for
N     * result types with bit pattern matching.
N     *
N     * These are a copy of the declarations in rt_fp.h keep in sync.
N     */
N
Nextern _ARMABI_SOFTFP int __ARM_fpclassifyf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
Nextern _ARMABI_SOFTFP int __ARM_fpclassify(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
N    /* Classify x into NaN, infinite, normal, subnormal, zero */
N    /* Used by fpclassify macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinitef(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
N{
N    return ((__FLT(__x) >> 23) & 0xff) != 0xff;
X    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinite(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
N{
N    return ((__HI(__x) >> 20) & 0x7ff) != 0x7ff;
X    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
N}
N    /* Return 1 if __x is finite, 0 otherwise */
N    /* Used by isfinite macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinff(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
N{
N    return (__FLT(__x) << 1) == 0xff000000;
X    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinf(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
N{
N    return ((__HI(__x) << 1) == 0xffe00000) && (__LO(__x) == 0);
X    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
N}
N    /* Return 1 if __x is infinite, 0 otherwise */
N    /* Used by isinf macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreaterf(float __x, float __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
N{
N    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreater(double __x, double __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
N{
N    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N    /*
N     * Compare __x and __y and return 1 if __x < __y or __x > __y, 0 otherwise
N     * Used by islessgreater macro
N     */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnanf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
N{
N    return (0x7f800000 - (__FLT(__x) & 0x7fffffff)) >> 31;
X    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnan(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
N{
N    unsigned __xf = __HI(__x) | ((__LO(__x) == 0) ? 0 : 1);
X    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
N    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
N}
N    /* Return 1 if __x is a NaN, 0 otherwise */
N    /* Used by isnan macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormalf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
N{
N    unsigned __xe = (__FLT(__x) >> 23) & 0xff;
X    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
N    return (__xe != 0xff) && (__xe != 0);
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormal(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
N{
N    unsigned __xe = (__HI(__x) >> 20) & 0x7ff;
X    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
N    return (__xe != 0x7ff) && (__xe != 0);
N}
N    /* Return 1 if __x is a normalised number, 0 otherwise */
N    /* used by isnormal macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbitf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
N{
N    return __FLT(__x) >> 31;
X    return (*(unsigned *)&(__x)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbit(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
N{
N    return __HI(__x) >> 31;
X    return (*(1 + (unsigned *)&(__x))) >> 31;
N}
N    /* Return signbit of __x */
N    /* Used by signbit macro */
N
N#   ifdef __cplusplus
S      } /* extern "C" */
N#   endif /* __cplusplus */
N#endif /* Strict ANSI */
N
N#   undef __CLIBNS
N
N#   ifdef __cplusplus
S      namespace std {
S#       define __CLIBNS ::std::
S        extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N
N
N#ifndef __has_builtin
N  #define __has_builtin(x) 0
N#endif
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N  /* C99 additions */
N  typedef float float_t;
N  typedef double double_t;
N#if __has_builtin(__builtin_inf)
X#if 0
S#   define HUGE_VALF __builtin_inff()
S#   define HUGE_VALL __builtin_infl()
S#   define INFINITY __builtin_inff()
S#   define NAN __builtin_nanf("")
N# else
N#   define HUGE_VALF ((float)__INFINITY__)
N#   define HUGE_VALL ((long double)__INFINITY__)
N#   define INFINITY ((float)__INFINITY__)
N#   define NAN (__ESCAPE__(0f_7FC00000))
N#endif
N
N#   define MATH_ERRNO 1
N#   define MATH_ERREXCEPT 2
Nextern const int math_errhandling;
N#endif
N#if __has_builtin(__builtin_inf)
X#if 0
S# define HUGE_VAL __builtin_inf()
N#else
N# define HUGE_VAL ((double)__INFINITY__)
N#endif
N
Nextern _ARMABI double acos(double /*x*/);
Xextern __declspec(__nothrow) double acos(double  );
N   /* computes the principal value of the arc cosine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* Returns: the arc cosine in the range 0 to Pi. */
Nextern _ARMABI double asin(double /*x*/);
Xextern __declspec(__nothrow) double asin(double  );
N   /* computes the principal value of the arc sine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* and -HUGE_VAL is returned. */
N   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI_PURE double atan(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double atan(double  );
N   /* computes the principal value of the arc tangent of x */
N   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI double atan2(double /*y*/, double /*x*/);
Xextern __declspec(__nothrow) double atan2(double  , double  );
N   /* computes the principal value of the arc tangent of y/x, using the */
N   /* signs of both arguments to determine the quadrant of the return value */
N   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
N   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */
N
Nextern _ARMABI double cos(double /*x*/);
Xextern __declspec(__nothrow) double cos(double  );
N   /* computes the cosine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the cosine value. */
Nextern _ARMABI double sin(double /*x*/);
Xextern __declspec(__nothrow) double sin(double  );
N   /* computes the sine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the sine value. */
N
Nextern void __use_accurate_range_reduction(void);
N   /* reference this to select the larger, slower, but more accurate */
N   /* range reduction in sin, cos and tan */
N
Nextern _ARMABI double tan(double /*x*/);
Xextern __declspec(__nothrow) double tan(double  );
N   /* computes the tangent of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance */
N   /* Returns: the tangent value. */
N   /*          if range error; returns HUGE_VAL. */
N
Nextern _ARMABI double cosh(double /*x*/);
Xextern __declspec(__nothrow) double cosh(double  );
N   /* computes the hyperbolic cosine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic cosine value. */
N   /*          if range error; returns HUGE_VAL. */
Nextern _ARMABI double sinh(double /*x*/);
Xextern __declspec(__nothrow) double sinh(double  );
N   /* computes the hyperbolic sine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic sine value. */
N   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
N   /*          on the sign of the argument */
N
Nextern _ARMABI_PURE double tanh(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
N   /* computes the hyperbolic tangent of x. */
N   /* Returns: the hyperbolic tangent value. */
N
Nextern _ARMABI double exp(double /*x*/);
Xextern __declspec(__nothrow) double exp(double  );
N   /* computes the exponential function of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the exponential value. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
N
Nextern _ARMABI double frexp(double /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
N   /* breaks a floating-point number into a normalised fraction and an */
N   /* integral power of 2. It stores the integer in the int object pointed */
N   /* to by exp. */
N   /* Returns: the value x, such that x is a double with magnitude in the */
N   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
N   /* power *exp. If value is zero, both parts of the result are zero. */
N
Nextern _ARMABI double ldexp(double /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) double ldexp(double  , int  );
N   /* multiplies a floating-point number by an integral power of 2. */
N   /* A range error may occur. */
N   /* Returns: the value of x times 2 raised to the power of exp. */
N   /*          if range error; HUGE_VAL is returned. */
Nextern _ARMABI double log(double /*x*/);
Xextern __declspec(__nothrow) double log(double  );
N   /* computes the natural logarithm of x. A domain error occurs if the */
N   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
N   /* if the argument is zero. */
N   /* Returns: the natural logarithm. */
N   /*          if range error; -HUGE_VAL is returned. */
Nextern _ARMABI double log10(double /*x*/);
Xextern __declspec(__nothrow) double log10(double  );
N   /* computes the base-ten logarithm of x. A domain error occurs if the */
N   /* argument is negative. A range error occurs if the argument is zero. */
N   /* Returns: the base-ten logarithm. */
Nextern _ARMABI double modf(double /*value*/, double * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
N   /* breaks the argument value into integral and fraction parts, each of */
N   /* which has the same sign as the argument. It stores the integral part */
N   /* as a double in the object pointed to by iptr. */
N   /* Returns: the signed fractional part of value. */
N
Nextern _ARMABI double pow(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double pow(double  , double  );
N   /* computes x raised to the power of y. A domain error occurs if x is */
N   /* zero and y is less than or equal to zero, or if x is negative and y */
N   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
N   /* Returns: the value of x raised to the power of y. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
Nextern _ARMABI double sqrt(double /*x*/);
Xextern __declspec(__nothrow) double sqrt(double  );
N   /* computes the non-negative square root of x. A domain error occurs */
N   /* if the argument is negative, and -HUGE_VAL returned. */
N   /* Returns: the value of the square root. */
N
N#if defined(__TARGET_FPU_VFP_DOUBLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !0L
S    _ARMABI_INLINE double _sqrt(double __x) { return __sqrt(__x); }
N#else
N    _ARMABI_INLINE double _sqrt(double __x) { return sqrt(__x); }
X    inline double _sqrt(double __x) { return sqrt(__x); }
N#endif
N#if defined(__TARGET_FPU_VFP_SINGLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 1L && !0L
N    _ARMABI_INLINE float _sqrtf(float __x) { return __sqrtf(__x); }
X    inline float _sqrtf(float __x) { return __sqrtf(__x); }
N#else
S    _ARMABI_INLINE float _sqrtf(float __x) { return (float)sqrt(__x); }
N#endif
N    /* With VFP, _sqrt and _sqrtf should expand inline as the native VFP square root
N     * instructions. They will not behave like the C sqrt() function, because
N     * they will report unusual values as IEEE exceptions (in fpmodes which
N     * support IEEE exceptions) rather than in errno. These function names
N     * are not specified in any standard. */
N
Nextern _ARMABI_PURE double ceil(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
N   /* computes the smallest integer not less than x. */
N   /* Returns: the smallest integer not less than x, expressed as a double. */
Nextern _ARMABI_PURE double fabs(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
N   /* computes the absolute value of the floating-point number x. */
N   /* Returns: the absolute value of x. */
N
Nextern _ARMABI_PURE double floor(double /*d*/);
Xextern __declspec(__nothrow) __attribute__((const)) double floor(double  );
N   /* computes the largest integer not greater than x. */
N   /* Returns: the largest integer not greater than x, expressed as a double */
N
Nextern _ARMABI double fmod(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fmod(double  , double  );
N   /* computes the floating-point remainder of x/y. */
N   /* Returns: the value x - i * y, for some integer i such that, if y is */
N   /*          nonzero, the result has the same sign as x and magnitude */
N   /*          less than the magnitude of y. If y is zero, a domain error */
N   /*          occurs and -HUGE_VAL is returned. */
N
N    /* Additional Mathlib functions not defined by the ANSI standard.
N     * Not guaranteed, and not necessarily very well tested.
N     * C99 requires the user to include <math.h> to use these functions
N     * declaring them "by hand" is not sufficient
N     *
N     * The above statement is not completely true now.  Some of the above
N     * C99 functionality has been added as per the Standard, and (where
N     * necessary) old Mathlib functionality withdrawn/changed.  Before
N     * including this header #define __ENABLE_MATHLIB_LEGACY if you want to
N     * re-enable the legacy functionality.
N     */
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
Nextern _ARMABI double acosh(double /*x*/);
Xextern __declspec(__nothrow) double acosh(double  );
N    /*
N     * Inverse cosh. EDOM if argument < 1.0
N     */
Nextern _ARMABI double asinh(double /*x*/);
Xextern __declspec(__nothrow) double asinh(double  );
N    /*
N     * Inverse sinh.
N     */
Nextern _ARMABI double atanh(double /*x*/);
Xextern __declspec(__nothrow) double atanh(double  );
N    /*
N     * Inverse tanh. EDOM if |argument| > 1.0
N     */
Nextern _ARMABI double cbrt(double /*x*/);
Xextern __declspec(__nothrow) double cbrt(double  );
N    /*
N     * Cube root.
N     */
N_ARMABI_INLINE _ARMABI_PURE double copysign(double __x, double __y)
Xinline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __HI(__x) = (__HI(__x) & 0x7fffffff) | (__HI(__y) & 0x80000000);
X    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
N    return __x;
N}
N_ARMABI_INLINE _ARMABI_PURE float copysignf(float __x, float __y)
Xinline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __FLT(__x) = (__FLT(__x) & 0x7fffffff) | (__FLT(__y) & 0x80000000);
X    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
N    return __x;
N}
Nextern _ARMABI double erf(double /*x*/);
Xextern __declspec(__nothrow) double erf(double  );
N    /*
N     * Error function. (2/sqrt(pi)) * integral from 0 to x of exp(-t*t) dt.
N     */
Nextern _ARMABI double erfc(double /*x*/);
Xextern __declspec(__nothrow) double erfc(double  );
N    /*
N     * 1-erf(x). (More accurate than just coding 1-erf(x), for large x.)
N     */
Nextern _ARMABI double expm1(double /*x*/);
Xextern __declspec(__nothrow) double expm1(double  );
N    /*
N     * exp(x)-1. (More accurate than just coding exp(x)-1, for small x.)
N     */
N#define fpclassify(x) \
N    ((sizeof(x) == sizeof(float)) ? \
N        __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
X#define fpclassify(x)     ((sizeof(x) == sizeof(float)) ?         __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
N    /*
N     * Classify a floating point number into one of the following values:
N     */
N#define FP_ZERO         (0)
N#define FP_SUBNORMAL    (4)
N#define FP_NORMAL       (5)
N#define FP_INFINITE     (3)
N#define FP_NAN          (7)
N
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
S/* 
S * Note that we'll never classify a number as FP_NAN, as all NaNs will 
S * be either FP_NANQ or FP_NANS
S */
S#  define FP_NANQ       (8)
S#  define FP_NANS       (9)
N#endif
N
N
Nextern _ARMABI double hypot(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double hypot(double  , double  );
N    /*
N     * sqrt(x*x+y*y), ie the length of the vector (x,y) or the
N     * hypotenuse of a right triangle whose other two sides are x
N     * and y. Won't overflow unless the _answer_ is too big, even
N     * if the intermediate x*x+y*y is too big.
N     */
Nextern _ARMABI int ilogb(double /*x*/);
Xextern __declspec(__nothrow) int ilogb(double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
Nextern _ARMABI int ilogbf(float /*x*/);
Xextern __declspec(__nothrow) int ilogbf(float  );
N    /*
N     * Like ilogb but takes a float
N     */
Nextern _ARMABI int ilogbl(long double /*x*/);
Xextern __declspec(__nothrow) int ilogbl(long double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
N#define FP_ILOGB0   (-0x7fffffff) /* ilogb(0) == -INT_MAX */
N#define FP_ILOGBNAN ( 0x80000000) /* ilogb(NAN) == INT_MIN */
N
N#define isfinite(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isfinitef(x) \
N        : __ARM_isfinite(x))
X#define isfinite(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isfinitef(x)         : __ARM_isfinite(x))
N    /*
N     * Returns true if x is a finite number, size independent.
N     */
N
N#define isgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
X#define isgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
N    /*
N     * Returns true if x > y, throws no exceptions except on Signaling NaNs
N     *
N     * We want the C not set but the Z bit clear, V must be clear
N     */
N
N#define isgreaterequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
X#define isgreaterequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
N    /*
N     * Returns true if x >= y, throws no exceptions except on Signaling NaNs
N     *
N     * We just need to see if the C bit is set or not and ensure V clear
N     */
N
N#define isinf(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isinff(x) \
N        : __ARM_isinf(x))
X#define isinf(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isinff(x)         : __ARM_isinf(x))
N    /*
N     * Returns true if x is an infinity, size independent.
N     */
N
N#define isless(x, y)  \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
X#define isless(x, y)      (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
N    /*
N     * Returns true if x < y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than if N is set, V clear
N     */
N
N#define islessequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0) \
N        : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
X#define islessequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0)         : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
N    /*
N     * Returns true if x <= y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than or equal if one of N or Z is set, V clear
N     */
N
N#define islessgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? __ARM_islessgreaterf((x), (y)) \
N        : __ARM_islessgreater((x), (y)))
X#define islessgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? __ARM_islessgreaterf((x), (y))         : __ARM_islessgreater((x), (y)))
N    /*
N     * Returns true if x <> y, throws no exceptions except on Signaling NaNs
N     * Unfortunately this test is too complicated to do in a macro without
N     * evaluating x & y twice.  Shame really...
N     */
N
N#define isnan(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnanf(x) \
N        : __ARM_isnan(x))
X#define isnan(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnanf(x)         : __ARM_isnan(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isnormal(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnormalf(x) \
N        : __ARM_isnormal(x))
X#define isnormal(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnormalf(x)         : __ARM_isnormal(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isunordered(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
X#define isunordered(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000)         : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
N    /*
N     * Returns true if x ? y, throws no exceptions except on Signaling NaNs
N     * Unordered occurs if and only if the V bit is set
N     */
N
Nextern _ARMABI double lgamma (double /*x*/);
Xextern __declspec(__nothrow) double lgamma (double  );
N    /*
N     * The log of the absolute value of the gamma function of x. The sign
N     * of the gamma function of x is returned in the global `signgam'.
N     */
Nextern _ARMABI double log1p(double /*x*/);
Xextern __declspec(__nothrow) double log1p(double  );
N    /*
N     * log(1+x). (More accurate than just coding log(1+x), for small x.)
N     */
Nextern _ARMABI double logb(double /*x*/);
Xextern __declspec(__nothrow) double logb(double  );
N    /*
N     * Like ilogb but returns a double.
N     */
Nextern _ARMABI float logbf(float /*x*/);
Xextern __declspec(__nothrow) float logbf(float  );
N    /*
N     * Like logb but takes and returns float
N     */
Nextern _ARMABI long double logbl(long double /*x*/);
Xextern __declspec(__nothrow) long double logbl(long double  );
N    /*
N     * Like logb but takes and returns long double
N     */
Nextern _ARMABI double nextafter(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double nextafter(double  , double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nextafterf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float nextafterf(float  , float  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nextafterl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nextafterl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double nexttoward(double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) double nexttoward(double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nexttowardf(float /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) float nexttowardf(float  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nexttowardl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double remainder(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double remainder(double  , double  );
N    /*
N     * Returns the remainder of x by y, in the IEEE 754 sense.
N     */
Nextern _ARMABI_FPEXCEPT double rint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double rint(double  );
N    /*
N     * Rounds x to an integer, in the IEEE 754 sense.
N     */
Nextern _ARMABI double scalbln(double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) double scalbln(double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalblnf(float /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) float scalblnf(float  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalblnl(long double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) long double scalblnl(long double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI double scalbn(double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) double scalbn(double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalbnf(float /*x*/, int /*n*/);
Xextern __declspec(__nothrow) float scalbnf(float  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalbnl(long double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) long double scalbnl(long double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
N#define signbit(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_signbitf(x) \
N        : __ARM_signbit(x))
X#define signbit(x)     ((sizeof(x) == sizeof(float))         ? __ARM_signbitf(x)         : __ARM_signbit(x))
N    /*
N     * Returns the signbit of x, size independent macro
N     */
N#endif
N
N/* C99 float versions of functions.  math.h has always reserved these
N   identifiers for this purpose (7.13.4). */
Nextern _ARMABI_PURE float _fabsf(float); /* old ARM name */
Xextern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
N_ARMABI_INLINE _ARMABI_PURE float fabsf(float __f) { return _fabsf(__f); }
Xinline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
Nextern _ARMABI float sinf(float /*x*/);
Xextern __declspec(__nothrow) float sinf(float  );
Nextern _ARMABI float cosf(float /*x*/);
Xextern __declspec(__nothrow) float cosf(float  );
Nextern _ARMABI float tanf(float /*x*/);
Xextern __declspec(__nothrow) float tanf(float  );
Nextern _ARMABI float acosf(float /*x*/);
Xextern __declspec(__nothrow) float acosf(float  );
Nextern _ARMABI float asinf(float /*x*/);
Xextern __declspec(__nothrow) float asinf(float  );
Nextern _ARMABI float atanf(float /*x*/);
Xextern __declspec(__nothrow) float atanf(float  );
Nextern _ARMABI float atan2f(float /*y*/, float /*x*/);
Xextern __declspec(__nothrow) float atan2f(float  , float  );
Nextern _ARMABI float sinhf(float /*x*/);
Xextern __declspec(__nothrow) float sinhf(float  );
Nextern _ARMABI float coshf(float /*x*/);
Xextern __declspec(__nothrow) float coshf(float  );
Nextern _ARMABI float tanhf(float /*x*/);
Xextern __declspec(__nothrow) float tanhf(float  );
Nextern _ARMABI float expf(float /*x*/);
Xextern __declspec(__nothrow) float expf(float  );
Nextern _ARMABI float logf(float /*x*/);
Xextern __declspec(__nothrow) float logf(float  );
Nextern _ARMABI float log10f(float /*x*/);
Xextern __declspec(__nothrow) float log10f(float  );
Nextern _ARMABI float powf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float powf(float  , float  );
Nextern _ARMABI float sqrtf(float /*x*/);
Xextern __declspec(__nothrow) float sqrtf(float  );
Nextern _ARMABI float ldexpf(float /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) float ldexpf(float  , int  );
Nextern _ARMABI float frexpf(float /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI_PURE float ceilf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
Nextern _ARMABI_PURE float floorf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
Nextern _ARMABI float fmodf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fmodf(float  , float  );
Nextern _ARMABI float modff(float /*value*/, float * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));
N
N/* C99 long double versions of functions. */
N/* (also need to have 'using' declarations below) */
N#define _ARMDEFLD1(f) \
N    _ARMABI long double f##l(long double /*x*/)
X#define _ARMDEFLD1(f)     _ARMABI long double f##l(long double  )
N
N#define _ARMDEFLD1P(f, T) \
N    _ARMABI long double f##l(long double /*x*/, T /*p*/)
X#define _ARMDEFLD1P(f, T)     _ARMABI long double f##l(long double  , T  )
N
N#define _ARMDEFLD2(f) \
N    _ARMABI long double f##l(long double /*x*/, long double /*y*/)
X#define _ARMDEFLD2(f)     _ARMABI long double f##l(long double  , long double  )
N
N/*
N * Long double versions of C89 functions can be defined
N * unconditionally, because C89 reserved these names in "future
N * library directions".
N */
N_ARMDEFLD1(acos);
X__declspec(__nothrow) long double acosl(long double );
N_ARMDEFLD1(asin);
X__declspec(__nothrow) long double asinl(long double );
N_ARMDEFLD1(atan);
X__declspec(__nothrow) long double atanl(long double );
N_ARMDEFLD2(atan2);
X__declspec(__nothrow) long double atan2l(long double , long double );
N_ARMDEFLD1(ceil);
X__declspec(__nothrow) long double ceill(long double );
N_ARMDEFLD1(cos);
X__declspec(__nothrow) long double cosl(long double );
N_ARMDEFLD1(cosh);
X__declspec(__nothrow) long double coshl(long double );
N_ARMDEFLD1(exp);
X__declspec(__nothrow) long double expl(long double );
N_ARMDEFLD1(fabs);
X__declspec(__nothrow) long double fabsl(long double );
N_ARMDEFLD1(floor);
X__declspec(__nothrow) long double floorl(long double );
N_ARMDEFLD2(fmod);
X__declspec(__nothrow) long double fmodl(long double , long double );
N_ARMDEFLD1P(frexp, int*) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
N_ARMDEFLD1P(ldexp, int);
X__declspec(__nothrow) long double ldexpl(long double , int );
N_ARMDEFLD1(log);
X__declspec(__nothrow) long double logl(long double );
N_ARMDEFLD1(log10);
X__declspec(__nothrow) long double log10l(long double );
N_ARMABI long double modfl(long double /*x*/, long double * /*p*/) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
N_ARMDEFLD2(pow);
X__declspec(__nothrow) long double powl(long double , long double );
N_ARMDEFLD1(sin);
X__declspec(__nothrow) long double sinl(long double );
N_ARMDEFLD1(sinh);
X__declspec(__nothrow) long double sinhl(long double );
N_ARMDEFLD1(sqrt);
X__declspec(__nothrow) long double sqrtl(long double );
N_ARMDEFLD1(tan);
X__declspec(__nothrow) long double tanl(long double );
N_ARMDEFLD1(tanh);
X__declspec(__nothrow) long double tanhl(long double );
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
N/*
N * C99 float and long double versions of extra-C89 functions.
N */
Nextern _ARMABI float acoshf(float /*x*/);
Xextern __declspec(__nothrow) float acoshf(float  );
N_ARMDEFLD1(acosh);
X__declspec(__nothrow) long double acoshl(long double );
Nextern _ARMABI float asinhf(float /*x*/);
Xextern __declspec(__nothrow) float asinhf(float  );
N_ARMDEFLD1(asinh);
X__declspec(__nothrow) long double asinhl(long double );
Nextern _ARMABI float atanhf(float /*x*/);
Xextern __declspec(__nothrow) float atanhf(float  );
N_ARMDEFLD1(atanh);
X__declspec(__nothrow) long double atanhl(long double );
N_ARMDEFLD2(copysign);
X__declspec(__nothrow) long double copysignl(long double , long double );
Nextern _ARMABI float cbrtf(float /*x*/);
Xextern __declspec(__nothrow) float cbrtf(float  );
N_ARMDEFLD1(cbrt);
X__declspec(__nothrow) long double cbrtl(long double );
Nextern _ARMABI float erff(float /*x*/);
Xextern __declspec(__nothrow) float erff(float  );
N_ARMDEFLD1(erf);
X__declspec(__nothrow) long double erfl(long double );
Nextern _ARMABI float erfcf(float /*x*/);
Xextern __declspec(__nothrow) float erfcf(float  );
N_ARMDEFLD1(erfc);
X__declspec(__nothrow) long double erfcl(long double );
Nextern _ARMABI float expm1f(float /*x*/);
Xextern __declspec(__nothrow) float expm1f(float  );
N_ARMDEFLD1(expm1);
X__declspec(__nothrow) long double expm1l(long double );
Nextern _ARMABI float log1pf(float /*x*/);
Xextern __declspec(__nothrow) float log1pf(float  );
N_ARMDEFLD1(log1p);
X__declspec(__nothrow) long double log1pl(long double );
Nextern _ARMABI float hypotf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float hypotf(float  , float  );
N_ARMDEFLD2(hypot);
X__declspec(__nothrow) long double hypotl(long double , long double );
Nextern _ARMABI float lgammaf(float /*x*/);
Xextern __declspec(__nothrow) float lgammaf(float  );
N_ARMDEFLD1(lgamma);
X__declspec(__nothrow) long double lgammal(long double );
Nextern _ARMABI float remainderf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float remainderf(float  , float  );
N_ARMDEFLD2(remainder);
X__declspec(__nothrow) long double remainderl(long double , long double );
Nextern _ARMABI float rintf(float /*x*/);
Xextern __declspec(__nothrow) float rintf(float  );
N_ARMDEFLD1(rint);
X__declspec(__nothrow) long double rintl(long double );
N
N#endif
N
N#if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
X#if (0L && !0L) || 1L
N/*
N * Functions new in C99.
N */
Nextern _ARMABI double exp2(double /*x*/); /* * 2.^x. */
Xextern __declspec(__nothrow) double exp2(double  );  
Nextern _ARMABI float exp2f(float /*x*/);
Xextern __declspec(__nothrow) float exp2f(float  );
N_ARMDEFLD1(exp2);
X__declspec(__nothrow) long double exp2l(long double );
Nextern _ARMABI double fdim(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fdim(double  , double  );
Nextern _ARMABI float fdimf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fdimf(float  , float  );
N_ARMDEFLD2(fdim);
X__declspec(__nothrow) long double fdiml(long double , long double );
N#ifdef __FP_FAST_FMA
S#define FP_FAST_FMA
N#endif
N#ifdef __FP_FAST_FMAF
N#define FP_FAST_FMAF
N#endif
N#ifdef __FP_FAST_FMAL
S#define FP_FAST_FMAL
N#endif
Nextern _ARMABI double fma(double /*x*/, double /*y*/, double /*z*/);
Xextern __declspec(__nothrow) double fma(double  , double  , double  );
Nextern _ARMABI float fmaf(float /*x*/, float /*y*/, float /*z*/);
Xextern __declspec(__nothrow) float fmaf(float  , float  , float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z) \
N    { return (long double)fma((double)__x, (double)__y, (double)__z); }
Xinline __declspec(__nothrow) long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }
N#endif
Nextern _ARMABI_FPEXCEPT double fmax(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmax(double  , double  );
Nextern _ARMABI_FPEXCEPT float fmaxf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fmaxf(float  , float  );
N_ARMDEFLD2(fmax);
X__declspec(__nothrow) long double fmaxl(long double , long double );
Nextern _ARMABI_FPEXCEPT double fmin(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmin(double  , double  );
Nextern _ARMABI_FPEXCEPT float fminf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fminf(float  , float  );
N_ARMDEFLD2(fmin);
X__declspec(__nothrow) long double fminl(long double , long double );
Nextern _ARMABI double log2(double /*x*/); /* * log base 2 of x. */
Xextern __declspec(__nothrow) double log2(double  );  
Nextern _ARMABI float log2f(float /*x*/);
Xextern __declspec(__nothrow) float log2f(float  );
N_ARMDEFLD1(log2);
X__declspec(__nothrow) long double log2l(long double );
Nextern _ARMABI long lrint(double /*x*/);
Xextern __declspec(__nothrow) long lrint(double  );
Nextern _ARMABI long lrintf(float /*x*/);
Xextern __declspec(__nothrow) long lrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lrintl(long double __x) \
N    { return lrint((double)__x); }
Xinline __declspec(__nothrow) long lrintl(long double __x)     { return lrint((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llrint(double /*x*/);
Xextern __declspec(__nothrow) long long llrint(double  );
Nextern _ARMABI __LONGLONG llrintf(float /*x*/);
Xextern __declspec(__nothrow) long long llrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x) \
N    { return llrint((double)__x); }
Xinline __declspec(__nothrow) long long llrintl(long double __x)     { return llrint((double)__x); }
N#endif
Nextern _ARMABI long lround(double /*x*/);
Xextern __declspec(__nothrow) long lround(double  );
Nextern _ARMABI long lroundf(float /*x*/);
Xextern __declspec(__nothrow) long lroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lroundl(long double __x) \
N    { return lround((double)__x); }
Xinline __declspec(__nothrow) long lroundl(long double __x)     { return lround((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llround(double /*x*/);
Xextern __declspec(__nothrow) long long llround(double  );
Nextern _ARMABI __LONGLONG llroundf(float /*x*/);
Xextern __declspec(__nothrow) long long llroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x) \
N    { return llround((double)__x); }
Xinline __declspec(__nothrow) long long llroundl(long double __x)     { return llround((double)__x); }
N#endif
Nextern _ARMABI_PURE double nan(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nan(const char * );
Nextern _ARMABI_PURE float nanf(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nanf(const char * );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t) \
N    { return (long double)nan(__t); }
Xinline __declspec(__nothrow) __attribute__((const)) long double nanl(const char *__t)     { return (long double)nan(__t); }
N#endif
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
Sextern _ARMABI_PURE double nans(const char */*tagp*/);
Sextern _ARMABI_PURE float nansf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t) \
S    { return (long double)nans(__t); }
X_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t)     { return (long double)nans(__t); }
S#endif
N#endif 
Nextern _ARMABI_FPEXCEPT double nearbyint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nearbyint(double  );
Nextern _ARMABI_FPEXCEPT float nearbyintf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nearbyintf(float  );
N_ARMDEFLD1(nearbyint);
X__declspec(__nothrow) long double nearbyintl(long double );
Nextern  double remquo(double /*x*/, double /*y*/, int */*quo*/);
Nextern  float remquof(float /*x*/, float /*y*/, int */*quo*/);
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q) \
N    { return (long double)remquo((double)__x, (double)__y, __q); }
Xinline long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }
N#endif
Nextern _ARMABI_FPEXCEPT double round(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double round(double  );
Nextern _ARMABI_FPEXCEPT float roundf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float roundf(float  );
N_ARMDEFLD1(round);
X__declspec(__nothrow) long double roundl(long double );
Nextern _ARMABI double tgamma(double /*x*/); /* * The gamma function of x. */
Xextern __declspec(__nothrow) double tgamma(double  );  
Nextern _ARMABI float tgammaf(float /*x*/);
Xextern __declspec(__nothrow) float tgammaf(float  );
N_ARMDEFLD1(tgamma);
X__declspec(__nothrow) long double tgammal(long double );
Nextern _ARMABI_FPEXCEPT double trunc(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double trunc(double  );
Nextern _ARMABI_FPEXCEPT float truncf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float truncf(float  );
N_ARMDEFLD1(trunc);
X__declspec(__nothrow) long double truncl(long double );
N#endif
N
N#undef _ARMDEFLD1
N#undef _ARMDEFLD1P
N#undef _ARMDEFLD2
N
N#if defined(__cplusplus) && ((!defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)) || defined(__ARMCOMPILER_LIBCXX))
X#if 0L && ((!0L || 1L) || 0L)
S  extern "C++" {
S    inline int (fpclassify)(double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(double __x) { return isfinite(__x); }
S    inline bool (isgreater)(double __x, double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(double __x, double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(double __x) { return isinf(__x); }
S    inline bool (isless)(double __x, double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(double __x, double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(double __x, double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(double __x) { return isnan(__x); }
S    inline bool (isnormal)(double __x) { return isnormal(__x); }
S    inline bool (isunordered)(double __x, double __y) { return isunordered(__x, __y); }
S
S  }
N#endif
N
N#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
X#if 0L && !0L
S  extern "C++" {
S    inline float abs(float __x)   { return fabsf(__x); }
S    inline float acos(float __x)  { return acosf(__x); }
S    inline float asin(float __x)  { return asinf(__x); }
S    inline float atan(float __x)  { return atanf(__x); }
S    inline float atan2(float __y, float __x)    { return atan2f(__y,__x); }
S    inline float ceil(float __x)  { return ceilf(__x); }
S    inline float cos(float __x)   { return cosf(__x); }
S    inline float cosh(float __x)  { return coshf(__x); }
S    inline float exp(float __x)   { return expf(__x); }
S    inline float fabs(float __x)  { return fabsf(__x); }
S    inline float floor(float __x) { return floorf(__x); }
S    inline float fmod(float __x, float __y)     { return fmodf(__x, __y); }
S    float frexp(float __x, int* __exp) __attribute__((__nonnull__(2)));
S    inline float frexp(float __x, int* __exp)   { return frexpf(__x, __exp); }
S    inline float ldexp(float __x, int __exp)    { return ldexpf(__x, __exp);}
S    inline float log(float __x)   { return logf(__x); }
S    inline float log10(float __x) { return log10f(__x); }
S    float modf(float __x, float* __iptr) __attribute__((__nonnull__(2)));
S    inline float modf(float __x, float* __iptr) { return modff(__x, __iptr); }
S    inline float pow(float __x, float __y)      { return powf(__x,__y); }
S    inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
S    inline float sin(float __x)   { return sinf(__x); }
S    inline float sinh(float __x)  { return sinhf(__x); }
S    inline float sqrt(float __x)  { return sqrtf(__x); }
S    inline float _sqrt(float __x) { return _sqrtf(__x); }
S    inline float tan(float __x)   { return tanf(__x); }
S    inline float tanh(float __x)  { return tanhf(__x); }
S
S    inline double abs(double __x) { return fabs(__x); }
S    inline double pow(double __x, int __y)
S                { return pow(__x, (double) __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double abs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double acos(long double __x)
S                { return (long double)acosl(__x); }
S    inline long double asin(long double __x)
S                { return (long double)asinl(__x); }
S    inline long double atan(long double __x)
S                { return (long double)atanl(__x); }
S    inline long double atan2(long double __y, long double __x)
S                { return (long double)atan2l(__y, __x); }
S    inline long double ceil(long double __x)
S                { return (long double)ceill( __x); }
S    inline long double cos(long double __x)
S                { return (long double)cosl(__x); }
S    inline long double cosh(long double __x)
S                { return (long double)coshl(__x); }
S    inline long double exp(long double __x)
S                { return (long double)expl(__x); }
S    inline long double fabs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double floor(long double __x)
S                { return (long double)floorl(__x); }
S    inline long double fmod(long double __x, long double __y)
S                { return (long double)fmodl(__x, __y); }
S    long double frexp(long double __x, int* __p) __attribute__((__nonnull__(2)));
S    inline long double frexp(long double __x, int* __p)
S                { return (long double)frexpl(__x, __p); }
S    inline long double ldexp(long double __x, int __exp)
S                { return (long double)ldexpl(__x, __exp); }
S    inline long double log(long double __x)
S                { return (long double)logl(__x); }
S    inline long double log10(long double __x)
S                { return (long double)log10l(__x); }
S    long double modf(long double __x, long double* __p) __attribute__((__nonnull__(2)));
S    inline long double modf(long double __x, long double* __p)
S                { return (long double)modfl(__x, __p); }
S    inline long double pow(long double __x, long double __y)
S                { return (long double)powl(__x, __y); }
S    inline long double pow(long double __x, int __y)
S                { return (long double)powl(__x, __y); }
S    inline long double sin(long double __x)
S                { return (long double)sinl(__x); }
S    inline long double sinh(long double __x)
S                { return (long double)sinhl(__x); }
S    inline long double sqrt(long double __x)
S                { return (long double)sqrtl(__x); }
S    inline long double _sqrt(long double __x)
S                { return (long double)_sqrt((double) __x); }
S    inline long double tan(long double __x)
S                { return (long double)tanl(__x); }
S    inline long double tanh(long double __x)
S                { return (long double)tanhl(__x); }
S#endif
S
S#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S    inline float acosh(float __x) { return acoshf(__x); }
S    inline float asinh(float __x) { return asinhf(__x); }
S    inline float atanh(float __x) { return atanhf(__x); }
S    inline float cbrt(float __x) { return cbrtf(__x); }
S    inline float erf(float __x) { return erff(__x); }
S    inline float erfc(float __x) { return erfcf(__x); }
S    inline float expm1(float __x) { return expm1f(__x); }
S    inline float log1p(float __x) { return log1pf(__x); }
S    inline float hypot(float __x, float __y) { return hypotf(__x, __y); }
S    inline float lgamma(float __x) { return lgammaf(__x); }
S    inline float remainder(float __x, float __y) { return remainderf(__x, __y); }
S    inline float rint(float __x) { return rintf(__x); }
S#endif
S
S#ifdef __USE_C99_MATH
S    inline float exp2(float __x) { return exp2f(__x); }
S    inline float fdim(float __x, float __y) { return fdimf(__x, __y); }
S    inline float fma(float __x, float __y, float __z) { return fmaf(__x, __y, __z); }
S    inline float fmax(float __x, float __y) { return fmaxf(__x, __y); }
S    inline float fmin(float __x, float __y) { return fminf(__x, __y); }
S    inline float log2(float __x) { return log2f(__x); }
S    inline _ARMABI long lrint(float __x) { return lrintf(__x); }
S    inline _ARMABI __LONGLONG llrint(float __x) { return llrintf(__x); }
S    inline _ARMABI long lround(float __x) { return lroundf(__x); }
S    inline _ARMABI __LONGLONG llround(float __x) { return llroundf(__x); }
S    inline _ARMABI_FPEXCEPT float nearbyint(float __x) { return nearbyintf(__x); }
S    inline float remquo(float __x, float __y, int *__q) { return remquof(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT float round(float __x) { return roundf(__x); }
S    inline float tgamma(float __x) { return tgammaf(__x); }
S    inline _ARMABI_FPEXCEPT float trunc(float __x) { return truncf(__x); }
S
S    inline int (fpclassify)(float __x) { return fpclassify(__x); }
S    inline bool (isfinite)(float __x) { return isfinite(__x); }
S    inline bool (isgreater)(float __x, float __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(float __x, float __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(float __x) { return isinf(__x); }
S    inline bool (isless)(float __x, float __y) { return isless(__x, __y); }
S    inline bool (islessequal)(float __x, float __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(float __x, float __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(float __x) { return isnan(__x); }
S    inline bool (isnormal)(float __x) { return isnormal(__x); }
S    inline bool (isunordered)(float __x, float __y) { return isunordered(__x, __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double acosh(long double __x) { return acoshl(__x); }
S    inline long double asinh(long double __x) { return asinhl(__x); }
S    inline long double atanh(long double __x) { return atanhl(__x); }
S    inline long double cbrt(long double __x) { return cbrtl(__x); }
S    inline long double erf(long double __x) { return erfl(__x); }
S    inline long double erfc(long double __x) { return erfcl(__x); }
S    inline long double expm1(long double __x) { return expm1l(__x); }
S    inline long double log1p(long double __x) { return log1pl(__x); }
S    inline long double hypot(long double __x, long double __y) { return hypotl(__x, __y); }
S    inline long double lgamma(long double __x) { return lgammal(__x); }
S    inline long double remainder(long double __x, long double __y) { return remainderl(__x, __y); }
S    inline long double rint(long double __x) { return rintl(__x); }
S    inline long double exp2(long double __x) { return exp2l(__x); }
S    inline long double fdim(long double __x, long double __y) { return fdiml(__x, __y); }
S    inline long double fma(long double __x, long double __y, long double __z) { return fmal(__x, __y, __z); }
S    inline long double fmax(long double __x, long double __y) { return fmaxl(__x, __y); }
S    inline long double fmin(long double __x, long double __y) { return fminl(__x, __y); }
S    inline long double log2(long double __x) { return log2l(__x); }
S    inline _ARMABI long lrint(long double __x) { return lrintl(__x); }
S    inline _ARMABI __LONGLONG llrint(long double __x) { return llrintl(__x); }
S    inline _ARMABI long lround(long double __x) { return lroundl(__x); }
S    inline _ARMABI __LONGLONG llround(long double __x) { return llroundl(__x); }
S    inline _ARMABI_FPEXCEPT long double nearbyint(long double __x) { return nearbyintl(__x); }
S    inline long double remquo(long double __x, long double __y, int *__q) { return remquol(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT long double round(long double __x) { return roundl(__x); }
S    inline long double tgamma(long double __x) { return tgammal(__x); }
S    inline _ARMABI_FPEXCEPT long double trunc(long double __x) { return truncl(__x); }
S    inline int (fpclassify)(long double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(long double __x) { return isfinite(__x); }
S    inline bool (isgreater)(long double __x, long double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(long double __x, long double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(long double __x) { return isinf(__x); }
S    inline bool (isless)(long double __x, long double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(long double __x, long double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(long double __x, long double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(long double __x) { return isnan(__x); }
S    inline bool (isnormal)(long double __x) { return isnormal(__x); }
S    inline bool (isunordered)(long double __x, long double __y) { return isunordered(__x, __y); }
S#endif
S
S#undef fpclassify
S#undef isfinite
S#undef isgreater
S#undef isgreaterequal
S#undef isinf
S#undef isless
S#undef islessequal
S#undef islessgreater
S#undef isnan
S#undef isnormal
S#undef isunordered
S
S#endif
S
S  }
N#endif
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __MATH_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__MATH_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::__use_accurate_range_reduction;
S    #ifndef __ARMCOMPILER_LIBCXX
S      using ::std::abs;
S    #endif
S    using ::std::acos;
S    using ::std::asin;
S    using ::std::atan2;
S    using ::std::atan;
S    using ::std::ceil;
S    using ::std::cos;
S    using ::std::cosh;
S    using ::std::exp;
S    using ::std::fabs;
S    using ::std::floor;
S    using ::std::fmod;
S    using ::std::frexp;
S    using ::std::ldexp;
S    using ::std::log10;
S    using ::std::log;
S    using ::std::modf;
S    using ::std::pow;
S    using ::std::sin;
S    using ::std::sinh;
S    using ::std::sqrt;
S    using ::std::_sqrt;
S    using ::std::_sqrtf;
S    using ::std::tan;
S    using ::std::tanh;
S    using ::std::_fabsf;
S    /* C99 float and long double versions in already-C89-reserved namespace */
S    using ::std::acosf;
S    using ::std::acosl;
S    using ::std::asinf;
S    using ::std::asinl;
S    using ::std::atan2f;
S    using ::std::atan2l;
S    using ::std::atanf;
S    using ::std::atanl;
S    using ::std::ceilf;
S    using ::std::ceill;
S    using ::std::cosf;
S    using ::std::coshf;
S    using ::std::coshl;
S    using ::std::cosl;
S    using ::std::expf;
S    using ::std::expl;
S    using ::std::fabsf;
S    using ::std::fabsl;
S    using ::std::floorf;
S    using ::std::floorl;
S    using ::std::fmodf;
S    using ::std::fmodl;
S    using ::std::frexpf;
S    using ::std::frexpl;
S    using ::std::ldexpf;
S    using ::std::ldexpl;
S    using ::std::log10f;
S    using ::std::log10l;
S    using ::std::logf;
S    using ::std::logl;
S    using ::std::modff;
S    using ::std::modfl;
S    using ::std::powf;
S    using ::std::powl;
S    using ::std::sinf;
S    using ::std::sinhf;
S    using ::std::sinhl;
S    using ::std::sinl;
S    using ::std::sqrtf;
S    using ::std::sqrtl;
S    using ::std::tanf;
S    using ::std::tanhf;
S    using ::std::tanhl;
S    using ::std::tanl;
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which for historical reasons appear in non-strict mode */
S      using ::std::acosh;
S      using ::std::asinh;
S      using ::std::atanh;
S      using ::std::cbrt;
S      using ::std::copysign;
S      using ::std::copysignf;
S      using ::std::erf;
S      using ::std::erfc;
S      using ::std::expm1;
S      using ::std::hypot;
S      using ::std::ilogb;
S      using ::std::ilogbf;
S      using ::std::ilogbl;
S      using ::std::lgamma;
S      using ::std::log1p;
S      using ::std::logb;
S      using ::std::logbf;
S      using ::std::logbl;
S      using ::std::nextafter;
S      using ::std::nextafterf;
S      using ::std::nextafterl;
S      using ::std::nexttoward;
S      using ::std::nexttowardf;
S      using ::std::nexttowardl;
S      using ::std::remainder;
S      using ::std::rint;
S      using ::std::scalbln;
S      using ::std::scalblnf;
S      using ::std::scalblnl;
S      using ::std::scalbn;
S      using ::std::scalbnf;
S      using ::std::scalbnl;
S      using ::std::math_errhandling;
S      using ::std::acoshf;
S      using ::std::acoshl;
S      using ::std::asinhf;
S      using ::std::asinhl;
S      using ::std::atanhf;
S      using ::std::atanhl;
S      using ::std::copysignl;
S      using ::std::cbrtf;
S      using ::std::cbrtl;
S      using ::std::erff;
S      using ::std::erfl;
S      using ::std::erfcf;
S      using ::std::erfcl;
S      using ::std::expm1f;
S      using ::std::expm1l;
S      using ::std::log1pf;
S      using ::std::log1pl;
S      using ::std::hypotf;
S      using ::std::hypotl;
S      using ::std::lgammaf;
S      using ::std::lgammal;
S      using ::std::remainderf;
S      using ::std::remainderl;
S      using ::std::rintf;
S      using ::std::rintl;
S      /* New in C99. */
S      using ::std::float_t;
S      using ::std::double_t;
S    #endif
S    #if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
S      /* Functions new in C99. */
S      using ::std::exp2;
S      using ::std::exp2f;
S      using ::std::exp2l;
S      using ::std::fdim;
S      using ::std::fdimf;
S      using ::std::fdiml;
S      using ::std::fma;
S      using ::std::fmaf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::fmal;
S#endif
S      using ::std::fmax;
S      using ::std::fmaxf;
S      using ::std::fmaxl;
S      using ::std::fmin;
S      using ::std::fminf;
S      using ::std::fminl;
S      using ::std::log2;
S      using ::std::log2f;
S      using ::std::log2l;
S      using ::std::lrint;
S      using ::std::lrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lrintl;
S#endif
S      using ::std::llrint;
S      using ::std::llrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llrintl;
S#endif
S      using ::std::lround;
S      using ::std::lroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lroundl;
S#endif
S      using ::std::llround;
S      using ::std::llroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llroundl;
S#endif
S      using ::std::nan;
S      using ::std::nanf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::nanl;
S#endif
S      using ::std::nearbyint;
S      using ::std::nearbyintf;
S      using ::std::nearbyintl;
S      using ::std::remquo;
S      using ::std::remquof;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::remquol;
S#endif
S      using ::std::round;
S      using ::std::roundf;
S      using ::std::roundl;
S      using ::std::tgamma;
S      using ::std::tgammaf;
S      using ::std::tgammal;
S      using ::std::trunc;
S      using ::std::truncf;
S      using ::std::truncl;
S    #endif
S
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      using ::std::fpclassify;
S      using ::std::isfinite;
S      using ::std::isgreater;
S      using ::std::isgreaterequal;
S      using ::std::isinf;
S      using ::std::isless;
S      using ::std::islessequal;
S      using ::std::islessgreater;
S      using ::std::isnan;
S      using ::std::isnormal;
S      using ::std::isunordered;
S    #endif
N  #endif
N
N#undef __LONGLONG
N
N#endif /* __math_h */
N
N/* end of math.h */
L 305 "..\..\SRC\CMSIS_DSP_4_5\inc\arm_math.h" 2
N#ifdef	__cplusplus
Sextern "C"
S{
N#endif
N
N
N  /**
N   * @brief Macros required for reciprocal calculation in Normalized LMS
N   */
N
N#define DELTA_Q31 			(0x100)
N#define DELTA_Q15 			0x5
N#define INDEX_MASK 			0x0000003F
N#ifndef PI
N#define PI					3.14159265358979f
N#endif
N
N  /**
N   * @brief Macros required for SINE and COSINE Fast math approximations
N   */
N
N#define FAST_MATH_TABLE_SIZE  512
N#define FAST_MATH_Q31_SHIFT   (32 - 10)
N#define FAST_MATH_Q15_SHIFT   (16 - 10)
N#define CONTROLLER_Q31_SHIFT  (32 - 9)
N#define TABLE_SIZE  256
N#define TABLE_SPACING_Q31	   0x400000
N#define TABLE_SPACING_Q15	   0x80
N
N  /**
N   * @brief Macros required for SINE and COSINE Controller functions
N   */
N  /* 1.31(q31) Fixed value of 2/360 */
N  /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
N#define INPUT_SPACING			0xB60B61
N
N  /**
N   * @brief Macro for Unaligned Support
N   */
N#ifndef UNALIGNED_SUPPORT_DISABLE
N    #define ALIGN4
N#else
S  #if defined  (__GNUC__)
S    #define ALIGN4 __attribute__((aligned(4)))
S  #else
S    #define ALIGN4 __align(4)
S  #endif
N#endif	/*	#ifndef UNALIGNED_SUPPORT_DISABLE	*/
N
N  /**
N   * @brief Error status returned by some functions in the library.
N   */
N
N  typedef enum
N  {
N    ARM_MATH_SUCCESS = 0,                /**< No error */
N    ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
N    ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
N    ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation. */
N    ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
N    ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
N    ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
N  } arm_status;
N
N  /**
N   * @brief 8-bit fractional data type in 1.7 format.
N   */
N  typedef int8_t q7_t;
N
N  /**
N   * @brief 16-bit fractional data type in 1.15 format.
N   */
N  typedef int16_t q15_t;
N
N  /**
N   * @brief 32-bit fractional data type in 1.31 format.
N   */
N  typedef int32_t q31_t;
N
N  /**
N   * @brief 64-bit fractional data type in 1.63 format.
N   */
N  typedef int64_t q63_t;
N
N  /**
N   * @brief 32-bit floating-point type definition.
N   */
N  typedef float float32_t;
N
N  /**
N   * @brief 64-bit floating-point type definition.
N   */
N  typedef double float64_t;
N
N  /**
N   * @brief definition to read/write two 16 bit values.
N   */
N#if defined __CC_ARM
X#if 1L
N#define __SIMD32_TYPE int32_t __packed
N#define CMSIS_UNUSED __attribute__((unused))
N#elif defined __ICCARM__
S#define CMSIS_UNUSED
S#define __SIMD32_TYPE int32_t __packed
S#elif defined __GNUC__
S#define __SIMD32_TYPE int32_t
S#define CMSIS_UNUSED __attribute__((unused))
S#elif defined __CSMC__			/* Cosmic */
S#define CMSIS_UNUSED
S#define __SIMD32_TYPE int32_t
S#else
S#error Unknown compiler
N#endif
N
N#define __SIMD32(addr)  (*(__SIMD32_TYPE **) & (addr))
N#define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
N
N#define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
N
N#define __SIMD64(addr)  (*(int64_t **) & (addr))
N
N#if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY)
X#if 0L || 0L
S  /**
S   * @brief definition to pack two 16 bit values.
S   */
S#define __PKHBT(ARG1, ARG2, ARG3)      ( (((int32_t)(ARG1) <<  0) & (int32_t)0x0000FFFF) | \
S                                         (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
X#define __PKHBT(ARG1, ARG2, ARG3)      ( (((int32_t)(ARG1) <<  0) & (int32_t)0x0000FFFF) |                                          (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
S#define __PKHTB(ARG1, ARG2, ARG3)      ( (((int32_t)(ARG1) <<  0) & (int32_t)0xFFFF0000) | \
S                                         (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
X#define __PKHTB(ARG1, ARG2, ARG3)      ( (((int32_t)(ARG1) <<  0) & (int32_t)0xFFFF0000) |                                          (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
S
N#endif
N
N
N   /**
N   * @brief definition to pack four 8 bit values.
N   */
N#ifndef ARM_MATH_BIG_ENDIAN
N
N#define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) |	\
N                                (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) |	\
N							    (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) |	\
N							    (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
X#define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) |	                                (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) |								    (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) |								    (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
N#else
S
S#define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) |	\
S                                (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) |	\
S							    (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) |	\
S							    (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
X#define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) |	                                (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) |								    (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) |								    (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
S
N#endif
N
N
N  /**
N   * @brief Clips Q63 to Q31 values.
N   */
N  static __INLINE q31_t clip_q63_to_q31(
X  static __inline q31_t clip_q63_to_q31(
N  q63_t x)
N  {
N    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
N      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
N  }
N
N  /**
N   * @brief Clips Q63 to Q15 values.
N   */
N  static __INLINE q15_t clip_q63_to_q15(
X  static __inline q15_t clip_q63_to_q15(
N  q63_t x)
N  {
N    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
N      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
N  }
N
N  /**
N   * @brief Clips Q31 to Q7 values.
N   */
N  static __INLINE q7_t clip_q31_to_q7(
X  static __inline q7_t clip_q31_to_q7(
N  q31_t x)
N  {
N    return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
N      ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
N  }
N
N  /**
N   * @brief Clips Q31 to Q15 values.
N   */
N  static __INLINE q15_t clip_q31_to_q15(
X  static __inline q15_t clip_q31_to_q15(
N  q31_t x)
N  {
N    return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
N      ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
N  }
N
N  /**
N   * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
N   */
N
N  static __INLINE q63_t mult32x64(
X  static __inline q63_t mult32x64(
N  q63_t x,
N  q31_t y)
N  {
N    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
N            (((q63_t) (x >> 32) * y)));
N  }
N
N
N#if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
X#if 0L && 1L
S#define __CLZ __clz
N#endif
N
N#if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__)) ||(defined (__GNUC__)) || defined (__TASKING__) )
X#if 0L && ((0L) ||(0L) || 0L )
S
S  static __INLINE uint32_t __CLZ(
S  q31_t data);
S
S
S  static __INLINE uint32_t __CLZ(
S  q31_t data)
S  {
S    uint32_t count = 0;
S    uint32_t mask = 0x80000000;
S
S    while((data & mask) == 0)
S    {
S      count += 1u;
S      mask = mask >> 1u;
S    }
S
S    return (count);
S
S  }
S
N#endif
N
N  /**
N   * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
N   */
N
N  static __INLINE uint32_t arm_recip_q31(
X  static __inline uint32_t arm_recip_q31(
N  q31_t in,
N  q31_t * dst,
N  q31_t * pRecipTable)
N  {
N
N    uint32_t out, tempVal;
N    uint32_t index, i;
N    uint32_t signBits;
N
N    if(in > 0)
N    {
N      signBits = __CLZ(in) - 1;
X      signBits = __clz(in) - 1;
N    }
N    else
N    {
N      signBits = __CLZ(-in) - 1;
X      signBits = __clz(-in) - 1;
N    }
N
N    /* Convert input sample to 1.31 format */
N    in = in << signBits;
N
N    /* calculation of index for initial approximated Val */
N    index = (uint32_t) (in >> 24u);
N    index = (index & INDEX_MASK);
X    index = (index & 0x0000003F);
N
N    /* 1.31 with exp 1 */
N    out = pRecipTable[index];
N
N    /* calculation of reciprocal value */
N    /* running approximation for two iterations */
N    for (i = 0u; i < 2u; i++)
N    {
N      tempVal = (q31_t) (((q63_t) in * out) >> 31u);
N      tempVal = 0x7FFFFFFF - tempVal;
N      /*      1.31 with exp 1 */
N      //out = (q31_t) (((q63_t) out * tempVal) >> 30u);
N      out = (q31_t) clip_q63_to_q31(((q63_t) out * tempVal) >> 30u);
N    }
N
N    /* write output */
N    *dst = out;
N
N    /* return num of signbits of out = 1/in value */
N    return (signBits + 1u);
N
N  }
N
N  /**
N   * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
N   */
N  static __INLINE uint32_t arm_recip_q15(
X  static __inline uint32_t arm_recip_q15(
N  q15_t in,
N  q15_t * dst,
N  q15_t * pRecipTable)
N  {
N
N    uint32_t out = 0, tempVal = 0;
N    uint32_t index = 0, i = 0;
N    uint32_t signBits = 0;
N
N    if(in > 0)
N    {
N      signBits = __CLZ(in) - 17;
X      signBits = __clz(in) - 17;
N    }
N    else
N    {
N      signBits = __CLZ(-in) - 17;
X      signBits = __clz(-in) - 17;
N    }
N
N    /* Convert input sample to 1.15 format */
N    in = in << signBits;
N
N    /* calculation of index for initial approximated Val */
N    index = in >> 8;
N    index = (index & INDEX_MASK);
X    index = (index & 0x0000003F);
N
N    /*      1.15 with exp 1  */
N    out = pRecipTable[index];
N
N    /* calculation of reciprocal value */
N    /* running approximation for two iterations */
N    for (i = 0; i < 2; i++)
N    {
N      tempVal = (q15_t) (((q31_t) in * out) >> 15);
N      tempVal = 0x7FFF - tempVal;
N      /*      1.15 with exp 1 */
N      out = (q15_t) (((q31_t) out * tempVal) >> 14);
N    }
N
N    /* write output */
N    *dst = out;
N
N    /* return num of signbits of out = 1/in value */
N    return (signBits + 1);
N
N  }
N
N
N  /*
N   * @brief C custom defined intrinisic function for only M0 processors
N   */
N#if defined(ARM_MATH_CM0_FAMILY)
X#if 0L
S
S  static __INLINE q31_t __SSAT(
S  q31_t x,
S  uint32_t y)
S  {
S    int32_t posMax, negMin;
S    uint32_t i;
S
S    posMax = 1;
S    for (i = 0; i < (y - 1); i++)
S    {
S      posMax = posMax * 2;
S    }
S
S    if(x > 0)
S    {
S      posMax = (posMax - 1);
S
S      if(x > posMax)
S      {
S        x = posMax;
S      }
S    }
S    else
S    {
S      negMin = -posMax;
S
S      if(x < negMin)
S      {
S        x = negMin;
S      }
S    }
S    return (x);
S
S
S  }
S
N#endif /* end of ARM_MATH_CM0_FAMILY */
N
N
N
N  /*
N   * @brief C custom defined intrinsic function for M3 and M0 processors
N   */
N#if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY)
X#if 0L || 0L
S
S  /*
S   * @brief C custom defined QADD8 for M3 and M0 processors
S   */
S  static __INLINE q31_t __QADD8(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q7_t r, s, t, u;
S
S    r = (q7_t) x;
S    s = (q7_t) y;
S
S    r = __SSAT((q31_t) (r + s), 8);
S    s = __SSAT(((q31_t) (((x << 16) >> 24) + ((y << 16) >> 24))), 8);
S    t = __SSAT(((q31_t) (((x << 8) >> 24) + ((y << 8) >> 24))), 8);
S    u = __SSAT(((q31_t) ((x >> 24) + (y >> 24))), 8);
S
S    sum =
S      (((q31_t) u << 24) & 0xFF000000) | (((q31_t) t << 16) & 0x00FF0000) |
S      (((q31_t) s << 8) & 0x0000FF00) | (r & 0x000000FF);
S
S    return sum;
S
S  }
S
S  /*
S   * @brief C custom defined QSUB8 for M3 and M0 processors
S   */
S  static __INLINE q31_t __QSUB8(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q31_t r, s, t, u;
S
S    r = (q7_t) x;
S    s = (q7_t) y;
S
S    r = __SSAT((r - s), 8);
S    s = __SSAT(((q31_t) (((x << 16) >> 24) - ((y << 16) >> 24))), 8) << 8;
S    t = __SSAT(((q31_t) (((x << 8) >> 24) - ((y << 8) >> 24))), 8) << 16;
S    u = __SSAT(((q31_t) ((x >> 24) - (y >> 24))), 8) << 24;
S
S    sum =
S      (u & 0xFF000000) | (t & 0x00FF0000) | (s & 0x0000FF00) | (r &
S                                                                0x000000FF);
S
S    return sum;
S  }
S
S  /*
S   * @brief C custom defined QADD16 for M3 and M0 processors
S   */
S
S  /*
S   * @brief C custom defined QADD16 for M3 and M0 processors
S   */
S  static __INLINE q31_t __QADD16(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q31_t r, s;
S
S    r = (q15_t) x;
S    s = (q15_t) y;
S
S    r = __SSAT(r + s, 16);
S    s = __SSAT(((q31_t) ((x >> 16) + (y >> 16))), 16) << 16;
S
S    sum = (s & 0xFFFF0000) | (r & 0x0000FFFF);
S
S    return sum;
S
S  }
S
S  /*
S   * @brief C custom defined SHADD16 for M3 and M0 processors
S   */
S  static __INLINE q31_t __SHADD16(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q31_t r, s;
S
S    r = (q15_t) x;
S    s = (q15_t) y;
S
S    r = ((r >> 1) + (s >> 1));
S    s = ((q31_t) ((x >> 17) + (y >> 17))) << 16;
S
S    sum = (s & 0xFFFF0000) | (r & 0x0000FFFF);
S
S    return sum;
S
S  }
S
S  /*
S   * @brief C custom defined QSUB16 for M3 and M0 processors
S   */
S  static __INLINE q31_t __QSUB16(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q31_t r, s;
S
S    r = (q15_t) x;
S    s = (q15_t) y;
S
S    r = __SSAT(r - s, 16);
S    s = __SSAT(((q31_t) ((x >> 16) - (y >> 16))), 16) << 16;
S
S    sum = (s & 0xFFFF0000) | (r & 0x0000FFFF);
S
S    return sum;
S  }
S
S  /*
S   * @brief C custom defined SHSUB16 for M3 and M0 processors
S   */
S  static __INLINE q31_t __SHSUB16(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t diff;
S    q31_t r, s;
S
S    r = (q15_t) x;
S    s = (q15_t) y;
S
S    r = ((r >> 1) - (s >> 1));
S    s = (((x >> 17) - (y >> 17)) << 16);
S
S    diff = (s & 0xFFFF0000) | (r & 0x0000FFFF);
S
S    return diff;
S  }
S
S  /*
S   * @brief C custom defined QASX for M3 and M0 processors
S   */
S  static __INLINE q31_t __QASX(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum = 0;
S
S    sum =
S      ((sum +
S        clip_q31_to_q15((q31_t) ((q15_t) (x >> 16) + (q15_t) y))) << 16) +
S      clip_q31_to_q15((q31_t) ((q15_t) x - (q15_t) (y >> 16)));
S
S    return sum;
S  }
S
S  /*
S   * @brief C custom defined SHASX for M3 and M0 processors
S   */
S  static __INLINE q31_t __SHASX(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q31_t r, s;
S
S    r = (q15_t) x;
S    s = (q15_t) y;
S
S    r = ((r >> 1) - (y >> 17));
S    s = (((x >> 17) + (s >> 1)) << 16);
S
S    sum = (s & 0xFFFF0000) | (r & 0x0000FFFF);
S
S    return sum;
S  }
S
S
S  /*
S   * @brief C custom defined QSAX for M3 and M0 processors
S   */
S  static __INLINE q31_t __QSAX(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum = 0;
S
S    sum =
S      ((sum +
S        clip_q31_to_q15((q31_t) ((q15_t) (x >> 16) - (q15_t) y))) << 16) +
S      clip_q31_to_q15((q31_t) ((q15_t) x + (q15_t) (y >> 16)));
S
S    return sum;
S  }
S
S  /*
S   * @brief C custom defined SHSAX for M3 and M0 processors
S   */
S  static __INLINE q31_t __SHSAX(
S  q31_t x,
S  q31_t y)
S  {
S
S    q31_t sum;
S    q31_t r, s;
S
S    r = (q15_t) x;
S    s = (q15_t) y;
S
S    r = ((r >> 1) + (y >> 17));
S    s = (((x >> 17) - (s >> 1)) << 16);
S
S    sum = (s & 0xFFFF0000) | (r & 0x0000FFFF);
S
S    return sum;
S  }
S
S  /*
S   * @brief C custom defined SMUSDX for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMUSDX(
S  q31_t x,
S  q31_t y)
S  {
S
S    return ((q31_t) (((q15_t) x * (q15_t) (y >> 16)) -
S                     ((q15_t) (x >> 16) * (q15_t) y)));
S  }
S
S  /*
S   * @brief C custom defined SMUADX for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMUADX(
S  q31_t x,
S  q31_t y)
S  {
S
S    return ((q31_t) (((q15_t) x * (q15_t) (y >> 16)) +
S                     ((q15_t) (x >> 16) * (q15_t) y)));
S  }
S
S  /*
S   * @brief C custom defined QADD for M3 and M0 processors
S   */
S  static __INLINE q31_t __QADD(
S  q31_t x,
S  q31_t y)
S  {
S    return clip_q63_to_q31((q63_t) x + y);
S  }
S
S  /*
S   * @brief C custom defined QSUB for M3 and M0 processors
S   */
S  static __INLINE q31_t __QSUB(
S  q31_t x,
S  q31_t y)
S  {
S    return clip_q63_to_q31((q63_t) x - y);
S  }
S
S  /*
S   * @brief C custom defined SMLAD for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMLAD(
S  q31_t x,
S  q31_t y,
S  q31_t sum)
S  {
S
S    return (sum + ((q15_t) (x >> 16) * (q15_t) (y >> 16)) +
S            ((q15_t) x * (q15_t) y));
S  }
S
S  /*
S   * @brief C custom defined SMLADX for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMLADX(
S  q31_t x,
S  q31_t y,
S  q31_t sum)
S  {
S
S    return (sum + ((q15_t) (x >> 16) * (q15_t) (y)) +
S            ((q15_t) x * (q15_t) (y >> 16)));
S  }
S
S  /*
S   * @brief C custom defined SMLSDX for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMLSDX(
S  q31_t x,
S  q31_t y,
S  q31_t sum)
S  {
S
S    return (sum - ((q15_t) (x >> 16) * (q15_t) (y)) +
S            ((q15_t) x * (q15_t) (y >> 16)));
S  }
S
S  /*
S   * @brief C custom defined SMLALD for M3 and M0 processors
S   */
S  static __INLINE q63_t __SMLALD(
S  q31_t x,
S  q31_t y,
S  q63_t sum)
S  {
S
S    return (sum + ((q15_t) (x >> 16) * (q15_t) (y >> 16)) +
S            ((q15_t) x * (q15_t) y));
S  }
S
S  /*
S   * @brief C custom defined SMLALDX for M3 and M0 processors
S   */
S  static __INLINE q63_t __SMLALDX(
S  q31_t x,
S  q31_t y,
S  q63_t sum)
S  {
S
S    return (sum + ((q15_t) (x >> 16) * (q15_t) y)) +
S      ((q15_t) x * (q15_t) (y >> 16));
S  }
S
S  /*
S   * @brief C custom defined SMUAD for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMUAD(
S  q31_t x,
S  q31_t y)
S  {
S
S    return (((x >> 16) * (y >> 16)) +
S            (((x << 16) >> 16) * ((y << 16) >> 16)));
S  }
S
S  /*
S   * @brief C custom defined SMUSD for M3 and M0 processors
S   */
S  static __INLINE q31_t __SMUSD(
S  q31_t x,
S  q31_t y)
S  {
S
S    return (-((x >> 16) * (y >> 16)) +
S            (((x << 16) >> 16) * ((y << 16) >> 16)));
S  }
S
S
S  /*
S   * @brief C custom defined SXTB16 for M3 and M0 processors
S   */
S  static __INLINE q31_t __SXTB16(
S  q31_t x)
S  {
S
S    return ((((x << 24) >> 24) & 0x0000FFFF) |
S            (((x << 8) >> 8) & 0xFFFF0000));
S  }
S
S
N#endif /* defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
N
N
N  /**
N   * @brief Instance structure for the Q7 FIR filter.
N   */
N  typedef struct
N  {
N    uint16_t numTaps;        /**< number of filter coefficients in the filter. */
N    q7_t *pState;            /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q7_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.*/
N  } arm_fir_instance_q7;
N
N  /**
N   * @brief Instance structure for the Q15 FIR filter.
N   */
N  typedef struct
N  {
N    uint16_t numTaps;         /**< number of filter coefficients in the filter. */
N    q15_t *pState;            /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q15_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.*/
N  } arm_fir_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 FIR filter.
N   */
N  typedef struct
N  {
N    uint16_t numTaps;         /**< number of filter coefficients in the filter. */
N    q31_t *pState;            /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q31_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps. */
N  } arm_fir_instance_q31;
N
N  /**
N   * @brief Instance structure for the floating-point FIR filter.
N   */
N  typedef struct
N  {
N    uint16_t numTaps;     /**< number of filter coefficients in the filter. */
N    float32_t *pState;    /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    float32_t *pCoeffs;   /**< points to the coefficient array. The array is of length numTaps. */
N  } arm_fir_instance_f32;
N
N
N  /**
N   * @brief Processing function for the Q7 FIR filter.
N   * @param[in] *S points to an instance of the Q7 FIR filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_q7(
N  const arm_fir_instance_q7 * S,
N  q7_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Initialization function for the Q7 FIR filter.
N   * @param[in,out] *S points to an instance of the Q7 FIR structure.
N   * @param[in] numTaps  Number of filter coefficients in the filter.
N   * @param[in] *pCoeffs points to the filter coefficients.
N   * @param[in] *pState points to the state buffer.
N   * @param[in] blockSize number of samples that are processed.
N   * @return none
N   */
N  void arm_fir_init_q7(
N  arm_fir_instance_q7 * S,
N  uint16_t numTaps,
N  q7_t * pCoeffs,
N  q7_t * pState,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Processing function for the Q15 FIR filter.
N   * @param[in] *S points to an instance of the Q15 FIR structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_q15(
N  const arm_fir_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the fast Q15 FIR filter for Cortex-M3 and Cortex-M4.
N   * @param[in] *S points to an instance of the Q15 FIR filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_fast_q15(
N  const arm_fir_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q15 FIR filter.
N   * @param[in,out] *S points to an instance of the Q15 FIR filter structure.
N   * @param[in] numTaps  Number of filter coefficients in the filter. Must be even and greater than or equal to 4.
N   * @param[in] *pCoeffs points to the filter coefficients.
N   * @param[in] *pState points to the state buffer.
N   * @param[in] blockSize number of samples that are processed at a time.
N   * @return The function returns ARM_MATH_SUCCESS if initialization was successful or ARM_MATH_ARGUMENT_ERROR if
N   * <code>numTaps</code> is not a supported value.
N   */
N
N  arm_status arm_fir_init_q15(
N  arm_fir_instance_q15 * S,
N  uint16_t numTaps,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q31 FIR filter.
N   * @param[in] *S points to an instance of the Q31 FIR filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_q31(
N  const arm_fir_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the fast Q31 FIR filter for Cortex-M3 and Cortex-M4.
N   * @param[in] *S points to an instance of the Q31 FIR structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_fast_q31(
N  const arm_fir_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q31 FIR filter.
N   * @param[in,out] *S points to an instance of the Q31 FIR structure.
N   * @param[in] 	numTaps  Number of filter coefficients in the filter.
N   * @param[in] 	*pCoeffs points to the filter coefficients.
N   * @param[in] 	*pState points to the state buffer.
N   * @param[in] 	blockSize number of samples that are processed at a time.
N   * @return 		none.
N   */
N  void arm_fir_init_q31(
N  arm_fir_instance_q31 * S,
N  uint16_t numTaps,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the floating-point FIR filter.
N   * @param[in] *S points to an instance of the floating-point FIR structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_f32(
N  const arm_fir_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the floating-point FIR filter.
N   * @param[in,out] *S points to an instance of the floating-point FIR filter structure.
N   * @param[in] 	numTaps  Number of filter coefficients in the filter.
N   * @param[in] 	*pCoeffs points to the filter coefficients.
N   * @param[in] 	*pState points to the state buffer.
N   * @param[in] 	blockSize number of samples that are processed at a time.
N   * @return    	none.
N   */
N  void arm_fir_init_f32(
N  arm_fir_instance_f32 * S,
N  uint16_t numTaps,
N  float32_t * pCoeffs,
N  float32_t * pState,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Instance structure for the Q15 Biquad cascade filter.
N   */
N  typedef struct
N  {
N    int8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    q15_t *pState;            /**< Points to the array of state coefficients.  The array is of length 4*numStages. */
N    q15_t *pCoeffs;           /**< Points to the array of coefficients.  The array is of length 5*numStages. */
N    int8_t postShift;         /**< Additional shift, in bits, applied to each output sample. */
N
N  } arm_biquad_casd_df1_inst_q15;
N
N
N  /**
N   * @brief Instance structure for the Q31 Biquad cascade filter.
N   */
N  typedef struct
N  {
N    uint32_t numStages;      /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    q31_t *pState;           /**< Points to the array of state coefficients.  The array is of length 4*numStages. */
N    q31_t *pCoeffs;          /**< Points to the array of coefficients.  The array is of length 5*numStages. */
N    uint8_t postShift;       /**< Additional shift, in bits, applied to each output sample. */
N
N  } arm_biquad_casd_df1_inst_q31;
N
N  /**
N   * @brief Instance structure for the floating-point Biquad cascade filter.
N   */
N  typedef struct
N  {
N    uint32_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    float32_t *pState;          /**< Points to the array of state coefficients.  The array is of length 4*numStages. */
N    float32_t *pCoeffs;         /**< Points to the array of coefficients.  The array is of length 5*numStages. */
N
N
N  } arm_biquad_casd_df1_inst_f32;
N
N
N
N  /**
N   * @brief Processing function for the Q15 Biquad cascade filter.
N   * @param[in]  *S points to an instance of the Q15 Biquad cascade structure.
N   * @param[in]  *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in]  blockSize number of samples to process.
N   * @return     none.
N   */
N
N  void arm_biquad_cascade_df1_q15(
N  const arm_biquad_casd_df1_inst_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q15 Biquad cascade filter.
N   * @param[in,out] *S           points to an instance of the Q15 Biquad cascade structure.
N   * @param[in]     numStages    number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @param[in]     postShift    Shift to be applied to the output. Varies according to the coefficients format
N   * @return        none
N   */
N
N  void arm_biquad_cascade_df1_init_q15(
N  arm_biquad_casd_df1_inst_q15 * S,
N  uint8_t numStages,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  int8_t postShift);
N
N
N  /**
N   * @brief Fast but less precise processing function for the Q15 Biquad cascade filter for Cortex-M3 and Cortex-M4.
N   * @param[in]  *S points to an instance of the Q15 Biquad cascade structure.
N   * @param[in]  *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in]  blockSize number of samples to process.
N   * @return     none.
N   */
N
N  void arm_biquad_cascade_df1_fast_q15(
N  const arm_biquad_casd_df1_inst_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Processing function for the Q31 Biquad cascade filter
N   * @param[in]  *S         points to an instance of the Q31 Biquad cascade structure.
N   * @param[in]  *pSrc      points to the block of input data.
N   * @param[out] *pDst      points to the block of output data.
N   * @param[in]  blockSize  number of samples to process.
N   * @return     none.
N   */
N
N  void arm_biquad_cascade_df1_q31(
N  const arm_biquad_casd_df1_inst_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Fast but less precise processing function for the Q31 Biquad cascade filter for Cortex-M3 and Cortex-M4.
N   * @param[in]  *S         points to an instance of the Q31 Biquad cascade structure.
N   * @param[in]  *pSrc      points to the block of input data.
N   * @param[out] *pDst      points to the block of output data.
N   * @param[in]  blockSize  number of samples to process.
N   * @return     none.
N   */
N
N  void arm_biquad_cascade_df1_fast_q31(
N  const arm_biquad_casd_df1_inst_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q31 Biquad cascade filter.
N   * @param[in,out] *S           points to an instance of the Q31 Biquad cascade structure.
N   * @param[in]     numStages      number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @param[in]     postShift    Shift to be applied to the output. Varies according to the coefficients format
N   * @return        none
N   */
N
N  void arm_biquad_cascade_df1_init_q31(
N  arm_biquad_casd_df1_inst_q31 * S,
N  uint8_t numStages,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  int8_t postShift);
N
N  /**
N   * @brief Processing function for the floating-point Biquad cascade filter.
N   * @param[in]  *S         points to an instance of the floating-point Biquad cascade structure.
N   * @param[in]  *pSrc      points to the block of input data.
N   * @param[out] *pDst      points to the block of output data.
N   * @param[in]  blockSize  number of samples to process.
N   * @return     none.
N   */
N
N  void arm_biquad_cascade_df1_f32(
N  const arm_biquad_casd_df1_inst_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the floating-point Biquad cascade filter.
N   * @param[in,out] *S           points to an instance of the floating-point Biquad cascade structure.
N   * @param[in]     numStages    number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @return        none
N   */
N
N  void arm_biquad_cascade_df1_init_f32(
N  arm_biquad_casd_df1_inst_f32 * S,
N  uint8_t numStages,
N  float32_t * pCoeffs,
N  float32_t * pState);
N
N
N  /**
N   * @brief Instance structure for the floating-point matrix structure.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;     /**< number of rows of the matrix.     */
N    uint16_t numCols;     /**< number of columns of the matrix.  */
N    float32_t *pData;     /**< points to the data of the matrix. */
N  } arm_matrix_instance_f32;
N
N
N  /**
N   * @brief Instance structure for the floating-point matrix structure.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;     /**< number of rows of the matrix.     */
N    uint16_t numCols;     /**< number of columns of the matrix.  */
N    float64_t *pData;     /**< points to the data of the matrix. */
N  } arm_matrix_instance_f64;
N
N  /**
N   * @brief Instance structure for the Q15 matrix structure.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;     /**< number of rows of the matrix.     */
N    uint16_t numCols;     /**< number of columns of the matrix.  */
N    q15_t *pData;         /**< points to the data of the matrix. */
N
N  } arm_matrix_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 matrix structure.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;     /**< number of rows of the matrix.     */
N    uint16_t numCols;     /**< number of columns of the matrix.  */
N    q31_t *pData;         /**< points to the data of the matrix. */
N
N  } arm_matrix_instance_q31;
N
N
N
N  /**
N   * @brief Floating-point matrix addition.
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_add_f32(
N  const arm_matrix_instance_f32 * pSrcA,
N  const arm_matrix_instance_f32 * pSrcB,
N  arm_matrix_instance_f32 * pDst);
N
N  /**
N   * @brief Q15 matrix addition.
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_add_q15(
N  const arm_matrix_instance_q15 * pSrcA,
N  const arm_matrix_instance_q15 * pSrcB,
N  arm_matrix_instance_q15 * pDst);
N
N  /**
N   * @brief Q31 matrix addition.
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_add_q31(
N  const arm_matrix_instance_q31 * pSrcA,
N  const arm_matrix_instance_q31 * pSrcB,
N  arm_matrix_instance_q31 * pDst);
N
N  /**
N   * @brief Floating-point, complex, matrix multiplication.
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_cmplx_mult_f32(
N  const arm_matrix_instance_f32 * pSrcA,
N  const arm_matrix_instance_f32 * pSrcB,
N  arm_matrix_instance_f32 * pDst);
N
N  /**
N   * @brief Q15, complex,  matrix multiplication.
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_cmplx_mult_q15(
N  const arm_matrix_instance_q15 * pSrcA,
N  const arm_matrix_instance_q15 * pSrcB,
N  arm_matrix_instance_q15 * pDst,
N  q15_t * pScratch);
N
N  /**
N   * @brief Q31, complex, matrix multiplication.
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_cmplx_mult_q31(
N  const arm_matrix_instance_q31 * pSrcA,
N  const arm_matrix_instance_q31 * pSrcB,
N  arm_matrix_instance_q31 * pDst);
N
N
N  /**
N   * @brief Floating-point matrix transpose.
N   * @param[in]  *pSrc points to the input matrix
N   * @param[out] *pDst points to the output matrix
N   * @return 	The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
N   * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_trans_f32(
N  const arm_matrix_instance_f32 * pSrc,
N  arm_matrix_instance_f32 * pDst);
N
N
N  /**
N   * @brief Q15 matrix transpose.
N   * @param[in]  *pSrc points to the input matrix
N   * @param[out] *pDst points to the output matrix
N   * @return 	The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
N   * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_trans_q15(
N  const arm_matrix_instance_q15 * pSrc,
N  arm_matrix_instance_q15 * pDst);
N
N  /**
N   * @brief Q31 matrix transpose.
N   * @param[in]  *pSrc points to the input matrix
N   * @param[out] *pDst points to the output matrix
N   * @return 	The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
N   * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_trans_q31(
N  const arm_matrix_instance_q31 * pSrc,
N  arm_matrix_instance_q31 * pDst);
N
N
N  /**
N   * @brief Floating-point matrix multiplication
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_mult_f32(
N  const arm_matrix_instance_f32 * pSrcA,
N  const arm_matrix_instance_f32 * pSrcB,
N  arm_matrix_instance_f32 * pDst);
N
N  /**
N   * @brief Q15 matrix multiplication
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @param[in]		 *pState points to the array for storing intermediate results
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_mult_q15(
N  const arm_matrix_instance_q15 * pSrcA,
N  const arm_matrix_instance_q15 * pSrcB,
N  arm_matrix_instance_q15 * pDst,
N  q15_t * pState);
N
N  /**
N   * @brief Q15 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
N   * @param[in]       *pSrcA  points to the first input matrix structure
N   * @param[in]       *pSrcB  points to the second input matrix structure
N   * @param[out]      *pDst   points to output matrix structure
N   * @param[in]		  *pState points to the array for storing intermediate results
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_mult_fast_q15(
N  const arm_matrix_instance_q15 * pSrcA,
N  const arm_matrix_instance_q15 * pSrcB,
N  arm_matrix_instance_q15 * pDst,
N  q15_t * pState);
N
N  /**
N   * @brief Q31 matrix multiplication
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_mult_q31(
N  const arm_matrix_instance_q31 * pSrcA,
N  const arm_matrix_instance_q31 * pSrcB,
N  arm_matrix_instance_q31 * pDst);
N
N  /**
N   * @brief Q31 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_mult_fast_q31(
N  const arm_matrix_instance_q31 * pSrcA,
N  const arm_matrix_instance_q31 * pSrcB,
N  arm_matrix_instance_q31 * pDst);
N
N
N  /**
N   * @brief Floating-point matrix subtraction
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_sub_f32(
N  const arm_matrix_instance_f32 * pSrcA,
N  const arm_matrix_instance_f32 * pSrcB,
N  arm_matrix_instance_f32 * pDst);
N
N  /**
N   * @brief Q15 matrix subtraction
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_sub_q15(
N  const arm_matrix_instance_q15 * pSrcA,
N  const arm_matrix_instance_q15 * pSrcB,
N  arm_matrix_instance_q15 * pDst);
N
N  /**
N   * @brief Q31 matrix subtraction
N   * @param[in]       *pSrcA points to the first input matrix structure
N   * @param[in]       *pSrcB points to the second input matrix structure
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_sub_q31(
N  const arm_matrix_instance_q31 * pSrcA,
N  const arm_matrix_instance_q31 * pSrcB,
N  arm_matrix_instance_q31 * pDst);
N
N  /**
N   * @brief Floating-point matrix scaling.
N   * @param[in]  *pSrc points to the input matrix
N   * @param[in]  scale scale factor
N   * @param[out] *pDst points to the output matrix
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_scale_f32(
N  const arm_matrix_instance_f32 * pSrc,
N  float32_t scale,
N  arm_matrix_instance_f32 * pDst);
N
N  /**
N   * @brief Q15 matrix scaling.
N   * @param[in]       *pSrc points to input matrix
N   * @param[in]       scaleFract fractional portion of the scale factor
N   * @param[in]       shift number of bits to shift the result by
N   * @param[out]      *pDst points to output matrix
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_scale_q15(
N  const arm_matrix_instance_q15 * pSrc,
N  q15_t scaleFract,
N  int32_t shift,
N  arm_matrix_instance_q15 * pDst);
N
N  /**
N   * @brief Q31 matrix scaling.
N   * @param[in]       *pSrc points to input matrix
N   * @param[in]       scaleFract fractional portion of the scale factor
N   * @param[in]       shift number of bits to shift the result by
N   * @param[out]      *pDst points to output matrix structure
N   * @return     The function returns either
N   * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
N   */
N
N  arm_status arm_mat_scale_q31(
N  const arm_matrix_instance_q31 * pSrc,
N  q31_t scaleFract,
N  int32_t shift,
N  arm_matrix_instance_q31 * pDst);
N
N
N  /**
N   * @brief  Q31 matrix initialization.
N   * @param[in,out] *S             points to an instance of the floating-point matrix structure.
N   * @param[in]     nRows          number of rows in the matrix.
N   * @param[in]     nColumns       number of columns in the matrix.
N   * @param[in]     *pData	       points to the matrix data array.
N   * @return        none
N   */
N
N  void arm_mat_init_q31(
N  arm_matrix_instance_q31 * S,
N  uint16_t nRows,
N  uint16_t nColumns,
N  q31_t * pData);
N
N  /**
N   * @brief  Q15 matrix initialization.
N   * @param[in,out] *S             points to an instance of the floating-point matrix structure.
N   * @param[in]     nRows          number of rows in the matrix.
N   * @param[in]     nColumns       number of columns in the matrix.
N   * @param[in]     *pData	       points to the matrix data array.
N   * @return        none
N   */
N
N  void arm_mat_init_q15(
N  arm_matrix_instance_q15 * S,
N  uint16_t nRows,
N  uint16_t nColumns,
N  q15_t * pData);
N
N  /**
N   * @brief  Floating-point matrix initialization.
N   * @param[in,out] *S             points to an instance of the floating-point matrix structure.
N   * @param[in]     nRows          number of rows in the matrix.
N   * @param[in]     nColumns       number of columns in the matrix.
N   * @param[in]     *pData	       points to the matrix data array.
N   * @return        none
N   */
N
N  void arm_mat_init_f32(
N  arm_matrix_instance_f32 * S,
N  uint16_t nRows,
N  uint16_t nColumns,
N  float32_t * pData);
N
N
N
N  /**
N   * @brief Instance structure for the Q15 PID Control.
N   */
N  typedef struct
N  {
N    q15_t A0;    /**< The derived gain, A0 = Kp + Ki + Kd . */
N#ifdef ARM_MATH_CM0_FAMILY
S    q15_t A1;
S    q15_t A2;
N#else
N    q31_t A1;           /**< The derived gain A1 = -Kp - 2Kd | Kd.*/
N#endif
N    q15_t state[3];       /**< The state array of length 3. */
N    q15_t Kp;           /**< The proportional gain. */
N    q15_t Ki;           /**< The integral gain. */
N    q15_t Kd;           /**< The derivative gain. */
N  } arm_pid_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 PID Control.
N   */
N  typedef struct
N  {
N    q31_t A0;            /**< The derived gain, A0 = Kp + Ki + Kd . */
N    q31_t A1;            /**< The derived gain, A1 = -Kp - 2Kd. */
N    q31_t A2;            /**< The derived gain, A2 = Kd . */
N    q31_t state[3];      /**< The state array of length 3. */
N    q31_t Kp;            /**< The proportional gain. */
N    q31_t Ki;            /**< The integral gain. */
N    q31_t Kd;            /**< The derivative gain. */
N
N  } arm_pid_instance_q31;
N
N  /**
N   * @brief Instance structure for the floating-point PID Control.
N   */
N  typedef struct
N  {
N    float32_t A0;          /**< The derived gain, A0 = Kp + Ki + Kd . */
N    float32_t A1;          /**< The derived gain, A1 = -Kp - 2Kd. */
N    float32_t A2;          /**< The derived gain, A2 = Kd . */
N    float32_t state[3];    /**< The state array of length 3. */
N    float32_t Kp;               /**< The proportional gain. */
N    float32_t Ki;               /**< The integral gain. */
N    float32_t Kd;               /**< The derivative gain. */
N  } arm_pid_instance_f32;
N
N
N
N  /**
N   * @brief  Initialization function for the floating-point PID Control.
N   * @param[in,out] *S      points to an instance of the PID structure.
N   * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.
N   * @return none.
N   */
N  void arm_pid_init_f32(
N  arm_pid_instance_f32 * S,
N  int32_t resetStateFlag);
N
N  /**
N   * @brief  Reset function for the floating-point PID Control.
N   * @param[in,out] *S is an instance of the floating-point PID Control structure
N   * @return none
N   */
N  void arm_pid_reset_f32(
N  arm_pid_instance_f32 * S);
N
N
N  /**
N   * @brief  Initialization function for the Q31 PID Control.
N   * @param[in,out] *S points to an instance of the Q15 PID structure.
N   * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.
N   * @return none.
N   */
N  void arm_pid_init_q31(
N  arm_pid_instance_q31 * S,
N  int32_t resetStateFlag);
N
N
N  /**
N   * @brief  Reset function for the Q31 PID Control.
N   * @param[in,out] *S points to an instance of the Q31 PID Control structure
N   * @return none
N   */
N
N  void arm_pid_reset_q31(
N  arm_pid_instance_q31 * S);
N
N  /**
N   * @brief  Initialization function for the Q15 PID Control.
N   * @param[in,out] *S points to an instance of the Q15 PID structure.
N   * @param[in] resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.
N   * @return none.
N   */
N  void arm_pid_init_q15(
N  arm_pid_instance_q15 * S,
N  int32_t resetStateFlag);
N
N  /**
N   * @brief  Reset function for the Q15 PID Control.
N   * @param[in,out] *S points to an instance of the q15 PID Control structure
N   * @return none
N   */
N  void arm_pid_reset_q15(
N  arm_pid_instance_q15 * S);
N
N
N  /**
N   * @brief Instance structure for the floating-point Linear Interpolate function.
N   */
N  typedef struct
N  {
N    uint32_t nValues;           /**< nValues */
N    float32_t x1;               /**< x1 */
N    float32_t xSpacing;         /**< xSpacing */
N    float32_t *pYData;          /**< pointer to the table of Y values */
N  } arm_linear_interp_instance_f32;
N
N  /**
N   * @brief Instance structure for the floating-point bilinear interpolation function.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;   /**< number of rows in the data table. */
N    uint16_t numCols;   /**< number of columns in the data table. */
N    float32_t *pData;   /**< points to the data table. */
N  } arm_bilinear_interp_instance_f32;
N
N   /**
N   * @brief Instance structure for the Q31 bilinear interpolation function.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;   /**< number of rows in the data table. */
N    uint16_t numCols;   /**< number of columns in the data table. */
N    q31_t *pData;       /**< points to the data table. */
N  } arm_bilinear_interp_instance_q31;
N
N   /**
N   * @brief Instance structure for the Q15 bilinear interpolation function.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;   /**< number of rows in the data table. */
N    uint16_t numCols;   /**< number of columns in the data table. */
N    q15_t *pData;       /**< points to the data table. */
N  } arm_bilinear_interp_instance_q15;
N
N   /**
N   * @brief Instance structure for the Q15 bilinear interpolation function.
N   */
N
N  typedef struct
N  {
N    uint16_t numRows;   /**< number of rows in the data table. */
N    uint16_t numCols;   /**< number of columns in the data table. */
N    q7_t *pData;                /**< points to the data table. */
N  } arm_bilinear_interp_instance_q7;
N
N
N  /**
N   * @brief Q7 vector multiplication.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst  points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_mult_q7(
N  q7_t * pSrcA,
N  q7_t * pSrcB,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q15 vector multiplication.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst  points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_mult_q15(
N  q15_t * pSrcA,
N  q15_t * pSrcB,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q31 vector multiplication.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_mult_q31(
N  q31_t * pSrcA,
N  q31_t * pSrcB,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Floating-point vector multiplication.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_mult_f32(
N  float32_t * pSrcA,
N  float32_t * pSrcB,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N
N
N
N
N
N  /**
N   * @brief Instance structure for the Q15 CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                 /**< length of the FFT. */
N    uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
N    uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
N    q15_t *pTwiddle;                     /**< points to the Sin twiddle factor table. */
N    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
N    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
N  } arm_cfft_radix2_instance_q15;
N
N/* Deprecated */
N  arm_status arm_cfft_radix2_init_q15(
N  arm_cfft_radix2_instance_q15 * S,
N  uint16_t fftLen,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N/* Deprecated */
N  void arm_cfft_radix2_q15(
N  const arm_cfft_radix2_instance_q15 * S,
N  q15_t * pSrc);
N
N
N
N  /**
N   * @brief Instance structure for the Q15 CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                 /**< length of the FFT. */
N    uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
N    uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
N    q15_t *pTwiddle;                 /**< points to the twiddle factor table. */
N    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
N    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
N  } arm_cfft_radix4_instance_q15;
N
N/* Deprecated */
N  arm_status arm_cfft_radix4_init_q15(
N  arm_cfft_radix4_instance_q15 * S,
N  uint16_t fftLen,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N/* Deprecated */
N  void arm_cfft_radix4_q15(
N  const arm_cfft_radix4_instance_q15 * S,
N  q15_t * pSrc);
N
N  /**
N   * @brief Instance structure for the Radix-2 Q31 CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                 /**< length of the FFT. */
N    uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
N    uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
N    q31_t *pTwiddle;                     /**< points to the Twiddle factor table. */
N    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
N    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
N  } arm_cfft_radix2_instance_q31;
N
N/* Deprecated */
N  arm_status arm_cfft_radix2_init_q31(
N  arm_cfft_radix2_instance_q31 * S,
N  uint16_t fftLen,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N/* Deprecated */
N  void arm_cfft_radix2_q31(
N  const arm_cfft_radix2_instance_q31 * S,
N  q31_t * pSrc);
N
N  /**
N   * @brief Instance structure for the Q31 CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                 /**< length of the FFT. */
N    uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
N    uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
N    q31_t *pTwiddle;                 /**< points to the twiddle factor table. */
N    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
N    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
N  } arm_cfft_radix4_instance_q31;
N
N/* Deprecated */
N  void arm_cfft_radix4_q31(
N  const arm_cfft_radix4_instance_q31 * S,
N  q31_t * pSrc);
N
N/* Deprecated */
N  arm_status arm_cfft_radix4_init_q31(
N  arm_cfft_radix4_instance_q31 * S,
N  uint16_t fftLen,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N  /**
N   * @brief Instance structure for the floating-point CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                   /**< length of the FFT. */
N    uint8_t ifftFlag;                  /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
N    uint8_t bitReverseFlag;            /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
N    float32_t *pTwiddle;               /**< points to the Twiddle factor table. */
N    uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
N    uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
N    float32_t onebyfftLen;                 /**< value of 1/fftLen. */
N  } arm_cfft_radix2_instance_f32;
N
N/* Deprecated */
N  arm_status arm_cfft_radix2_init_f32(
N  arm_cfft_radix2_instance_f32 * S,
N  uint16_t fftLen,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N/* Deprecated */
N  void arm_cfft_radix2_f32(
N  const arm_cfft_radix2_instance_f32 * S,
N  float32_t * pSrc);
N
N  /**
N   * @brief Instance structure for the floating-point CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                   /**< length of the FFT. */
N    uint8_t ifftFlag;                  /**< flag that selects forward (ifftFlag=0) or inverse (ifftFlag=1) transform. */
N    uint8_t bitReverseFlag;            /**< flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output. */
N    float32_t *pTwiddle;               /**< points to the Twiddle factor table. */
N    uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
N    uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
N    float32_t onebyfftLen;                 /**< value of 1/fftLen. */
N  } arm_cfft_radix4_instance_f32;
N
N/* Deprecated */
N  arm_status arm_cfft_radix4_init_f32(
N  arm_cfft_radix4_instance_f32 * S,
N  uint16_t fftLen,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N/* Deprecated */
N  void arm_cfft_radix4_f32(
N  const arm_cfft_radix4_instance_f32 * S,
N  float32_t * pSrc);
N
N  /**
N   * @brief Instance structure for the fixed-point CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                   /**< length of the FFT. */
N    const q15_t *pTwiddle;             /**< points to the Twiddle factor table. */
N    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
N    uint16_t bitRevLength;             /**< bit reversal table length. */
N  } arm_cfft_instance_q15;
N
Nvoid arm_cfft_q15( 
N    const arm_cfft_instance_q15 * S, 
N    q15_t * p1,
N    uint8_t ifftFlag,
N    uint8_t bitReverseFlag);  
N
N  /**
N   * @brief Instance structure for the fixed-point CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                   /**< length of the FFT. */
N    const q31_t *pTwiddle;             /**< points to the Twiddle factor table. */
N    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
N    uint16_t bitRevLength;             /**< bit reversal table length. */
N  } arm_cfft_instance_q31;
N
Nvoid arm_cfft_q31( 
N    const arm_cfft_instance_q31 * S, 
N    q31_t * p1,
N    uint8_t ifftFlag,
N    uint8_t bitReverseFlag);  
N  
N  /**
N   * @brief Instance structure for the floating-point CFFT/CIFFT function.
N   */
N
N  typedef struct
N  {
N    uint16_t fftLen;                   /**< length of the FFT. */
N    const float32_t *pTwiddle;         /**< points to the Twiddle factor table. */
N    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
N    uint16_t bitRevLength;             /**< bit reversal table length. */
N  } arm_cfft_instance_f32;
N
N  void arm_cfft_f32(
N  const arm_cfft_instance_f32 * S,
N  float32_t * p1,
N  uint8_t ifftFlag,
N  uint8_t bitReverseFlag);
N
N  /**
N   * @brief Instance structure for the Q15 RFFT/RIFFT function.
N   */
N
N  typedef struct
N  {
N    uint32_t fftLenReal;                      /**< length of the real FFT. */
N    uint8_t ifftFlagR;                        /**< flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */
N    uint8_t bitReverseFlagR;                  /**< flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */
N    uint32_t twidCoefRModifier;               /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    q15_t *pTwiddleAReal;                     /**< points to the real twiddle factor table. */
N    q15_t *pTwiddleBReal;                     /**< points to the imag twiddle factor table. */
N    const arm_cfft_instance_q15 *pCfft;       /**< points to the complex FFT instance. */
N  } arm_rfft_instance_q15;
N
N  arm_status arm_rfft_init_q15(
N  arm_rfft_instance_q15 * S,
N  uint32_t fftLenReal,
N  uint32_t ifftFlagR,
N  uint32_t bitReverseFlag);
N
N  void arm_rfft_q15(
N  const arm_rfft_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst);
N
N  /**
N   * @brief Instance structure for the Q31 RFFT/RIFFT function.
N   */
N
N  typedef struct
N  {
N    uint32_t fftLenReal;                        /**< length of the real FFT. */
N    uint8_t ifftFlagR;                          /**< flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */
N    uint8_t bitReverseFlagR;                    /**< flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */
N    uint32_t twidCoefRModifier;                 /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    q31_t *pTwiddleAReal;                       /**< points to the real twiddle factor table. */
N    q31_t *pTwiddleBReal;                       /**< points to the imag twiddle factor table. */
N    const arm_cfft_instance_q31 *pCfft;         /**< points to the complex FFT instance. */
N  } arm_rfft_instance_q31;
N
N  arm_status arm_rfft_init_q31(
N  arm_rfft_instance_q31 * S,
N  uint32_t fftLenReal,
N  uint32_t ifftFlagR,
N  uint32_t bitReverseFlag);
N
N  void arm_rfft_q31(
N  const arm_rfft_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst);
N
N  /**
N   * @brief Instance structure for the floating-point RFFT/RIFFT function.
N   */
N
N  typedef struct
N  {
N    uint32_t fftLenReal;                        /**< length of the real FFT. */
N    uint16_t fftLenBy2;                         /**< length of the complex FFT. */
N    uint8_t ifftFlagR;                          /**< flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */
N    uint8_t bitReverseFlagR;                    /**< flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */
N    uint32_t twidCoefRModifier;                     /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
N    float32_t *pTwiddleAReal;                   /**< points to the real twiddle factor table. */
N    float32_t *pTwiddleBReal;                   /**< points to the imag twiddle factor table. */
N    arm_cfft_radix4_instance_f32 *pCfft;        /**< points to the complex FFT instance. */
N  } arm_rfft_instance_f32;
N
N  arm_status arm_rfft_init_f32(
N  arm_rfft_instance_f32 * S,
N  arm_cfft_radix4_instance_f32 * S_CFFT,
N  uint32_t fftLenReal,
N  uint32_t ifftFlagR,
N  uint32_t bitReverseFlag);
N
N  void arm_rfft_f32(
N  const arm_rfft_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst);
N
N  /**
N   * @brief Instance structure for the floating-point RFFT/RIFFT function.
N   */
N
Ntypedef struct
N  {
N    arm_cfft_instance_f32 Sint;      /**< Internal CFFT structure. */
N    uint16_t fftLenRFFT;                        /**< length of the real sequence */
N	float32_t * pTwiddleRFFT;					/**< Twiddle factors real stage  */
N  } arm_rfft_fast_instance_f32 ;
N
Narm_status arm_rfft_fast_init_f32 (
N	arm_rfft_fast_instance_f32 * S,
N	uint16_t fftLen);
N
Nvoid arm_rfft_fast_f32(
N  arm_rfft_fast_instance_f32 * S,
N  float32_t * p, float32_t * pOut,
N  uint8_t ifftFlag);
N
N  /**
N   * @brief Instance structure for the floating-point DCT4/IDCT4 function.
N   */
N
N  typedef struct
N  {
N    uint16_t N;                         /**< length of the DCT4. */
N    uint16_t Nby2;                      /**< half of the length of the DCT4. */
N    float32_t normalize;                /**< normalizing factor. */
N    float32_t *pTwiddle;                /**< points to the twiddle factor table. */
N    float32_t *pCosFactor;              /**< points to the cosFactor table. */
N    arm_rfft_instance_f32 *pRfft;        /**< points to the real FFT instance. */
N    arm_cfft_radix4_instance_f32 *pCfft; /**< points to the complex FFT instance. */
N  } arm_dct4_instance_f32;
N
N  /**
N   * @brief  Initialization function for the floating-point DCT4/IDCT4.
N   * @param[in,out] *S         points to an instance of floating-point DCT4/IDCT4 structure.
N   * @param[in]     *S_RFFT    points to an instance of floating-point RFFT/RIFFT structure.
N   * @param[in]     *S_CFFT    points to an instance of floating-point CFFT/CIFFT structure.
N   * @param[in]     N          length of the DCT4.
N   * @param[in]     Nby2       half of the length of the DCT4.
N   * @param[in]     normalize  normalizing factor.
N   * @return		arm_status function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_ARGUMENT_ERROR if <code>fftLenReal</code> is not a supported transform length.
N   */
N
N  arm_status arm_dct4_init_f32(
N  arm_dct4_instance_f32 * S,
N  arm_rfft_instance_f32 * S_RFFT,
N  arm_cfft_radix4_instance_f32 * S_CFFT,
N  uint16_t N,
N  uint16_t Nby2,
N  float32_t normalize);
N
N  /**
N   * @brief Processing function for the floating-point DCT4/IDCT4.
N   * @param[in]       *S             points to an instance of the floating-point DCT4/IDCT4 structure.
N   * @param[in]       *pState        points to state buffer.
N   * @param[in,out]   *pInlineBuffer points to the in-place input and output buffer.
N   * @return none.
N   */
N
N  void arm_dct4_f32(
N  const arm_dct4_instance_f32 * S,
N  float32_t * pState,
N  float32_t * pInlineBuffer);
N
N  /**
N   * @brief Instance structure for the Q31 DCT4/IDCT4 function.
N   */
N
N  typedef struct
N  {
N    uint16_t N;                         /**< length of the DCT4. */
N    uint16_t Nby2;                      /**< half of the length of the DCT4. */
N    q31_t normalize;                    /**< normalizing factor. */
N    q31_t *pTwiddle;                    /**< points to the twiddle factor table. */
N    q31_t *pCosFactor;                  /**< points to the cosFactor table. */
N    arm_rfft_instance_q31 *pRfft;        /**< points to the real FFT instance. */
N    arm_cfft_radix4_instance_q31 *pCfft; /**< points to the complex FFT instance. */
N  } arm_dct4_instance_q31;
N
N  /**
N   * @brief  Initialization function for the Q31 DCT4/IDCT4.
N   * @param[in,out] *S         points to an instance of Q31 DCT4/IDCT4 structure.
N   * @param[in]     *S_RFFT    points to an instance of Q31 RFFT/RIFFT structure
N   * @param[in]     *S_CFFT    points to an instance of Q31 CFFT/CIFFT structure
N   * @param[in]     N          length of the DCT4.
N   * @param[in]     Nby2       half of the length of the DCT4.
N   * @param[in]     normalize  normalizing factor.
N   * @return		arm_status function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_ARGUMENT_ERROR if <code>N</code> is not a supported transform length.
N   */
N
N  arm_status arm_dct4_init_q31(
N  arm_dct4_instance_q31 * S,
N  arm_rfft_instance_q31 * S_RFFT,
N  arm_cfft_radix4_instance_q31 * S_CFFT,
N  uint16_t N,
N  uint16_t Nby2,
N  q31_t normalize);
N
N  /**
N   * @brief Processing function for the Q31 DCT4/IDCT4.
N   * @param[in]       *S             points to an instance of the Q31 DCT4 structure.
N   * @param[in]       *pState        points to state buffer.
N   * @param[in,out]   *pInlineBuffer points to the in-place input and output buffer.
N   * @return none.
N   */
N
N  void arm_dct4_q31(
N  const arm_dct4_instance_q31 * S,
N  q31_t * pState,
N  q31_t * pInlineBuffer);
N
N  /**
N   * @brief Instance structure for the Q15 DCT4/IDCT4 function.
N   */
N
N  typedef struct
N  {
N    uint16_t N;                         /**< length of the DCT4. */
N    uint16_t Nby2;                      /**< half of the length of the DCT4. */
N    q15_t normalize;                    /**< normalizing factor. */
N    q15_t *pTwiddle;                    /**< points to the twiddle factor table. */
N    q15_t *pCosFactor;                  /**< points to the cosFactor table. */
N    arm_rfft_instance_q15 *pRfft;        /**< points to the real FFT instance. */
N    arm_cfft_radix4_instance_q15 *pCfft; /**< points to the complex FFT instance. */
N  } arm_dct4_instance_q15;
N
N  /**
N   * @brief  Initialization function for the Q15 DCT4/IDCT4.
N   * @param[in,out] *S         points to an instance of Q15 DCT4/IDCT4 structure.
N   * @param[in]     *S_RFFT    points to an instance of Q15 RFFT/RIFFT structure.
N   * @param[in]     *S_CFFT    points to an instance of Q15 CFFT/CIFFT structure.
N   * @param[in]     N          length of the DCT4.
N   * @param[in]     Nby2       half of the length of the DCT4.
N   * @param[in]     normalize  normalizing factor.
N   * @return		arm_status function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_ARGUMENT_ERROR if <code>N</code> is not a supported transform length.
N   */
N
N  arm_status arm_dct4_init_q15(
N  arm_dct4_instance_q15 * S,
N  arm_rfft_instance_q15 * S_RFFT,
N  arm_cfft_radix4_instance_q15 * S_CFFT,
N  uint16_t N,
N  uint16_t Nby2,
N  q15_t normalize);
N
N  /**
N   * @brief Processing function for the Q15 DCT4/IDCT4.
N   * @param[in]       *S             points to an instance of the Q15 DCT4 structure.
N   * @param[in]       *pState        points to state buffer.
N   * @param[in,out]   *pInlineBuffer points to the in-place input and output buffer.
N   * @return none.
N   */
N
N  void arm_dct4_q15(
N  const arm_dct4_instance_q15 * S,
N  q15_t * pState,
N  q15_t * pInlineBuffer);
N
N  /**
N   * @brief Floating-point vector addition.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_add_f32(
N  float32_t * pSrcA,
N  float32_t * pSrcB,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q7 vector addition.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_add_q7(
N  q7_t * pSrcA,
N  q7_t * pSrcB,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q15 vector addition.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_add_q15(
N  q15_t * pSrcA,
N  q15_t * pSrcB,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q31 vector addition.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_add_q31(
N  q31_t * pSrcA,
N  q31_t * pSrcB,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Floating-point vector subtraction.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_sub_f32(
N  float32_t * pSrcA,
N  float32_t * pSrcB,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q7 vector subtraction.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_sub_q7(
N  q7_t * pSrcA,
N  q7_t * pSrcB,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q15 vector subtraction.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_sub_q15(
N  q15_t * pSrcA,
N  q15_t * pSrcB,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q31 vector subtraction.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_sub_q31(
N  q31_t * pSrcA,
N  q31_t * pSrcB,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Multiplies a floating-point vector by a scalar.
N   * @param[in]       *pSrc points to the input vector
N   * @param[in]       scale scale factor to be applied
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_scale_f32(
N  float32_t * pSrc,
N  float32_t scale,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Multiplies a Q7 vector by a scalar.
N   * @param[in]       *pSrc points to the input vector
N   * @param[in]       scaleFract fractional portion of the scale value
N   * @param[in]       shift number of bits to shift the result by
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_scale_q7(
N  q7_t * pSrc,
N  q7_t scaleFract,
N  int8_t shift,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Multiplies a Q15 vector by a scalar.
N   * @param[in]       *pSrc points to the input vector
N   * @param[in]       scaleFract fractional portion of the scale value
N   * @param[in]       shift number of bits to shift the result by
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_scale_q15(
N  q15_t * pSrc,
N  q15_t scaleFract,
N  int8_t shift,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Multiplies a Q31 vector by a scalar.
N   * @param[in]       *pSrc points to the input vector
N   * @param[in]       scaleFract fractional portion of the scale value
N   * @param[in]       shift number of bits to shift the result by
N   * @param[out]      *pDst points to the output vector
N   * @param[in]       blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_scale_q31(
N  q31_t * pSrc,
N  q31_t scaleFract,
N  int8_t shift,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q7 vector absolute value.
N   * @param[in]       *pSrc points to the input buffer
N   * @param[out]      *pDst points to the output buffer
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_abs_q7(
N  q7_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Floating-point vector absolute value.
N   * @param[in]       *pSrc points to the input buffer
N   * @param[out]      *pDst points to the output buffer
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_abs_f32(
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q15 vector absolute value.
N   * @param[in]       *pSrc points to the input buffer
N   * @param[out]      *pDst points to the output buffer
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_abs_q15(
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Q31 vector absolute value.
N   * @param[in]       *pSrc points to the input buffer
N   * @param[out]      *pDst points to the output buffer
N   * @param[in]       blockSize number of samples in each vector
N   * @return none.
N   */
N
N  void arm_abs_q31(
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Dot product of floating-point vectors.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[in]       blockSize number of samples in each vector
N   * @param[out]      *result output result returned here
N   * @return none.
N   */
N
N  void arm_dot_prod_f32(
N  float32_t * pSrcA,
N  float32_t * pSrcB,
N  uint32_t blockSize,
N  float32_t * result);
N
N  /**
N   * @brief Dot product of Q7 vectors.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[in]       blockSize number of samples in each vector
N   * @param[out]      *result output result returned here
N   * @return none.
N   */
N
N  void arm_dot_prod_q7(
N  q7_t * pSrcA,
N  q7_t * pSrcB,
N  uint32_t blockSize,
N  q31_t * result);
N
N  /**
N   * @brief Dot product of Q15 vectors.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[in]       blockSize number of samples in each vector
N   * @param[out]      *result output result returned here
N   * @return none.
N   */
N
N  void arm_dot_prod_q15(
N  q15_t * pSrcA,
N  q15_t * pSrcB,
N  uint32_t blockSize,
N  q63_t * result);
N
N  /**
N   * @brief Dot product of Q31 vectors.
N   * @param[in]       *pSrcA points to the first input vector
N   * @param[in]       *pSrcB points to the second input vector
N   * @param[in]       blockSize number of samples in each vector
N   * @param[out]      *result output result returned here
N   * @return none.
N   */
N
N  void arm_dot_prod_q31(
N  q31_t * pSrcA,
N  q31_t * pSrcB,
N  uint32_t blockSize,
N  q63_t * result);
N
N  /**
N   * @brief  Shifts the elements of a Q7 vector a specified number of bits.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value shifts right.
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_shift_q7(
N  q7_t * pSrc,
N  int8_t shiftBits,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Shifts the elements of a Q15 vector a specified number of bits.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value shifts right.
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_shift_q15(
N  q15_t * pSrc,
N  int8_t shiftBits,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Shifts the elements of a Q31 vector a specified number of bits.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value shifts right.
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_shift_q31(
N  q31_t * pSrc,
N  int8_t shiftBits,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Adds a constant offset to a floating-point vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  offset is the offset to be added
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_offset_f32(
N  float32_t * pSrc,
N  float32_t offset,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Adds a constant offset to a Q7 vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  offset is the offset to be added
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_offset_q7(
N  q7_t * pSrc,
N  q7_t offset,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Adds a constant offset to a Q15 vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  offset is the offset to be added
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_offset_q15(
N  q15_t * pSrc,
N  q15_t offset,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Adds a constant offset to a Q31 vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[in]  offset is the offset to be added
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_offset_q31(
N  q31_t * pSrc,
N  q31_t offset,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Negates the elements of a floating-point vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_negate_f32(
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Negates the elements of a Q7 vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_negate_q7(
N  q7_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Negates the elements of a Q15 vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_negate_q15(
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Negates the elements of a Q31 vector.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  blockSize number of samples in the vector
N   * @return none.
N   */
N
N  void arm_negate_q31(
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N  /**
N   * @brief  Copies the elements of a floating-point vector.
N   * @param[in]  *pSrc input pointer
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_copy_f32(
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Copies the elements of a Q7 vector.
N   * @param[in]  *pSrc input pointer
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_copy_q7(
N  q7_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Copies the elements of a Q15 vector.
N   * @param[in]  *pSrc input pointer
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_copy_q15(
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Copies the elements of a Q31 vector.
N   * @param[in]  *pSrc input pointer
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_copy_q31(
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N  /**
N   * @brief  Fills a constant value into a floating-point vector.
N   * @param[in]  value input value to be filled
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_fill_f32(
N  float32_t value,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Fills a constant value into a Q7 vector.
N   * @param[in]  value input value to be filled
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_fill_q7(
N  q7_t value,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Fills a constant value into a Q15 vector.
N   * @param[in]  value input value to be filled
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_fill_q15(
N  q15_t value,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Fills a constant value into a Q31 vector.
N   * @param[in]  value input value to be filled
N   * @param[out]  *pDst output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_fill_q31(
N  q31_t value,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N/**
N * @brief Convolution of floating-point sequences.
N * @param[in] *pSrcA points to the first input sequence.
N * @param[in] srcALen length of the first input sequence.
N * @param[in] *pSrcB points to the second input sequence.
N * @param[in] srcBLen length of the second input sequence.
N * @param[out] *pDst points to the location where the output result is written.  Length srcALen+srcBLen-1.
N * @return none.
N */
N
N  void arm_conv_f32(
N  float32_t * pSrcA,
N  uint32_t srcALen,
N  float32_t * pSrcB,
N  uint32_t srcBLen,
N  float32_t * pDst);
N
N
N  /**
N   * @brief Convolution of Q15 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @param[in]  *pScratch1 points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]  *pScratch2 points to scratch buffer of size min(srcALen, srcBLen).
N   * @return none.
N   */
N
N
N  void arm_conv_opt_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N/**
N * @brief Convolution of Q15 sequences.
N * @param[in] *pSrcA points to the first input sequence.
N * @param[in] srcALen length of the first input sequence.
N * @param[in] *pSrcB points to the second input sequence.
N * @param[in] srcBLen length of the second input sequence.
N * @param[out] *pDst points to the location where the output result is written.  Length srcALen+srcBLen-1.
N * @return none.
N */
N
N  void arm_conv_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst);
N
N  /**
N   * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @return none.
N   */
N
N  void arm_conv_fast_q15(
N			  q15_t * pSrcA,
N			 uint32_t srcALen,
N			  q15_t * pSrcB,
N			 uint32_t srcBLen,
N			 q15_t * pDst);
N
N  /**
N   * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @param[in]  *pScratch1 points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]  *pScratch2 points to scratch buffer of size min(srcALen, srcBLen).
N   * @return none.
N   */
N
N  void arm_conv_fast_opt_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N
N  /**
N   * @brief Convolution of Q31 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @return none.
N   */
N
N  void arm_conv_q31(
N  q31_t * pSrcA,
N  uint32_t srcALen,
N  q31_t * pSrcB,
N  uint32_t srcBLen,
N  q31_t * pDst);
N
N  /**
N   * @brief Convolution of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @return none.
N   */
N
N  void arm_conv_fast_q31(
N  q31_t * pSrcA,
N  uint32_t srcALen,
N  q31_t * pSrcB,
N  uint32_t srcBLen,
N  q31_t * pDst);
N
N
N    /**
N   * @brief Convolution of Q7 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @param[in]  *pScratch1 points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]  *pScratch2 points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
N   * @return none.
N   */
N
N  void arm_conv_opt_q7(
N  q7_t * pSrcA,
N  uint32_t srcALen,
N  q7_t * pSrcB,
N  uint32_t srcBLen,
N  q7_t * pDst,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N
N  /**
N   * @brief Convolution of Q7 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length srcALen+srcBLen-1.
N   * @return none.
N   */
N
N  void arm_conv_q7(
N  q7_t * pSrcA,
N  uint32_t srcALen,
N  q7_t * pSrcB,
N  uint32_t srcBLen,
N  q7_t * pDst);
N
N
N  /**
N   * @brief Partial convolution of floating-point sequences.
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_f32(
N  float32_t * pSrcA,
N  uint32_t srcALen,
N  float32_t * pSrcB,
N  uint32_t srcBLen,
N  float32_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints);
N
N    /**
N   * @brief Partial convolution of Q15 sequences.
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @param[in]       * pScratch1 points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]       * pScratch2 points to scratch buffer of size min(srcALen, srcBLen).
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_opt_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N/**
N   * @brief Partial convolution of Q15 sequences.
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints);
N
N  /**
N   * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_fast_q15(
N				        q15_t * pSrcA,
N				       uint32_t srcALen,
N				        q15_t * pSrcB,
N				       uint32_t srcBLen,
N				       q15_t * pDst,
N				       uint32_t firstIndex,
N				       uint32_t numPoints);
N
N
N  /**
N   * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @param[in]       * pScratch1 points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]       * pScratch2 points to scratch buffer of size min(srcALen, srcBLen).
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_fast_opt_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N  /**
N   * @brief Partial convolution of Q31 sequences.
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_q31(
N  q31_t * pSrcA,
N  uint32_t srcALen,
N  q31_t * pSrcB,
N  uint32_t srcBLen,
N  q31_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints);
N
N
N  /**
N   * @brief Partial convolution of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_fast_q31(
N  q31_t * pSrcA,
N  uint32_t srcALen,
N  q31_t * pSrcB,
N  uint32_t srcBLen,
N  q31_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints);
N
N
N  /**
N   * @brief Partial convolution of Q7 sequences
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @param[in]  *pScratch1 points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]  *pScratch2 points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_opt_q7(
N  q7_t * pSrcA,
N  uint32_t srcALen,
N  q7_t * pSrcB,
N  uint32_t srcBLen,
N  q7_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N/**
N   * @brief Partial convolution of Q7 sequences.
N   * @param[in]       *pSrcA points to the first input sequence.
N   * @param[in]       srcALen length of the first input sequence.
N   * @param[in]       *pSrcB points to the second input sequence.
N   * @param[in]       srcBLen length of the second input sequence.
N   * @param[out]      *pDst points to the block of output data
N   * @param[in]       firstIndex is the first output sample to start with.
N   * @param[in]       numPoints is the number of output points to be computed.
N   * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].
N   */
N
N  arm_status arm_conv_partial_q7(
N  q7_t * pSrcA,
N  uint32_t srcALen,
N  q7_t * pSrcB,
N  uint32_t srcBLen,
N  q7_t * pDst,
N  uint32_t firstIndex,
N  uint32_t numPoints);
N
N
N
N  /**
N   * @brief Instance structure for the Q15 FIR decimator.
N   */
N
N  typedef struct
N  {
N    uint8_t M;                      /**< decimation factor. */
N    uint16_t numTaps;               /**< number of coefficients in the filter. */
N    q15_t *pCoeffs;                  /**< points to the coefficient array. The array is of length numTaps.*/
N    q15_t *pState;                   /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N  } arm_fir_decimate_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 FIR decimator.
N   */
N
N  typedef struct
N  {
N    uint8_t M;                  /**< decimation factor. */
N    uint16_t numTaps;           /**< number of coefficients in the filter. */
N    q31_t *pCoeffs;              /**< points to the coefficient array. The array is of length numTaps.*/
N    q31_t *pState;               /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N
N  } arm_fir_decimate_instance_q31;
N
N  /**
N   * @brief Instance structure for the floating-point FIR decimator.
N   */
N
N  typedef struct
N  {
N    uint8_t M;                          /**< decimation factor. */
N    uint16_t numTaps;                   /**< number of coefficients in the filter. */
N    float32_t *pCoeffs;                  /**< points to the coefficient array. The array is of length numTaps.*/
N    float32_t *pState;                   /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N
N  } arm_fir_decimate_instance_f32;
N
N
N
N  /**
N   * @brief Processing function for the floating-point FIR decimator.
N   * @param[in] *S points to an instance of the floating-point FIR decimator structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none
N   */
N
N  void arm_fir_decimate_f32(
N  const arm_fir_decimate_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Initialization function for the floating-point FIR decimator.
N   * @param[in,out] *S points to an instance of the floating-point FIR decimator structure.
N   * @param[in] numTaps  number of coefficients in the filter.
N   * @param[in] M  decimation factor.
N   * @param[in] *pCoeffs points to the filter coefficients.
N   * @param[in] *pState points to the state buffer.
N   * @param[in] blockSize number of input samples to process per call.
N   * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_LENGTH_ERROR if
N   * <code>blockSize</code> is not a multiple of <code>M</code>.
N   */
N
N  arm_status arm_fir_decimate_init_f32(
N  arm_fir_decimate_instance_f32 * S,
N  uint16_t numTaps,
N  uint8_t M,
N  float32_t * pCoeffs,
N  float32_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q15 FIR decimator.
N   * @param[in] *S points to an instance of the Q15 FIR decimator structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none
N   */
N
N  void arm_fir_decimate_q15(
N  const arm_fir_decimate_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q15 FIR decimator (fast variant) for Cortex-M3 and Cortex-M4.
N   * @param[in] *S points to an instance of the Q15 FIR decimator structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none
N   */
N
N  void arm_fir_decimate_fast_q15(
N  const arm_fir_decimate_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N
N
N  /**
N   * @brief  Initialization function for the Q15 FIR decimator.
N   * @param[in,out] *S points to an instance of the Q15 FIR decimator structure.
N   * @param[in] numTaps  number of coefficients in the filter.
N   * @param[in] M  decimation factor.
N   * @param[in] *pCoeffs points to the filter coefficients.
N   * @param[in] *pState points to the state buffer.
N   * @param[in] blockSize number of input samples to process per call.
N   * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_LENGTH_ERROR if
N   * <code>blockSize</code> is not a multiple of <code>M</code>.
N   */
N
N  arm_status arm_fir_decimate_init_q15(
N  arm_fir_decimate_instance_q15 * S,
N  uint16_t numTaps,
N  uint8_t M,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q31 FIR decimator.
N   * @param[in] *S points to an instance of the Q31 FIR decimator structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none
N   */
N
N  void arm_fir_decimate_q31(
N  const arm_fir_decimate_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q31 FIR decimator (fast variant) for Cortex-M3 and Cortex-M4.
N   * @param[in] *S points to an instance of the Q31 FIR decimator structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none
N   */
N
N  void arm_fir_decimate_fast_q31(
N  arm_fir_decimate_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Initialization function for the Q31 FIR decimator.
N   * @param[in,out] *S points to an instance of the Q31 FIR decimator structure.
N   * @param[in] numTaps  number of coefficients in the filter.
N   * @param[in] M  decimation factor.
N   * @param[in] *pCoeffs points to the filter coefficients.
N   * @param[in] *pState points to the state buffer.
N   * @param[in] blockSize number of input samples to process per call.
N   * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_LENGTH_ERROR if
N   * <code>blockSize</code> is not a multiple of <code>M</code>.
N   */
N
N  arm_status arm_fir_decimate_init_q31(
N  arm_fir_decimate_instance_q31 * S,
N  uint16_t numTaps,
N  uint8_t M,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  uint32_t blockSize);
N
N
N
N  /**
N   * @brief Instance structure for the Q15 FIR interpolator.
N   */
N
N  typedef struct
N  {
N    uint8_t L;                      /**< upsample factor. */
N    uint16_t phaseLength;           /**< length of each polyphase filter component. */
N    q15_t *pCoeffs;                 /**< points to the coefficient array. The array is of length L*phaseLength. */
N    q15_t *pState;                  /**< points to the state variable array. The array is of length blockSize+phaseLength-1. */
N  } arm_fir_interpolate_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 FIR interpolator.
N   */
N
N  typedef struct
N  {
N    uint8_t L;                      /**< upsample factor. */
N    uint16_t phaseLength;           /**< length of each polyphase filter component. */
N    q31_t *pCoeffs;                  /**< points to the coefficient array. The array is of length L*phaseLength. */
N    q31_t *pState;                   /**< points to the state variable array. The array is of length blockSize+phaseLength-1. */
N  } arm_fir_interpolate_instance_q31;
N
N  /**
N   * @brief Instance structure for the floating-point FIR interpolator.
N   */
N
N  typedef struct
N  {
N    uint8_t L;                     /**< upsample factor. */
N    uint16_t phaseLength;          /**< length of each polyphase filter component. */
N    float32_t *pCoeffs;             /**< points to the coefficient array. The array is of length L*phaseLength. */
N    float32_t *pState;              /**< points to the state variable array. The array is of length phaseLength+numTaps-1. */
N  } arm_fir_interpolate_instance_f32;
N
N
N  /**
N   * @brief Processing function for the Q15 FIR interpolator.
N   * @param[in] *S        points to an instance of the Q15 FIR interpolator structure.
N   * @param[in] *pSrc     points to the block of input data.
N   * @param[out] *pDst    points to the block of output data.
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_interpolate_q15(
N  const arm_fir_interpolate_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Initialization function for the Q15 FIR interpolator.
N   * @param[in,out] *S        points to an instance of the Q15 FIR interpolator structure.
N   * @param[in]     L         upsample factor.
N   * @param[in]     numTaps   number of filter coefficients in the filter.
N   * @param[in]     *pCoeffs  points to the filter coefficient buffer.
N   * @param[in]     *pState   points to the state buffer.
N   * @param[in]     blockSize number of input samples to process per call.
N   * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_LENGTH_ERROR if
N   * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</code>.
N   */
N
N  arm_status arm_fir_interpolate_init_q15(
N  arm_fir_interpolate_instance_q15 * S,
N  uint8_t L,
N  uint16_t numTaps,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q31 FIR interpolator.
N   * @param[in] *S        points to an instance of the Q15 FIR interpolator structure.
N   * @param[in] *pSrc     points to the block of input data.
N   * @param[out] *pDst    points to the block of output data.
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_interpolate_q31(
N  const arm_fir_interpolate_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q31 FIR interpolator.
N   * @param[in,out] *S        points to an instance of the Q31 FIR interpolator structure.
N   * @param[in]     L         upsample factor.
N   * @param[in]     numTaps   number of filter coefficients in the filter.
N   * @param[in]     *pCoeffs  points to the filter coefficient buffer.
N   * @param[in]     *pState   points to the state buffer.
N   * @param[in]     blockSize number of input samples to process per call.
N   * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_LENGTH_ERROR if
N   * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</code>.
N   */
N
N  arm_status arm_fir_interpolate_init_q31(
N  arm_fir_interpolate_instance_q31 * S,
N  uint8_t L,
N  uint16_t numTaps,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Processing function for the floating-point FIR interpolator.
N   * @param[in] *S        points to an instance of the floating-point FIR interpolator structure.
N   * @param[in] *pSrc     points to the block of input data.
N   * @param[out] *pDst    points to the block of output data.
N   * @param[in] blockSize number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_interpolate_f32(
N  const arm_fir_interpolate_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the floating-point FIR interpolator.
N   * @param[in,out] *S        points to an instance of the floating-point FIR interpolator structure.
N   * @param[in]     L         upsample factor.
N   * @param[in]     numTaps   number of filter coefficients in the filter.
N   * @param[in]     *pCoeffs  points to the filter coefficient buffer.
N   * @param[in]     *pState   points to the state buffer.
N   * @param[in]     blockSize number of input samples to process per call.
N   * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_LENGTH_ERROR if
N   * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</code>.
N   */
N
N  arm_status arm_fir_interpolate_init_f32(
N  arm_fir_interpolate_instance_f32 * S,
N  uint8_t L,
N  uint16_t numTaps,
N  float32_t * pCoeffs,
N  float32_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Instance structure for the high precision Q31 Biquad cascade filter.
N   */
N
N  typedef struct
N  {
N    uint8_t numStages;       /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    q63_t *pState;           /**< points to the array of state coefficients.  The array is of length 4*numStages. */
N    q31_t *pCoeffs;          /**< points to the array of coefficients.  The array is of length 5*numStages. */
N    uint8_t postShift;       /**< additional shift, in bits, applied to each output sample. */
N
N  } arm_biquad_cas_df1_32x64_ins_q31;
N
N
N  /**
N   * @param[in]  *S        points to an instance of the high precision Q31 Biquad cascade filter structure.
N   * @param[in]  *pSrc     points to the block of input data.
N   * @param[out] *pDst     points to the block of output data
N   * @param[in]  blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_biquad_cas_df1_32x64_q31(
N  const arm_biquad_cas_df1_32x64_ins_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @param[in,out] *S           points to an instance of the high precision Q31 Biquad cascade filter structure.
N   * @param[in]     numStages    number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @param[in]     postShift    shift to be applied to the output. Varies according to the coefficients format
N   * @return        none
N   */
N
N  void arm_biquad_cas_df1_32x64_init_q31(
N  arm_biquad_cas_df1_32x64_ins_q31 * S,
N  uint8_t numStages,
N  q31_t * pCoeffs,
N  q63_t * pState,
N  uint8_t postShift);
N
N
N
N  /**
N   * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filter.
N   */
N
N  typedef struct
N  {
N    uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    float32_t *pState;         /**< points to the array of state coefficients.  The array is of length 2*numStages. */
N    float32_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*numStages. */
N  } arm_biquad_cascade_df2T_instance_f32;
N
N
N
N  /**
N   * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filter.
N   */
N
N  typedef struct
N  {
N    uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    float32_t *pState;         /**< points to the array of state coefficients.  The array is of length 4*numStages. */
N    float32_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*numStages. */
N  } arm_biquad_cascade_stereo_df2T_instance_f32;
N
N
N
N  /**
N   * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filter.
N   */
N
N  typedef struct
N  {
N    uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*numStages. */
N    float64_t *pState;         /**< points to the array of state coefficients.  The array is of length 2*numStages. */
N    float64_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*numStages. */
N  } arm_biquad_cascade_df2T_instance_f64;
N
N
N  /**
N   * @brief Processing function for the floating-point transposed direct form II Biquad cascade filter.
N   * @param[in]  *S        points to an instance of the filter data structure.
N   * @param[in]  *pSrc     points to the block of input data.
N   * @param[out] *pDst     points to the block of output data
N   * @param[in]  blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_biquad_cascade_df2T_f32(
N  const arm_biquad_cascade_df2T_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Processing function for the floating-point transposed direct form II Biquad cascade filter. 2 channels
N   * @param[in]  *S        points to an instance of the filter data structure.
N   * @param[in]  *pSrc     points to the block of input data.
N   * @param[out] *pDst     points to the block of output data
N   * @param[in]  blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_biquad_cascade_stereo_df2T_f32(
N  const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the floating-point transposed direct form II Biquad cascade filter.
N   * @param[in]  *S        points to an instance of the filter data structure.
N   * @param[in]  *pSrc     points to the block of input data.
N   * @param[out] *pDst     points to the block of output data
N   * @param[in]  blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_biquad_cascade_df2T_f64(
N  const arm_biquad_cascade_df2T_instance_f64 * S,
N  float64_t * pSrc,
N  float64_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Initialization function for the floating-point transposed direct form II Biquad cascade filter.
N   * @param[in,out] *S           points to an instance of the filter data structure.
N   * @param[in]     numStages    number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @return        none
N   */
N
N  void arm_biquad_cascade_df2T_init_f32(
N  arm_biquad_cascade_df2T_instance_f32 * S,
N  uint8_t numStages,
N  float32_t * pCoeffs,
N  float32_t * pState);
N
N
N  /**
N   * @brief  Initialization function for the floating-point transposed direct form II Biquad cascade filter.
N   * @param[in,out] *S           points to an instance of the filter data structure.
N   * @param[in]     numStages    number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @return        none
N   */
N
N  void arm_biquad_cascade_stereo_df2T_init_f32(
N  arm_biquad_cascade_stereo_df2T_instance_f32 * S,
N  uint8_t numStages,
N  float32_t * pCoeffs,
N  float32_t * pState);
N
N
N  /**
N   * @brief  Initialization function for the floating-point transposed direct form II Biquad cascade filter.
N   * @param[in,out] *S           points to an instance of the filter data structure.
N   * @param[in]     numStages    number of 2nd order stages in the filter.
N   * @param[in]     *pCoeffs     points to the filter coefficients.
N   * @param[in]     *pState      points to the state buffer.
N   * @return        none
N   */
N
N  void arm_biquad_cascade_df2T_init_f64(
N  arm_biquad_cascade_df2T_instance_f64 * S,
N  uint8_t numStages,
N  float64_t * pCoeffs,
N  float64_t * pState);
N
N
N
N  /**
N   * @brief Instance structure for the Q15 FIR lattice filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numStages;                          /**< number of filter stages. */
N    q15_t *pState;                               /**< points to the state variable array. The array is of length numStages. */
N    q15_t *pCoeffs;                              /**< points to the coefficient array. The array is of length numStages. */
N  } arm_fir_lattice_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 FIR lattice filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numStages;                          /**< number of filter stages. */
N    q31_t *pState;                               /**< points to the state variable array. The array is of length numStages. */
N    q31_t *pCoeffs;                              /**< points to the coefficient array. The array is of length numStages. */
N  } arm_fir_lattice_instance_q31;
N
N  /**
N   * @brief Instance structure for the floating-point FIR lattice filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numStages;                  /**< number of filter stages. */
N    float32_t *pState;                   /**< points to the state variable array. The array is of length numStages. */
N    float32_t *pCoeffs;                  /**< points to the coefficient array. The array is of length numStages. */
N  } arm_fir_lattice_instance_f32;
N
N  /**
N   * @brief Initialization function for the Q15 FIR lattice filter.
N   * @param[in] *S points to an instance of the Q15 FIR lattice structure.
N   * @param[in] numStages  number of filter stages.
N   * @param[in] *pCoeffs points to the coefficient buffer.  The array is of length numStages.
N   * @param[in] *pState points to the state buffer.  The array is of length numStages.
N   * @return none.
N   */
N
N  void arm_fir_lattice_init_q15(
N  arm_fir_lattice_instance_q15 * S,
N  uint16_t numStages,
N  q15_t * pCoeffs,
N  q15_t * pState);
N
N
N  /**
N   * @brief Processing function for the Q15 FIR lattice filter.
N   * @param[in] *S points to an instance of the Q15 FIR lattice structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N  void arm_fir_lattice_q15(
N  const arm_fir_lattice_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Initialization function for the Q31 FIR lattice filter.
N   * @param[in] *S points to an instance of the Q31 FIR lattice structure.
N   * @param[in] numStages  number of filter stages.
N   * @param[in] *pCoeffs points to the coefficient buffer.  The array is of length numStages.
N   * @param[in] *pState points to the state buffer.   The array is of length numStages.
N   * @return none.
N   */
N
N  void arm_fir_lattice_init_q31(
N  arm_fir_lattice_instance_q31 * S,
N  uint16_t numStages,
N  q31_t * pCoeffs,
N  q31_t * pState);
N
N
N  /**
N   * @brief Processing function for the Q31 FIR lattice filter.
N   * @param[in]  *S        points to an instance of the Q31 FIR lattice structure.
N   * @param[in]  *pSrc     points to the block of input data.
N   * @param[out] *pDst     points to the block of output data
N   * @param[in]  blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_fir_lattice_q31(
N  const arm_fir_lattice_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N/**
N * @brief Initialization function for the floating-point FIR lattice filter.
N * @param[in] *S points to an instance of the floating-point FIR lattice structure.
N * @param[in] numStages  number of filter stages.
N * @param[in] *pCoeffs points to the coefficient buffer.  The array is of length numStages.
N * @param[in] *pState points to the state buffer.  The array is of length numStages.
N * @return none.
N */
N
N  void arm_fir_lattice_init_f32(
N  arm_fir_lattice_instance_f32 * S,
N  uint16_t numStages,
N  float32_t * pCoeffs,
N  float32_t * pState);
N
N  /**
N   * @brief Processing function for the floating-point FIR lattice filter.
N   * @param[in]  *S        points to an instance of the floating-point FIR lattice structure.
N   * @param[in]  *pSrc     points to the block of input data.
N   * @param[out] *pDst     points to the block of output data
N   * @param[in]  blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_fir_lattice_f32(
N  const arm_fir_lattice_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Instance structure for the Q15 IIR lattice filter.
N   */
N  typedef struct
N  {
N    uint16_t numStages;                         /**< number of stages in the filter. */
N    q15_t *pState;                              /**< points to the state variable array. The array is of length numStages+blockSize. */
N    q15_t *pkCoeffs;                            /**< points to the reflection coefficient array. The array is of length numStages. */
N    q15_t *pvCoeffs;                            /**< points to the ladder coefficient array. The array is of length numStages+1. */
N  } arm_iir_lattice_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q31 IIR lattice filter.
N   */
N  typedef struct
N  {
N    uint16_t numStages;                         /**< number of stages in the filter. */
N    q31_t *pState;                              /**< points to the state variable array. The array is of length numStages+blockSize. */
N    q31_t *pkCoeffs;                            /**< points to the reflection coefficient array. The array is of length numStages. */
N    q31_t *pvCoeffs;                            /**< points to the ladder coefficient array. The array is of length numStages+1. */
N  } arm_iir_lattice_instance_q31;
N
N  /**
N   * @brief Instance structure for the floating-point IIR lattice filter.
N   */
N  typedef struct
N  {
N    uint16_t numStages;                         /**< number of stages in the filter. */
N    float32_t *pState;                          /**< points to the state variable array. The array is of length numStages+blockSize. */
N    float32_t *pkCoeffs;                        /**< points to the reflection coefficient array. The array is of length numStages. */
N    float32_t *pvCoeffs;                        /**< points to the ladder coefficient array. The array is of length numStages+1. */
N  } arm_iir_lattice_instance_f32;
N
N  /**
N   * @brief Processing function for the floating-point IIR lattice filter.
N   * @param[in] *S points to an instance of the floating-point IIR lattice structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_iir_lattice_f32(
N  const arm_iir_lattice_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Initialization function for the floating-point IIR lattice filter.
N   * @param[in] *S points to an instance of the floating-point IIR lattice structure.
N   * @param[in] numStages number of stages in the filter.
N   * @param[in] *pkCoeffs points to the reflection coefficient buffer.  The array is of length numStages.
N   * @param[in] *pvCoeffs points to the ladder coefficient buffer.  The array is of length numStages+1.
N   * @param[in] *pState points to the state buffer.  The array is of length numStages+blockSize-1.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_iir_lattice_init_f32(
N  arm_iir_lattice_instance_f32 * S,
N  uint16_t numStages,
N  float32_t * pkCoeffs,
N  float32_t * pvCoeffs,
N  float32_t * pState,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Processing function for the Q31 IIR lattice filter.
N   * @param[in] *S points to an instance of the Q31 IIR lattice structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_iir_lattice_q31(
N  const arm_iir_lattice_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Initialization function for the Q31 IIR lattice filter.
N   * @param[in] *S points to an instance of the Q31 IIR lattice structure.
N   * @param[in] numStages number of stages in the filter.
N   * @param[in] *pkCoeffs points to the reflection coefficient buffer.  The array is of length numStages.
N   * @param[in] *pvCoeffs points to the ladder coefficient buffer.  The array is of length numStages+1.
N   * @param[in] *pState points to the state buffer.  The array is of length numStages+blockSize.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_iir_lattice_init_q31(
N  arm_iir_lattice_instance_q31 * S,
N  uint16_t numStages,
N  q31_t * pkCoeffs,
N  q31_t * pvCoeffs,
N  q31_t * pState,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Processing function for the Q15 IIR lattice filter.
N   * @param[in] *S points to an instance of the Q15 IIR lattice structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[out] *pDst points to the block of output data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_iir_lattice_q15(
N  const arm_iir_lattice_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N
N/**
N * @brief Initialization function for the Q15 IIR lattice filter.
N * @param[in] *S points to an instance of the fixed-point Q15 IIR lattice structure.
N * @param[in] numStages  number of stages in the filter.
N * @param[in] *pkCoeffs points to reflection coefficient buffer.  The array is of length numStages.
N * @param[in] *pvCoeffs points to ladder coefficient buffer.  The array is of length numStages+1.
N * @param[in] *pState points to state buffer.  The array is of length numStages+blockSize.
N * @param[in] blockSize number of samples to process per call.
N * @return none.
N */
N
N  void arm_iir_lattice_init_q15(
N  arm_iir_lattice_instance_q15 * S,
N  uint16_t numStages,
N  q15_t * pkCoeffs,
N  q15_t * pvCoeffs,
N  q15_t * pState,
N  uint32_t blockSize);
N
N  /**
N   * @brief Instance structure for the floating-point LMS filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;    /**< number of coefficients in the filter. */
N    float32_t *pState;   /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    float32_t *pCoeffs;  /**< points to the coefficient array. The array is of length numTaps. */
N    float32_t mu;        /**< step size that controls filter coefficient updates. */
N  } arm_lms_instance_f32;
N
N  /**
N   * @brief Processing function for floating-point LMS filter.
N   * @param[in]  *S points to an instance of the floating-point LMS filter structure.
N   * @param[in]  *pSrc points to the block of input data.
N   * @param[in]  *pRef points to the block of reference data.
N   * @param[out] *pOut points to the block of output data.
N   * @param[out] *pErr points to the block of error data.
N   * @param[in]  blockSize number of samples to process.
N   * @return     none.
N   */
N
N  void arm_lms_f32(
N  const arm_lms_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pRef,
N  float32_t * pOut,
N  float32_t * pErr,
N  uint32_t blockSize);
N
N  /**
N   * @brief Initialization function for floating-point LMS filter.
N   * @param[in] *S points to an instance of the floating-point LMS filter structure.
N   * @param[in] numTaps  number of filter coefficients.
N   * @param[in] *pCoeffs points to the coefficient buffer.
N   * @param[in] *pState points to state buffer.
N   * @param[in] mu step size that controls filter coefficient updates.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_lms_init_f32(
N  arm_lms_instance_f32 * S,
N  uint16_t numTaps,
N  float32_t * pCoeffs,
N  float32_t * pState,
N  float32_t mu,
N  uint32_t blockSize);
N
N  /**
N   * @brief Instance structure for the Q15 LMS filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;    /**< number of coefficients in the filter. */
N    q15_t *pState;       /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q15_t *pCoeffs;      /**< points to the coefficient array. The array is of length numTaps. */
N    q15_t mu;            /**< step size that controls filter coefficient updates. */
N    uint32_t postShift;  /**< bit shift applied to coefficients. */
N  } arm_lms_instance_q15;
N
N
N  /**
N   * @brief Initialization function for the Q15 LMS filter.
N   * @param[in] *S points to an instance of the Q15 LMS filter structure.
N   * @param[in] numTaps  number of filter coefficients.
N   * @param[in] *pCoeffs points to the coefficient buffer.
N   * @param[in] *pState points to the state buffer.
N   * @param[in] mu step size that controls filter coefficient updates.
N   * @param[in] blockSize number of samples to process.
N   * @param[in] postShift bit shift applied to coefficients.
N   * @return    none.
N   */
N
N  void arm_lms_init_q15(
N  arm_lms_instance_q15 * S,
N  uint16_t numTaps,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  q15_t mu,
N  uint32_t blockSize,
N  uint32_t postShift);
N
N  /**
N   * @brief Processing function for Q15 LMS filter.
N   * @param[in] *S points to an instance of the Q15 LMS filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[in] *pRef points to the block of reference data.
N   * @param[out] *pOut points to the block of output data.
N   * @param[out] *pErr points to the block of error data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_lms_q15(
N  const arm_lms_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pRef,
N  q15_t * pOut,
N  q15_t * pErr,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Instance structure for the Q31 LMS filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;    /**< number of coefficients in the filter. */
N    q31_t *pState;       /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q31_t *pCoeffs;      /**< points to the coefficient array. The array is of length numTaps. */
N    q31_t mu;            /**< step size that controls filter coefficient updates. */
N    uint32_t postShift;  /**< bit shift applied to coefficients. */
N
N  } arm_lms_instance_q31;
N
N  /**
N   * @brief Processing function for Q31 LMS filter.
N   * @param[in]  *S points to an instance of the Q15 LMS filter structure.
N   * @param[in]  *pSrc points to the block of input data.
N   * @param[in]  *pRef points to the block of reference data.
N   * @param[out] *pOut points to the block of output data.
N   * @param[out] *pErr points to the block of error data.
N   * @param[in]  blockSize number of samples to process.
N   * @return     none.
N   */
N
N  void arm_lms_q31(
N  const arm_lms_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pRef,
N  q31_t * pOut,
N  q31_t * pErr,
N  uint32_t blockSize);
N
N  /**
N   * @brief Initialization function for Q31 LMS filter.
N   * @param[in] *S points to an instance of the Q31 LMS filter structure.
N   * @param[in] numTaps  number of filter coefficients.
N   * @param[in] *pCoeffs points to coefficient buffer.
N   * @param[in] *pState points to state buffer.
N   * @param[in] mu step size that controls filter coefficient updates.
N   * @param[in] blockSize number of samples to process.
N   * @param[in] postShift bit shift applied to coefficients.
N   * @return none.
N   */
N
N  void arm_lms_init_q31(
N  arm_lms_instance_q31 * S,
N  uint16_t numTaps,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  q31_t mu,
N  uint32_t blockSize,
N  uint32_t postShift);
N
N  /**
N   * @brief Instance structure for the floating-point normalized LMS filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;     /**< number of coefficients in the filter. */
N    float32_t *pState;    /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    float32_t *pCoeffs;   /**< points to the coefficient array. The array is of length numTaps. */
N    float32_t mu;        /**< step size that control filter coefficient updates. */
N    float32_t energy;    /**< saves previous frame energy. */
N    float32_t x0;        /**< saves previous input sample. */
N  } arm_lms_norm_instance_f32;
N
N  /**
N   * @brief Processing function for floating-point normalized LMS filter.
N   * @param[in] *S points to an instance of the floating-point normalized LMS filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[in] *pRef points to the block of reference data.
N   * @param[out] *pOut points to the block of output data.
N   * @param[out] *pErr points to the block of error data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_lms_norm_f32(
N  arm_lms_norm_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pRef,
N  float32_t * pOut,
N  float32_t * pErr,
N  uint32_t blockSize);
N
N  /**
N   * @brief Initialization function for floating-point normalized LMS filter.
N   * @param[in] *S points to an instance of the floating-point LMS filter structure.
N   * @param[in] numTaps  number of filter coefficients.
N   * @param[in] *pCoeffs points to coefficient buffer.
N   * @param[in] *pState points to state buffer.
N   * @param[in] mu step size that controls filter coefficient updates.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_lms_norm_init_f32(
N  arm_lms_norm_instance_f32 * S,
N  uint16_t numTaps,
N  float32_t * pCoeffs,
N  float32_t * pState,
N  float32_t mu,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Instance structure for the Q31 normalized LMS filter.
N   */
N  typedef struct
N  {
N    uint16_t numTaps;     /**< number of coefficients in the filter. */
N    q31_t *pState;        /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q31_t *pCoeffs;       /**< points to the coefficient array. The array is of length numTaps. */
N    q31_t mu;             /**< step size that controls filter coefficient updates. */
N    uint8_t postShift;    /**< bit shift applied to coefficients. */
N    q31_t *recipTable;    /**< points to the reciprocal initial value table. */
N    q31_t energy;         /**< saves previous frame energy. */
N    q31_t x0;             /**< saves previous input sample. */
N  } arm_lms_norm_instance_q31;
N
N  /**
N   * @brief Processing function for Q31 normalized LMS filter.
N   * @param[in] *S points to an instance of the Q31 normalized LMS filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[in] *pRef points to the block of reference data.
N   * @param[out] *pOut points to the block of output data.
N   * @param[out] *pErr points to the block of error data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_lms_norm_q31(
N  arm_lms_norm_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pRef,
N  q31_t * pOut,
N  q31_t * pErr,
N  uint32_t blockSize);
N
N  /**
N   * @brief Initialization function for Q31 normalized LMS filter.
N   * @param[in] *S points to an instance of the Q31 normalized LMS filter structure.
N   * @param[in] numTaps  number of filter coefficients.
N   * @param[in] *pCoeffs points to coefficient buffer.
N   * @param[in] *pState points to state buffer.
N   * @param[in] mu step size that controls filter coefficient updates.
N   * @param[in] blockSize number of samples to process.
N   * @param[in] postShift bit shift applied to coefficients.
N   * @return none.
N   */
N
N  void arm_lms_norm_init_q31(
N  arm_lms_norm_instance_q31 * S,
N  uint16_t numTaps,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  q31_t mu,
N  uint32_t blockSize,
N  uint8_t postShift);
N
N  /**
N   * @brief Instance structure for the Q15 normalized LMS filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;    /**< Number of coefficients in the filter. */
N    q15_t *pState;        /**< points to the state variable array. The array is of length numTaps+blockSize-1. */
N    q15_t *pCoeffs;       /**< points to the coefficient array. The array is of length numTaps. */
N    q15_t mu;            /**< step size that controls filter coefficient updates. */
N    uint8_t postShift;   /**< bit shift applied to coefficients. */
N    q15_t *recipTable;   /**< Points to the reciprocal initial value table. */
N    q15_t energy;        /**< saves previous frame energy. */
N    q15_t x0;            /**< saves previous input sample. */
N  } arm_lms_norm_instance_q15;
N
N  /**
N   * @brief Processing function for Q15 normalized LMS filter.
N   * @param[in] *S points to an instance of the Q15 normalized LMS filter structure.
N   * @param[in] *pSrc points to the block of input data.
N   * @param[in] *pRef points to the block of reference data.
N   * @param[out] *pOut points to the block of output data.
N   * @param[out] *pErr points to the block of error data.
N   * @param[in] blockSize number of samples to process.
N   * @return none.
N   */
N
N  void arm_lms_norm_q15(
N  arm_lms_norm_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pRef,
N  q15_t * pOut,
N  q15_t * pErr,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief Initialization function for Q15 normalized LMS filter.
N   * @param[in] *S points to an instance of the Q15 normalized LMS filter structure.
N   * @param[in] numTaps  number of filter coefficients.
N   * @param[in] *pCoeffs points to coefficient buffer.
N   * @param[in] *pState points to state buffer.
N   * @param[in] mu step size that controls filter coefficient updates.
N   * @param[in] blockSize number of samples to process.
N   * @param[in] postShift bit shift applied to coefficients.
N   * @return none.
N   */
N
N  void arm_lms_norm_init_q15(
N  arm_lms_norm_instance_q15 * S,
N  uint16_t numTaps,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  q15_t mu,
N  uint32_t blockSize,
N  uint8_t postShift);
N
N  /**
N   * @brief Correlation of floating-point sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @return none.
N   */
N
N  void arm_correlate_f32(
N  float32_t * pSrcA,
N  uint32_t srcALen,
N  float32_t * pSrcB,
N  uint32_t srcBLen,
N  float32_t * pDst);
N
N
N   /**
N   * @brief Correlation of Q15 sequences
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @param[in]  *pScratch points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @return none.
N   */
N  void arm_correlate_opt_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  q15_t * pScratch);
N
N
N  /**
N   * @brief Correlation of Q15 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @return none.
N   */
N
N  void arm_correlate_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst);
N
N  /**
N   * @brief Correlation of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @return none.
N   */
N
N  void arm_correlate_fast_q15(
N			       q15_t * pSrcA,
N			      uint32_t srcALen,
N			       q15_t * pSrcB,
N			      uint32_t srcBLen,
N			      q15_t * pDst);
N
N
N
N  /**
N   * @brief Correlation of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @param[in]  *pScratch points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @return none.
N   */
N
N  void arm_correlate_fast_opt_q15(
N  q15_t * pSrcA,
N  uint32_t srcALen,
N  q15_t * pSrcB,
N  uint32_t srcBLen,
N  q15_t * pDst,
N  q15_t * pScratch);
N
N  /**
N   * @brief Correlation of Q31 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @return none.
N   */
N
N  void arm_correlate_q31(
N  q31_t * pSrcA,
N  uint32_t srcALen,
N  q31_t * pSrcB,
N  uint32_t srcBLen,
N  q31_t * pDst);
N
N  /**
N   * @brief Correlation of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @return none.
N   */
N
N  void arm_correlate_fast_q31(
N  q31_t * pSrcA,
N  uint32_t srcALen,
N  q31_t * pSrcB,
N  uint32_t srcBLen,
N  q31_t * pDst);
N
N
N
N /**
N   * @brief Correlation of Q7 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @param[in]  *pScratch1 points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.
N   * @param[in]  *pScratch2 points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
N   * @return none.
N   */
N
N  void arm_correlate_opt_q7(
N  q7_t * pSrcA,
N  uint32_t srcALen,
N  q7_t * pSrcB,
N  uint32_t srcBLen,
N  q7_t * pDst,
N  q15_t * pScratch1,
N  q15_t * pScratch2);
N
N
N  /**
N   * @brief Correlation of Q7 sequences.
N   * @param[in] *pSrcA points to the first input sequence.
N   * @param[in] srcALen length of the first input sequence.
N   * @param[in] *pSrcB points to the second input sequence.
N   * @param[in] srcBLen length of the second input sequence.
N   * @param[out] *pDst points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
N   * @return none.
N   */
N
N  void arm_correlate_q7(
N  q7_t * pSrcA,
N  uint32_t srcALen,
N  q7_t * pSrcB,
N  uint32_t srcBLen,
N  q7_t * pDst);
N
N
N  /**
N   * @brief Instance structure for the floating-point sparse FIR filter.
N   */
N  typedef struct
N  {
N    uint16_t numTaps;             /**< number of coefficients in the filter. */
N    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
N    float32_t *pState;            /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
N    float32_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.*/
N    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
N    int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length numTaps. */
N  } arm_fir_sparse_instance_f32;
N
N  /**
N   * @brief Instance structure for the Q31 sparse FIR filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;             /**< number of coefficients in the filter. */
N    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
N    q31_t *pState;                /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
N    q31_t *pCoeffs;               /**< points to the coefficient array. The array is of length numTaps.*/
N    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
N    int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length numTaps. */
N  } arm_fir_sparse_instance_q31;
N
N  /**
N   * @brief Instance structure for the Q15 sparse FIR filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;             /**< number of coefficients in the filter. */
N    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
N    q15_t *pState;                /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
N    q15_t *pCoeffs;               /**< points to the coefficient array. The array is of length numTaps.*/
N    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
N    int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length numTaps. */
N  } arm_fir_sparse_instance_q15;
N
N  /**
N   * @brief Instance structure for the Q7 sparse FIR filter.
N   */
N
N  typedef struct
N  {
N    uint16_t numTaps;             /**< number of coefficients in the filter. */
N    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
N    q7_t *pState;                 /**< points to the state buffer array. The array is of length maxDelay+blockSize-1. */
N    q7_t *pCoeffs;                /**< points to the coefficient array. The array is of length numTaps.*/
N    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
N    int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length numTaps. */
N  } arm_fir_sparse_instance_q7;
N
N  /**
N   * @brief Processing function for the floating-point sparse FIR filter.
N   * @param[in]  *S          points to an instance of the floating-point sparse FIR structure.
N   * @param[in]  *pSrc       points to the block of input data.
N   * @param[out] *pDst       points to the block of output data
N   * @param[in]  *pScratchIn points to a temporary buffer of size blockSize.
N   * @param[in]  blockSize   number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_sparse_f32(
N  arm_fir_sparse_instance_f32 * S,
N  float32_t * pSrc,
N  float32_t * pDst,
N  float32_t * pScratchIn,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the floating-point sparse FIR filter.
N   * @param[in,out] *S         points to an instance of the floating-point sparse FIR structure.
N   * @param[in]     numTaps    number of nonzero coefficients in the filter.
N   * @param[in]     *pCoeffs   points to the array of filter coefficients.
N   * @param[in]     *pState    points to the state buffer.
N   * @param[in]     *pTapDelay points to the array of offset times.
N   * @param[in]     maxDelay   maximum offset time supported.
N   * @param[in]     blockSize  number of samples that will be processed per block.
N   * @return none
N   */
N
N  void arm_fir_sparse_init_f32(
N  arm_fir_sparse_instance_f32 * S,
N  uint16_t numTaps,
N  float32_t * pCoeffs,
N  float32_t * pState,
N  int32_t * pTapDelay,
N  uint16_t maxDelay,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q31 sparse FIR filter.
N   * @param[in]  *S          points to an instance of the Q31 sparse FIR structure.
N   * @param[in]  *pSrc       points to the block of input data.
N   * @param[out] *pDst       points to the block of output data
N   * @param[in]  *pScratchIn points to a temporary buffer of size blockSize.
N   * @param[in]  blockSize   number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_sparse_q31(
N  arm_fir_sparse_instance_q31 * S,
N  q31_t * pSrc,
N  q31_t * pDst,
N  q31_t * pScratchIn,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q31 sparse FIR filter.
N   * @param[in,out] *S         points to an instance of the Q31 sparse FIR structure.
N   * @param[in]     numTaps    number of nonzero coefficients in the filter.
N   * @param[in]     *pCoeffs   points to the array of filter coefficients.
N   * @param[in]     *pState    points to the state buffer.
N   * @param[in]     *pTapDelay points to the array of offset times.
N   * @param[in]     maxDelay   maximum offset time supported.
N   * @param[in]     blockSize  number of samples that will be processed per block.
N   * @return none
N   */
N
N  void arm_fir_sparse_init_q31(
N  arm_fir_sparse_instance_q31 * S,
N  uint16_t numTaps,
N  q31_t * pCoeffs,
N  q31_t * pState,
N  int32_t * pTapDelay,
N  uint16_t maxDelay,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q15 sparse FIR filter.
N   * @param[in]  *S           points to an instance of the Q15 sparse FIR structure.
N   * @param[in]  *pSrc        points to the block of input data.
N   * @param[out] *pDst        points to the block of output data
N   * @param[in]  *pScratchIn  points to a temporary buffer of size blockSize.
N   * @param[in]  *pScratchOut points to a temporary buffer of size blockSize.
N   * @param[in]  blockSize    number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_sparse_q15(
N  arm_fir_sparse_instance_q15 * S,
N  q15_t * pSrc,
N  q15_t * pDst,
N  q15_t * pScratchIn,
N  q31_t * pScratchOut,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Initialization function for the Q15 sparse FIR filter.
N   * @param[in,out] *S         points to an instance of the Q15 sparse FIR structure.
N   * @param[in]     numTaps    number of nonzero coefficients in the filter.
N   * @param[in]     *pCoeffs   points to the array of filter coefficients.
N   * @param[in]     *pState    points to the state buffer.
N   * @param[in]     *pTapDelay points to the array of offset times.
N   * @param[in]     maxDelay   maximum offset time supported.
N   * @param[in]     blockSize  number of samples that will be processed per block.
N   * @return none
N   */
N
N  void arm_fir_sparse_init_q15(
N  arm_fir_sparse_instance_q15 * S,
N  uint16_t numTaps,
N  q15_t * pCoeffs,
N  q15_t * pState,
N  int32_t * pTapDelay,
N  uint16_t maxDelay,
N  uint32_t blockSize);
N
N  /**
N   * @brief Processing function for the Q7 sparse FIR filter.
N   * @param[in]  *S           points to an instance of the Q7 sparse FIR structure.
N   * @param[in]  *pSrc        points to the block of input data.
N   * @param[out] *pDst        points to the block of output data
N   * @param[in]  *pScratchIn  points to a temporary buffer of size blockSize.
N   * @param[in]  *pScratchOut points to a temporary buffer of size blockSize.
N   * @param[in]  blockSize    number of input samples to process per call.
N   * @return none.
N   */
N
N  void arm_fir_sparse_q7(
N  arm_fir_sparse_instance_q7 * S,
N  q7_t * pSrc,
N  q7_t * pDst,
N  q7_t * pScratchIn,
N  q31_t * pScratchOut,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Initialization function for the Q7 sparse FIR filter.
N   * @param[in,out] *S         points to an instance of the Q7 sparse FIR structure.
N   * @param[in]     numTaps    number of nonzero coefficients in the filter.
N   * @param[in]     *pCoeffs   points to the array of filter coefficients.
N   * @param[in]     *pState    points to the state buffer.
N   * @param[in]     *pTapDelay points to the array of offset times.
N   * @param[in]     maxDelay   maximum offset time supported.
N   * @param[in]     blockSize  number of samples that will be processed per block.
N   * @return none
N   */
N
N  void arm_fir_sparse_init_q7(
N  arm_fir_sparse_instance_q7 * S,
N  uint16_t numTaps,
N  q7_t * pCoeffs,
N  q7_t * pState,
N  int32_t * pTapDelay,
N  uint16_t maxDelay,
N  uint32_t blockSize);
N
N
N  /*
N   * @brief  Floating-point sin_cos function.
N   * @param[in]  theta    input value in degrees
N   * @param[out] *pSinVal points to the processed sine output.
N   * @param[out] *pCosVal points to the processed cos output.
N   * @return none.
N   */
N
N  void arm_sin_cos_f32(
N  float32_t theta,
N  float32_t * pSinVal,
N  float32_t * pCcosVal);
N
N  /*
N   * @brief  Q31 sin_cos function.
N   * @param[in]  theta    scaled input value in degrees
N   * @param[out] *pSinVal points to the processed sine output.
N   * @param[out] *pCosVal points to the processed cosine output.
N   * @return none.
N   */
N
N  void arm_sin_cos_q31(
N  q31_t theta,
N  q31_t * pSinVal,
N  q31_t * pCosVal);
N
N
N  /**
N   * @brief  Floating-point complex conjugate.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_conj_f32(
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q31 complex conjugate.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_conj_q31(
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q15 complex conjugate.
N   * @param[in]  *pSrc points to the input vector
N   * @param[out]  *pDst points to the output vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_conj_q15(
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t numSamples);
N
N
N
N  /**
N   * @brief  Floating-point complex magnitude squared
N   * @param[in]  *pSrc points to the complex input vector
N   * @param[out]  *pDst points to the real output vector
N   * @param[in]  numSamples number of complex samples in the input vector
N   * @return none.
N   */
N
N  void arm_cmplx_mag_squared_f32(
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q31 complex magnitude squared
N   * @param[in]  *pSrc points to the complex input vector
N   * @param[out]  *pDst points to the real output vector
N   * @param[in]  numSamples number of complex samples in the input vector
N   * @return none.
N   */
N
N  void arm_cmplx_mag_squared_q31(
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q15 complex magnitude squared
N   * @param[in]  *pSrc points to the complex input vector
N   * @param[out]  *pDst points to the real output vector
N   * @param[in]  numSamples number of complex samples in the input vector
N   * @return none.
N   */
N
N  void arm_cmplx_mag_squared_q15(
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t numSamples);
N
N
N /**
N   * @ingroup groupController
N   */
N
N  /**
N   * @defgroup PID PID Motor Control
N   *
N   * A Proportional Integral Derivative (PID) controller is a generic feedback control
N   * loop mechanism widely used in industrial control systems.
N   * A PID controller is the most commonly used type of feedback controller.
N   *
N   * This set of functions implements (PID) controllers
N   * for Q15, Q31, and floating-point data types.  The functions operate on a single sample
N   * of data and each call to the function returns a single processed value.
N   * <code>S</code> points to an instance of the PID control data structure.  <code>in</code>
N   * is the input sample value. The functions return the output value.
N   *
N   * \par Algorithm:
N   * <pre>
N   *    y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]
N   *    A0 = Kp + Ki + Kd
N   *    A1 = (-Kp ) - (2 * Kd )
N   *    A2 = Kd  </pre>
N   *
N   * \par
N   * where \c Kp is proportional constant, \c Ki is Integral constant and \c Kd is Derivative constant
N   *
N   * \par
N   * \image html PID.gif "Proportional Integral Derivative Controller"
N   *
N   * \par
N   * The PID controller calculates an "error" value as the difference between
N   * the measured output and the reference input.
N   * The controller attempts to minimize the error by adjusting the process control inputs.
N   * The proportional value determines the reaction to the current error,
N   * the integral value determines the reaction based on the sum of recent errors,
N   * and the derivative value determines the reaction based on the rate at which the error has been changing.
N   *
N   * \par Instance Structure
N   * The Gains A0, A1, A2 and state variables for a PID controller are stored together in an instance data structure.
N   * A separate instance structure must be defined for each PID Controller.
N   * There are separate instance structure declarations for each of the 3 supported data types.
N   *
N   * \par Reset Functions
N   * There is also an associated reset function for each data type which clears the state array.
N   *
N   * \par Initialization Functions
N   * There is also an associated initialization function for each data type.
N   * The initialization function performs the following operations:
N   * - Initializes the Gains A0, A1, A2 from Kp,Ki, Kd gains.
N   * - Zeros out the values in the state buffer.
N   *
N   * \par
N   * Instance structure cannot be placed into a const data section and it is recommended to use the initialization function.
N   *
N   * \par Fixed-Point Behavior
N   * Care must be taken when using the fixed-point versions of the PID Controller functions.
N   * In particular, the overflow and saturation behavior of the accumulator used in each function must be considered.
N   * Refer to the function specific documentation below for usage guidelines.
N   */
N
N  /**
N   * @addtogroup PID
N   * @{
N   */
N
N  /**
N   * @brief  Process function for the floating-point PID Control.
N   * @param[in,out] *S is an instance of the floating-point PID Control structure
N   * @param[in] in input sample to process
N   * @return out processed output sample.
N   */
N
N  static __INLINE float32_t arm_pid_f32
X  static __inline float32_t arm_pid_f32
N  (
N  arm_pid_instance_f32 * S,
N  float32_t in)
N  {
N    float32_t out;
N
N    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
N    out = (S->A0 * in) +
N      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
N
N    /* Update state */
N    S->state[1] = S->state[0];
N    S->state[0] = in;
N    S->state[2] = out;
N
N    /* return to application */
N    return (out);
N
N  }
N
N  /**
N   * @brief  Process function for the Q31 PID Control.
N   * @param[in,out] *S points to an instance of the Q31 PID Control structure
N   * @param[in] in input sample to process
N   * @return out processed output sample.
N   *
N   * <b>Scaling and Overflow Behavior:</b>
N   * \par
N   * The function is implemented using an internal 64-bit accumulator.
N   * The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit.
N   * Thus, if the accumulator result overflows it wraps around rather than clip.
N   * In order to avoid overflows completely the input signal must be scaled down by 2 bits as there are four additions.
N   * After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format and then saturated to 1.31 format.
N   */
N
N  static __INLINE q31_t arm_pid_q31(
X  static __inline q31_t arm_pid_q31(
N  arm_pid_instance_q31 * S,
N  q31_t in)
N  {
N    q63_t acc;
N    q31_t out;
N
N    /* acc = A0 * x[n]  */
N    acc = (q63_t) S->A0 * in;
N
N    /* acc += A1 * x[n-1] */
N    acc += (q63_t) S->A1 * S->state[0];
N
N    /* acc += A2 * x[n-2]  */
N    acc += (q63_t) S->A2 * S->state[1];
N
N    /* convert output to 1.31 format to add y[n-1] */
N    out = (q31_t) (acc >> 31u);
N
N    /* out += y[n-1] */
N    out += S->state[2];
N
N    /* Update state */
N    S->state[1] = S->state[0];
N    S->state[0] = in;
N    S->state[2] = out;
N
N    /* return to application */
N    return (out);
N
N  }
N
N  /**
N   * @brief  Process function for the Q15 PID Control.
N   * @param[in,out] *S points to an instance of the Q15 PID Control structure
N   * @param[in] in input sample to process
N   * @return out processed output sample.
N   *
N   * <b>Scaling and Overflow Behavior:</b>
N   * \par
N   * The function is implemented using a 64-bit internal accumulator.
N   * Both Gains and state variables are represented in 1.15 format and multiplications yield a 2.30 result.
N   * The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format.
N   * There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved.
N   * After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits.
N   * Lastly, the accumulator is saturated to yield a result in 1.15 format.
N   */
N
N  static __INLINE q15_t arm_pid_q15(
X  static __inline q15_t arm_pid_q15(
N  arm_pid_instance_q15 * S,
N  q15_t in)
N  {
N    q63_t acc;
N    q15_t out;
N
N#ifndef ARM_MATH_CM0_FAMILY
N    __SIMD32_TYPE *vstate;
X    int32_t __packed *vstate;
N
N    /* Implementation of PID controller */
N
N    /* acc = A0 * x[n]  */
N    acc = (q31_t) __SMUAD(S->A0, in);
X    acc = (q31_t) __smuad(S->A0, in);
N
N    /* acc += A1 * x[n-1] + A2 * x[n-2]  */
N    vstate = __SIMD32_CONST(S->state);
X    vstate = ((int32_t __packed *)(S->state));
N    acc = __SMLALD(S->A1, (q31_t) *vstate, acc);
X    acc = __smlald(S->A1, (q31_t) *vstate, acc);
N
N#else
S    /* acc = A0 * x[n]  */
S    acc = ((q31_t) S->A0) * in;
S
S    /* acc += A1 * x[n-1] + A2 * x[n-2]  */
S    acc += (q31_t) S->A1 * S->state[0];
S    acc += (q31_t) S->A2 * S->state[1];
S
N#endif
N
N    /* acc += y[n-1] */
N    acc += (q31_t) S->state[2] << 15;
N
N    /* saturate the output */
N    out = (q15_t) (__SSAT((acc >> 15), 16));
X    out = (q15_t) (__ssat((acc >> 15), 16));
N
N    /* Update state */
N    S->state[1] = S->state[0];
N    S->state[0] = in;
N    S->state[2] = out;
N
N    /* return to application */
N    return (out);
N
N  }
N
N  /**
N   * @} end of PID group
N   */
N
N
N  /**
N   * @brief Floating-point matrix inverse.
N   * @param[in]  *src points to the instance of the input floating-point matrix structure.
N   * @param[out] *dst points to the instance of the output floating-point matrix structure.
N   * @return The function returns ARM_MATH_SIZE_MISMATCH, if the dimensions do not match.
N   * If the input matrix is singular (does not have an inverse), then the algorithm terminates and returns error status ARM_MATH_SINGULAR.
N   */
N
N  arm_status arm_mat_inverse_f32(
N  const arm_matrix_instance_f32 * src,
N  arm_matrix_instance_f32 * dst);
N
N
N  /**
N   * @brief Floating-point matrix inverse.
N   * @param[in]  *src points to the instance of the input floating-point matrix structure.
N   * @param[out] *dst points to the instance of the output floating-point matrix structure.
N   * @return The function returns ARM_MATH_SIZE_MISMATCH, if the dimensions do not match.
N   * If the input matrix is singular (does not have an inverse), then the algorithm terminates and returns error status ARM_MATH_SINGULAR.
N   */
N
N  arm_status arm_mat_inverse_f64(
N  const arm_matrix_instance_f64 * src,
N  arm_matrix_instance_f64 * dst);
N
N
N
N  /**
N   * @ingroup groupController
N   */
N
N
N  /**
N   * @defgroup clarke Vector Clarke Transform
N   * Forward Clarke transform converts the instantaneous stator phases into a two-coordinate time invariant vector.
N   * Generally the Clarke transform uses three-phase currents <code>Ia, Ib and Ic</code> to calculate currents
N   * in the two-phase orthogonal stator axis <code>Ialpha</code> and <code>Ibeta</code>.
N   * When <code>Ialpha</code> is superposed with <code>Ia</code> as shown in the figure below
N   * \image html clarke.gif Stator current space vector and its components in (a,b).
N   * and <code>Ia + Ib + Ic = 0</code>, in this condition <code>Ialpha</code> and <code>Ibeta</code>
N   * can be calculated using only <code>Ia</code> and <code>Ib</code>.
N   *
N   * The function operates on a single sample of data and each call to the function returns the processed output.
N   * The library provides separate functions for Q31 and floating-point data types.
N   * \par Algorithm
N   * \image html clarkeFormula.gif
N   * where <code>Ia</code> and <code>Ib</code> are the instantaneous stator phases and
N   * <code>pIalpha</code> and <code>pIbeta</code> are the two coordinates of time invariant vector.
N   * \par Fixed-Point Behavior
N   * Care must be taken when using the Q31 version of the Clarke transform.
N   * In particular, the overflow and saturation behavior of the accumulator used must be considered.
N   * Refer to the function specific documentation below for usage guidelines.
N   */
N
N  /**
N   * @addtogroup clarke
N   * @{
N   */
N
N  /**
N   *
N   * @brief  Floating-point Clarke transform
N   * @param[in]       Ia       input three-phase coordinate <code>a</code>
N   * @param[in]       Ib       input three-phase coordinate <code>b</code>
N   * @param[out]      *pIalpha points to output two-phase orthogonal vector axis alpha
N   * @param[out]      *pIbeta  points to output two-phase orthogonal vector axis beta
N   * @return none.
N   */
N
N  static __INLINE void arm_clarke_f32(
X  static __inline void arm_clarke_f32(
N  float32_t Ia,
N  float32_t Ib,
N  float32_t * pIalpha,
N  float32_t * pIbeta)
N  {
N    /* Calculate pIalpha using the equation, pIalpha = Ia */
N    *pIalpha = Ia;
N
N    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
N    *pIbeta =
N      ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
N
N  }
N
N  /**
N   * @brief  Clarke transform for Q31 version
N   * @param[in]       Ia       input three-phase coordinate <code>a</code>
N   * @param[in]       Ib       input three-phase coordinate <code>b</code>
N   * @param[out]      *pIalpha points to output two-phase orthogonal vector axis alpha
N   * @param[out]      *pIbeta  points to output two-phase orthogonal vector axis beta
N   * @return none.
N   *
N   * <b>Scaling and Overflow Behavior:</b>
N   * \par
N   * The function is implemented using an internal 32-bit accumulator.
N   * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format.
N   * There is saturation on the addition, hence there is no risk of overflow.
N   */
N
N  static __INLINE void arm_clarke_q31(
X  static __inline void arm_clarke_q31(
N  q31_t Ia,
N  q31_t Ib,
N  q31_t * pIalpha,
N  q31_t * pIbeta)
N  {
N    q31_t product1, product2;                    /* Temporary variables used to store intermediate results */
N
N    /* Calculating pIalpha from Ia by equation pIalpha = Ia */
N    *pIalpha = Ia;
N
N    /* Intermediate product is calculated by (1/(sqrt(3)) * Ia) */
N    product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);
N
N    /* Intermediate product is calculated by (2/sqrt(3) * Ib) */
N    product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);
N
N    /* pIbeta is calculated by adding the intermediate products */
N    *pIbeta = __QADD(product1, product2);
X    *pIbeta = __qadd(product1, product2);
N  }
N
N  /**
N   * @} end of clarke group
N   */
N
N  /**
N   * @brief  Converts the elements of the Q7 vector to Q31 vector.
N   * @param[in]  *pSrc     input pointer
N   * @param[out]  *pDst    output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_q7_to_q31(
N  q7_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N
N
N
N  /**
N   * @ingroup groupController
N   */
N
N  /**
N   * @defgroup inv_clarke Vector Inverse Clarke Transform
N   * Inverse Clarke transform converts the two-coordinate time invariant vector into instantaneous stator phases.
N   *
N   * The function operates on a single sample of data and each call to the function returns the processed output.
N   * The library provides separate functions for Q31 and floating-point data types.
N   * \par Algorithm
N   * \image html clarkeInvFormula.gif
N   * where <code>pIa</code> and <code>pIb</code> are the instantaneous stator phases and
N   * <code>Ialpha</code> and <code>Ibeta</code> are the two coordinates of time invariant vector.
N   * \par Fixed-Point Behavior
N   * Care must be taken when using the Q31 version of the Clarke transform.
N   * In particular, the overflow and saturation behavior of the accumulator used must be considered.
N   * Refer to the function specific documentation below for usage guidelines.
N   */
N
N  /**
N   * @addtogroup inv_clarke
N   * @{
N   */
N
N   /**
N   * @brief  Floating-point Inverse Clarke transform
N   * @param[in]       Ialpha  input two-phase orthogonal vector axis alpha
N   * @param[in]       Ibeta   input two-phase orthogonal vector axis beta
N   * @param[out]      *pIa    points to output three-phase coordinate <code>a</code>
N   * @param[out]      *pIb    points to output three-phase coordinate <code>b</code>
N   * @return none.
N   */
N
N
N  static __INLINE void arm_inv_clarke_f32(
X  static __inline void arm_inv_clarke_f32(
N  float32_t Ialpha,
N  float32_t Ibeta,
N  float32_t * pIa,
N  float32_t * pIb)
N  {
N    /* Calculating pIa from Ialpha by equation pIa = Ialpha */
N    *pIa = Ialpha;
N
N    /* Calculating pIb from Ialpha and Ibeta by equation pIb = -(1/2) * Ialpha + (sqrt(3)/2) * Ibeta */
N    *pIb = -0.5 * Ialpha + (float32_t) 0.8660254039 *Ibeta;
N
N  }
N
N  /**
N   * @brief  Inverse Clarke transform for Q31 version
N   * @param[in]       Ialpha  input two-phase orthogonal vector axis alpha
N   * @param[in]       Ibeta   input two-phase orthogonal vector axis beta
N   * @param[out]      *pIa    points to output three-phase coordinate <code>a</code>
N   * @param[out]      *pIb    points to output three-phase coordinate <code>b</code>
N   * @return none.
N   *
N   * <b>Scaling and Overflow Behavior:</b>
N   * \par
N   * The function is implemented using an internal 32-bit accumulator.
N   * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format.
N   * There is saturation on the subtraction, hence there is no risk of overflow.
N   */
N
N  static __INLINE void arm_inv_clarke_q31(
X  static __inline void arm_inv_clarke_q31(
N  q31_t Ialpha,
N  q31_t Ibeta,
N  q31_t * pIa,
N  q31_t * pIb)
N  {
N    q31_t product1, product2;                    /* Temporary variables used to store intermediate results */
N
N    /* Calculating pIa from Ialpha by equation pIa = Ialpha */
N    *pIa = Ialpha;
N
N    /* Intermediate product is calculated by (1/(2*sqrt(3)) * Ia) */
N    product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);
N
N    /* Intermediate product is calculated by (1/sqrt(3) * pIb) */
N    product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);
N
N    /* pIb is calculated by subtracting the products */
N    *pIb = __QSUB(product2, product1);
X    *pIb = __qsub(product2, product1);
N
N  }
N
N  /**
N   * @} end of inv_clarke group
N   */
N
N  /**
N   * @brief  Converts the elements of the Q7 vector to Q15 vector.
N   * @param[in]  *pSrc     input pointer
N   * @param[out] *pDst     output pointer
N   * @param[in]  blockSize number of samples to process
N   * @return none.
N   */
N  void arm_q7_to_q15(
N  q7_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N
N
N  /**
N   * @ingroup groupController
N   */
N
N  /**
N   * @defgroup park Vector Park Transform
N   *
N   * Forward Park transform converts the input two-coordinate vector to flux and torque components.
N   * The Park transform can be used to realize the transformation of the <code>Ialpha</code> and the <code>Ibeta</code> currents
N   * from the stationary to the moving reference frame and control the spatial relationship between
N   * the stator vector current and rotor flux vector.
N   * If we consider the d axis aligned with the rotor flux, the diagram below shows the
N   * current vector and the relationship from the two reference frames:
N   * \image html park.gif "Stator current space vector and its component in (a,b) and in the d,q rotating reference frame"
N   *
N   * The function operates on a single sample of data and each call to the function returns the processed output.
N   * The library provides separate functions for Q31 and floating-point data types.
N   * \par Algorithm
N   * \image html parkFormula.gif
N   * where <code>Ialpha</code> and <code>Ibeta</code> are the stator vector components,
N   * <code>pId</code> and <code>pIq</code> are rotor vector components and <code>cosVal</code> and <code>sinVal</code> are the
N   * cosine and sine values of theta (rotor flux position).
N   * \par Fixed-Point Behavior
N   * Care must be taken when using the Q31 version of the Park transform.
N   * In particular, the overflow and saturation behavior of the accumulator used must be considered.
N   * Refer to the function specific documentation below for usage guidelines.
N   */
N
N  /**
N   * @addtogroup park
N   * @{
N   */
N
N  /**
N   * @brief Floating-point Park transform
N   * @param[in]       Ialpha input two-phase vector coordinate alpha
N   * @param[in]       Ibeta  input two-phase vector coordinate beta
N   * @param[out]      *pId   points to output	rotor reference frame d
N   * @param[out]      *pIq   points to output	rotor reference frame q
N   * @param[in]       sinVal sine value of rotation angle theta
N   * @param[in]       cosVal cosine value of rotation angle theta
N   * @return none.
N   *
N   * The function implements the forward Park transform.
N   *
N   */
N
N  static __INLINE void arm_park_f32(
X  static __inline void arm_park_f32(
N  float32_t Ialpha,
N  float32_t Ibeta,
N  float32_t * pId,
N  float32_t * pIq,
N  float32_t sinVal,
N  float32_t cosVal)
N  {
N    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
N    *pId = Ialpha * cosVal + Ibeta * sinVal;
N
N    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
N    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
N
N  }
N
N  /**
N   * @brief  Park transform for Q31 version
N   * @param[in]       Ialpha input two-phase vector coordinate alpha
N   * @param[in]       Ibeta  input two-phase vector coordinate beta
N   * @param[out]      *pId   points to output rotor reference frame d
N   * @param[out]      *pIq   points to output rotor reference frame q
N   * @param[in]       sinVal sine value of rotation angle theta
N   * @param[in]       cosVal cosine value of rotation angle theta
N   * @return none.
N   *
N   * <b>Scaling and Overflow Behavior:</b>
N   * \par
N   * The function is implemented using an internal 32-bit accumulator.
N   * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format.
N   * There is saturation on the addition and subtraction, hence there is no risk of overflow.
N   */
N
N
N  static __INLINE void arm_park_q31(
X  static __inline void arm_park_q31(
N  q31_t Ialpha,
N  q31_t Ibeta,
N  q31_t * pId,
N  q31_t * pIq,
N  q31_t sinVal,
N  q31_t cosVal)
N  {
N    q31_t product1, product2;                    /* Temporary variables used to store intermediate results */
N    q31_t product3, product4;                    /* Temporary variables used to store intermediate results */
N
N    /* Intermediate product is calculated by (Ialpha * cosVal) */
N    product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);
N
N    /* Intermediate product is calculated by (Ibeta * sinVal) */
N    product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);
N
N
N    /* Intermediate product is calculated by (Ialpha * sinVal) */
N    product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);
N
N    /* Intermediate product is calculated by (Ibeta * cosVal) */
N    product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);
N
N    /* Calculate pId by adding the two intermediate products 1 and 2 */
N    *pId = __QADD(product1, product2);
X    *pId = __qadd(product1, product2);
N
N    /* Calculate pIq by subtracting the two intermediate products 3 from 4 */
N    *pIq = __QSUB(product4, product3);
X    *pIq = __qsub(product4, product3);
N  }
N
N  /**
N   * @} end of park group
N   */
N
N  /**
N   * @brief  Converts the elements of the Q7 vector to floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q7_to_float(
N  q7_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @ingroup groupController
N   */
N
N  /**
N   * @defgroup inv_park Vector Inverse Park transform
N   * Inverse Park transform converts the input flux and torque components to two-coordinate vector.
N   *
N   * The function operates on a single sample of data and each call to the function returns the processed output.
N   * The library provides separate functions for Q31 and floating-point data types.
N   * \par Algorithm
N   * \image html parkInvFormula.gif
N   * where <code>pIalpha</code> and <code>pIbeta</code> are the stator vector components,
N   * <code>Id</code> and <code>Iq</code> are rotor vector components and <code>cosVal</code> and <code>sinVal</code> are the
N   * cosine and sine values of theta (rotor flux position).
N   * \par Fixed-Point Behavior
N   * Care must be taken when using the Q31 version of the Park transform.
N   * In particular, the overflow and saturation behavior of the accumulator used must be considered.
N   * Refer to the function specific documentation below for usage guidelines.
N   */
N
N  /**
N   * @addtogroup inv_park
N   * @{
N   */
N
N   /**
N   * @brief  Floating-point Inverse Park transform
N   * @param[in]       Id        input coordinate of rotor reference frame d
N   * @param[in]       Iq        input coordinate of rotor reference frame q
N   * @param[out]      *pIalpha  points to output two-phase orthogonal vector axis alpha
N   * @param[out]      *pIbeta   points to output two-phase orthogonal vector axis beta
N   * @param[in]       sinVal    sine value of rotation angle theta
N   * @param[in]       cosVal    cosine value of rotation angle theta
N   * @return none.
N   */
N
N  static __INLINE void arm_inv_park_f32(
X  static __inline void arm_inv_park_f32(
N  float32_t Id,
N  float32_t Iq,
N  float32_t * pIalpha,
N  float32_t * pIbeta,
N  float32_t sinVal,
N  float32_t cosVal)
N  {
N    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
N    *pIalpha = Id * cosVal - Iq * sinVal;
N
N    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
N    *pIbeta = Id * sinVal + Iq * cosVal;
N
N  }
N
N
N  /**
N   * @brief  Inverse Park transform for	Q31 version
N   * @param[in]       Id        input coordinate of rotor reference frame d
N   * @param[in]       Iq        input coordinate of rotor reference frame q
N   * @param[out]      *pIalpha  points to output two-phase orthogonal vector axis alpha
N   * @param[out]      *pIbeta   points to output two-phase orthogonal vector axis beta
N   * @param[in]       sinVal    sine value of rotation angle theta
N   * @param[in]       cosVal    cosine value of rotation angle theta
N   * @return none.
N   *
N   * <b>Scaling and Overflow Behavior:</b>
N   * \par
N   * The function is implemented using an internal 32-bit accumulator.
N   * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format.
N   * There is saturation on the addition, hence there is no risk of overflow.
N   */
N
N
N  static __INLINE void arm_inv_park_q31(
X  static __inline void arm_inv_park_q31(
N  q31_t Id,
N  q31_t Iq,
N  q31_t * pIalpha,
N  q31_t * pIbeta,
N  q31_t sinVal,
N  q31_t cosVal)
N  {
N    q31_t product1, product2;                    /* Temporary variables used to store intermediate results */
N    q31_t product3, product4;                    /* Temporary variables used to store intermediate results */
N
N    /* Intermediate product is calculated by (Id * cosVal) */
N    product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);
N
N    /* Intermediate product is calculated by (Iq * sinVal) */
N    product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);
N
N
N    /* Intermediate product is calculated by (Id * sinVal) */
N    product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);
N
N    /* Intermediate product is calculated by (Iq * cosVal) */
N    product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);
N
N    /* Calculate pIalpha by using the two intermediate products 1 and 2 */
N    *pIalpha = __QSUB(product1, product2);
X    *pIalpha = __qsub(product1, product2);
N
N    /* Calculate pIbeta by using the two intermediate products 3 and 4 */
N    *pIbeta = __QADD(product4, product3);
X    *pIbeta = __qadd(product4, product3);
N
N  }
N
N  /**
N   * @} end of Inverse park group
N   */
N
N
N  /**
N   * @brief  Converts the elements of the Q31 vector to floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q31_to_float(
N  q31_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @ingroup groupInterpolation
N   */
N
N  /**
N   * @defgroup LinearInterpolate Linear Interpolation
N   *
N   * Linear interpolation is a method of curve fitting using linear polynomials.
N   * Linear interpolation works by effectively drawing a straight line between two neighboring samples and returning the appropriate point along that line
N   *
N   * \par
N   * \image html LinearInterp.gif "Linear interpolation"
N   *
N   * \par
N   * A  Linear Interpolate function calculates an output value(y), for the input(x)
N   * using linear interpolation of the input values x0, x1( nearest input values) and the output values y0 and y1(nearest output values)
N   *
N   * \par Algorithm:
N   * <pre>
N   *       y = y0 + (x - x0) * ((y1 - y0)/(x1-x0))
N   *       where x0, x1 are nearest values of input x
N   *             y0, y1 are nearest values to output y
N   * </pre>
N   *
N   * \par
N   * This set of functions implements Linear interpolation process
N   * for Q7, Q15, Q31, and floating-point data types.  The functions operate on a single
N   * sample of data and each call to the function returns a single processed value.
N   * <code>S</code> points to an instance of the Linear Interpolate function data structure.
N   * <code>x</code> is the input sample value. The functions returns the output value.
N   *
N   * \par
N   * if x is outside of the table boundary, Linear interpolation returns first value of the table
N   * if x is below input range and returns last value of table if x is above range.
N   */
N
N  /**
N   * @addtogroup LinearInterpolate
N   * @{
N   */
N
N  /**
N   * @brief  Process function for the floating-point Linear Interpolation Function.
N   * @param[in,out] *S is an instance of the floating-point Linear Interpolation structure
N   * @param[in] x input sample to process
N   * @return y processed output sample.
N   *
N   */
N
N  static __INLINE float32_t arm_linear_interp_f32(
X  static __inline float32_t arm_linear_interp_f32(
N  arm_linear_interp_instance_f32 * S,
N  float32_t x)
N  {
N
N    float32_t y;
N    float32_t x0, x1;                            /* Nearest input values */
N    float32_t y0, y1;                            /* Nearest output values */
N    float32_t xSpacing = S->xSpacing;            /* spacing between input values */
N    int32_t i;                                   /* Index variable */
N    float32_t *pYData = S->pYData;               /* pointer to output table */
N
N    /* Calculation of index */
N    i = (int32_t) ((x - S->x1) / xSpacing);
N
N    if(i < 0)
N    {
N      /* Iniatilize output for below specified range as least output value of table */
N      y = pYData[0];
N    }
N    else if((uint32_t)i >= S->nValues)
N    {
N      /* Iniatilize output for above specified range as last output value of table */
N      y = pYData[S->nValues - 1];
N    }
N    else
N    {
N      /* Calculation of nearest input values */
N      x0 = S->x1 + i * xSpacing;
N      x1 = S->x1 + (i + 1) * xSpacing;
N
N      /* Read of nearest output values */
N      y0 = pYData[i];
N      y1 = pYData[i + 1];
N
N      /* Calculation of output */
N      y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));
N
N    }
N
N    /* returns output value */
N    return (y);
N  }
N
N   /**
N   *
N   * @brief  Process function for the Q31 Linear Interpolation Function.
N   * @param[in] *pYData  pointer to Q31 Linear Interpolation table
N   * @param[in] x input sample to process
N   * @param[in] nValues number of table values
N   * @return y processed output sample.
N   *
N   * \par
N   * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 bits for fractional part.
N   * This function can support maximum of table size 2^12.
N   *
N   */
N
N
N  static __INLINE q31_t arm_linear_interp_q31(
X  static __inline q31_t arm_linear_interp_q31(
N  q31_t * pYData,
N  q31_t x,
N  uint32_t nValues)
N  {
N    q31_t y;                                     /* output */
N    q31_t y0, y1;                                /* Nearest output values */
N    q31_t fract;                                 /* fractional part */
N    int32_t index;                               /* Index to read nearest output values */
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    index = ((x & 0xFFF00000) >> 20);
N
N    if(index >= (int32_t)(nValues - 1))
N    {
N      return (pYData[nValues - 1]);
N    }
N    else if(index < 0)
N    {
N      return (pYData[0]);
N    }
N    else
N    {
N
N      /* 20 bits for the fractional part */
N      /* shift left by 11 to keep fract in 1.31 format */
N      fract = (x & 0x000FFFFF) << 11;
N
N      /* Read two nearest output values from the index in 1.31(q31) format */
N      y0 = pYData[index];
N      y1 = pYData[index + 1u];
N
N      /* Calculation of y0 * (1-fract) and y is in 2.30 format */
N      y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));
N
N      /* Calculation of y0 * (1-fract) + y1 *fract and y is in 2.30 format */
N      y += ((q31_t) (((q63_t) y1 * fract) >> 32));
N
N      /* Convert y to 1.31 format */
N      return (y << 1u);
N
N    }
N
N  }
N
N  /**
N   *
N   * @brief  Process function for the Q15 Linear Interpolation Function.
N   * @param[in] *pYData  pointer to Q15 Linear Interpolation table
N   * @param[in] x input sample to process
N   * @param[in] nValues number of table values
N   * @return y processed output sample.
N   *
N   * \par
N   * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 bits for fractional part.
N   * This function can support maximum of table size 2^12.
N   *
N   */
N
N
N  static __INLINE q15_t arm_linear_interp_q15(
X  static __inline q15_t arm_linear_interp_q15(
N  q15_t * pYData,
N  q31_t x,
N  uint32_t nValues)
N  {
N    q63_t y;                                     /* output */
N    q15_t y0, y1;                                /* Nearest output values */
N    q31_t fract;                                 /* fractional part */
N    int32_t index;                               /* Index to read nearest output values */
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    index = ((x & 0xFFF00000) >> 20u);
N
N    if(index >= (int32_t)(nValues - 1))
N    {
N      return (pYData[nValues - 1]);
N    }
N    else if(index < 0)
N    {
N      return (pYData[0]);
N    }
N    else
N    {
N      /* 20 bits for the fractional part */
N      /* fract is in 12.20 format */
N      fract = (x & 0x000FFFFF);
N
N      /* Read two nearest output values from the index */
N      y0 = pYData[index];
N      y1 = pYData[index + 1u];
N
N      /* Calculation of y0 * (1-fract) and y is in 13.35 format */
N      y = ((q63_t) y0 * (0xFFFFF - fract));
N
N      /* Calculation of (y0 * (1-fract) + y1 * fract) and y is in 13.35 format */
N      y += ((q63_t) y1 * (fract));
N
N      /* convert y to 1.15 format */
N      return (y >> 20);
N    }
N
N
N  }
N
N  /**
N   *
N   * @brief  Process function for the Q7 Linear Interpolation Function.
N   * @param[in] *pYData  pointer to Q7 Linear Interpolation table
N   * @param[in] x input sample to process
N   * @param[in] nValues number of table values
N   * @return y processed output sample.
N   *
N   * \par
N   * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 bits for fractional part.
N   * This function can support maximum of table size 2^12.
N   */
N
N
N  static __INLINE q7_t arm_linear_interp_q7(
X  static __inline q7_t arm_linear_interp_q7(
N  q7_t * pYData,
N  q31_t x,
N  uint32_t nValues)
N  {
N    q31_t y;                                     /* output */
N    q7_t y0, y1;                                 /* Nearest output values */
N    q31_t fract;                                 /* fractional part */
N    uint32_t index;                              /* Index to read nearest output values */
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    if (x < 0)
N    {
N      return (pYData[0]);
N    }
N    index = (x >> 20) & 0xfff;
N
N
N    if(index >= (nValues - 1))
N    {
N      return (pYData[nValues - 1]);
N    }
N    else
N    {
N
N      /* 20 bits for the fractional part */
N      /* fract is in 12.20 format */
N      fract = (x & 0x000FFFFF);
N
N      /* Read two nearest output values from the index and are in 1.7(q7) format */
N      y0 = pYData[index];
N      y1 = pYData[index + 1u];
N
N      /* Calculation of y0 * (1-fract ) and y is in 13.27(q27) format */
N      y = ((y0 * (0xFFFFF - fract)));
N
N      /* Calculation of y1 * fract + y0 * (1-fract) and y is in 13.27(q27) format */
N      y += (y1 * fract);
N
N      /* convert y to 1.7(q7) format */
N      return (y >> 20u);
N
N    }
N
N  }
N  /**
N   * @} end of LinearInterpolate group
N   */
N
N  /**
N   * @brief  Fast approximation to the trigonometric sine function for floating-point data.
N   * @param[in] x input value in radians.
N   * @return  sin(x).
N   */
N
N  float32_t arm_sin_f32(
N  float32_t x);
N
N  /**
N   * @brief  Fast approximation to the trigonometric sine function for Q31 data.
N   * @param[in] x Scaled input value in radians.
N   * @return  sin(x).
N   */
N
N  q31_t arm_sin_q31(
N  q31_t x);
N
N  /**
N   * @brief  Fast approximation to the trigonometric sine function for Q15 data.
N   * @param[in] x Scaled input value in radians.
N   * @return  sin(x).
N   */
N
N  q15_t arm_sin_q15(
N  q15_t x);
N
N  /**
N   * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
N   * @param[in] x input value in radians.
N   * @return  cos(x).
N   */
N
N  float32_t arm_cos_f32(
N  float32_t x);
N
N  /**
N   * @brief Fast approximation to the trigonometric cosine function for Q31 data.
N   * @param[in] x Scaled input value in radians.
N   * @return  cos(x).
N   */
N
N  q31_t arm_cos_q31(
N  q31_t x);
N
N  /**
N   * @brief  Fast approximation to the trigonometric cosine function for Q15 data.
N   * @param[in] x Scaled input value in radians.
N   * @return  cos(x).
N   */
N
N  q15_t arm_cos_q15(
N  q15_t x);
N
N
N  /**
N   * @ingroup groupFastMath
N   */
N
N
N  /**
N   * @defgroup SQRT Square Root
N   *
N   * Computes the square root of a number.
N   * There are separate functions for Q15, Q31, and floating-point data types.
N   * The square root function is computed using the Newton-Raphson algorithm.
N   * This is an iterative algorithm of the form:
N   * <pre>
N   *      x1 = x0 - f(x0)/f'(x0)
N   * </pre>
N   * where <code>x1</code> is the current estimate,
N   * <code>x0</code> is the previous estimate, and
N   * <code>f'(x0)</code> is the derivative of <code>f()</code> evaluated at <code>x0</code>.
N   * For the square root function, the algorithm reduces to:
N   * <pre>
N   *     x0 = in/2                         [initial guess]
N   *     x1 = 1/2 * ( x0 + in / x0)        [each iteration]
N   * </pre>
N   */
N
N
N  /**
N   * @addtogroup SQRT
N   * @{
N   */
N
N  /**
N   * @brief  Floating-point square root function.
N   * @param[in]  in     input value.
N   * @param[out] *pOut  square root of input value.
N   * @return The function returns ARM_MATH_SUCCESS if input value is positive value or ARM_MATH_ARGUMENT_ERROR if
N   * <code>in</code> is negative value and returns zero output for negative values.
N   */
N
N  static __INLINE arm_status arm_sqrt_f32(
X  static __inline arm_status arm_sqrt_f32(
N  float32_t in,
N  float32_t * pOut)
N  {
N    if(in > 0)
N    {
N
N//      #if __FPU_USED
N#if (__FPU_USED == 1) && defined ( __CC_ARM   )
X#if (1 == 1) && 1L
N      *pOut = __sqrtf(in);
N#else
S      *pOut = sqrtf(in);
N#endif
N
N      return (ARM_MATH_SUCCESS);
N    }
N    else
N    {
N      *pOut = 0.0f;
N      return (ARM_MATH_ARGUMENT_ERROR);
N    }
N
N  }
N
N
N  /**
N   * @brief Q31 square root function.
N   * @param[in]   in    input value.  The range of the input value is [0 +1) or 0x00000000 to 0x7FFFFFFF.
N   * @param[out]  *pOut square root of input value.
N   * @return The function returns ARM_MATH_SUCCESS if input value is positive value or ARM_MATH_ARGUMENT_ERROR if
N   * <code>in</code> is negative value and returns zero output for negative values.
N   */
N  arm_status arm_sqrt_q31(
N  q31_t in,
N  q31_t * pOut);
N
N  /**
N   * @brief  Q15 square root function.
N   * @param[in]   in     input value.  The range of the input value is [0 +1) or 0x0000 to 0x7FFF.
N   * @param[out]  *pOut  square root of input value.
N   * @return The function returns ARM_MATH_SUCCESS if input value is positive value or ARM_MATH_ARGUMENT_ERROR if
N   * <code>in</code> is negative value and returns zero output for negative values.
N   */
N  arm_status arm_sqrt_q15(
N  q15_t in,
N  q15_t * pOut);
N
N  /**
N   * @} end of SQRT group
N   */
N
N
N
N
N
N
N  /**
N   * @brief floating-point Circular write function.
N   */
N
N  static __INLINE void arm_circularWrite_f32(
X  static __inline void arm_circularWrite_f32(
N  int32_t * circBuffer,
N  int32_t L,
N  uint16_t * writeOffset,
N  int32_t bufferInc,
N  const int32_t * src,
N  int32_t srcInc,
N  uint32_t blockSize)
N  {
N    uint32_t i = 0u;
N    int32_t wOffset;
N
N    /* Copy the value of Index pointer that points
N     * to the current location where the input samples to be copied */
N    wOffset = *writeOffset;
N
N    /* Loop over the blockSize */
N    i = blockSize;
N
N    while(i > 0u)
N    {
N      /* copy the input sample to the circular buffer */
N      circBuffer[wOffset] = *src;
N
N      /* Update the input pointer */
N      src += srcInc;
N
N      /* Circularly update wOffset.  Watch out for positive and negative value */
N      wOffset += bufferInc;
N      if(wOffset >= L)
N        wOffset -= L;
N
N      /* Decrement the loop counter */
N      i--;
N    }
N
N    /* Update the index pointer */
N    *writeOffset = wOffset;
N  }
N
N
N
N  /**
N   * @brief floating-point Circular Read function.
N   */
N  static __INLINE void arm_circularRead_f32(
X  static __inline void arm_circularRead_f32(
N  int32_t * circBuffer,
N  int32_t L,
N  int32_t * readOffset,
N  int32_t bufferInc,
N  int32_t * dst,
N  int32_t * dst_base,
N  int32_t dst_length,
N  int32_t dstInc,
N  uint32_t blockSize)
N  {
N    uint32_t i = 0u;
N    int32_t rOffset, dst_end;
N
N    /* Copy the value of Index pointer that points
N     * to the current location from where the input samples to be read */
N    rOffset = *readOffset;
N    dst_end = (int32_t) (dst_base + dst_length);
N
N    /* Loop over the blockSize */
N    i = blockSize;
N
N    while(i > 0u)
N    {
N      /* copy the sample from the circular buffer to the destination buffer */
N      *dst = circBuffer[rOffset];
N
N      /* Update the input pointer */
N      dst += dstInc;
N
N      if(dst == (int32_t *) dst_end)
N      {
N        dst = dst_base;
N      }
N
N      /* Circularly update rOffset.  Watch out for positive and negative value  */
N      rOffset += bufferInc;
N
N      if(rOffset >= L)
N      {
N        rOffset -= L;
N      }
N
N      /* Decrement the loop counter */
N      i--;
N    }
N
N    /* Update the index pointer */
N    *readOffset = rOffset;
N  }
N
N  /**
N   * @brief Q15 Circular write function.
N   */
N
N  static __INLINE void arm_circularWrite_q15(
X  static __inline void arm_circularWrite_q15(
N  q15_t * circBuffer,
N  int32_t L,
N  uint16_t * writeOffset,
N  int32_t bufferInc,
N  const q15_t * src,
N  int32_t srcInc,
N  uint32_t blockSize)
N  {
N    uint32_t i = 0u;
N    int32_t wOffset;
N
N    /* Copy the value of Index pointer that points
N     * to the current location where the input samples to be copied */
N    wOffset = *writeOffset;
N
N    /* Loop over the blockSize */
N    i = blockSize;
N
N    while(i > 0u)
N    {
N      /* copy the input sample to the circular buffer */
N      circBuffer[wOffset] = *src;
N
N      /* Update the input pointer */
N      src += srcInc;
N
N      /* Circularly update wOffset.  Watch out for positive and negative value */
N      wOffset += bufferInc;
N      if(wOffset >= L)
N        wOffset -= L;
N
N      /* Decrement the loop counter */
N      i--;
N    }
N
N    /* Update the index pointer */
N    *writeOffset = wOffset;
N  }
N
N
N
N  /**
N   * @brief Q15 Circular Read function.
N   */
N  static __INLINE void arm_circularRead_q15(
X  static __inline void arm_circularRead_q15(
N  q15_t * circBuffer,
N  int32_t L,
N  int32_t * readOffset,
N  int32_t bufferInc,
N  q15_t * dst,
N  q15_t * dst_base,
N  int32_t dst_length,
N  int32_t dstInc,
N  uint32_t blockSize)
N  {
N    uint32_t i = 0;
N    int32_t rOffset, dst_end;
N
N    /* Copy the value of Index pointer that points
N     * to the current location from where the input samples to be read */
N    rOffset = *readOffset;
N
N    dst_end = (int32_t) (dst_base + dst_length);
N
N    /* Loop over the blockSize */
N    i = blockSize;
N
N    while(i > 0u)
N    {
N      /* copy the sample from the circular buffer to the destination buffer */
N      *dst = circBuffer[rOffset];
N
N      /* Update the input pointer */
N      dst += dstInc;
N
N      if(dst == (q15_t *) dst_end)
N      {
N        dst = dst_base;
N      }
N
N      /* Circularly update wOffset.  Watch out for positive and negative value */
N      rOffset += bufferInc;
N
N      if(rOffset >= L)
N      {
N        rOffset -= L;
N      }
N
N      /* Decrement the loop counter */
N      i--;
N    }
N
N    /* Update the index pointer */
N    *readOffset = rOffset;
N  }
N
N
N  /**
N   * @brief Q7 Circular write function.
N   */
N
N  static __INLINE void arm_circularWrite_q7(
X  static __inline void arm_circularWrite_q7(
N  q7_t * circBuffer,
N  int32_t L,
N  uint16_t * writeOffset,
N  int32_t bufferInc,
N  const q7_t * src,
N  int32_t srcInc,
N  uint32_t blockSize)
N  {
N    uint32_t i = 0u;
N    int32_t wOffset;
N
N    /* Copy the value of Index pointer that points
N     * to the current location where the input samples to be copied */
N    wOffset = *writeOffset;
N
N    /* Loop over the blockSize */
N    i = blockSize;
N
N    while(i > 0u)
N    {
N      /* copy the input sample to the circular buffer */
N      circBuffer[wOffset] = *src;
N
N      /* Update the input pointer */
N      src += srcInc;
N
N      /* Circularly update wOffset.  Watch out for positive and negative value */
N      wOffset += bufferInc;
N      if(wOffset >= L)
N        wOffset -= L;
N
N      /* Decrement the loop counter */
N      i--;
N    }
N
N    /* Update the index pointer */
N    *writeOffset = wOffset;
N  }
N
N
N
N  /**
N   * @brief Q7 Circular Read function.
N   */
N  static __INLINE void arm_circularRead_q7(
X  static __inline void arm_circularRead_q7(
N  q7_t * circBuffer,
N  int32_t L,
N  int32_t * readOffset,
N  int32_t bufferInc,
N  q7_t * dst,
N  q7_t * dst_base,
N  int32_t dst_length,
N  int32_t dstInc,
N  uint32_t blockSize)
N  {
N    uint32_t i = 0;
N    int32_t rOffset, dst_end;
N
N    /* Copy the value of Index pointer that points
N     * to the current location from where the input samples to be read */
N    rOffset = *readOffset;
N
N    dst_end = (int32_t) (dst_base + dst_length);
N
N    /* Loop over the blockSize */
N    i = blockSize;
N
N    while(i > 0u)
N    {
N      /* copy the sample from the circular buffer to the destination buffer */
N      *dst = circBuffer[rOffset];
N
N      /* Update the input pointer */
N      dst += dstInc;
N
N      if(dst == (q7_t *) dst_end)
N      {
N        dst = dst_base;
N      }
N
N      /* Circularly update rOffset.  Watch out for positive and negative value */
N      rOffset += bufferInc;
N
N      if(rOffset >= L)
N      {
N        rOffset -= L;
N      }
N
N      /* Decrement the loop counter */
N      i--;
N    }
N
N    /* Update the index pointer */
N    *readOffset = rOffset;
N  }
N
N
N  /**
N   * @brief  Sum of the squares of the elements of a Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_power_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q63_t * pResult);
N
N  /**
N   * @brief  Sum of the squares of the elements of a floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_power_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult);
N
N  /**
N   * @brief  Sum of the squares of the elements of a Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_power_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q63_t * pResult);
N
N  /**
N   * @brief  Sum of the squares of the elements of a Q7 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_power_q7(
N  q7_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult);
N
N  /**
N   * @brief  Mean value of a Q7 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_mean_q7(
N  q7_t * pSrc,
N  uint32_t blockSize,
N  q7_t * pResult);
N
N  /**
N   * @brief  Mean value of a Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N  void arm_mean_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q15_t * pResult);
N
N  /**
N   * @brief  Mean value of a Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N  void arm_mean_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult);
N
N  /**
N   * @brief  Mean value of a floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N  void arm_mean_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult);
N
N  /**
N   * @brief  Variance of the elements of a floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_var_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult);
N
N  /**
N   * @brief  Variance of the elements of a Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_var_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult);
N
N  /**
N   * @brief  Variance of the elements of a Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_var_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q15_t * pResult);
N
N  /**
N   * @brief  Root Mean Square of the elements of a floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_rms_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult);
N
N  /**
N   * @brief  Root Mean Square of the elements of a Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_rms_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult);
N
N  /**
N   * @brief  Root Mean Square of the elements of a Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_rms_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q15_t * pResult);
N
N  /**
N   * @brief  Standard deviation of the elements of a floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_std_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult);
N
N  /**
N   * @brief  Standard deviation of the elements of a Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_std_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult);
N
N  /**
N   * @brief  Standard deviation of the elements of a Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output value.
N   * @return none.
N   */
N
N  void arm_std_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q15_t * pResult);
N
N  /**
N   * @brief  Floating-point complex magnitude
N   * @param[in]  *pSrc points to the complex input vector
N   * @param[out]  *pDst points to the real output vector
N   * @param[in]  numSamples number of complex samples in the input vector
N   * @return none.
N   */
N
N  void arm_cmplx_mag_f32(
N  float32_t * pSrc,
N  float32_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q31 complex magnitude
N   * @param[in]  *pSrc points to the complex input vector
N   * @param[out]  *pDst points to the real output vector
N   * @param[in]  numSamples number of complex samples in the input vector
N   * @return none.
N   */
N
N  void arm_cmplx_mag_q31(
N  q31_t * pSrc,
N  q31_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q15 complex magnitude
N   * @param[in]  *pSrc points to the complex input vector
N   * @param[out]  *pDst points to the real output vector
N   * @param[in]  numSamples number of complex samples in the input vector
N   * @return none.
N   */
N
N  void arm_cmplx_mag_q15(
N  q15_t * pSrc,
N  q15_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q15 complex dot product
N   * @param[in]  *pSrcA points to the first input vector
N   * @param[in]  *pSrcB points to the second input vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @param[out]  *realResult real part of the result returned here
N   * @param[out]  *imagResult imaginary part of the result returned here
N   * @return none.
N   */
N
N  void arm_cmplx_dot_prod_q15(
N  q15_t * pSrcA,
N  q15_t * pSrcB,
N  uint32_t numSamples,
N  q31_t * realResult,
N  q31_t * imagResult);
N
N  /**
N   * @brief  Q31 complex dot product
N   * @param[in]  *pSrcA points to the first input vector
N   * @param[in]  *pSrcB points to the second input vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @param[out]  *realResult real part of the result returned here
N   * @param[out]  *imagResult imaginary part of the result returned here
N   * @return none.
N   */
N
N  void arm_cmplx_dot_prod_q31(
N  q31_t * pSrcA,
N  q31_t * pSrcB,
N  uint32_t numSamples,
N  q63_t * realResult,
N  q63_t * imagResult);
N
N  /**
N   * @brief  Floating-point complex dot product
N   * @param[in]  *pSrcA points to the first input vector
N   * @param[in]  *pSrcB points to the second input vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @param[out]  *realResult real part of the result returned here
N   * @param[out]  *imagResult imaginary part of the result returned here
N   * @return none.
N   */
N
N  void arm_cmplx_dot_prod_f32(
N  float32_t * pSrcA,
N  float32_t * pSrcB,
N  uint32_t numSamples,
N  float32_t * realResult,
N  float32_t * imagResult);
N
N  /**
N   * @brief  Q15 complex-by-real multiplication
N   * @param[in]  *pSrcCmplx points to the complex input vector
N   * @param[in]  *pSrcReal points to the real input vector
N   * @param[out]  *pCmplxDst points to the complex output vector
N   * @param[in]  numSamples number of samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_mult_real_q15(
N  q15_t * pSrcCmplx,
N  q15_t * pSrcReal,
N  q15_t * pCmplxDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q31 complex-by-real multiplication
N   * @param[in]  *pSrcCmplx points to the complex input vector
N   * @param[in]  *pSrcReal points to the real input vector
N   * @param[out]  *pCmplxDst points to the complex output vector
N   * @param[in]  numSamples number of samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_mult_real_q31(
N  q31_t * pSrcCmplx,
N  q31_t * pSrcReal,
N  q31_t * pCmplxDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Floating-point complex-by-real multiplication
N   * @param[in]  *pSrcCmplx points to the complex input vector
N   * @param[in]  *pSrcReal points to the real input vector
N   * @param[out]  *pCmplxDst points to the complex output vector
N   * @param[in]  numSamples number of samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_mult_real_f32(
N  float32_t * pSrcCmplx,
N  float32_t * pSrcReal,
N  float32_t * pCmplxDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Minimum value of a Q7 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *result is output pointer
N   * @param[in]  index is the array index of the minimum value in the input buffer.
N   * @return none.
N   */
N
N  void arm_min_q7(
N  q7_t * pSrc,
N  uint32_t blockSize,
N  q7_t * result,
N  uint32_t * index);
N
N  /**
N   * @brief  Minimum value of a Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output pointer
N   * @param[in]  *pIndex is the array index of the minimum value in the input buffer.
N   * @return none.
N   */
N
N  void arm_min_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q15_t * pResult,
N  uint32_t * pIndex);
N
N  /**
N   * @brief  Minimum value of a Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output pointer
N   * @param[out]  *pIndex is the array index of the minimum value in the input buffer.
N   * @return none.
N   */
N  void arm_min_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult,
N  uint32_t * pIndex);
N
N  /**
N   * @brief  Minimum value of a floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @param[out]  *pResult is output pointer
N   * @param[out]  *pIndex is the array index of the minimum value in the input buffer.
N   * @return none.
N   */
N
N  void arm_min_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult,
N  uint32_t * pIndex);
N
N/**
N * @brief Maximum value of a Q7 vector.
N * @param[in]       *pSrc points to the input buffer
N * @param[in]       blockSize length of the input vector
N * @param[out]      *pResult maximum value returned here
N * @param[out]      *pIndex index of maximum value returned here
N * @return none.
N */
N
N  void arm_max_q7(
N  q7_t * pSrc,
N  uint32_t blockSize,
N  q7_t * pResult,
N  uint32_t * pIndex);
N
N/**
N * @brief Maximum value of a Q15 vector.
N * @param[in]       *pSrc points to the input buffer
N * @param[in]       blockSize length of the input vector
N * @param[out]      *pResult maximum value returned here
N * @param[out]      *pIndex index of maximum value returned here
N * @return none.
N */
N
N  void arm_max_q15(
N  q15_t * pSrc,
N  uint32_t blockSize,
N  q15_t * pResult,
N  uint32_t * pIndex);
N
N/**
N * @brief Maximum value of a Q31 vector.
N * @param[in]       *pSrc points to the input buffer
N * @param[in]       blockSize length of the input vector
N * @param[out]      *pResult maximum value returned here
N * @param[out]      *pIndex index of maximum value returned here
N * @return none.
N */
N
N  void arm_max_q31(
N  q31_t * pSrc,
N  uint32_t blockSize,
N  q31_t * pResult,
N  uint32_t * pIndex);
N
N/**
N * @brief Maximum value of a floating-point vector.
N * @param[in]       *pSrc points to the input buffer
N * @param[in]       blockSize length of the input vector
N * @param[out]      *pResult maximum value returned here
N * @param[out]      *pIndex index of maximum value returned here
N * @return none.
N */
N
N  void arm_max_f32(
N  float32_t * pSrc,
N  uint32_t blockSize,
N  float32_t * pResult,
N  uint32_t * pIndex);
N
N  /**
N   * @brief  Q15 complex-by-complex multiplication
N   * @param[in]  *pSrcA points to the first input vector
N   * @param[in]  *pSrcB points to the second input vector
N   * @param[out]  *pDst  points to the output vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_mult_cmplx_q15(
N  q15_t * pSrcA,
N  q15_t * pSrcB,
N  q15_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Q31 complex-by-complex multiplication
N   * @param[in]  *pSrcA points to the first input vector
N   * @param[in]  *pSrcB points to the second input vector
N   * @param[out]  *pDst  points to the output vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_mult_cmplx_q31(
N  q31_t * pSrcA,
N  q31_t * pSrcB,
N  q31_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief  Floating-point complex-by-complex multiplication
N   * @param[in]  *pSrcA points to the first input vector
N   * @param[in]  *pSrcB points to the second input vector
N   * @param[out]  *pDst  points to the output vector
N   * @param[in]  numSamples number of complex samples in each vector
N   * @return none.
N   */
N
N  void arm_cmplx_mult_cmplx_f32(
N  float32_t * pSrcA,
N  float32_t * pSrcB,
N  float32_t * pDst,
N  uint32_t numSamples);
N
N  /**
N   * @brief Converts the elements of the floating-point vector to Q31 vector.
N   * @param[in]       *pSrc points to the floating-point input vector
N   * @param[out]      *pDst points to the Q31 output vector
N   * @param[in]       blockSize length of the input vector
N   * @return none.
N   */
N  void arm_float_to_q31(
N  float32_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Converts the elements of the floating-point vector to Q15 vector.
N   * @param[in]       *pSrc points to the floating-point input vector
N   * @param[out]      *pDst points to the Q15 output vector
N   * @param[in]       blockSize length of the input vector
N   * @return          none
N   */
N  void arm_float_to_q15(
N  float32_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief Converts the elements of the floating-point vector to Q7 vector.
N   * @param[in]       *pSrc points to the floating-point input vector
N   * @param[out]      *pDst points to the Q7 output vector
N   * @param[in]       blockSize length of the input vector
N   * @return          none
N   */
N  void arm_float_to_q7(
N  float32_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Converts the elements of the Q31 vector to Q15 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q31_to_q15(
N  q31_t * pSrc,
N  q15_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Converts the elements of the Q31 vector to Q7 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q31_to_q7(
N  q31_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N  /**
N   * @brief  Converts the elements of the Q15 vector to floating-point vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q15_to_float(
N  q15_t * pSrc,
N  float32_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Converts the elements of the Q15 vector to Q31 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q15_to_q31(
N  q15_t * pSrc,
N  q31_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @brief  Converts the elements of the Q15 vector to Q7 vector.
N   * @param[in]  *pSrc is input pointer
N   * @param[out]  *pDst is output pointer
N   * @param[in]  blockSize is the number of samples to process
N   * @return none.
N   */
N  void arm_q15_to_q7(
N  q15_t * pSrc,
N  q7_t * pDst,
N  uint32_t blockSize);
N
N
N  /**
N   * @ingroup groupInterpolation
N   */
N
N  /**
N   * @defgroup BilinearInterpolate Bilinear Interpolation
N   *
N   * Bilinear interpolation is an extension of linear interpolation applied to a two dimensional grid.
N   * The underlying function <code>f(x, y)</code> is sampled on a regular grid and the interpolation process
N   * determines values between the grid points.
N   * Bilinear interpolation is equivalent to two step linear interpolation, first in the x-dimension and then in the y-dimension.
N   * Bilinear interpolation is often used in image processing to rescale images.
N   * The CMSIS DSP library provides bilinear interpolation functions for Q7, Q15, Q31, and floating-point data types.
N   *
N   * <b>Algorithm</b>
N   * \par
N   * The instance structure used by the bilinear interpolation functions describes a two dimensional data table.
N   * For floating-point, the instance structure is defined as:
N   * <pre>
N   *   typedef struct
N   *   {
N   *     uint16_t numRows;
N   *     uint16_t numCols;
N   *     float32_t *pData;
N   * } arm_bilinear_interp_instance_f32;
N   * </pre>
N   *
N   * \par
N   * where <code>numRows</code> specifies the number of rows in the table;
N   * <code>numCols</code> specifies the number of columns in the table;
N   * and <code>pData</code> points to an array of size <code>numRows*numCols</code> values.
N   * The data table <code>pTable</code> is organized in row order and the supplied data values fall on integer indexes.
N   * That is, table element (x,y) is located at <code>pTable[x + y*numCols]</code> where x and y are integers.
N   *
N   * \par
N   * Let <code>(x, y)</code> specify the desired interpolation point.  Then define:
N   * <pre>
N   *     XF = floor(x)
N   *     YF = floor(y)
N   * </pre>
N   * \par
N   * The interpolated output point is computed as:
N   * <pre>
N   *  f(x, y) = f(XF, YF) * (1-(x-XF)) * (1-(y-YF))
N   *           + f(XF+1, YF) * (x-XF)*(1-(y-YF))
N   *           + f(XF, YF+1) * (1-(x-XF))*(y-YF)
N   *           + f(XF+1, YF+1) * (x-XF)*(y-YF)
N   * </pre>
N   * Note that the coordinates (x, y) contain integer and fractional components.
N   * The integer components specify which portion of the table to use while the
N   * fractional components control the interpolation processor.
N   *
N   * \par
N   * if (x,y) are outside of the table boundary, Bilinear interpolation returns zero output.
N   */
N
N  /**
N   * @addtogroup BilinearInterpolate
N   * @{
N   */
N
N  /**
N  *
N  * @brief  Floating-point bilinear interpolation.
N  * @param[in,out] *S points to an instance of the interpolation structure.
N  * @param[in] X interpolation coordinate.
N  * @param[in] Y interpolation coordinate.
N  * @return out interpolated value.
N  */
N
N
N  static __INLINE float32_t arm_bilinear_interp_f32(
X  static __inline float32_t arm_bilinear_interp_f32(
N  const arm_bilinear_interp_instance_f32 * S,
N  float32_t X,
N  float32_t Y)
N  {
N    float32_t out;
N    float32_t f00, f01, f10, f11;
N    float32_t *pData = S->pData;
N    int32_t xIndex, yIndex, index;
N    float32_t xdiff, ydiff;
N    float32_t b1, b2, b3, b4;
N
N    xIndex = (int32_t) X;
N    yIndex = (int32_t) Y;
N
N    /* Care taken for table outside boundary */
N    /* Returns zero output when values are outside table boundary */
N    if(xIndex < 0 || xIndex > (S->numRows - 1) || yIndex < 0
N       || yIndex > (S->numCols - 1))
N    {
N      return (0);
N    }
N
N    /* Calculation of index for two nearest points in X-direction */
N    index = (xIndex - 1) + (yIndex - 1) * S->numCols;
N
N
N    /* Read two nearest points in X-direction */
N    f00 = pData[index];
N    f01 = pData[index + 1];
N
N    /* Calculation of index for two nearest points in Y-direction */
N    index = (xIndex - 1) + (yIndex) * S->numCols;
N
N
N    /* Read two nearest points in Y-direction */
N    f10 = pData[index];
N    f11 = pData[index + 1];
N
N    /* Calculation of intermediate values */
N    b1 = f00;
N    b2 = f01 - f00;
N    b3 = f10 - f00;
N    b4 = f00 - f01 - f10 + f11;
N
N    /* Calculation of fractional part in X */
N    xdiff = X - xIndex;
N
N    /* Calculation of fractional part in Y */
N    ydiff = Y - yIndex;
N
N    /* Calculation of bi-linear interpolated output */
N    out = b1 + b2 * xdiff + b3 * ydiff + b4 * xdiff * ydiff;
N
N    /* return to application */
N    return (out);
N
N  }
N
N  /**
N  *
N  * @brief  Q31 bilinear interpolation.
N  * @param[in,out] *S points to an instance of the interpolation structure.
N  * @param[in] X interpolation coordinate in 12.20 format.
N  * @param[in] Y interpolation coordinate in 12.20 format.
N  * @return out interpolated value.
N  */
N
N  static __INLINE q31_t arm_bilinear_interp_q31(
X  static __inline q31_t arm_bilinear_interp_q31(
N  arm_bilinear_interp_instance_q31 * S,
N  q31_t X,
N  q31_t Y)
N  {
N    q31_t out;                                   /* Temporary output */
N    q31_t acc = 0;                               /* output */
N    q31_t xfract, yfract;                        /* X, Y fractional parts */
N    q31_t x1, x2, y1, y2;                        /* Nearest output values */
N    int32_t rI, cI;                              /* Row and column indices */
N    q31_t *pYData = S->pData;                    /* pointer to output table values */
N    uint32_t nCols = S->numCols;                 /* num of rows */
N
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    rI = ((X & 0xFFF00000) >> 20u);
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    cI = ((Y & 0xFFF00000) >> 20u);
N
N    /* Care taken for table outside boundary */
N    /* Returns zero output when values are outside table boundary */
N    if(rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
N    {
N      return (0);
N    }
N
N    /* 20 bits for the fractional part */
N    /* shift left xfract by 11 to keep 1.31 format */
N    xfract = (X & 0x000FFFFF) << 11u;
N
N    /* Read two nearest output values from the index */
N    x1 = pYData[(rI) + nCols * (cI)];
N    x2 = pYData[(rI) + nCols * (cI) + 1u];
N
N    /* 20 bits for the fractional part */
N    /* shift left yfract by 11 to keep 1.31 format */
N    yfract = (Y & 0x000FFFFF) << 11u;
N
N    /* Read two nearest output values from the index */
N    y1 = pYData[(rI) + nCols * (cI + 1)];
N    y2 = pYData[(rI) + nCols * (cI + 1) + 1u];
N
N    /* Calculation of x1 * (1-xfract ) * (1-yfract) and acc is in 3.29(q29) format */
N    out = ((q31_t) (((q63_t) x1 * (0x7FFFFFFF - xfract)) >> 32));
N    acc = ((q31_t) (((q63_t) out * (0x7FFFFFFF - yfract)) >> 32));
N
N    /* x2 * (xfract) * (1-yfract)  in 3.29(q29) and adding to acc */
N    out = ((q31_t) ((q63_t) x2 * (0x7FFFFFFF - yfract) >> 32));
N    acc += ((q31_t) ((q63_t) out * (xfract) >> 32));
N
N    /* y1 * (1 - xfract) * (yfract)  in 3.29(q29) and adding to acc */
N    out = ((q31_t) ((q63_t) y1 * (0x7FFFFFFF - xfract) >> 32));
N    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));
N
N    /* y2 * (xfract) * (yfract)  in 3.29(q29) and adding to acc */
N    out = ((q31_t) ((q63_t) y2 * (xfract) >> 32));
N    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));
N
N    /* Convert acc to 1.31(q31) format */
N    return (acc << 2u);
N
N  }
N
N  /**
N  * @brief  Q15 bilinear interpolation.
N  * @param[in,out] *S points to an instance of the interpolation structure.
N  * @param[in] X interpolation coordinate in 12.20 format.
N  * @param[in] Y interpolation coordinate in 12.20 format.
N  * @return out interpolated value.
N  */
N
N  static __INLINE q15_t arm_bilinear_interp_q15(
X  static __inline q15_t arm_bilinear_interp_q15(
N  arm_bilinear_interp_instance_q15 * S,
N  q31_t X,
N  q31_t Y)
N  {
N    q63_t acc = 0;                               /* output */
N    q31_t out;                                   /* Temporary output */
N    q15_t x1, x2, y1, y2;                        /* Nearest output values */
N    q31_t xfract, yfract;                        /* X, Y fractional parts */
N    int32_t rI, cI;                              /* Row and column indices */
N    q15_t *pYData = S->pData;                    /* pointer to output table values */
N    uint32_t nCols = S->numCols;                 /* num of rows */
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    rI = ((X & 0xFFF00000) >> 20);
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    cI = ((Y & 0xFFF00000) >> 20);
N
N    /* Care taken for table outside boundary */
N    /* Returns zero output when values are outside table boundary */
N    if(rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
N    {
N      return (0);
N    }
N
N    /* 20 bits for the fractional part */
N    /* xfract should be in 12.20 format */
N    xfract = (X & 0x000FFFFF);
N
N    /* Read two nearest output values from the index */
N    x1 = pYData[(rI) + nCols * (cI)];
N    x2 = pYData[(rI) + nCols * (cI) + 1u];
N
N
N    /* 20 bits for the fractional part */
N    /* yfract should be in 12.20 format */
N    yfract = (Y & 0x000FFFFF);
N
N    /* Read two nearest output values from the index */
N    y1 = pYData[(rI) + nCols * (cI + 1)];
N    y2 = pYData[(rI) + nCols * (cI + 1) + 1u];
N
N    /* Calculation of x1 * (1-xfract ) * (1-yfract) and acc is in 13.51 format */
N
N    /* x1 is in 1.15(q15), xfract in 12.20 format and out is in 13.35 format */
N    /* convert 13.35 to 13.31 by right shifting  and out is in 1.31 */
N    out = (q31_t) (((q63_t) x1 * (0xFFFFF - xfract)) >> 4u);
N    acc = ((q63_t) out * (0xFFFFF - yfract));
N
N    /* x2 * (xfract) * (1-yfract)  in 1.51 and adding to acc */
N    out = (q31_t) (((q63_t) x2 * (0xFFFFF - yfract)) >> 4u);
N    acc += ((q63_t) out * (xfract));
N
N    /* y1 * (1 - xfract) * (yfract)  in 1.51 and adding to acc */
N    out = (q31_t) (((q63_t) y1 * (0xFFFFF - xfract)) >> 4u);
N    acc += ((q63_t) out * (yfract));
N
N    /* y2 * (xfract) * (yfract)  in 1.51 and adding to acc */
N    out = (q31_t) (((q63_t) y2 * (xfract)) >> 4u);
N    acc += ((q63_t) out * (yfract));
N
N    /* acc is in 13.51 format and down shift acc by 36 times */
N    /* Convert out to 1.15 format */
N    return (acc >> 36);
N
N  }
N
N  /**
N  * @brief  Q7 bilinear interpolation.
N  * @param[in,out] *S points to an instance of the interpolation structure.
N  * @param[in] X interpolation coordinate in 12.20 format.
N  * @param[in] Y interpolation coordinate in 12.20 format.
N  * @return out interpolated value.
N  */
N
N  static __INLINE q7_t arm_bilinear_interp_q7(
X  static __inline q7_t arm_bilinear_interp_q7(
N  arm_bilinear_interp_instance_q7 * S,
N  q31_t X,
N  q31_t Y)
N  {
N    q63_t acc = 0;                               /* output */
N    q31_t out;                                   /* Temporary output */
N    q31_t xfract, yfract;                        /* X, Y fractional parts */
N    q7_t x1, x2, y1, y2;                         /* Nearest output values */
N    int32_t rI, cI;                              /* Row and column indices */
N    q7_t *pYData = S->pData;                     /* pointer to output table values */
N    uint32_t nCols = S->numCols;                 /* num of rows */
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    rI = ((X & 0xFFF00000) >> 20);
N
N    /* Input is in 12.20 format */
N    /* 12 bits for the table index */
N    /* Index value calculation */
N    cI = ((Y & 0xFFF00000) >> 20);
N
N    /* Care taken for table outside boundary */
N    /* Returns zero output when values are outside table boundary */
N    if(rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
N    {
N      return (0);
N    }
N
N    /* 20 bits for the fractional part */
N    /* xfract should be in 12.20 format */
N    xfract = (X & 0x000FFFFF);
N
N    /* Read two nearest output values from the index */
N    x1 = pYData[(rI) + nCols * (cI)];
N    x2 = pYData[(rI) + nCols * (cI) + 1u];
N
N
N    /* 20 bits for the fractional part */
N    /* yfract should be in 12.20 format */
N    yfract = (Y & 0x000FFFFF);
N
N    /* Read two nearest output values from the index */
N    y1 = pYData[(rI) + nCols * (cI + 1)];
N    y2 = pYData[(rI) + nCols * (cI + 1) + 1u];
N
N    /* Calculation of x1 * (1-xfract ) * (1-yfract) and acc is in 16.47 format */
N    out = ((x1 * (0xFFFFF - xfract)));
N    acc = (((q63_t) out * (0xFFFFF - yfract)));
N
N    /* x2 * (xfract) * (1-yfract)  in 2.22 and adding to acc */
N    out = ((x2 * (0xFFFFF - yfract)));
N    acc += (((q63_t) out * (xfract)));
N
N    /* y1 * (1 - xfract) * (yfract)  in 2.22 and adding to acc */
N    out = ((y1 * (0xFFFFF - xfract)));
N    acc += (((q63_t) out * (yfract)));
N
N    /* y2 * (xfract) * (yfract)  in 2.22 and adding to acc */
N    out = ((y2 * (yfract)));
N    acc += (((q63_t) out * (xfract)));
N
N    /* acc in 16.47 format and down shift by 40 to convert to 1.7 format */
N    return (acc >> 40);
N
N  }
N
N  /**
N   * @} end of BilinearInterpolate group
N   */
N   
N
N//SMMLAR
N#define multAcc_32x32_keep32_R(a, x, y) \
N    a = (q31_t) (((((q63_t) a) << 32) + ((q63_t) x * y) + 0x80000000LL ) >> 32)
X#define multAcc_32x32_keep32_R(a, x, y)     a = (q31_t) (((((q63_t) a) << 32) + ((q63_t) x * y) + 0x80000000LL ) >> 32)
N
N//SMMLSR
N#define multSub_32x32_keep32_R(a, x, y) \
N    a = (q31_t) (((((q63_t) a) << 32) - ((q63_t) x * y) + 0x80000000LL ) >> 32)
X#define multSub_32x32_keep32_R(a, x, y)     a = (q31_t) (((((q63_t) a) << 32) - ((q63_t) x * y) + 0x80000000LL ) >> 32)
N
N//SMMULR
N#define mult_32x32_keep32_R(a, x, y) \
N    a = (q31_t) (((q63_t) x * y + 0x80000000LL ) >> 32)
X#define mult_32x32_keep32_R(a, x, y)     a = (q31_t) (((q63_t) x * y + 0x80000000LL ) >> 32)
N
N//SMMLA
N#define multAcc_32x32_keep32(a, x, y) \
N    a += (q31_t) (((q63_t) x * y) >> 32)
X#define multAcc_32x32_keep32(a, x, y)     a += (q31_t) (((q63_t) x * y) >> 32)
N
N//SMMLS
N#define multSub_32x32_keep32(a, x, y) \
N    a -= (q31_t) (((q63_t) x * y) >> 32)
X#define multSub_32x32_keep32(a, x, y)     a -= (q31_t) (((q63_t) x * y) >> 32)
N
N//SMMUL
N#define mult_32x32_keep32(a, x, y) \
N    a = (q31_t) (((q63_t) x * y ) >> 32)
X#define mult_32x32_keep32(a, x, y)     a = (q31_t) (((q63_t) x * y ) >> 32)
N
N
N#if defined ( __CC_ARM ) //Keil
X#if 1L 
N
N//Enter low optimization region - place directly above function definition
N    #ifdef ARM_MATH_CM4
N      #define LOW_OPTIMIZATION_ENTER \
N         _Pragma ("push")         \
N         _Pragma ("O1")
X      #define LOW_OPTIMIZATION_ENTER          _Pragma ("push")                  _Pragma ("O1")
N    #else
S      #define LOW_OPTIMIZATION_ENTER 
N    #endif
N
N//Exit low optimization region - place directly after end of function definition
N    #ifdef ARM_MATH_CM4
N      #define LOW_OPTIMIZATION_EXIT \
N         _Pragma ("pop")
X      #define LOW_OPTIMIZATION_EXIT          _Pragma ("pop")
N    #else
S      #define LOW_OPTIMIZATION_EXIT  
N    #endif
N
N//Enter low optimization region - place directly above function definition
N  #define IAR_ONLY_LOW_OPTIMIZATION_ENTER
N
N//Exit low optimization region - place directly after end of function definition
N  #define IAR_ONLY_LOW_OPTIMIZATION_EXIT
N
N#elif defined(__ICCARM__) //IAR
S
S//Enter low optimization region - place directly above function definition
S    #ifdef ARM_MATH_CM4
S      #define LOW_OPTIMIZATION_ENTER \
S         _Pragma ("optimize=low")
X      #define LOW_OPTIMIZATION_ENTER          _Pragma ("optimize=low")
S    #else
S      #define LOW_OPTIMIZATION_ENTER   
S    #endif
S
S//Exit low optimization region - place directly after end of function definition
S  #define LOW_OPTIMIZATION_EXIT
S
S//Enter low optimization region - place directly above function definition
S    #ifdef ARM_MATH_CM4
S      #define IAR_ONLY_LOW_OPTIMIZATION_ENTER \
S         _Pragma ("optimize=low")
X      #define IAR_ONLY_LOW_OPTIMIZATION_ENTER          _Pragma ("optimize=low")
S    #else
S      #define IAR_ONLY_LOW_OPTIMIZATION_ENTER   
S    #endif
S
S//Exit low optimization region - place directly after end of function definition
S  #define IAR_ONLY_LOW_OPTIMIZATION_EXIT
S
S#elif defined(__GNUC__)
S
S  #define LOW_OPTIMIZATION_ENTER __attribute__(( optimize("-O1") ))
S
S  #define LOW_OPTIMIZATION_EXIT
S
S  #define IAR_ONLY_LOW_OPTIMIZATION_ENTER
S
S  #define IAR_ONLY_LOW_OPTIMIZATION_EXIT
S
S#elif defined(__CSMC__)		// Cosmic
S
S#define LOW_OPTIMIZATION_ENTER
S#define LOW_OPTIMIZATION_EXIT
S#define IAR_ONLY_LOW_OPTIMIZATION_ENTER
S#define IAR_ONLY_LOW_OPTIMIZATION_EXIT
S
N#endif
N
Nextern void arm_bitreversal_32(
N    uint32_t * pSrc,
N    const uint16_t bitRevLen,
N    const uint16_t * pBitRevTable);
N
N
N#ifdef	__cplusplus
S}
N#endif
N
N
N
N
N#endif /* _ARM_MATH_H */
N
N/**
N *
N * End of file.
N */
L 43 "..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_rfft_init_f32.c" 2
N
N/**    
N * @ingroup groupTransforms    
N */
N
N/**    
N * @addtogroup RealFFT    
N * @{    
N */
N
N/**    
N* \par    
N* Generation of realCoefA array:    
N* \par    
N* 	n = 4096    
N* <pre>for (i = 0; i < n; i++)    
N*  {    
N*    pATable[2 * i] = 0.5 * (1.0 - sin (2 * PI / (double) (2 * n) * (double) i));    
N*    pATable[2 * i + 1] = 0.5 * (-1.0 * cos (2 * PI / (double) (2 * n) * (double) i));    
N*  } </pre>    
N*/
N
N
N
Nstatic const float32_t realCoefA[8192] = {
N  0.500000000000000f, -0.500000000000000f, 0.499616503715515f,
N    -0.499999850988388f,
N  0.499233007431030f, -0.499999403953552f, 0.498849511146545f,
N    -0.499998688697815f,
N  0.498466014862061f, -0.499997645616531f, 0.498082518577576f,
N    -0.499996334314346f,
N  0.497699022293091f, -0.499994695186615f, 0.497315555810928f,
N    -0.499992787837982f,
N  0.496932059526443f, -0.499990582466125f, 0.496548563241959f,
N    -0.499988079071045f,
N  0.496165096759796f, -0.499985307455063f, 0.495781600475311f,
N    -0.499982208013535f,
N  0.495398133993149f, -0.499978810548782f, 0.495014637708664f,
N    -0.499975144863129f,
N  0.494631171226501f, -0.499971181154251f, 0.494247704744339f,
N    -0.499966919422150f,
N  0.493864238262177f, -0.499962359666824f, 0.493480771780014f,
N    -0.499957501888275f,
N  0.493097305297852f, -0.499952346086502f, 0.492713838815689f,
N    -0.499946922063828f,
N  0.492330402135849f, -0.499941170215607f, 0.491946935653687f,
N    -0.499935150146484f,
N  0.491563498973846f, -0.499928832054138f, 0.491180062294006f,
N    -0.499922215938568f,
N  0.490796625614166f, -0.499915301799774f, 0.490413218736649f,
N    -0.499908089637756f,
N  0.490029782056808f, -0.499900579452515f, 0.489646375179291f,
N    -0.499892801046371f,
N  0.489262968301773f, -0.499884694814682f, 0.488879561424255f,
N    -0.499876320362091f,
N  0.488496154546738f, -0.499867647886276f, 0.488112777471542f,
N    -0.499858677387238f,
N  0.487729400396347f, -0.499849408864975f, 0.487346023321152f,
N    -0.499839842319489f,
N  0.486962646245956f, -0.499830007553101f, 0.486579269170761f,
N    -0.499819844961166f,
N  0.486195921897888f, -0.499809414148331f, 0.485812574625015f,
N    -0.499798685312271f,
N  0.485429257154465f, -0.499787658452988f, 0.485045909881592f,
N    -0.499776333570480f,
N  0.484662592411041f, -0.499764710664749f, 0.484279274940491f,
N    -0.499752789735794f,
N  0.483895987272263f, -0.499740600585938f, 0.483512699604034f,
N    -0.499728083610535f,
N  0.483129411935806f, -0.499715298414230f, 0.482746154069901f,
N    -0.499702215194702f,
N  0.482362866401672f, -0.499688833951950f, 0.481979638338089f,
N    -0.499675154685974f,
N  0.481596380472183f, -0.499661177396774f, 0.481213152408600f,
N    -0.499646931886673f,
N  0.480829954147339f, -0.499632388353348f, 0.480446726083755f,
N    -0.499617516994476f,
N  0.480063527822495f, -0.499602377414703f, 0.479680359363556f,
N    -0.499586939811707f,
N  0.479297190904617f, -0.499571204185486f, 0.478914022445679f,
N    -0.499555170536041f,
N  0.478530883789063f, -0.499538868665695f, 0.478147745132446f,
N    -0.499522238969803f,
N  0.477764606475830f, -0.499505341053009f, 0.477381497621536f,
N    -0.499488145112991f,
N  0.476998418569565f, -0.499470651149750f, 0.476615339517593f,
N    -0.499452859163284f,
N  0.476232260465622f, -0.499434769153595f, 0.475849211215973f,
N    -0.499416410923004f,
N  0.475466161966324f, -0.499397724866867f, 0.475083142518997f,
N    -0.499378770589828f,
N  0.474700123071671f, -0.499359518289566f, 0.474317133426666f,
N    -0.499339967966080f,
N  0.473934143781662f, -0.499320119619370f, 0.473551183938980f,
N    -0.499299973249435f,
N  0.473168224096298f, -0.499279528856277f, 0.472785294055939f,
N    -0.499258816242218f,
N  0.472402364015579f, -0.499237775802612f, 0.472019463777542f,
N    -0.499216467142105f,
N  0.471636593341827f, -0.499194860458374f, 0.471253722906113f,
N    -0.499172955751419f,
N  0.470870882272720f, -0.499150782823563f, 0.470488041639328f,
N    -0.499128282070160f,
N  0.470105201005936f, -0.499105513095856f, 0.469722419977188f,
N    -0.499082416296005f,
N  0.469339638948441f, -0.499059051275253f, 0.468956857919693f,
N    -0.499035388231277f,
N  0.468574106693268f, -0.499011427164078f, 0.468191385269165f,
N    -0.498987197875977f,
N  0.467808693647385f, -0.498962640762329f, 0.467426002025604f,
N    -0.498937815427780f,
N  0.467043310403824f, -0.498912662267685f, 0.466660678386688f,
N    -0.498887240886688f,
N  0.466278046369553f, -0.498861521482468f, 0.465895414352417f,
N    -0.498835533857346f,
N  0.465512841939926f, -0.498809218406677f, 0.465130269527435f,
N    -0.498782604932785f,
N  0.464747726917267f, -0.498755723237991f, 0.464365184307098f,
N    -0.498728543519974f,
N  0.463982671499252f, -0.498701065778732f, 0.463600188493729f,
N    -0.498673290014267f,
N  0.463217705488205f, -0.498645216226578f, 0.462835282087326f,
N    -0.498616874217987f,
N  0.462452858686447f, -0.498588204383850f, 0.462070435285568f,
N    -0.498559266328812f,
N  0.461688071489334f, -0.498530030250549f, 0.461305707693100f,
N    -0.498500496149063f,
N  0.460923373699188f, -0.498470664024353f, 0.460541069507599f,
N    -0.498440563678741f,
N  0.460158795118332f, -0.498410135507584f, 0.459776520729065f,
N    -0.498379439115524f,
N  0.459394276142120f, -0.498348444700241f, 0.459012061357498f,
N    -0.498317152261734f,
N  0.458629876375198f, -0.498285561800003f, 0.458247691392899f,
N    -0.498253703117371f,
N  0.457865566015244f, -0.498221516609192f, 0.457483440637589f,
N    -0.498189061880112f,
N  0.457101345062256f, -0.498156309127808f, 0.456719279289246f,
N    -0.498123258352280f,
N  0.456337243318558f, -0.498089909553528f, 0.455955207347870f,
N    -0.498056292533875f,
N  0.455573230981827f, -0.498022347688675f, 0.455191254615784f,
N    -0.497988134622574f,
N  0.454809308052063f, -0.497953623533249f, 0.454427421092987f,
N    -0.497918814420700f,
N  0.454045534133911f, -0.497883707284927f, 0.453663676977158f,
N    -0.497848302125931f,
N  0.453281819820404f, -0.497812628746033f, 0.452900022268295f,
N    -0.497776657342911f,
N  0.452518254518509f, -0.497740387916565f, 0.452136516571045f,
N    -0.497703820466995f,
N  0.451754778623581f, -0.497666954994202f, 0.451373100280762f,
N    -0.497629791498184f,
N  0.450991421937943f, -0.497592359781265f, 0.450609803199768f,
N    -0.497554630041122f,
N  0.450228184461594f, -0.497516602277756f, 0.449846625328064f,
N    -0.497478276491165f,
N  0.449465066194534f, -0.497439652681351f, 0.449083566665649f,
N    -0.497400760650635f,
N  0.448702067136765f, -0.497361570596695f, 0.448320597410202f,
N    -0.497322082519531f,
N  0.447939187288284f, -0.497282296419144f, 0.447557777166367f,
N    -0.497242212295532f,
N  0.447176426649094f, -0.497201830148697f, 0.446795076131821f,
N    -0.497161179780960f,
N  0.446413785219193f, -0.497120231389999f, 0.446032524108887f,
N    -0.497078984975815f,
N  0.445651292800903f, -0.497037440538406f, 0.445270061492920f,
N    -0.496995598077774f,
N  0.444888889789581f, -0.496953487396240f, 0.444507747888565f,
N    -0.496911078691483f,
N  0.444126635789871f, -0.496868371963501f, 0.443745553493500f,
N    -0.496825367212296f,
N  0.443364530801773f, -0.496782064437866f, 0.442983508110046f,
N    -0.496738493442535f,
N  0.442602545022964f, -0.496694594621658f, 0.442221581935883f,
N    -0.496650427579880f,
N  0.441840678453445f, -0.496605962514877f, 0.441459804773331f,
N    -0.496561229228973f,
N  0.441078960895538f, -0.496516168117523f, 0.440698176622391f,
N    -0.496470838785172f,
N  0.440317392349243f, -0.496425211429596f, 0.439936667680740f,
N    -0.496379286050797f,
N  0.439555943012238f, -0.496333062648773f, 0.439175277948380f,
N    -0.496286571025848f,
N  0.438794672489166f, -0.496239781379700f, 0.438414067029953f,
N    -0.496192663908005f,
N  0.438033521175385f, -0.496145308017731f, 0.437653005123138f,
N    -0.496097624301910f,
N  0.437272518873215f, -0.496049642562866f, 0.436892062425613f,
N    -0.496001392602921f,
N  0.436511665582657f, -0.495952844619751f, 0.436131268739700f,
N    -0.495903998613358f,
N  0.435750931501389f, -0.495854884386063f, 0.435370653867722f,
N    -0.495805442333221f,
N  0.434990376234055f, -0.495755732059479f, 0.434610158205032f,
N    -0.495705723762512f,
N  0.434229999780655f, -0.495655417442322f, 0.433849841356277f,
N    -0.495604842901230f,
N  0.433469742536545f, -0.495553970336914f, 0.433089673519135f,
N    -0.495502769947052f,
N  0.432709634304047f, -0.495451331138611f, 0.432329654693604f,
N    -0.495399564504623f,
N  0.431949704885483f, -0.495347499847412f, 0.431569814682007f,
N    -0.495295166969299f,
N  0.431189924478531f, -0.495242536067963f, 0.430810123682022f,
N    -0.495189607143402f,
N  0.430430322885513f, -0.495136409997940f, 0.430050581693649f,
N    -0.495082914829254f,
N  0.429670870304108f, -0.495029091835022f, 0.429291218519211f,
N    -0.494975030422211f,
N  0.428911596536636f, -0.494920641183853f, 0.428532034158707f,
N    -0.494865983724594f,
N  0.428152471780777f, -0.494810998439789f, 0.427772998809814f,
N    -0.494755744934082f,
N  0.427393525838852f, -0.494700223207474f, 0.427014142274857f,
N    -0.494644373655319f,
N  0.426634758710861f, -0.494588255882263f, 0.426255434751511f,
N    -0.494531840085983f,
N  0.425876170396805f, -0.494475126266479f, 0.425496935844421f,
N    -0.494418144226074f,
N  0.425117731094360f, -0.494360834360123f, 0.424738585948944f,
N    -0.494303256273270f,
N  0.424359470605850f, -0.494245409965515f, 0.423980414867401f,
N    -0.494187235832214f,
N  0.423601418733597f, -0.494128793478012f, 0.423222452402115f,
N    -0.494070053100586f,
N  0.422843515872955f, -0.494011014699936f, 0.422464638948441f,
N    -0.493951678276062f,
N  0.422085791826248f, -0.493892073631287f, 0.421707004308701f,
N    -0.493832170963287f,
N  0.421328276395798f, -0.493771970272064f, 0.420949578285217f,
N    -0.493711471557617f,
N  0.420570939779282f, -0.493650704622269f, 0.420192331075668f,
N    -0.493589639663696f,
N  0.419813781976700f, -0.493528276681900f, 0.419435262680054f,
N    -0.493466645479202f,
N  0.419056802988052f, -0.493404686450958f, 0.418678402900696f,
N    -0.493342459201813f,
N  0.418300032615662f, -0.493279963731766f, 0.417921721935272f,
N    -0.493217140436172f,
N  0.417543441057205f, -0.493154048919678f, 0.417165219783783f,
N    -0.493090659379959f,
N  0.416787058115005f, -0.493026971817017f, 0.416408926248550f,
N    -0.492963016033173f,
N  0.416030853986740f, -0.492898762226105f, 0.415652841329575f,
N    -0.492834210395813f,
N  0.415274858474731f, -0.492769360542297f, 0.414896935224533f,
N    -0.492704242467880f,
N  0.414519041776657f, -0.492638826370239f, 0.414141237735748f,
N    -0.492573112249374f,
N  0.413763463497162f, -0.492507129907608f, 0.413385748863220f,
N    -0.492440819740295f,
N  0.413008064031601f, -0.492374241352081f, 0.412630438804626f,
N    -0.492307394742966f,
N  0.412252873182297f, -0.492240220308304f, 0.411875367164612f,
N    -0.492172777652740f,
N  0.411497890949249f, -0.492105036973953f, 0.411120474338531f,
N    -0.492037028074265f,
N  0.410743117332459f, -0.491968721151352f, 0.410365819931030f,
N    -0.491900116205215f,
N  0.409988552331924f, -0.491831213235855f, 0.409611344337463f,
N    -0.491762012243271f,
N  0.409234195947647f, -0.491692543029785f, 0.408857107162476f,
N    -0.491622805595398f,
N  0.408480048179626f, -0.491552740335464f, 0.408103078603745f,
N    -0.491482406854630f,
N  0.407726138830185f, -0.491411775350571f, 0.407349258661270f,
N    -0.491340845823288f,
N  0.406972438097000f, -0.491269648075104f, 0.406595647335052f,
N    -0.491198152303696f,
N  0.406218945980072f, -0.491126358509064f, 0.405842274427414f,
N    -0.491054296493530f,
N  0.405465662479401f, -0.490981936454773f, 0.405089110136032f,
N    -0.490909278392792f,
N  0.404712617397308f, -0.490836352109909f, 0.404336184263229f,
N    -0.490763127803802f,
N  0.403959810733795f, -0.490689605474472f, 0.403583467006683f,
N    -0.490615785121918f,
N  0.403207212686539f, -0.490541696548462f, 0.402830988168716f,
N    -0.490467309951782f,
N  0.402454853057861f, -0.490392625331879f, 0.402078747749329f,
N    -0.490317672491074f,
N  0.401702702045441f, -0.490242421627045f, 0.401326715946198f,
N    -0.490166902542114f,
N  0.400950789451599f, -0.490091055631638f, 0.400574922561646f,
N    -0.490014940500259f,
N  0.400199115276337f, -0.489938557147980f, 0.399823367595673f,
N    -0.489861875772476f,
N  0.399447679519653f, -0.489784896373749f, 0.399072051048279f,
N    -0.489707618951797f,
N  0.398696482181549f, -0.489630073308945f, 0.398320972919464f,
N    -0.489552229642868f,
N  0.397945523262024f, -0.489474087953568f, 0.397570133209229f,
N    -0.489395678043365f,
N  0.397194802761078f, -0.489316970109940f, 0.396819531917572f,
N    -0.489237964153290f,
N  0.396444320678711f, -0.489158689975739f, 0.396069169044495f,
N    -0.489079117774963f,
N  0.395694077014923f, -0.488999247550964f, 0.395319044589996f,
N    -0.488919109106064f,
N  0.394944071769714f, -0.488838672637939f, 0.394569188356400f,
N    -0.488757967948914f,
N  0.394194334745407f, -0.488676935434341f, 0.393819570541382f,
N    -0.488595664501190f,
N  0.393444836139679f, -0.488514065742493f, 0.393070191144943f,
N    -0.488432198762894f,
N  0.392695605754852f, -0.488350033760071f, 0.392321079969406f,
N    -0.488267600536346f,
N  0.391946613788605f, -0.488184869289398f, 0.391572207212448f,
N    -0.488101840019226f,
N  0.391197860240936f, -0.488018542528152f, 0.390823602676392f,
N    -0.487934947013855f,
N  0.390449374914169f, -0.487851053476334f, 0.390075236558914f,
N    -0.487766891717911f,
N  0.389701157808304f, -0.487682431936264f, 0.389327138662338f,
N    -0.487597703933716f,
N  0.388953179121017f, -0.487512677907944f, 0.388579308986664f,
N    -0.487427353858948f,
N  0.388205498456955f, -0.487341761589050f, 0.387831717729568f,
N    -0.487255871295929f,
N  0.387458056211472f, -0.487169682979584f, 0.387084424495697f,
N    -0.487083226442337f,
N  0.386710882186890f, -0.486996471881866f, 0.386337369680405f,
N    -0.486909449100494f,
N  0.385963946580887f, -0.486822128295898f, 0.385590612888336f,
N    -0.486734509468079f,
N  0.385217308998108f, -0.486646622419357f, 0.384844094514847f,
N    -0.486558437347412f,
N  0.384470939636230f, -0.486469984054565f, 0.384097874164581f,
N    -0.486381232738495f,
N  0.383724838495255f, -0.486292183399200f, 0.383351892232895f,
N    -0.486202865839005f,
N  0.382979035377502f, -0.486113250255585f, 0.382606208324432f,
N    -0.486023366451263f,
N  0.382233470678329f, -0.485933154821396f, 0.381860792636871f,
N    -0.485842704772949f,
N  0.381488204002380f, -0.485751956701279f, 0.381115674972534f,
N    -0.485660910606384f,
N  0.380743205547333f, -0.485569566488266f, 0.380370795726776f,
N    -0.485477954149246f,
N  0.379998475313187f, -0.485386073589325f, 0.379626244306564f,
N    -0.485293895006180f,
N  0.379254043102264f, -0.485201418399811f, 0.378881961107254f,
N    -0.485108673572540f,
N  0.378509908914566f, -0.485015630722046f, 0.378137946128845f,
N    -0.484922289848328f,
N  0.377766042947769f, -0.484828680753708f, 0.377394229173660f,
N    -0.484734803438187f,
N  0.377022475004196f, -0.484640628099442f, 0.376650810241699f,
N    -0.484546154737473f,
N  0.376279205083847f, -0.484451413154602f, 0.375907659530640f,
N    -0.484356373548508f,
N  0.375536203384399f, -0.484261035919189f, 0.375164806842804f,
N    -0.484165430068970f,
N  0.374793499708176f, -0.484069555997849f, 0.374422252178192f,
N    -0.483973383903503f,
N  0.374051094055176f, -0.483876913785934f, 0.373679995536804f,
N    -0.483780175447464f,
N  0.373308986425400f, -0.483683139085770f, 0.372938036918640f,
N    -0.483585834503174f,
N  0.372567176818848f, -0.483488231897354f, 0.372196376323700f,
N    -0.483390361070633f,
N  0.371825665235519f, -0.483292192220688f, 0.371455013751984f,
N    -0.483193725347519f,
N  0.371084451675415f, -0.483094990253448f, 0.370713949203491f,
N    -0.482995986938477f,
N  0.370343536138535f, -0.482896685600281f, 0.369973212480545f,
N    -0.482797086238861f,
N  0.369602948427200f, -0.482697218656540f, 0.369232743978500f,
N    -0.482597053050995f,
N  0.368862658739090f, -0.482496619224548f, 0.368492603302002f,
N    -0.482395917177200f,
N  0.368122667074203f, -0.482294887304306f, 0.367752790451050f,
N    -0.482193619012833f,
N  0.367382973432541f, -0.482092022895813f, 0.367013275623322f,
N    -0.481990188360214f,
N  0.366643607616425f, -0.481888025999069f, 0.366274058818817f,
N    -0.481785595417023f,
N  0.365904569625854f, -0.481682896614075f, 0.365535169839859f,
N    -0.481579899787903f,
N  0.365165829658508f, -0.481476634740829f, 0.364796578884125f,
N    -0.481373071670532f,
N  0.364427417516708f, -0.481269240379334f, 0.364058345556259f,
N    -0.481165111064911f,
N  0.363689333200455f, -0.481060713529587f, 0.363320380449295f,
N    -0.480956017971039f,
N  0.362951546907425f, -0.480851024389267f, 0.362582772970200f,
N    -0.480745792388916f,
N  0.362214088439941f, -0.480640232563019f, 0.361845493316650f,
N    -0.480534434318542f,
N  0.361476957798004f, -0.480428308248520f, 0.361108511686325f,
N    -0.480321943759918f,
N  0.360740154981613f, -0.480215251445770f, 0.360371887683868f,
N    -0.480108320713043f,
N  0.360003679990768f, -0.480001062154770f, 0.359635561704636f,
N    -0.479893565177917f,
N  0.359267532825470f, -0.479785770177841f, 0.358899593353271f,
N    -0.479677677154541f,
N  0.358531713485718f, -0.479569315910339f, 0.358163923025131f,
N    -0.479460656642914f,
N  0.357796221971512f, -0.479351729154587f, 0.357428610324860f,
N    -0.479242533445358f,
N  0.357061088085175f, -0.479133039712906f, 0.356693625450134f,
N    -0.479023247957230f,
N  0.356326282024384f, -0.478913217782974f, 0.355958998203278f,
N    -0.478802859783173f,
N  0.355591803789139f, -0.478692263364792f, 0.355224698781967f,
N    -0.478581339120865f,
N  0.354857653379440f, -0.478470176458359f, 0.354490727186203f,
N    -0.478358715772629f,
N  0.354123860597610f, -0.478246957063675f, 0.353757113218308f,
N    -0.478134930133820f,
N  0.353390425443649f, -0.478022634983063f, 0.353023827075958f,
N    -0.477910041809082f,
N  0.352657318115234f, -0.477797180414200f, 0.352290898561478f,
N    -0.477684020996094f,
N  0.351924568414688f, -0.477570593357086f, 0.351558297872543f,
N    -0.477456867694855f,
N  0.351192146539688f, -0.477342873811722f, 0.350826084613800f,
N    -0.477228611707687f,
N  0.350460082292557f, -0.477114051580429f, 0.350094199180603f,
N    -0.476999223232269f,
N  0.349728375673294f, -0.476884096860886f, 0.349362671375275f,
N    -0.476768702268600f,
N  0.348997026681900f, -0.476653009653091f, 0.348631471395493f,
N    -0.476537048816681f,
N  0.348266035318375f, -0.476420819759369f, 0.347900658845901f,
N    -0.476304292678833f,
N  0.347535371780396f, -0.476187497377396f, 0.347170203924179f,
N    -0.476070433855057f,
N  0.346805095672607f, -0.475953072309494f, 0.346440106630325f,
N    -0.475835442543030f,
N  0.346075177192688f, -0.475717514753342f, 0.345710366964340f,
N    -0.475599318742752f,
N  0.345345616340637f, -0.475480824708939f, 0.344980984926224f,
N    -0.475362062454224f,
N  0.344616413116455f, -0.475243031978607f, 0.344251960515976f,
N    -0.475123733282089f,
N  0.343887597322464f, -0.475004136562347f, 0.343523323535919f,
N    -0.474884241819382f,
N  0.343159139156342f, -0.474764078855515f, 0.342795044183731f,
N    -0.474643647670746f,
N  0.342431038618088f, -0.474522948265076f, 0.342067122459412f,
N    -0.474401950836182f,
N  0.341703325510025f, -0.474280685186386f, 0.341339588165283f,
N    -0.474159121513367f,
N  0.340975970029831f, -0.474037289619446f, 0.340612411499023f,
N    -0.473915189504623f,
N  0.340248972177505f, -0.473792791366577f, 0.339885622262955f,
N    -0.473670125007629f,
N  0.339522391557693f, -0.473547190427780f, 0.339159220457077f,
N    -0.473423957824707f,
N  0.338796168565750f, -0.473300457000732f, 0.338433176279068f,
N    -0.473176687955856f,
N  0.338070303201675f, -0.473052620887756f, 0.337707549333572f,
N    -0.472928285598755f,
N  0.337344855070114f, -0.472803652286530f, 0.336982280015945f,
N    -0.472678780555725f,
N  0.336619764566422f, -0.472553610801697f, 0.336257368326187f,
N    -0.472428143024445f,
N  0.335895091295242f, -0.472302407026291f, 0.335532873868942f,
N    -0.472176402807236f,
N  0.335170775651932f, -0.472050130367279f, 0.334808766841888f,
N    -0.471923559904099f,
N  0.334446847438812f, -0.471796721220016f, 0.334085017442703f,
N    -0.471669614315033f,
N  0.333723306655884f, -0.471542209386826f, 0.333361685276031f,
N    -0.471414536237717f,
N  0.333000183105469f, -0.471286594867706f, 0.332638740539551f,
N    -0.471158385276794f,
N  0.332277417182922f, -0.471029877662659f, 0.331916213035584f,
N    -0.470901101827621f,
N  0.331555068492889f, -0.470772027969360f, 0.331194043159485f,
N    -0.470642685890198f,
N  0.330833107233047f, -0.470513075590134f, 0.330472290515900f,
N    -0.470383197069168f,
N  0.330111563205719f, -0.470253020524979f, 0.329750925302505f,
N    -0.470122605562210f,
N  0.329390406608582f, -0.469991862773895f, 0.329029977321625f,
N    -0.469860881567001f,
N  0.328669637441635f, -0.469729602336884f, 0.328309416770935f,
N    -0.469598054885864f,
N  0.327949285507202f, -0.469466239213943f, 0.327589273452759f,
N    -0.469334155321121f,
N  0.327229350805283f, -0.469201773405075f, 0.326869517564774f,
N    -0.469069123268127f,
N  0.326509803533554f, -0.468936175107956f, 0.326150178909302f,
N    -0.468802988529205f,
N  0.325790673494339f, -0.468669503927231f, 0.325431257486343f,
N    -0.468535751104355f,
N  0.325071930885315f, -0.468401730060577f, 0.324712723493576f,
N    -0.468267410993576f,
N  0.324353635311127f, -0.468132823705673f, 0.323994606733322f,
N    -0.467997968196869f,
N  0.323635727167130f, -0.467862844467163f, 0.323276937007904f,
N    -0.467727422714233f,
N  0.322918236255646f, -0.467591762542725f, 0.322559654712677f,
N    -0.467455804347992f,
N  0.322201162576675f, -0.467319577932358f, 0.321842789649963f,
N    -0.467183053493500f,
N  0.321484506130219f, -0.467046260833740f, 0.321126341819763f,
N    -0.466909229755402f,
N  0.320768296718597f, -0.466771900653839f, 0.320410341024399f,
N    -0.466634273529053f,
N  0.320052474737167f, -0.466496407985687f, 0.319694727659225f,
N    -0.466358244419098f,
N  0.319337099790573f, -0.466219812631607f, 0.318979561328888f,
N    -0.466081112623215f,
N  0.318622142076492f, -0.465942144393921f, 0.318264812231064f,
N    -0.465802878141403f,
N  0.317907601594925f, -0.465663343667984f, 0.317550510168076f,
N    -0.465523540973663f,
N  0.317193508148193f, -0.465383470058441f, 0.316836595535278f,
N    -0.465243130922318f,
N  0.316479831933975f, -0.465102523565292f, 0.316123157739639f,
N    -0.464961618185043f,
N  0.315766572952271f, -0.464820444583893f, 0.315410137176514f,
N    -0.464679002761841f,
N  0.315053790807724f, -0.464537292718887f, 0.314697533845901f,
N    -0.464395314455032f,
N  0.314341396093369f, -0.464253038167953f, 0.313985377550125f,
N    -0.464110493659973f,
N  0.313629478216171f, -0.463967710733414f, 0.313273668289185f,
N    -0.463824629783630f,
N  0.312917977571487f, -0.463681250810623f, 0.312562376260757f,
N    -0.463537633419037f,
N  0.312206923961639f, -0.463393747806549f, 0.311851561069489f,
N    -0.463249564170837f,
N  0.311496287584305f, -0.463105112314224f, 0.311141163110733f,
N    -0.462960392236710f,
N  0.310786128044128f, -0.462815403938293f, 0.310431212186813f,
N    -0.462670147418976f,
N  0.310076385736465f, -0.462524622678757f, 0.309721708297729f,
N    -0.462378799915314f,
N  0.309367120265961f, -0.462232738733292f, 0.309012651443481f,
N    -0.462086379528046f,
N  0.308658272027969f, -0.461939752101898f, 0.308304041624069f,
N    -0.461792886257172f,
N  0.307949900627136f, -0.461645722389221f, 0.307595878839493f,
N    -0.461498260498047f,
N  0.307241976261139f, -0.461350560188293f, 0.306888192892075f,
N    -0.461202591657639f,
N  0.306534498929977f, -0.461054325103760f, 0.306180924177170f,
N    -0.460905820131302f,
N  0.305827468633652f, -0.460757017135620f, 0.305474132299423f,
N    -0.460607945919037f,
N  0.305120915174484f, -0.460458606481552f, 0.304767817258835f,
N    -0.460309028625488f,
N  0.304414808750153f, -0.460159152746201f, 0.304061919450760f,
N    -0.460008978843689f,
N  0.303709149360657f, -0.459858566522598f, 0.303356528282166f,
N    -0.459707885980606f,
N  0.303003966808319f, -0.459556937217712f, 0.302651554346085f,
N    -0.459405690431595f,
N  0.302299261093140f, -0.459254205226898f, 0.301947087049484f,
N    -0.459102421998978f,
N  0.301595002412796f, -0.458950400352478f, 0.301243066787720f,
N    -0.458798080682755f,
N  0.300891220569611f, -0.458645492792130f, 0.300539493560791f,
N    -0.458492636680603f,
N  0.300187885761261f, -0.458339542150497f, 0.299836426973343f,
N    -0.458186149597168f,
N  0.299485057592392f, -0.458032488822937f, 0.299133807420731f,
N    -0.457878559827805f,
N  0.298782676458359f, -0.457724362611771f, 0.298431664705276f,
N    -0.457569897174835f,
N  0.298080772161484f, -0.457415163516998f, 0.297729998826981f,
N    -0.457260161638260f,
N  0.297379344701767f, -0.457104891538620f, 0.297028809785843f,
N    -0.456949323415756f,
N  0.296678394079208f, -0.456793516874313f, 0.296328097581863f,
N    -0.456637442111969f,
N  0.295977920293808f, -0.456481099128723f, 0.295627862215042f,
N    -0.456324487924576f,
N  0.295277923345566f, -0.456167578697205f, 0.294928103685379f,
N    -0.456010431051254f,
N  0.294578403234482f, -0.455853015184402f, 0.294228851795197f,
N    -0.455695331096649f,
N  0.293879389762878f, -0.455537378787994f, 0.293530046939850f,
N    -0.455379128456116f,
N  0.293180853128433f, -0.455220639705658f, 0.292831748723984f,
N    -0.455061882734299f,
N  0.292482793331146f, -0.454902857542038f, 0.292133957147598f,
N    -0.454743564128876f,
N  0.291785210371017f, -0.454584002494812f, 0.291436612606049f,
N    -0.454424172639847f,
N  0.291088134050369f, -0.454264044761658f, 0.290739774703979f,
N    -0.454103678464890f,
N  0.290391564369202f, -0.453943043947220f, 0.290043443441391f,
N    -0.453782171010971f,
N  0.289695471525192f, -0.453621000051498f, 0.289347589015961f,
N    -0.453459560871124f,
N  0.288999855518341f, -0.453297853469849f, 0.288652241230011f,
N    -0.453135877847672f,
N  0.288304775953293f, -0.452973634004593f, 0.287957400083542f,
N    -0.452811151742935f,
N  0.287610173225403f, -0.452648371458054f, 0.287263035774231f,
N    -0.452485352754593f,
N  0.286916047334671f, -0.452322036027908f, 0.286569178104401f,
N    -0.452158480882645f,
N  0.286222457885742f, -0.451994657516479f, 0.285875827074051f,
N    -0.451830536127090f,
N  0.285529345273972f, -0.451666176319122f, 0.285182982683182f,
N    -0.451501548290253f,
N  0.284836769104004f, -0.451336652040482f, 0.284490644931793f,
N    -0.451171487569809f,
N  0.284144669771194f, -0.451006084680557f, 0.283798813819885f,
N    -0.450840383768082f,
N  0.283453077077866f, -0.450674414634705f, 0.283107489347458f,
N    -0.450508207082748f,
N  0.282762020826340f, -0.450341701507568f, 0.282416671514511f,
N    -0.450174957513809f,
N  0.282071471214294f, -0.450007945299149f, 0.281726360321045f,
N    -0.449840664863586f,
N  0.281381398439407f, -0.449673116207123f, 0.281036585569382f,
N    -0.449505299329758f,
N  0.280691891908646f, -0.449337244033813f, 0.280347317457199f,
N    -0.449168890714645f,
N  0.280002862215042f, -0.449000298976898f, 0.279658555984497f,
N    -0.448831409215927f,
N  0.279314368963242f, -0.448662281036377f, 0.278970301151276f,
N    -0.448492884635925f,
N  0.278626382350922f, -0.448323249816895f, 0.278282582759857f,
N    -0.448153316974640f,
N  0.277938932180405f, -0.447983115911484f, 0.277595400810242f,
N    -0.447812676429749f,
N  0.277251988649368f, -0.447641968727112f, 0.276908725500107f,
N    -0.447470992803574f,
N  0.276565581560135f, -0.447299748659134f, 0.276222556829453f,
N    -0.447128236293793f,
N  0.275879681110382f, -0.446956485509872f, 0.275536954402924f,
N    -0.446784436702728f,
N  0.275194346904755f, -0.446612149477005f, 0.274851858615875f,
N    -0.446439594030380f,
N  0.274509519338608f, -0.446266770362854f, 0.274167299270630f,
N    -0.446093708276749f,
N  0.273825198411942f, -0.445920348167419f, 0.273483246564865f,
N    -0.445746749639511f,
N  0.273141443729401f, -0.445572882890701f, 0.272799760103226f,
N    -0.445398747920990f,
N  0.272458195686340f, -0.445224374532700f, 0.272116780281067f,
N    -0.445049703121185f,
N  0.271775513887405f, -0.444874793291092f, 0.271434366703033f,
N    -0.444699615240097f,
N  0.271093338727951f, -0.444524168968201f, 0.270752459764481f,
N    -0.444348484277725f,
N  0.270411729812622f, -0.444172531366348f, 0.270071119070053f,
N    -0.443996280431747f,
N  0.269730657339096f, -0.443819820880890f, 0.269390314817429f,
N    -0.443643063306808f,
N  0.269050091505051f, -0.443466067314148f, 0.268710047006607f,
N    -0.443288803100586f,
N  0.268370121717453f, -0.443111270666122f, 0.268030315637589f,
N    -0.442933470010757f,
N  0.267690658569336f, -0.442755430936813f, 0.267351150512695f,
N    -0.442577123641968f,
N  0.267011761665344f, -0.442398548126221f, 0.266672492027283f,
N    -0.442219734191895f,
N  0.266333401203156f, -0.442040622234344f, 0.265994429588318f,
N    -0.441861271858215f,
N  0.265655577182770f, -0.441681683063507f, 0.265316903591156f,
N    -0.441501796245575f,
N  0.264978319406509f, -0.441321671009064f, 0.264639914035797f,
N    -0.441141277551651f,
N  0.264301627874374f, -0.440960645675659f, 0.263963490724564f,
N    -0.440779715776443f,
N  0.263625472784042f, -0.440598547458649f, 0.263287603855133f,
N    -0.440417140722275f,
N  0.262949883937836f, -0.440235435962677f, 0.262612313032150f,
N    -0.440053492784500f,
N  0.262274861335754f, -0.439871311187744f, 0.261937558650970f,
N    -0.439688831567764f,
N  0.261600375175476f, -0.439506113529205f, 0.261263370513916f,
N    -0.439323127269745f,
N  0.260926485061646f, -0.439139902591705f, 0.260589718818665f,
N    -0.438956409692764f,
N  0.260253131389618f, -0.438772648572922f, 0.259916663169861f,
N    -0.438588619232178f,
N  0.259580343961716f, -0.438404351472855f, 0.259244143962860f,
N    -0.438219845294952f,
N  0.258908122777939f, -0.438035041093826f, 0.258572220802307f,
N    -0.437849998474121f,
N  0.258236467838287f, -0.437664687633514f, 0.257900834083557f,
N    -0.437479138374329f,
N  0.257565379142761f, -0.437293320894241f, 0.257230043411255f,
N    -0.437107264995575f,
N  0.256894856691360f, -0.436920911073685f, 0.256559818983078f,
N    -0.436734348535538f,
N  0.256224930286407f, -0.436547487974167f, 0.255890160799026f,
N    -0.436360388994217f,
N  0.255555540323257f, -0.436173021793365f, 0.255221068859100f,
N    -0.435985416173935f,
N  0.254886746406555f, -0.435797542333603f, 0.254552572965622f,
N    -0.435609430074692f,
N  0.254218548536301f, -0.435421019792557f, 0.253884643316269f,
N    -0.435232400894165f,
N  0.253550916910172f, -0.435043483972549f, 0.253217309713364f,
N    -0.434854328632355f,
N  0.252883851528168f, -0.434664934873581f, 0.252550542354584f,
N    -0.434475272893906f,
N  0.252217382192612f, -0.434285342693329f, 0.251884341239929f,
N    -0.434095174074173f,
N  0.251551479101181f, -0.433904737234116f, 0.251218736171722f,
N    -0.433714061975479f,
N  0.250886172056198f, -0.433523118495941f, 0.250553727149963f,
N    -0.433331936597824f,
N  0.250221431255341f, -0.433140486478806f, 0.249889299273491f,
N    -0.432948768138886f,
N  0.249557301402092f, -0.432756811380386f, 0.249225467443466f,
N    -0.432564586400986f,
N  0.248893767595291f, -0.432372123003006f, 0.248562216758728f,
N    -0.432179391384125f,
N  0.248230814933777f, -0.431986421346664f, 0.247899547219276f,
N    -0.431793183088303f,
N  0.247568443417549f, -0.431599706411362f, 0.247237488627434f,
N    -0.431405961513519f,
N  0.246906682848930f, -0.431211978197098f, 0.246576011180878f,
N    -0.431017726659775f,
N  0.246245503425598f, -0.430823236703873f, 0.245915144681931f,
N    -0.430628478527069f,
N  0.245584934949875f, -0.430433481931686f, 0.245254859328270f,
N    -0.430238217115402f,
N  0.244924947619438f, -0.430042684078217f, 0.244595184922218f,
N    -0.429846942424774f,
N  0.244265571236610f, -0.429650902748108f, 0.243936106562614f,
N    -0.429454624652863f,
N  0.243606805801392f, -0.429258108139038f, 0.243277639150620f,
N    -0.429061323404312f,
N  0.242948621511459f, -0.428864300251007f, 0.242619767785072f,
N    -0.428667008876801f,
N  0.242291063070297f, -0.428469479084015f, 0.241962507367134f,
N    -0.428271710872650f,
N  0.241634100675583f, -0.428073674440384f, 0.241305842995644f,
N    -0.427875369787216f,
N  0.240977749228477f, -0.427676826715469f, 0.240649804472923f,
N    -0.427478045225143f,
N  0.240322008728981f, -0.427278995513916f, 0.239994361996651f,
N    -0.427079707384110f,
N  0.239666879177094f, -0.426880151033401f, 0.239339530467987f,
N    -0.426680356264114f,
N  0.239012360572815f, -0.426480293273926f, 0.238685324788094f,
N    -0.426279991865158f,
N  0.238358452916145f, -0.426079452037811f, 0.238031730055809f,
N    -0.425878643989563f,
N  0.237705156207085f, -0.425677597522736f, 0.237378746271133f,
N    -0.425476282835007f,
N  0.237052485346794f, -0.425274729728699f, 0.236726388335228f,
N    -0.425072938203812f,
N  0.236400425434113f, -0.424870878458023f, 0.236074641346931f,
N    -0.424668580293655f,
N  0.235749006271362f, -0.424466013908386f, 0.235423520207405f,
N    -0.424263238906860f,
N  0.235098183155060f, -0.424060165882111f, 0.234773010015488f,
N    -0.423856884241104f,
N  0.234448000788689f, -0.423653304576874f, 0.234123140573502f,
N    -0.423449516296387f,
N  0.233798429369926f, -0.423245459794998f, 0.233473882079124f,
N    -0.423041164875031f,
N  0.233149498701096f, -0.422836631536484f, 0.232825264334679f,
N    -0.422631829977036f,
N  0.232501193881035f, -0.422426789999008f, 0.232177272439003f,
N    -0.422221481800079f,
N  0.231853514909744f, -0.422015935182571f, 0.231529906392097f,
N    -0.421810150146484f,
N  0.231206461787224f, -0.421604126691818f, 0.230883181095123f,
N    -0.421397835016251f,
N  0.230560049414635f, -0.421191304922104f, 0.230237081646919f,
N    -0.420984506607056f,
N  0.229914262890816f, -0.420777499675751f, 0.229591608047485f,
N    -0.420570224523544f,
N  0.229269117116928f, -0.420362681150436f, 0.228946775197983f,
N    -0.420154929161072f,
N  0.228624612092972f, -0.419946908950806f, 0.228302597999573f,
N    -0.419738620519638f,
N  0.227980732917786f, -0.419530123472214f, 0.227659046649933f,
N    -0.419321358203888f,
N  0.227337509393692f, -0.419112354516983f, 0.227016136050224f,
N    -0.418903112411499f,
N  0.226694911718369f, -0.418693602085114f, 0.226373866200447f,
N    -0.418483853340149f,
N  0.226052969694138f, -0.418273866176605f, 0.225732237100601f,
N    -0.418063640594482f,
N  0.225411668419838f, -0.417853146791458f, 0.225091263651848f,
N    -0.417642414569855f,
N  0.224771007895470f, -0.417431443929672f, 0.224450930953026f,
N    -0.417220205068588f,
N  0.224131003022194f, -0.417008757591248f, 0.223811239004135f,
N    -0.416797041893005f,
N  0.223491653800011f, -0.416585087776184f, 0.223172217607498f,
N    -0.416372895240784f,
N  0.222852945327759f, -0.416160434484482f, 0.222533836960793f,
N    -0.415947735309601f,
N  0.222214877605438f, -0.415734797716141f, 0.221896097064018f,
N    -0.415521621704102f,
N  0.221577480435371f, -0.415308207273483f, 0.221259027719498f,
N    -0.415094524621964f,
N  0.220940738916397f, -0.414880603551865f, 0.220622614026070f,
N    -0.414666473865509f,
N  0.220304638147354f, -0.414452046155930f, 0.219986841082573f,
N    -0.414237409830093f,
N  0.219669207930565f, -0.414022535085678f, 0.219351738691330f,
N    -0.413807392120361f,
N  0.219034433364868f, -0.413592010736465f, 0.218717306852341f,
N    -0.413376390933990f,
N  0.218400329351425f, -0.413160532712936f, 0.218083515763283f,
N    -0.412944436073303f,
N  0.217766880989075f, -0.412728071212769f, 0.217450410127640f,
N    -0.412511497735977f,
N  0.217134088277817f, -0.412294656038284f, 0.216817945241928f,
N    -0.412077575922012f,
N  0.216501981019974f, -0.411860257387161f, 0.216186165809631f,
N    -0.411642700433731f,
N  0.215870529413223f, -0.411424905061722f, 0.215555042028427f,
N    -0.411206841468811f,
N  0.215239733457565f, -0.410988569259644f, 0.214924603700638f,
N    -0.410770028829575f,
N  0.214609622955322f, -0.410551249980927f, 0.214294821023941f,
N    -0.410332232713699f,
N  0.213980183005333f, -0.410112977027893f, 0.213665723800659f,
N    -0.409893482923508f,
N  0.213351413607597f, -0.409673750400543f, 0.213037282228470f,
N    -0.409453779459000f,
N  0.212723329663277f, -0.409233570098877f, 0.212409526109695f,
N    -0.409013092517853f,
N  0.212095901370049f, -0.408792406320572f, 0.211782455444336f,
N    -0.408571451902390f,
N  0.211469158530235f, -0.408350288867950f, 0.211156040430069f,
N    -0.408128857612610f,
N  0.210843101143837f, -0.407907217741013f, 0.210530325770378f,
N    -0.407685309648514f,
N  0.210217714309692f, -0.407463163137436f, 0.209905281662941f,
N    -0.407240778207779f,
N  0.209593027830124f, -0.407018154859543f, 0.209280923008919f,
N    -0.406795293092728f,
N  0.208969011902809f, -0.406572192907333f, 0.208657249808311f,
N    -0.406348884105682f,
N  0.208345666527748f, -0.406125307083130f, 0.208034262061119f,
N    -0.405901491641998f,
N  0.207723021507263f, -0.405677437782288f, 0.207411959767342f,
N    -0.405453115701675f,
N  0.207101076841354f, -0.405228585004807f, 0.206790357828140f,
N    -0.405003815889359f,
N  0.206479802727699f, -0.404778808355331f, 0.206169426441193f,
N    -0.404553562402725f,
N  0.205859228968620f, -0.404328078031540f, 0.205549195408821f,
N    -0.404102355241776f,
N  0.205239340662956f, -0.403876423835754f, 0.204929664731026f,
N    -0.403650224208832f,
N  0.204620152711868f, -0.403423786163330f, 0.204310819506645f,
N    -0.403197109699249f,
N  0.204001650214195f, -0.402970194816589f, 0.203692659735680f,
N    -0.402743041515350f,
N  0.203383848071098f, -0.402515679597855f, 0.203075215220451f,
N    -0.402288049459457f,
N  0.202766746282578f, -0.402060180902481f, 0.202458456158638f,
N    -0.401832103729248f,
N  0.202150344848633f, -0.401603758335114f, 0.201842412352562f,
N    -0.401375204324722f,
N  0.201534643769264f, -0.401146411895752f, 0.201227053999901f,
N    -0.400917351245880f,
N  0.200919643044472f, -0.400688081979752f, 0.200612410902977f,
N    -0.400458574295044f,
N  0.200305357575417f, -0.400228828191757f, 0.199998468160629f,
N    -0.399998843669891f,
N  0.199691757559776f, -0.399768620729446f, 0.199385225772858f,
N    -0.399538189172745f,
N  0.199078872799873f, -0.399307489395142f, 0.198772698640823f,
N    -0.399076581001282f,
N  0.198466703295708f, -0.398845434188843f, 0.198160871863365f,
N    -0.398614019155502f,
N  0.197855234146118f, -0.398382395505905f, 0.197549775242805f,
N    -0.398150533437729f,
N  0.197244480252266f, -0.397918462753296f, 0.196939364075661f,
N    -0.397686123847961f,
N  0.196634441614151f, -0.397453576326370f, 0.196329683065414f,
N    -0.397220760583878f,
N  0.196025103330612f, -0.396987736225128f, 0.195720717310905f,
N    -0.396754473447800f,
N  0.195416495203972f, -0.396520972251892f, 0.195112451910973f,
N    -0.396287262439728f,
N  0.194808602333069f, -0.396053284406662f, 0.194504916667938f,
N    -0.395819097757339f,
N  0.194201424717903f, -0.395584672689438f, 0.193898096680641f,
N    -0.395350009202957f,
N  0.193594962358475f, -0.395115107297897f, 0.193292006850243f,
N    -0.394879996776581f,
N  0.192989215254784f, -0.394644618034363f, 0.192686617374420f,
N    -0.394409030675888f,
N  0.192384198307991f, -0.394173204898834f, 0.192081972956657f,
N    -0.393937170505524f,
N  0.191779911518097f, -0.393700867891312f, 0.191478043794632f,
N    -0.393464356660843f,
N  0.191176339983940f, -0.393227607011795f, 0.190874829888344f,
N    -0.392990618944168f,
N  0.190573498606682f, -0.392753422260284f, 0.190272361040115f,
N    -0.392515957355499f,
N  0.189971387386322f, -0.392278283834457f, 0.189670607447624f,
N    -0.392040401697159f,
N  0.189370006322861f, -0.391802251338959f, 0.189069598913193f,
N    -0.391563892364502f,
N  0.188769355416298f, -0.391325294971466f, 0.188469305634499f,
N    -0.391086459159851f,
N  0.188169434666634f, -0.390847414731979f, 0.187869757413864f,
N    -0.390608131885529f,
N  0.187570258975029f, -0.390368610620499f, 0.187270939350128f,
N    -0.390128880739212f,
N  0.186971798539162f, -0.389888882637024f, 0.186672851443291f,
N    -0.389648675918579f,
N  0.186374098062515f, -0.389408260583878f, 0.186075508594513f,
N    -0.389167606830597f,
N  0.185777112841606f, -0.388926714658737f, 0.185478910803795f,
N    -0.388685584068298f,
N  0.185180887579918f, -0.388444244861603f, 0.184883043169975f,
N    -0.388202667236328f,
N  0.184585392475128f, -0.387960851192474f, 0.184287920594215f,
N    -0.387718826532364f,
N  0.183990627527237f, -0.387476563453674f, 0.183693528175354f,
N    -0.387234061956406f,
N  0.183396622538567f, -0.386991351842880f, 0.183099895715714f,
N    -0.386748403310776f,
N  0.182803362607956f, -0.386505216360092f, 0.182507008314133f,
N    -0.386261820793152f,
N  0.182210832834244f, -0.386018186807632f, 0.181914865970612f,
N    -0.385774344205856f,
N  0.181619063019753f, -0.385530263185501f, 0.181323468685150f,
N    -0.385285943746567f,
N  0.181028053164482f, -0.385041415691376f, 0.180732816457748f,
N    -0.384796649217606f,
N  0.180437773466110f, -0.384551674127579f, 0.180142924189568f,
N    -0.384306460618973f,
N  0.179848253726959f, -0.384061008691788f, 0.179553776979446f,
N    -0.383815348148346f,
N  0.179259493947029f, -0.383569449186325f, 0.178965389728546f,
N    -0.383323341608047f,
N  0.178671479225159f, -0.383076995611191f, 0.178377762436867f,
N    -0.382830440998077f,
N  0.178084224462509f, -0.382583618164063f, 0.177790880203247f,
N    -0.382336616516113f,
N  0.177497729659081f, -0.382089376449585f, 0.177204772830009f,
N    -0.381841897964478f,
N  0.176911994814873f, -0.381594210863113f, 0.176619410514832f,
N    -0.381346285343170f,
N  0.176327019929886f, -0.381098151206970f, 0.176034808158875f,
N    -0.380849778652191f,
N  0.175742805004120f, -0.380601197481155f, 0.175450980663300f,
N    -0.380352377891541f,
N  0.175159350037575f, -0.380103349685669f, 0.174867913126946f,
N    -0.379854083061218f,
N  0.174576655030251f, -0.379604607820511f, 0.174285605549812f,
N    -0.379354894161224f,
N  0.173994734883308f, -0.379104942083359f, 0.173704057931900f,
N    -0.378854811191559f,
N  0.173413574695587f, -0.378604412078857f, 0.173123285174370f,
N    -0.378353834152222f,
N  0.172833189368248f, -0.378102988004684f, 0.172543287277222f,
N    -0.377851963043213f,
N  0.172253578901291f, -0.377600699663162f, 0.171964049339294f,
N    -0.377349197864532f,
N  0.171674728393555f, -0.377097487449646f, 0.171385586261749f,
N    -0.376845568418503f,
N  0.171096652746201f, -0.376593410968781f, 0.170807912945747f,
N    -0.376341015100479f,
N  0.170519351959229f, -0.376088410615921f, 0.170230999588966f,
N    -0.375835597515106f,
N  0.169942826032639f, -0.375582575798035f, 0.169654861092567f,
N    -0.375329315662384f,
N  0.169367074966431f, -0.375075817108154f, 0.169079497456551f,
N    -0.374822109937668f,
N  0.168792113661766f, -0.374568194150925f, 0.168504923582077f,
N    -0.374314039945602f,
N  0.168217927217484f, -0.374059677124023f, 0.167931124567986f,
N    -0.373805105686188f,
N  0.167644515633583f, -0.373550295829773f, 0.167358100414276f,
N    -0.373295277357101f,
N  0.167071878910065f, -0.373040050268173f, 0.166785866022110f,
N    -0.372784584760666f,
N  0.166500031948090f, -0.372528880834579f, 0.166214406490326f,
N    -0.372272998094559f,
N  0.165928974747658f, -0.372016876935959f, 0.165643751621246f,
N    -0.371760547161102f,
N  0.165358707308769f, -0.371503978967667f, 0.165073871612549f,
N    -0.371247202157974f,
N  0.164789214730263f, -0.370990216732025f, 0.164504766464233f,
N    -0.370732992887497f,
N  0.164220526814461f, -0.370475560426712f, 0.163936465978622f,
N    -0.370217919349670f,
N  0.163652613759041f, -0.369960039854050f, 0.163368955254555f,
N    -0.369701951742172f,
N  0.163085505366325f, -0.369443655014038f, 0.162802234292030f,
N    -0.369185149669647f,
N  0.162519171833992f, -0.368926405906677f, 0.162236317992210f,
N    -0.368667453527451f,
N  0.161953642964363f, -0.368408292531967f, 0.161671176552773f,
N    -0.368148893117905f,
N  0.161388918757439f, -0.367889285087585f, 0.161106839776039f,
N    -0.367629468441010f,
N  0.160824984312058f, -0.367369443178177f, 0.160543307662010f,
N    -0.367109179496765f,
N  0.160261839628220f, -0.366848707199097f, 0.159980565309525f,
N    -0.366588026285172f,
N  0.159699499607086f, -0.366327136754990f, 0.159418627619743f,
N    -0.366066008806229f,
N  0.159137964248657f, -0.365804702043533f, 0.158857494592667f,
N    -0.365543156862259f,
N  0.158577233552933f, -0.365281373262405f, 0.158297166228294f,
N    -0.365019410848618f,
N  0.158017292618752f, -0.364757210016251f, 0.157737627625465f,
N    -0.364494800567627f,
N  0.157458171248436f, -0.364232182502747f, 0.157178908586502f,
N    -0.363969355821610f,
N  0.156899839639664f, -0.363706320524216f, 0.156620979309082f,
N    -0.363443046808243f,
N  0.156342327594757f, -0.363179564476013f, 0.156063869595528f,
N    -0.362915903329849f,
N  0.155785620212555f, -0.362651973962784f, 0.155507579445839f,
N    -0.362387865781784f,
N  0.155229732394218f, -0.362123548984528f, 0.154952079057693f,
N    -0.361858993768692f,
N  0.154674649238586f, -0.361594229936600f, 0.154397398233414f,
N    -0.361329287290573f,
N  0.154120370745659f, -0.361064106225967f, 0.153843536973000f,
N    -0.360798716545105f,
N  0.153566911816597f, -0.360533088445663f, 0.153290495276451f,
N    -0.360267281532288f,
N  0.153014272451401f, -0.360001266002655f, 0.152738258242607f,
N    -0.359735012054443f,
N  0.152462437748909f, -0.359468549489975f, 0.152186840772629f,
N    -0.359201908111572f,
N  0.151911437511444f, -0.358935028314590f, 0.151636242866516f,
N    -0.358667939901352f,
N  0.151361241936684f, -0.358400642871857f, 0.151086464524269f,
N    -0.358133137226105f,
N  0.150811880826950f, -0.357865422964096f, 0.150537505745888f,
N    -0.357597470283508f,
N  0.150263324379921f, -0.357329338788986f, 0.149989366531372f,
N    -0.357060998678207f,
N  0.149715602397919f, -0.356792420148849f, 0.149442046880722f,
N    -0.356523662805557f,
N  0.149168699979782f, -0.356254696846008f, 0.148895561695099f,
N    -0.355985492467880f,
N  0.148622632026672f, -0.355716109275818f, 0.148349896073341f,
N    -0.355446487665176f,
N  0.148077383637428f, -0.355176687240601f, 0.147805064916611f,
N    -0.354906648397446f,
N  0.147532954812050f, -0.354636400938034f, 0.147261068224907f,
N    -0.354365974664688f,
N  0.146989375352860f, -0.354095309972763f, 0.146717891097069f,
N    -0.353824466466904f,
N  0.146446615457535f, -0.353553384542465f, 0.146175548434258f,
N    -0.353282123804092f,
N  0.145904675126076f, -0.353010624647141f, 0.145634025335312f,
N    -0.352738946676254f,
N  0.145363584160805f, -0.352467030286789f, 0.145093351602554f,
N    -0.352194935083389f,
N  0.144823327660561f, -0.351922631263733f, 0.144553512334824f,
N    -0.351650089025497f,
N  0.144283905625343f, -0.351377367973328f, 0.144014507532120f,
N    -0.351104438304901f,
N  0.143745318055153f, -0.350831300020218f, 0.143476337194443f,
N    -0.350557953119278f,
N  0.143207564949989f, -0.350284397602081f, 0.142939001321793f,
N    -0.350010633468628f,
N  0.142670661211014f, -0.349736660718918f, 0.142402514815331f,
N    -0.349462509155273f,
N  0.142134591937065f, -0.349188119173050f, 0.141866862773895f,
N    -0.348913550376892f,
N  0.141599357128143f, -0.348638743162155f, 0.141332060098648f,
N    -0.348363757133484f,
N  0.141064971685410f, -0.348088562488556f, 0.140798106789589f,
N    -0.347813159227371f,
N  0.140531435608864f, -0.347537547349930f, 0.140264987945557f,
N    -0.347261756658554f,
N  0.139998748898506f, -0.346985727548599f, 0.139732718467712f,
N    -0.346709519624710f,
N  0.139466896653175f, -0.346433073282242f, 0.139201298356056f,
N    -0.346156448125839f,
N  0.138935908675194f, -0.345879614353180f, 0.138670727610588f,
N    -0.345602601766586f,
N  0.138405755162239f, -0.345325350761414f, 0.138141006231308f,
N    -0.345047920942307f,
N  0.137876465916634f, -0.344770282506943f, 0.137612134218216f,
N    -0.344492435455322f,
N  0.137348011136055f, -0.344214379787445f, 0.137084111571312f,
N    -0.343936115503311f,
N  0.136820420622826f, -0.343657672405243f, 0.136556953191757f,
N    -0.343379020690918f,
N  0.136293679475784f, -0.343100160360336f, 0.136030644178391f,
N    -0.342821091413498f,
N  0.135767802596092f, -0.342541843652725f, 0.135505184531212f,
N    -0.342262357473373f,
N  0.135242775082588f, -0.341982692480087f, 0.134980589151382f,
N    -0.341702848672867f,
N  0.134718611836433f, -0.341422766447067f, 0.134456858038902f,
N    -0.341142505407333f,
N  0.134195312857628f, -0.340862035751343f, 0.133933976292610f,
N    -0.340581357479095f,
N  0.133672863245010f, -0.340300500392914f, 0.133411958813667f,
N    -0.340019434690475f,
N  0.133151277899742f, -0.339738160371780f, 0.132890805602074f,
N    -0.339456677436829f,
N  0.132630556821823f, -0.339175015687943f, 0.132370531558990f,
N    -0.338893145322800f,
N  0.132110700011253f, -0.338611096143723f, 0.131851106882095f,
N    -0.338328808546066f,
N  0.131591722369194f, -0.338046342134476f, 0.131332546472549f,
N    -0.337763696908951f,
N  0.131073594093323f, -0.337480813264847f, 0.130814850330353f,
N    -0.337197750806808f,
N  0.130556344985962f, -0.336914509534836f, 0.130298033356667f,
N    -0.336631029844284f,
N  0.130039945244789f, -0.336347371339798f, 0.129782080650330f,
N    -0.336063534021378f,
N  0.129524439573288f, -0.335779488086700f, 0.129267007112503f,
N    -0.335495233535767f,
N  0.129009798169136f, -0.335210770368576f, 0.128752797842026f,
N    -0.334926128387451f,
N  0.128496021032333f, -0.334641307592392f, 0.128239467740059f,
N    -0.334356248378754f,
N  0.127983123064041f, -0.334071010351181f, 0.127727001905441f,
N    -0.333785593509674f,
N  0.127471104264259f, -0.333499968051910f, 0.127215430140495f,
N    -0.333214133977890f,
N  0.126959964632988f, -0.332928121089935f, 0.126704722642899f,
N    -0.332641899585724f,
N  0.126449704170227f, -0.332355499267578f, 0.126194894313812f,
N    -0.332068890333176f,
N  0.125940307974815f, -0.331782072782516f, 0.125685945153236f,
N    -0.331495076417923f,
N  0.125431805849075f, -0.331207901239395f, 0.125177875161171f,
N    -0.330920487642288f,
N  0.124924175441265f, -0.330632925033569f, 0.124670691788197f,
N    -0.330345153808594f,
N  0.124417431652546f, -0.330057173967361f, 0.124164395034313f,
N    -0.329769015312195f,
N  0.123911574482918f, -0.329480648040771f, 0.123658977448940f,
N    -0.329192101955414f,
N  0.123406603932381f, -0.328903347253799f, 0.123154446482658f,
N    -0.328614413738251f,
N  0.122902512550354f, -0.328325271606445f, 0.122650802135468f,
N    -0.328035950660706f,
N  0.122399315237999f, -0.327746421098709f, 0.122148044407368f,
N    -0.327456712722778f,
N  0.121896997094154f, -0.327166795730591f, 0.121646173298359f,
N    -0.326876699924469f,
N  0.121395580470562f, -0.326586425304413f, 0.121145196259022f,
N    -0.326295942068100f,
N  0.120895043015480f, -0.326005280017853f, 0.120645113289356f,
N    -0.325714409351349f,
N  0.120395407080650f, -0.325423330068588f, 0.120145916938782f,
N    -0.325132101774216f,
N  0.119896657764912f, -0.324840664863586f, 0.119647622108459f,
N    -0.324549019336700f,
N  0.119398809969425f, -0.324257194995880f, 0.119150213897228f,
N    -0.323965191841125f,
N  0.118901848793030f, -0.323672980070114f, 0.118653707206249f,
N    -0.323380589485168f,
N  0.118405789136887f, -0.323088020086288f, 0.118158094584942f,
N    -0.322795242071152f,
N  0.117910631000996f, -0.322502255439758f, 0.117663383483887f,
N    -0.322209119796753f,
N  0.117416366934776f, -0.321915775537491f, 0.117169573903084f,
N    -0.321622252464294f,
N  0.116923004388809f, -0.321328520774841f, 0.116676658391953f,
N    -0.321034610271454f,
N  0.116430543363094f, -0.320740520954132f, 0.116184651851654f,
N    -0.320446223020554f,
N  0.115938983857632f, -0.320151746273041f, 0.115693546831608f,
N    -0.319857090711594f,
N  0.115448333323002f, -0.319562226533890f, 0.115203343331814f,
N    -0.319267183542252f,
N  0.114958584308624f, -0.318971961736679f, 0.114714048802853f,
N    -0.318676531314850f,
N  0.114469736814499f, -0.318380922079086f, 0.114225655794144f,
N    -0.318085134029388f,
N  0.113981798291206f, -0.317789167165756f, 0.113738171756268f,
N    -0.317492991685867f,
N  0.113494776189327f, -0.317196637392044f, 0.113251596689224f,
N    -0.316900104284287f,
N  0.113008655607700f, -0.316603392362595f, 0.112765938043594f,
N    -0.316306471824646f,
N  0.112523443996906f, -0.316009372472763f, 0.112281180918217f,
N    -0.315712094306946f,
N  0.112039148807526f, -0.315414607524872f, 0.111797347664833f,
N    -0.315116971731186f,
N  0.111555770039558f, -0.314819127321243f, 0.111314415931702f,
N    -0.314521104097366f,
N  0.111073300242424f, -0.314222872257233f, 0.110832408070564f,
N    -0.313924491405487f,
N  0.110591746866703f, -0.313625901937485f, 0.110351309180260f,
N    -0.313327133655548f,
N  0.110111102461815f, -0.313028186559677f, 0.109871134161949f,
N    -0.312729060649872f,
N  0.109631389379501f, -0.312429755926132f, 0.109391868114471f,
N    -0.312130242586136f,
N  0.109152585268021f, -0.311830550432205f, 0.108913525938988f,
N    -0.311530679464340f,
N  0.108674705028534f, -0.311230629682541f, 0.108436107635498f,
N    -0.310930401086807f,
N  0.108197741210461f, -0.310629993677139f, 0.107959605753422f,
N    -0.310329377651215f,
N  0.107721701264381f, -0.310028612613678f, 0.107484027743340f,
N    -0.309727638959885f,
N  0.107246585190296f, -0.309426486492157f, 0.107009373605251f,
N    -0.309125155210495f,
N  0.106772392988205f, -0.308823645114899f, 0.106535643339157f,
N    -0.308521956205368f,
N  0.106299124658108f, -0.308220088481903f, 0.106062836945057f,
N    -0.307918041944504f,
N  0.105826787650585f, -0.307615786790848f, 0.105590961873531f,
N    -0.307313382625580f,
N  0.105355374515057f, -0.307010769844055f, 0.105120018124580f,
N    -0.306708008050919f,
N  0.104884892702103f, -0.306405037641525f, 0.104649998247623f,
N    -0.306101888418198f,
N  0.104415334761143f, -0.305798590183258f, 0.104180909693241f,
N    -0.305495083332062f,
N  0.103946708142757f, -0.305191397666931f, 0.103712752461433f,
N    -0.304887533187866f,
N  0.103479020297527f, -0.304583519697189f, 0.103245526552200f,
N    -0.304279297590256f,
N  0.103012263774872f, -0.303974896669388f, 0.102779231965542f,
N    -0.303670316934586f,
N  0.102546438574791f, -0.303365558385849f, 0.102313876152039f,
N    -0.303060621023178f,
N  0.102081544697285f, -0.302755534648895f, 0.101849451661110f,
N    -0.302450239658356f,
N  0.101617597043514f, -0.302144765853882f, 0.101385973393917f,
N    -0.301839113235474f,
N  0.101154580712318f, -0.301533311605453f, 0.100923426449299f,
N    -0.301227301359177f,
N  0.100692503154278f, -0.300921112298965f, 0.100461818277836f,
N    -0.300614774227142f,
N  0.100231364369392f, -0.300308227539063f, 0.100001148879528f,
N    -0.300001531839371f,
N  0.099771171808243f, -0.299694657325745f, 0.099541425704956f,
N    -0.299387603998184f,
N  0.099311910569668f, -0.299080342054367f, 0.099082641303539f,
N    -0.298772931098938f,
N  0.098853603005409f, -0.298465341329575f, 0.098624803125858f,
N    -0.298157602548599f,
N  0.098396234214306f, -0.297849655151367f, 0.098167903721333f,
N    -0.297541528940201f,
N  0.097939811646938f, -0.297233253717422f, 0.097711957991123f,
N    -0.296924799680710f,
N  0.097484335303307f, -0.296616137027740f, 0.097256951034069f,
N    -0.296307325363159f,
N  0.097029805183411f, -0.295998334884644f, 0.096802897751331f,
N    -0.295689195394516f,
N  0.096576221287251f, -0.295379847288132f, 0.096349790692329f,
N    -0.295070350170136f,
N  0.096123591065407f, -0.294760644435883f, 0.095897629857063f,
N    -0.294450789690018f,
N  0.095671907067299f, -0.294140785932541f, 0.095446422696114f,
N    -0.293830573558807f,
N  0.095221176743507f, -0.293520182371140f, 0.094996169209480f,
N    -0.293209642171860f,
N  0.094771400094032f, -0.292898923158646f, 0.094546869397163f,
N    -0.292588025331497f,
N  0.094322577118874f, -0.292276978492737f, 0.094098523259163f,
N    -0.291965723037720f,
N  0.093874707818031f, -0.291654318571091f, 0.093651130795479f,
N    -0.291342735290527f,
N  0.093427792191505f, -0.291031002998352f, 0.093204692006111f,
N    -0.290719062089920f,
N  0.092981837689877f, -0.290406972169876f, 0.092759214341640f,
N    -0.290094703435898f,
N  0.092536836862564f, -0.289782285690308f, 0.092314697802067f,
N    -0.289469659328461f,
N  0.092092797160149f, -0.289156883955002f, 0.091871134936810f,
N    -0.288843959569931f,
N  0.091649711132050f, -0.288530826568604f, 0.091428533196449f,
N    -0.288217544555664f,
N  0.091207593679428f, -0.287904083728790f, 0.090986892580986f,
N    -0.287590473890305f,
N  0.090766437351704f, -0.287276685237885f, 0.090546220541000f,
N    -0.286962717771530f,
N  0.090326242148876f, -0.286648571491241f, 0.090106502175331f,
N    -0.286334276199341f,
N  0.089887008070946f, -0.286019802093506f, 0.089667752385139f,
N    -0.285705178976059f,
N  0.089448742568493f, -0.285390377044678f, 0.089229971170425f,
N    -0.285075396299362f,
N  0.089011445641518f, -0.284760266542435f, 0.088793158531189f,
N    -0.284444957971573f,
N  0.088575109839439f, -0.284129470586777f, 0.088357307016850f,
N    -0.283813834190369f,
N  0.088139742612839f, -0.283498018980026f, 0.087922424077988f,
N    -0.283182054758072f,
N  0.087705351412296f, -0.282865911722183f, 0.087488517165184f,
N    -0.282549589872360f,
N  0.087271921336651f, -0.282233119010925f, 0.087055571377277f,
N    -0.281916469335556f,
N  0.086839467287064f, -0.281599670648575f, 0.086623609066010f,
N    -0.281282693147659f,
N  0.086407989263535f, -0.280965566635132f, 0.086192607879639f,
N    -0.280648261308670f,
N  0.085977479815483f, -0.280330777168274f, 0.085762590169907f,
N    -0.280013144016266f,
N  0.085547938942909f, -0.279695361852646f, 0.085333541035652f,
N    -0.279377400875092f,
N  0.085119381546974f, -0.279059261083603f, 0.084905467927456f,
N    -0.278740972280502f,
N  0.084691800177097f, -0.278422504663467f, 0.084478378295898f,
N    -0.278103888034821f,
N  0.084265194833279f, -0.277785122394562f, 0.084052257239819f,
N    -0.277466177940369f,
N  0.083839565515518f, -0.277147054672241f, 0.083627119660378f,
N    -0.276827782392502f,
N  0.083414919674397f, -0.276508361101151f, 0.083202958106995f,
N    -0.276188760995865f,
N  0.082991249859333f, -0.275868982076645f, 0.082779780030251f,
N    -0.275549083948135f,
N  0.082568563520908f, -0.275228977203369f, 0.082357585430145f,
N    -0.274908751249313f,
N  0.082146860659122f, -0.274588316679001f, 0.081936374306679f,
N    -0.274267762899399f,
N  0.081726133823395f, -0.273947030305862f, 0.081516146659851f,
N    -0.273626148700714f,
N  0.081306397914886f, -0.273305088281631f, 0.081096902489662f,
N    -0.272983878850937f,
N  0.080887645483017f, -0.272662490606308f, 0.080678641796112f,
N    -0.272340953350067f,
N  0.080469883978367f, -0.272019267082214f, 0.080261372029781f,
N    -0.271697402000427f,
N  0.080053105950356f, -0.271375387907028f, 0.079845085740089f,
N    -0.271053224802017f,
N  0.079637311398983f, -0.270730882883072f, 0.079429790377617f,
N    -0.270408391952515f,
N  0.079222507774830f, -0.270085722208023f, 0.079015478491783f,
N    -0.269762933254242f,
N  0.078808702528477f, -0.269439965486526f, 0.078602164983749f,
N    -0.269116818904877f,
N  0.078395880758762f, -0.268793523311615f, 0.078189842402935f,
N    -0.268470078706741f,
N  0.077984049916267f, -0.268146485090256f, 0.077778510749340f,
N    -0.267822742462158f,
N  0.077573217451572f, -0.267498821020126f, 0.077368170022964f,
N    -0.267174720764160f,
N  0.077163375914097f, -0.266850501298904f, 0.076958827674389f,
N    -0.266526103019714f,
N  0.076754532754421f, -0.266201555728912f, 0.076550483703613f,
N    -0.265876859426498f,
N  0.076346680521965f, -0.265552014112473f, 0.076143130660057f,
N    -0.265226989984512f,
N  0.075939826667309f, -0.264901816844940f, 0.075736775994301f,
N    -0.264576494693756f,
N  0.075533971190453f, -0.264250993728638f, 0.075331419706345f,
N    -0.263925373554230f,
N  0.075129114091396f, -0.263599574565887f, 0.074927061796188f,
N    -0.263273626565933f,
N  0.074725262820721f, -0.262947499752045f, 0.074523709714413f,
N    -0.262621253728867f,
N  0.074322402477264f, -0.262294828891754f, 0.074121348559856f,
N    -0.261968284845352f,
N  0.073920547962189f, -0.261641561985016f, 0.073720000684261f,
N    -0.261314690113068f,
N  0.073519699275494f, -0.260987639427185f, 0.073319651186466f,
N    -0.260660469532013f,
N  0.073119848966599f, -0.260333120822906f, 0.072920300066471f,
N    -0.260005623102188f,
N  0.072721004486084f, -0.259678006172180f, 0.072521962225437f,
N    -0.259350210428238f,
N  0.072323165833950f, -0.259022265672684f, 0.072124622762203f,
N    -0.258694142103195f,
N  0.071926333010197f, -0.258365899324417f, 0.071728296577930f,
N    -0.258037507534027f,
N  0.071530513465405f, -0.257708936929703f, 0.071332976222038f,
N    -0.257380217313766f,
N  0.071135692298412f, -0.257051378488541f, 0.070938661694527f,
N    -0.256722360849380f,
N  0.070741884410381f, -0.256393194198608f, 0.070545360445976f,
N    -0.256063878536224f,
N  0.070349089801311f, -0.255734413862228f, 0.070153072476387f,
N    -0.255404800176620f,
N  0.069957308471203f, -0.255075037479401f, 0.069761790335178f,
N    -0.254745125770569f,
N  0.069566532969475f, -0.254415065050125f, 0.069371521472931f,
N    -0.254084855318069f,
N  0.069176770746708f, -0.253754496574402f, 0.068982265889645f,
N    -0.253423988819122f,
N  0.068788021802902f, -0.253093332052231f, 0.068594031035900f,
N    -0.252762526273727f,
N  0.068400286138058f, -0.252431541681290f, 0.068206802010536f,
N    -0.252100437879562f,
N  0.068013571202755f, -0.251769185066223f, 0.067820593714714f,
N    -0.251437783241272f,
N  0.067627869546413f, -0.251106232404709f, 0.067435398697853f,
N    -0.250774532556534f,
N  0.067243188619614f, -0.250442683696747f, 0.067051224410534f,
N    -0.250110685825348f,
N  0.066859520971775f, -0.249778553843498f, 0.066668070852757f,
N    -0.249446272850037f,
N  0.066476874053478f, -0.249113827943802f, 0.066285938024521f,
N    -0.248781248927116f,
N  0.066095255315304f, -0.248448520898819f, 0.065904818475246f,
N    -0.248115643858910f,
N  0.065714649856091f, -0.247782632708550f, 0.065524727106094f,
N    -0.247449472546577f,
N  0.065335065126419f, -0.247116148471832f, 0.065145656466484f,
N    -0.246782705187798f,
N  0.064956501126289f, -0.246449097990990f, 0.064767606556416f,
N    -0.246115356683731f,
N  0.064578965306282f, -0.245781451463699f, 0.064390584826469f,
N    -0.245447427034378f,
N  0.064202457666397f, -0.245113238692284f, 0.064014583826065f,
N    -0.244778916239738f,
N  0.063826970756054f, -0.244444444775581f, 0.063639611005783f,
N    -0.244109839200974f,
N  0.063452512025833f, -0.243775084614754f, 0.063265666365623f,
N    -0.243440181016922f,
N  0.063079081475735f, -0.243105143308640f, 0.062892749905586f,
N    -0.242769956588745f,
N  0.062706671655178f, -0.242434620857239f, 0.062520854175091f,
N    -0.242099151015282f,
N  0.062335297465324f, -0.241763532161713f, 0.062149997800589f,
N    -0.241427779197693f,
N  0.061964951455593f, -0.241091892123222f, 0.061780165880919f,
N    -0.240755841135979f,
N  0.061595637351274f, -0.240419670939446f, 0.061411365866661f,
N    -0.240083336830139f,
N  0.061227355152369f, -0.239746883511543f, 0.061043601483107f,
N    -0.239410281181335f,
N  0.060860104858875f, -0.239073529839516f, 0.060676865279675f,
N    -0.238736644387245f,
N  0.060493886470795f, -0.238399609923363f, 0.060311164706945f,
N    -0.238062441349030f,
N  0.060128703713417f, -0.237725138664246f, 0.059946499764919f,
N    -0.237387686967850f,
N  0.059764556586742f, -0.237050101161003f, 0.059582870453596f,
N    -0.236712381243706f,
N  0.059401445090771f, -0.236374512314796f, 0.059220276772976f,
N    -0.236036509275436f,
N  0.059039369225502f, -0.235698372125626f, 0.058858718723059f,
N    -0.235360085964203f,
N  0.058678328990936f, -0.235021665692329f, 0.058498200029135f,
N    -0.234683111310005f,
N  0.058318331837654f, -0.234344407916069f, 0.058138720691204f,
N    -0.234005570411682f,
N  0.057959370315075f, -0.233666598796844f, 0.057780280709267f,
N    -0.233327493071556f,
N  0.057601451873779f, -0.232988253235817f, 0.057422880083323f,
N    -0.232648864388466f,
N  0.057244572788477f, -0.232309341430664f, 0.057066522538662f,
N    -0.231969684362412f,
N  0.056888736784458f, -0.231629893183708f, 0.056711208075285f,
N    -0.231289967894554f,
N  0.056533940136433f, -0.230949893593788f, 0.056356932967901f,
N    -0.230609700083733f,
N  0.056180190294981f, -0.230269357562065f, 0.056003704667091f,
N    -0.229928880929947f,
N  0.055827483534813f, -0.229588270187378f, 0.055651523172855f,
N    -0.229247525334358f,
N  0.055475823581219f, -0.228906646370888f, 0.055300384759903f,
N    -0.228565633296967f,
N  0.055125206708908f, -0.228224486112595f, 0.054950293153524f,
N    -0.227883204817772f,
N  0.054775636643171f, -0.227541789412498f, 0.054601248353720f,
N    -0.227200239896774f,
N  0.054427117109299f, -0.226858556270599f, 0.054253250360489f,
N    -0.226516738533974f,
N  0.054079644382000f, -0.226174786686897f, 0.053906302899122f,
N    -0.225832715630531f,
N  0.053733222186565f, -0.225490495562553f, 0.053560405969620f,
N    -0.225148141384125f,
N  0.053387850522995f, -0.224805667996407f, 0.053215555846691f,
N    -0.224463045597076f,
N  0.053043525665998f, -0.224120303988457f, 0.052871759980917f,
N    -0.223777428269386f,
N  0.052700258791447f, -0.223434418439865f, 0.052529018372297f,
N    -0.223091274499893f,
N  0.052358038723469f, -0.222748011350632f, 0.052187327295542f,
N    -0.222404599189758f,
N  0.052016876637936f, -0.222061067819595f, 0.051846686750650f,
N    -0.221717402338982f,
N  0.051676765084267f, -0.221373617649078f, 0.051507104188204f,
N    -0.221029683947563f,
N  0.051337707787752f, -0.220685631036758f, 0.051168579608202f,
N    -0.220341444015503f,
N  0.050999708473682f, -0.219997137784958f, 0.050831105560064f,
N    -0.219652697443962f,
N  0.050662767142057f, -0.219308122992516f, 0.050494693219662f,
N    -0.218963414430618f,
N  0.050326880067587f, -0.218618586659431f, 0.050159335136414f,
N    -0.218273624777794f,
N  0.049992054700851f, -0.217928543686867f, 0.049825038760900f,
N    -0.217583328485489f,
N  0.049658283591270f, -0.217237979173660f, 0.049491796642542f,
N    -0.216892510652542f,
N  0.049325577914715f, -0.216546908020973f, 0.049159619957209f,
N    -0.216201186180115f,
N  0.048993926495314f, -0.215855330228806f, 0.048828501254320f,
N    -0.215509355068207f,
N  0.048663340508938f, -0.215163245797157f, 0.048498444259167f,
N    -0.214817002415657f,
N  0.048333816230297f, -0.214470639824867f, 0.048169452697039f,
N    -0.214124158024788f,
N  0.048005353659391f, -0.213777542114258f, 0.047841522842646f,
N    -0.213430806994438f,
N  0.047677956521511f, -0.213083937764168f, 0.047514654695988f,
N    -0.212736949324608f,
N  0.047351621091366f, -0.212389841675758f, 0.047188851982355f,
N    -0.212042599916458f,
N  0.047026351094246f, -0.211695238947868f, 0.046864114701748f,
N    -0.211347743868828f,
N  0.046702146530151f, -0.211000129580498f, 0.046540446579456f,
N    -0.210652396082878f,
N  0.046379011124372f, -0.210304543375969f, 0.046217843890190f,
N    -0.209956556558609f,
N  0.046056941151619f, -0.209608450531960f, 0.045896306633949f,
N    -0.209260210394859f,
N  0.045735940337181f, -0.208911851048470f, 0.045575842261314f,
N    -0.208563387393951f,
N  0.045416008681059f, -0.208214774727821f, 0.045256443321705f,
N    -0.207866057753563f,
N  0.045097146183252f, -0.207517206668854f, 0.044938117265701f,
N    -0.207168251276016f,
N  0.044779352843761f, -0.206819161772728f, 0.044620860368013f,
N    -0.206469938158989f,
N  0.044462632387877f, -0.206120610237122f, 0.044304672628641f,
N    -0.205771163105965f,
N  0.044146984815598f, -0.205421581864357f, 0.043989561498165f,
N    -0.205071896314621f,
N  0.043832406401634f, -0.204722076654434f, 0.043675523251295f,
N    -0.204372137784958f,
N  0.043518904596567f, -0.204022079706192f, 0.043362557888031f,
N    -0.203671902418137f,
N  0.043206475675106f, -0.203321605920792f, 0.043050665408373f,
N    -0.202971190214157f,
N  0.042895123362541f, -0.202620655298233f, 0.042739849537611f,
N    -0.202270001173019f,
N  0.042584843933582f, -0.201919227838516f, 0.042430106550455f,
N    -0.201568335294724f,
N  0.042275641113520f, -0.201217323541641f, 0.042121443897486f,
N    -0.200866192579269f,
N  0.041967518627644f, -0.200514942407608f, 0.041813857853413f,
N    -0.200163587927818f,
N  0.041660469025373f, -0.199812099337578f, 0.041507352143526f,
N    -0.199460506439209f,
N  0.041354499757290f, -0.199108779430389f, 0.041201923042536f,
N    -0.198756948113441f,
N  0.041049610823393f, -0.198404997587204f, 0.040897574275732f,
N    -0.198052927851677f,
N  0.040745802223682f, -0.197700738906860f, 0.040594302117825f,
N    -0.197348430752754f,
N  0.040443073958158f, -0.196996018290520f, 0.040292114019394f,
N    -0.196643486618996f,
N  0.040141426026821f, -0.196290835738182f, 0.039991009980440f,
N    -0.195938065648079f,
N  0.039840862154961f, -0.195585191249847f, 0.039690986275673f,
N    -0.195232197642326f,
N  0.039541378617287f, -0.194879084825516f, 0.039392042905092f,
N    -0.194525867700577f,
N  0.039242979139090f, -0.194172516465187f, 0.039094187319279f,
N    -0.193819075822830f,
N  0.038945667445660f, -0.193465501070023f, 0.038797415792942f,
N    -0.193111822009087f,
N  0.038649436086416f, -0.192758023738861f, 0.038501728326082f,
N    -0.192404121160507f,
N  0.038354292511940f, -0.192050099372864f, 0.038207128643990f,
N    -0.191695958375931f,
N  0.038060232996941f, -0.191341713070869f, 0.037913613021374f,
N    -0.190987363457680f,
N  0.037767261266708f, -0.190632879734039f, 0.037621185183525f,
N    -0.190278306603432f,
N  0.037475381046534f, -0.189923599362373f, 0.037329845130444f,
N    -0.189568802714348f,
N  0.037184584885836f, -0.189213871955872f, 0.037039596587420f,
N    -0.188858851790428f,
N  0.036894880235195f, -0.188503712415695f, 0.036750435829163f,
N    -0.188148453831673f,
N  0.036606263369322f, -0.187793090939522f, 0.036462362855673f,
N    -0.187437608838081f,
N  0.036318738013506f, -0.187082037329674f, 0.036175385117531f,
N    -0.186726331710815f,
N  0.036032304167747f, -0.186370536684990f, 0.035889495164156f,
N    -0.186014622449875f,
N  0.035746958106756f, -0.185658603906631f, 0.035604696720839f,
N    -0.185302466154099f,
N  0.035462711006403f, -0.184946224093437f, 0.035320993512869f,
N    -0.184589877724648f,
N  0.035179551690817f, -0.184233412146568f, 0.035038381814957f,
N    -0.183876842260361f,
N  0.034897487610579f, -0.183520168066025f, 0.034756865352392f,
N    -0.183163389563560f,
N  0.034616518765688f, -0.182806491851807f, 0.034476444125175f,
N    -0.182449504733086f,
N  0.034336645156145f, -0.182092398405075f, 0.034197118133307f,
N    -0.181735187768936f,
N  0.034057866781950f, -0.181377857923508f, 0.033918887376785f,
N    -0.181020438671112f,
N  0.033780183643103f, -0.180662900209427f, 0.033641755580902f,
N    -0.180305257439613f,
N  0.033503599464893f, -0.179947525262833f, 0.033365719020367f,
N    -0.179589673876762f,
N  0.033228114247322f, -0.179231703281403f, 0.033090781420469f,
N    -0.178873643279076f,
N  0.032953724265099f, -0.178515478968620f, 0.032816942781210f,
N    -0.178157210350037f,
N  0.032680433243513f, -0.177798837423325f, 0.032544203102589f,
N    -0.177440345287323f,
N  0.032408244907856f, -0.177081763744354f, 0.032272562384605f,
N    -0.176723077893257f,
N  0.032137155532837f, -0.176364272832870f, 0.032002024352551f,
N    -0.176005378365517f,
N  0.031867165118456f, -0.175646379590034f, 0.031732585281134f,
N    -0.175287276506424f,
N  0.031598277390003f, -0.174928069114685f, 0.031464248895645f,
N    -0.174568757414818f,
N  0.031330492347479f, -0.174209341406822f, 0.031197015196085f,
N    -0.173849821090698f,
N  0.031063811853528f, -0.173490211367607f, 0.030930884182453f,
N    -0.173130482435226f,
N  0.030798232182860f, -0.172770664095879f, 0.030665857717395f,
N    -0.172410741448402f,
N  0.030533758923411f, -0.172050714492798f, 0.030401935800910f,
N    -0.171690583229065f,
N  0.030270388349891f, -0.171330362558365f, 0.030139118432999f,
N    -0.170970037579536f,
N  0.030008124187589f, -0.170609608292580f, 0.029877405613661f,
N    -0.170249074697495f,
N  0.029746964573860f, -0.169888436794281f, 0.029616801068187f,
N    -0.169527709484100f,
N  0.029486913233995f, -0.169166877865791f, 0.029357301071286f,
N    -0.168805956840515f,
N  0.029227968305349f, -0.168444931507111f, 0.029098909348249f,
N    -0.168083801865578f,
N  0.028970129787922f, -0.167722567915916f, 0.028841627761722f,
N    -0.167361244559288f,
N  0.028713401407003f, -0.166999831795692f, 0.028585452586412f,
N    -0.166638299822807f,
N  0.028457781299949f, -0.166276678442955f, 0.028330387547612f,
N    -0.165914967656136f,
N  0.028203271329403f, -0.165553152561188f, 0.028076432645321f,
N    -0.165191248059273f,
N  0.027949871495366f, -0.164829224348068f, 0.027823587879539f,
N    -0.164467126131058f,
N  0.027697581797838f, -0.164104923605919f, 0.027571853250265f,
N    -0.163742616772652f,
N  0.027446404099464f, -0.163380220532417f, 0.027321230620146f,
N    -0.163017734885216f,
N  0.027196336537600f, -0.162655144929886f, 0.027071721851826f,
N    -0.162292465567589f,
N  0.026947384700179f, -0.161929681897163f, 0.026823325082660f,
N    -0.161566808819771f,
N  0.026699542999268f, -0.161203846335411f, 0.026576040312648f,
N    -0.160840779542923f,
N  0.026452817022800f, -0.160477623343468f, 0.026329871267080f,
N    -0.160114362835884f,
N  0.026207204908133f, -0.159751012921333f, 0.026084816083312f,
N    -0.159387573599815f,
N  0.025962706655264f, -0.159024044871330f, 0.025840876623988f,
N    -0.158660411834717f,
N  0.025719324126840f, -0.158296689391136f, 0.025598052889109f,
N    -0.157932877540588f,
N  0.025477059185505f, -0.157568961381912f, 0.025356344878674f,
N    -0.157204970717430f,
N  0.025235909968615f, -0.156840875744820f, 0.025115754455328f,
N    -0.156476691365242f,
N  0.024995878338814f, -0.156112402677536f, 0.024876279756427f,
N    -0.155748039484024f,
N  0.024756962433457f, -0.155383571982384f, 0.024637924507260f,
N    -0.155019029974937f,
N  0.024519165977836f, -0.154654383659363f, 0.024400688707829f,
N    -0.154289647936821f,
N  0.024282488971949f, -0.153924822807312f, 0.024164570495486f,
N    -0.153559908270836f,
N  0.024046931415796f, -0.153194904327393f, 0.023929571732879f,
N    -0.152829796075821f,
N  0.023812493309379f, -0.152464613318443f, 0.023695694282651f,
N    -0.152099341154099f,
N  0.023579176515341f, -0.151733979582787f, 0.023462938144803f,
N    -0.151368513703346f,
N  0.023346979171038f, -0.151002973318100f, 0.023231301456690f,
N    -0.150637343525887f,
N  0.023115905001760f, -0.150271624326706f, 0.023000787943602f,
N    -0.149905815720558f,
N  0.022885952144861f, -0.149539917707443f, 0.022771397605538f,
N    -0.149173930287361f,
N  0.022657122462988f, -0.148807853460312f, 0.022543128579855f,
N    -0.148441687226295f,
N  0.022429415956140f, -0.148075446486473f, 0.022315984591842f,
N    -0.147709101438522f,
N  0.022202832624316f, -0.147342681884766f, 0.022089963778853f,
N    -0.146976172924042f,
N  0.021977374330163f, -0.146609574556351f, 0.021865066140890f,
N    -0.146242901682854f,
N  0.021753041073680f, -0.145876124501228f, 0.021641295403242f,
N    -0.145509272813797f,
N  0.021529832854867f, -0.145142331719399f, 0.021418649703264f,
N    -0.144775316119194f,
N  0.021307749673724f, -0.144408211112022f, 0.021197130903602f,
N    -0.144041016697884f,
N  0.021086793392897f, -0.143673732876778f, 0.020976737141609f,
N    -0.143306359648705f,
N  0.020866964012384f, -0.142938911914825f, 0.020757472142577f,
N    -0.142571389675140f,
N  0.020648263394833f, -0.142203763127327f, 0.020539334043860f,
N    -0.141836062073708f,
N  0.020430689677596f, -0.141468286514282f, 0.020322324708104f,
N    -0.141100421547890f,
N  0.020214242860675f, -0.140732467174530f, 0.020106444135308f,
N    -0.140364438295364f,
N  0.019998926669359f, -0.139996320009232f, 0.019891692325473f,
N    -0.139628127217293f,
N  0.019784741103649f, -0.139259845018387f, 0.019678071141243f,
N    -0.138891488313675f,
N  0.019571684300900f, -0.138523042201996f, 0.019465578719974f,
N    -0.138154521584511f,
N  0.019359756261110f, -0.137785911560059f, 0.019254218786955f,
N    -0.137417227029800f,
N  0.019148962572217f, -0.137048453092575f, 0.019043987616897f,
N    -0.136679604649544f,
N  0.018939297646284f, -0.136310681700706f, 0.018834890797734f,
N    -0.135941669344902f,
N  0.018730765208602f, -0.135572582483292f, 0.018626924604177f,
N    -0.135203406214714f,
N  0.018523367121816f, -0.134834155440331f, 0.018420090898871f,
N    -0.134464830160141f,
N  0.018317099660635f, -0.134095430374146f, 0.018214391544461f,
N    -0.133725941181183f,
N  0.018111966550350f, -0.133356377482414f, 0.018009826540947f,
N    -0.132986739277840f,
N  0.017907967790961f, -0.132617011666298f, 0.017806394025683f,
N    -0.132247209548950f,
N  0.017705103382468f, -0.131877332925797f, 0.017604095861316f,
N    -0.131507381796837f,
N  0.017503373324871f, -0.131137356162071f, 0.017402933910489f,
N    -0.130767241120338f,
N  0.017302779480815f, -0.130397051572800f, 0.017202908173203f,
N    -0.130026802420616f,
N  0.017103319987655f, -0.129656463861465f, 0.017004016786814f,
N    -0.129286035895348f,
N  0.016904998570681f, -0.128915548324585f, 0.016806263476610f,
N    -0.128544986248016f,
N  0.016707813367248f, -0.128174334764481f, 0.016609646379948f,
N    -0.127803623676300f,
N  0.016511764377356f, -0.127432823181152f, 0.016414167359471f,
N    -0.127061963081360f,
N  0.016316853463650f, -0.126691013574600f, 0.016219824552536f,
N    -0.126320004463196f,
N  0.016123080626130f, -0.125948905944824f, 0.016026621684432f,
N    -0.125577747821808f,
N  0.015930447727442f, -0.125206500291824f, 0.015834558755159f,
N    -0.124835193157196f,
N  0.015738952904940f, -0.124463804066181f, 0.015643632039428f,
N    -0.124092340469360f,
N  0.015548598021269f, -0.123720809817314f, 0.015453847125173f,
N    -0.123349204659462f,
N  0.015359382145107f, -0.122977524995804f, 0.015265202149749f,
N    -0.122605770826340f,
N  0.015171307139099f, -0.122233949601650f, 0.015077698044479f,
N    -0.121862053871155f,
N  0.014984373003244f, -0.121490091085434f, 0.014891333878040f,
N    -0.121118053793907f,
N  0.014798580668867f, -0.120745941996574f, 0.014706112444401f,
N    -0.120373763144016f,
N  0.014613929204643f, -0.120001509785652f, 0.014522032812238f,
N    -0.119629189372063f,
N  0.014430420473218f, -0.119256794452667f, 0.014339094981551f,
N    -0.118884332478046f,
N  0.014248054474592f, -0.118511803448200f, 0.014157299883664f,
N    -0.118139199912548f,
N  0.014066831208766f, -0.117766529321671f, 0.013976648449898f,
N    -0.117393791675568f,
N  0.013886751607060f, -0.117020979523659f, 0.013797140680254f,
N    -0.116648100316525f,
N  0.013707815669477f, -0.116275154054165f, 0.013618776574731f,
N    -0.115902140736580f,
N  0.013530024327338f, -0.115529052913189f, 0.013441557064652f,
N    -0.115155905485153f,
N  0.013353376649320f, -0.114782683551311f, 0.013265483081341f,
N    -0.114409394562244f,
N  0.013177875429392f, -0.114036038517952f, 0.013090553693473f,
N    -0.113662622869015f,
N  0.013003518804908f, -0.113289132714272f, 0.012916770763695f,
N    -0.112915575504303f,
N  0.012830308638513f, -0.112541958689690f, 0.012744133360684f,
N    -0.112168267369270f,
N  0.012658244930208f, -0.111794516444206f, 0.012572642415762f,
N    -0.111420698463917f,
N  0.012487327679992f, -0.111046813428402f, 0.012402298860252f,
N    -0.110672861337662f,
N  0.012317557819188f, -0.110298842191696f, 0.012233102694154f,
N    -0.109924763441086f,
N  0.012148935347795f, -0.109550617635250f, 0.012065053917468f,
N    -0.109176412224770f,
N  0.011981460265815f, -0.108802139759064f, 0.011898153461516f,
N    -0.108427800238132f,
N  0.011815134435892f, -0.108053401112556f, 0.011732402257621f,
N    -0.107678934931755f,
N  0.011649956926703f, -0.107304409146309f, 0.011567799374461f,
N    -0.106929816305637f,
N  0.011485928669572f, -0.106555156409740f, 0.011404345743358f,
N    -0.106180444359779f,
N  0.011323049664497f, -0.105805665254593f, 0.011242041364312f,
N    -0.105430819094181f,
N  0.011161320842803f, -0.105055920779705f, 0.011080888099968f,
N    -0.104680955410004f,
N  0.011000742204487f, -0.104305922985077f, 0.010920885019004f,
N    -0.103930838406086f,
N  0.010841314680874f, -0.103555686771870f, 0.010762032121420f,
N    -0.103180475533009f,
N  0.010683037340641f, -0.102805204689503f, 0.010604331269860f,
N    -0.102429874241352f,
N  0.010525912046432f, -0.102054484188557f, 0.010447781533003f,
N    -0.101679034531116f,
N  0.010369938798249f, -0.101303517818451f, 0.010292383842170f,
N    -0.100927948951721f,
N  0.010215117596090f, -0.100552320480347f, 0.010138138197362f,
N    -0.100176624953747f,
N  0.010061448439956f, -0.099800877273083f, 0.009985045529902f,
N    -0.099425069987774f,
N  0.009908932261169f, -0.099049203097820f, 0.009833106771111f,
N    -0.098673284053802f,
N  0.009757569059730f, -0.098297297954559f, 0.009682320058346f,
N    -0.097921259701252f,
N  0.009607359766960f, -0.097545161843300f, 0.009532688185573f,
N    -0.097169004380703f,
N  0.009458304382861f, -0.096792794764042f, 0.009384209290147f,
N    -0.096416525542736f,
N  0.009310402907431f, -0.096040196716785f, 0.009236886166036f,
N    -0.095663815736771f,
N  0.009163657203317f, -0.095287375152111f, 0.009090716950595f,
N    -0.094910882413387f,
N  0.009018065407872f, -0.094534330070019f, 0.008945702575147f,
N    -0.094157725572586f,
N  0.008873629383743f, -0.093781061470509f, 0.008801844902337f,
N    -0.093404345214367f,
N  0.008730349130929f, -0.093027576804161f, 0.008659142069519f,
N    -0.092650748789310f,
N  0.008588224649429f, -0.092273868620396f, 0.008517595939338f,
N    -0.091896936297417f,
N  0.008447255939245f, -0.091519944369793f, 0.008377205580473f,
N    -0.091142900288105f,
N  0.008307444863021f, -0.090765804052353f, 0.008237972855568f,
N    -0.090388655662537f,
N  0.008168790489435f, -0.090011447668076f, 0.008099896833301f,
N    -0.089634194970131f,
N  0.008031292818487f, -0.089256882667542f, 0.007962978444993f,
N    -0.088879525661469f,
N  0.007894953712821f, -0.088502109050751f, 0.007827218621969f,
N    -0.088124647736549f,
N  0.007759772241116f, -0.087747126817703f, 0.007692615967244f,
N    -0.087369553744793f,
N  0.007625748869032f, -0.086991935968399f, 0.007559171877801f,
N    -0.086614266037941f,
N  0.007492884527892f, -0.086236543953419f, 0.007426886819303f,
N    -0.085858769714832f,
N  0.007361178752035f, -0.085480943322182f, 0.007295760791749f,
N    -0.085103072226048f,
N  0.007230632472783f, -0.084725148975849f, 0.007165793795139f,
N    -0.084347173571587f,
N  0.007101245224476f, -0.083969146013260f, 0.007036986760795f,
N    -0.083591073751450f,
N  0.006973018404096f, -0.083212949335575f, 0.006909339688718f,
N    -0.082834780216217f,
N  0.006845951545984f, -0.082456558942795f, 0.006782853044569f,
N    -0.082078292965889f,
N  0.006720044650137f, -0.081699974834919f, 0.006657526828349f,
N    -0.081321612000465f,
N  0.006595299113542f, -0.080943197011948f, 0.006533361505717f,
N    -0.080564737319946f,
N  0.006471714470536f, -0.080186225473881f, 0.006410357542336f,
N    -0.079807676374912f,
N  0.006349290721118f, -0.079429075121880f, 0.006288514938205f,
N    -0.079050421714783f,
N  0.006228029262275f, -0.078671731054783f, 0.006167833693326f,
N    -0.078292988240719f,
N  0.006107929162681f, -0.077914200723171f, 0.006048315204680f,
N    -0.077535368502140f,
N  0.005988991353661f, -0.077156484127045f, 0.005929958540946f,
N    -0.076777562499046f,
N  0.005871216300875f, -0.076398596167564f, 0.005812764633447f,
N    -0.076019577682018f,
N  0.005754603538662f, -0.075640521943569f, 0.005696733482182f,
N    -0.075261414051056f,
N  0.005639153998345f, -0.074882268905640f, 0.005581865552813f,
N    -0.074503071606159f,
N  0.005524867679924f, -0.074123837053776f, 0.005468160845339f,
N    -0.073744557797909f,
N  0.005411745049059f, -0.073365233838558f, 0.005355620291084f,
N    -0.072985872626305f,
N  0.005299786105752f, -0.072606459259987f, 0.005244242958724f,
N    -0.072227008640766f,
N  0.005188991315663f, -0.071847513318062f, 0.005134030245245f,
N    -0.071467980742455f,
N  0.005079360678792f, -0.071088403463364f, 0.005024982150644f,
N    -0.070708781480789f,
N  0.004970894660801f, -0.070329122245312f, 0.004917098674923f,
N    -0.069949418306351f,
N  0.004863593727350f, -0.069569669663906f, 0.004810380283743f,
N    -0.069189883768559f,
N  0.004757457878441f, -0.068810060620308f, 0.004704826977104f,
N    -0.068430192768574f,
N  0.004652487114072f, -0.068050287663937f, 0.004600439220667f,
N    -0.067670337855816f,
N  0.004548682365566f, -0.067290350794792f, 0.004497217014432f,
N    -0.066910326480865f,
N  0.004446043167263f, -0.066530264914036f, 0.004395160824060f,
N    -0.066150158643723f,
N  0.004344569984823f, -0.065770015120506f, 0.004294271115214f,
N    -0.065389834344387f,
N  0.004244263283908f, -0.065009608864784f, 0.004194547422230f,
N    -0.064629353582859f,
N  0.004145123064518f, -0.064249053597450f, 0.004095990676433f,
N    -0.063868723809719f,
N  0.004047149792314f, -0.063488349318504f, 0.003998600877821f,
N    -0.063107937574387f,
N  0.003950343467295f, -0.062727488577366f, 0.003902378026396f,
N    -0.062347009778023f,
N  0.003854704322293f, -0.061966486275196f, 0.003807322587818f,
N    -0.061585929244757f,
N  0.003760232590139f, -0.061205338686705f, 0.003713434794918f,
N    -0.060824707150459f,
N  0.003666928736493f, -0.060444042086601f, 0.003620714880526f,
N    -0.060063343495131f,
N  0.003574792761356f, -0.059682607650757f, 0.003529162844643f,
N    -0.059301838278770f,
N  0.003483824897557f, -0.058921031653881f, 0.003438779152930f,
N    -0.058540191501379f,
N  0.003394025377929f, -0.058159314095974f, 0.003349563805386f,
N    -0.057778406888247f,
N  0.003305394435301f, -0.057397462427616f, 0.003261517267674f,
N    -0.057016488164663f,
N  0.003217932302505f, -0.056635476648808f, 0.003174639539793f,
N    -0.056254431605339f,
N  0.003131638979539f, -0.055873356759548f, 0.003088930854574f,
N    -0.055492244660854f,
N  0.003046514932066f, -0.055111102759838f, 0.003004391444847f,
N    -0.054729927331209f,
N  0.002962560392916f, -0.054348722100258f, 0.002921021543443f,
N    -0.053967483341694f,
N  0.002879775362089f, -0.053586211055517f, 0.002838821383193f,
N    -0.053204908967018f,
N  0.002798160072416f, -0.052823577076197f, 0.002757790964097f,
N    -0.052442211657763f,
N  0.002717714523897f, -0.052060816437006f, 0.002677930751815f,
N    -0.051679391413927f,
N  0.002638439415023f, -0.051297932863235f, 0.002599240746349f,
N    -0.050916448235512f,
N  0.002560334512964f, -0.050534930080175f, 0.002521721180528f,
N    -0.050153385847807f,
N  0.002483400283381f, -0.049771808087826f, 0.002445372054353f,
N    -0.049390204250813f,
N  0.002407636726275f, -0.049008570611477f, 0.002370193833485f,
N    -0.048626907169819f,
N  0.002333043841645f, -0.048245213925838f, 0.002296186750755f,
N    -0.047863494604826f,
N  0.002259622327983f, -0.047481749206781f, 0.002223350573331f,
N    -0.047099970281124f,
N  0.002187371719629f, -0.046718169003725f, 0.002151685766876f,
N    -0.046336337924004f,
N  0.002116292715073f, -0.045954477041960f, 0.002081192564219f,
N    -0.045572593808174f,
N  0.002046385314316f, -0.045190680772066f, 0.002011870965362f,
N    -0.044808741658926f,
N  0.001977649517357f, -0.044426776468754f, 0.001943721086718f,
N    -0.044044785201550f,
N  0.001910085673444f, -0.043662767857313f, 0.001876743277535f,
N    -0.043280724436045f,
N  0.001843693898991f, -0.042898654937744f, 0.001810937537812f,
N    -0.042516563087702f,
N  0.001778474310413f, -0.042134445160627f, 0.001746304216795f,
N    -0.041752301156521f,
N  0.001714427140541f, -0.041370131075382f, 0.001682843198068f,
N    -0.040987938642502f,
N  0.001651552389376f, -0.040605723857880f, 0.001620554830879f,
N    -0.040223482996225f,
N  0.001589850406162f, -0.039841219782829f, 0.001559439115226f,
N    -0.039458930492401f,
N  0.001529321074486f, -0.039076622575521f, 0.001499496400356f,
N    -0.038694288581610f,
N  0.001469964860007f, -0.038311932235956f, 0.001440726569854f,
N    -0.037929553538561f,
N  0.001411781646311f, -0.037547148764133f, 0.001383129972965f,
N    -0.037164725363255f,
N  0.001354771666229f, -0.036782283335924f, 0.001326706726104f,
N    -0.036399815231562f,
N  0.001298935036175f, -0.036017324775457f, 0.001271456829272f,
N    -0.035634815692902f,
N  0.001244271872565f, -0.035252287983894f, 0.001217380515300f,
N    -0.034869734197855f,
N  0.001190782408230f, -0.034487165510654f, 0.001164477784187f,
N    -0.034104570746422f,
N  0.001138466643170f, -0.033721961081028f, 0.001112748985179f,
N    -0.033339329063892f,
N  0.001087324810214f, -0.032956674695015f, 0.001062194118276f,
N    -0.032574005424976f,
N  0.001037356909364f, -0.032191313803196f, 0.001012813183479f,
N    -0.031808607280254f,
N  0.000988563057035f, -0.031425878405571f, 0.000964606530033f,
N    -0.031043132767081f,
N  0.000940943544265f, -0.030660368502140f, 0.000917574157938f,
N    -0.030277585610747f,
N  0.000894498312846f, -0.029894785955548f, 0.000871716125403f,
N    -0.029511967673898f,
N  0.000849227537401f, -0.029129132628441f, 0.000827032607049f,
N    -0.028746278956532f,
N  0.000805131276138f, -0.028363410383463f, 0.000783523661084f,
N    -0.027980525046587f,
N  0.000762209703680f, -0.027597622945905f, 0.000741189462133f,
N    -0.027214704081416f,
N  0.000720462878235f, -0.026831768453121f, 0.000700030010194f,
N    -0.026448817923665f,
N  0.000679890916217f, -0.026065852493048f, 0.000660045538098f,
N    -0.025682870298624f,
N  0.000640493875835f, -0.025299875065684f, 0.000621235987637f,
N    -0.024916863068938f,
N  0.000602271873504f, -0.024533838033676f, 0.000583601591643f,
N    -0.024150796234608f,
N  0.000565225025639f, -0.023767741397023f, 0.000547142291907f,
N    -0.023384673520923f,
N  0.000529353390448f, -0.023001590743661f, 0.000511858321261f,
N    -0.022618494927883f,
N  0.000494657084346f, -0.022235386073589f, 0.000477749679703f,
N    -0.021852264180779f,
N  0.000461136136437f, -0.021469129249454f, 0.000444816454547f,
N    -0.021085981279612f,
N  0.000428790634032f, -0.020702820271254f, 0.000413058703998f,
N    -0.020319648087025f,
N  0.000397620693548f, -0.019936462864280f, 0.000382476573577f,
N    -0.019553268328309f,
N  0.000367626344087f, -0.019170060753822f, 0.000353070063284f,
N    -0.018786842003465f,
N  0.000338807702065f, -0.018403612077236f, 0.000324839289533f,
N    -0.018020370975137f,
N  0.000311164796585f, -0.017637118697166f, 0.000297784281429f,
N    -0.017253857105970f,
N  0.000284697714960f, -0.016870586201549f, 0.000271905126283f,
N    -0.016487304121256f,
N  0.000259406515397f, -0.016104012727737f, 0.000247201882303f,
N    -0.015720712020993f,
N  0.000235291256104f, -0.015337402001023f, 0.000223674607696f,
N    -0.014954082667828f,
N  0.000212351980736f, -0.014570754021406f, 0.000201323360670f,
N    -0.014187417924404f,
N  0.000190588747500f, -0.013804072514176f, 0.000180148170330f,
N    -0.013420719653368f,
N  0.000170001629158f, -0.013037359341979f, 0.000160149123985f,
N    -0.012653990648687f,
N  0.000150590654812f, -0.012270614504814f, 0.000141326236189f,
N    -0.011887230910361f,
N  0.000132355868118f, -0.011503840796649f, 0.000123679565149f,
N    -0.011120444163680f,
N  0.000115297327284f, -0.010737040080130f, 0.000107209154521f,
N    -0.010353630408645f,
N  0.000099415054137f, -0.009970214217901f, 0.000091915040684f,
N    -0.009586792439222f,
N  0.000084709099610f, -0.009203365072608f, 0.000077797252743f,
N    -0.008819932118058f,
N  0.000071179500083f, -0.008436493575573f, 0.000064855834353f,
N    -0.008053051307797f,
N  0.000058826273744f, -0.007669602986425f, 0.000053090810979f,
N    -0.007286150939763f,
N  0.000047649456974f, -0.006902694236487f, 0.000042502211727f,
N    -0.006519233807921f,
N  0.000037649078877f, -0.006135769188404f, 0.000033090062061f,
N    -0.005752300843596f,
N  0.000028825161280f, -0.005368829704821f, 0.000024854381991f,
N    -0.004985354840755f,
N  0.000021177724193f, -0.004601877182722f, 0.000017795191525f,
N    -0.004218397196382f,
N  0.000014706784896f, -0.003834914416075f, 0.000011912506125f,
N    -0.003451429307461f,
N  0.000009412358850f, -0.003067942336202f, 0.000007206342616f,
N    -0.002684453502297f,
N  0.000005294459243f, -0.002300963038579f, 0.000003676709639f,
N    -0.001917471294291f,
N  0.000002353095169f, -0.001533978385851f, 0.000001323616516f,
N    -0.001150484546088f,
N  0.000000588274133f, -0.000766990066040f, 0.000000147068562f,
N    -0.000383495149435f,
N  0.000000000000000f, -0.000000000000023f, 0.000000147068562f,
N    0.000383495149435f,
N  0.000000588274133f, 0.000766990066040f, 0.000001323616516f,
N    0.001150484546088f,
N  0.000002353095169f, 0.001533978385851f, 0.000003676709639f,
N    0.001917471294291f,
N  0.000005294459243f, 0.002300963038579f, 0.000007206342616f,
N    0.002684453502297f,
N  0.000009412358850f, 0.003067942336202f, 0.000011912506125f,
N    0.003451429307461f,
N  0.000014706784896f, 0.003834914416075f, 0.000017795191525f,
N    0.004218397196382f,
N  0.000021177724193f, 0.004601877182722f, 0.000024854381991f,
N    0.004985354840755f,
N  0.000028825161280f, 0.005368829704821f, 0.000033090062061f,
N    0.005752300843596f,
N  0.000037649078877f, 0.006135769188404f, 0.000042502211727f,
N    0.006519233807921f,
N  0.000047649456974f, 0.006902694236487f, 0.000053090810979f,
N    0.007286150939763f,
N  0.000058826273744f, 0.007669602986425f, 0.000064855834353f,
N    0.008053051307797f,
N  0.000071179500083f, 0.008436493575573f, 0.000077797252743f,
N    0.008819932118058f,
N  0.000084709099610f, 0.009203365072608f, 0.000091915040684f,
N    0.009586792439222f,
N  0.000099415054137f, 0.009970214217901f, 0.000107209154521f,
N    0.010353630408645f,
N  0.000115297327284f, 0.010737040080130f, 0.000123679565149f,
N    0.011120444163680f,
N  0.000132355868118f, 0.011503840796649f, 0.000141326236189f,
N    0.011887230910361f,
N  0.000150590654812f, 0.012270614504814f, 0.000160149123985f,
N    0.012653990648687f,
N  0.000170001629158f, 0.013037359341979f, 0.000180148170330f,
N    0.013420719653368f,
N  0.000190588747500f, 0.013804072514176f, 0.000201323360670f,
N    0.014187417924404f,
N  0.000212351980736f, 0.014570754021406f, 0.000223674607696f,
N    0.014954082667828f,
N  0.000235291256104f, 0.015337402001023f, 0.000247201882303f,
N    0.015720712020993f,
N  0.000259406515397f, 0.016104012727737f, 0.000271905126283f,
N    0.016487304121256f,
N  0.000284697714960f, 0.016870586201549f, 0.000297784281429f,
N    0.017253857105970f,
N  0.000311164796585f, 0.017637118697166f, 0.000324839289533f,
N    0.018020370975137f,
N  0.000338807702065f, 0.018403612077236f, 0.000353070063284f,
N    0.018786842003465f,
N  0.000367626344087f, 0.019170060753822f, 0.000382476573577f,
N    0.019553268328309f,
N  0.000397620693548f, 0.019936462864280f, 0.000413058703998f,
N    0.020319648087025f,
N  0.000428790634032f, 0.020702820271254f, 0.000444816454547f,
N    0.021085981279612f,
N  0.000461136136437f, 0.021469129249454f, 0.000477749679703f,
N    0.021852264180779f,
N  0.000494657084346f, 0.022235386073589f, 0.000511858321261f,
N    0.022618494927883f,
N  0.000529353390448f, 0.023001590743661f, 0.000547142291907f,
N    0.023384673520923f,
N  0.000565225025639f, 0.023767741397023f, 0.000583601591643f,
N    0.024150796234608f,
N  0.000602271873504f, 0.024533838033676f, 0.000621235987637f,
N    0.024916863068938f,
N  0.000640493875835f, 0.025299875065684f, 0.000660045538098f,
N    0.025682870298624f,
N  0.000679890916217f, 0.026065852493048f, 0.000700030010194f,
N    0.026448817923665f,
N  0.000720462878235f, 0.026831768453121f, 0.000741189462133f,
N    0.027214704081416f,
N  0.000762209703680f, 0.027597622945905f, 0.000783523661084f,
N    0.027980525046587f,
N  0.000805131276138f, 0.028363410383463f, 0.000827032607049f,
N    0.028746278956532f,
N  0.000849227537401f, 0.029129132628441f, 0.000871716125403f,
N    0.029511967673898f,
N  0.000894498312846f, 0.029894785955548f, 0.000917574157938f,
N    0.030277585610747f,
N  0.000940943544265f, 0.030660368502140f, 0.000964606530033f,
N    0.031043132767081f,
N  0.000988563057035f, 0.031425878405571f, 0.001012813183479f,
N    0.031808607280254f,
N  0.001037356909364f, 0.032191313803196f, 0.001062194118276f,
N    0.032574005424976f,
N  0.001087324810214f, 0.032956674695015f, 0.001112748985179f,
N    0.033339329063892f,
N  0.001138466643170f, 0.033721961081028f, 0.001164477784187f,
N    0.034104570746422f,
N  0.001190782408230f, 0.034487165510654f, 0.001217380515300f,
N    0.034869734197855f,
N  0.001244271872565f, 0.035252287983894f, 0.001271456829272f,
N    0.035634815692902f,
N  0.001298935036175f, 0.036017324775457f, 0.001326706726104f,
N    0.036399815231562f,
N  0.001354771666229f, 0.036782283335924f, 0.001383129972965f,
N    0.037164725363255f,
N  0.001411781646311f, 0.037547148764133f, 0.001440726569854f,
N    0.037929553538561f,
N  0.001469964860007f, 0.038311932235956f, 0.001499496400356f,
N    0.038694288581610f,
N  0.001529321074486f, 0.039076622575521f, 0.001559439115226f,
N    0.039458930492401f,
N  0.001589850406162f, 0.039841219782829f, 0.001620554830879f,
N    0.040223482996225f,
N  0.001651552389376f, 0.040605723857880f, 0.001682843198068f,
N    0.040987938642502f,
N  0.001714427140541f, 0.041370131075382f, 0.001746304216795f,
N    0.041752301156521f,
N  0.001778474310413f, 0.042134445160627f, 0.001810937537812f,
N    0.042516563087702f,
N  0.001843693898991f, 0.042898654937744f, 0.001876743277535f,
N    0.043280724436045f,
N  0.001910085673444f, 0.043662767857313f, 0.001943721086718f,
N    0.044044785201550f,
N  0.001977649517357f, 0.044426776468754f, 0.002011870965362f,
N    0.044808741658926f,
N  0.002046385314316f, 0.045190680772066f, 0.002081192564219f,
N    0.045572593808174f,
N  0.002116292715073f, 0.045954477041960f, 0.002151685766876f,
N    0.046336337924004f,
N  0.002187371719629f, 0.046718169003725f, 0.002223350573331f,
N    0.047099970281124f,
N  0.002259622327983f, 0.047481749206781f, 0.002296186750755f,
N    0.047863494604826f,
N  0.002333043841645f, 0.048245213925838f, 0.002370193833485f,
N    0.048626907169819f,
N  0.002407636726275f, 0.049008570611477f, 0.002445372054353f,
N    0.049390204250813f,
N  0.002483400283381f, 0.049771808087826f, 0.002521721180528f,
N    0.050153385847807f,
N  0.002560334512964f, 0.050534930080175f, 0.002599240746349f,
N    0.050916448235512f,
N  0.002638439415023f, 0.051297932863235f, 0.002677930751815f,
N    0.051679391413927f,
N  0.002717714523897f, 0.052060816437006f, 0.002757790964097f,
N    0.052442211657763f,
N  0.002798160072416f, 0.052823577076197f, 0.002838821383193f,
N    0.053204908967018f,
N  0.002879775362089f, 0.053586211055517f, 0.002921021543443f,
N    0.053967483341694f,
N  0.002962560392916f, 0.054348722100258f, 0.003004391444847f,
N    0.054729927331209f,
N  0.003046514932066f, 0.055111102759838f, 0.003088930854574f,
N    0.055492244660854f,
N  0.003131638979539f, 0.055873356759548f, 0.003174639539793f,
N    0.056254431605339f,
N  0.003217932302505f, 0.056635476648808f, 0.003261517267674f,
N    0.057016488164663f,
N  0.003305394435301f, 0.057397462427616f, 0.003349563805386f,
N    0.057778406888247f,
N  0.003394025377929f, 0.058159314095974f, 0.003438779152930f,
N    0.058540191501379f,
N  0.003483824897557f, 0.058921031653881f, 0.003529162844643f,
N    0.059301838278770f,
N  0.003574792761356f, 0.059682607650757f, 0.003620714880526f,
N    0.060063343495131f,
N  0.003666928736493f, 0.060444042086601f, 0.003713434794918f,
N    0.060824707150459f,
N  0.003760232590139f, 0.061205338686705f, 0.003807322587818f,
N    0.061585929244757f,
N  0.003854704322293f, 0.061966486275196f, 0.003902378026396f,
N    0.062347009778023f,
N  0.003950343467295f, 0.062727488577366f, 0.003998600877821f,
N    0.063107937574387f,
N  0.004047149792314f, 0.063488349318504f, 0.004095990676433f,
N    0.063868723809719f,
N  0.004145123064518f, 0.064249053597450f, 0.004194547422230f,
N    0.064629353582859f,
N  0.004244263283908f, 0.065009608864784f, 0.004294271115214f,
N    0.065389834344387f,
N  0.004344569984823f, 0.065770015120506f, 0.004395160824060f,
N    0.066150158643723f,
N  0.004446043167263f, 0.066530264914036f, 0.004497217014432f,
N    0.066910326480865f,
N  0.004548682365566f, 0.067290350794792f, 0.004600439220667f,
N    0.067670337855816f,
N  0.004652487114072f, 0.068050287663937f, 0.004704826977104f,
N    0.068430192768574f,
N  0.004757457878441f, 0.068810060620308f, 0.004810380283743f,
N    0.069189883768559f,
N  0.004863593727350f, 0.069569669663906f, 0.004917098674923f,
N    0.069949418306351f,
N  0.004970894660801f, 0.070329122245312f, 0.005024982150644f,
N    0.070708781480789f,
N  0.005079360678792f, 0.071088403463364f, 0.005134030245245f,
N    0.071467980742455f,
N  0.005188991315663f, 0.071847513318062f, 0.005244242958724f,
N    0.072227008640766f,
N  0.005299786105752f, 0.072606459259987f, 0.005355620291084f,
N    0.072985872626305f,
N  0.005411745049059f, 0.073365233838558f, 0.005468160845339f,
N    0.073744557797909f,
N  0.005524867679924f, 0.074123837053776f, 0.005581865552813f,
N    0.074503071606159f,
N  0.005639153998345f, 0.074882268905640f, 0.005696733482182f,
N    0.075261414051056f,
N  0.005754603538662f, 0.075640521943569f, 0.005812764633447f,
N    0.076019577682018f,
N  0.005871216300875f, 0.076398596167564f, 0.005929958540946f,
N    0.076777562499046f,
N  0.005988991353661f, 0.077156484127045f, 0.006048315204680f,
N    0.077535368502140f,
N  0.006107929162681f, 0.077914200723171f, 0.006167833693326f,
N    0.078292988240719f,
N  0.006228029262275f, 0.078671731054783f, 0.006288514938205f,
N    0.079050421714783f,
N  0.006349290721118f, 0.079429075121880f, 0.006410357542336f,
N    0.079807676374912f,
N  0.006471714470536f, 0.080186225473881f, 0.006533361505717f,
N    0.080564737319946f,
N  0.006595299113542f, 0.080943197011948f, 0.006657526828349f,
N    0.081321612000465f,
N  0.006720044650137f, 0.081699974834919f, 0.006782853044569f,
N    0.082078292965889f,
N  0.006845951545984f, 0.082456558942795f, 0.006909339688718f,
N    0.082834780216217f,
N  0.006973018404096f, 0.083212949335575f, 0.007036986760795f,
N    0.083591073751450f,
N  0.007101245224476f, 0.083969146013260f, 0.007165793795139f,
N    0.084347173571587f,
N  0.007230632472783f, 0.084725148975849f, 0.007295760791749f,
N    0.085103072226048f,
N  0.007361178752035f, 0.085480943322182f, 0.007426886819303f,
N    0.085858769714832f,
N  0.007492884527892f, 0.086236543953419f, 0.007559171877801f,
N    0.086614266037941f,
N  0.007625748869032f, 0.086991935968399f, 0.007692615967244f,
N    0.087369553744793f,
N  0.007759772241116f, 0.087747126817703f, 0.007827218621969f,
N    0.088124647736549f,
N  0.007894953712821f, 0.088502109050751f, 0.007962978444993f,
N    0.088879525661469f,
N  0.008031292818487f, 0.089256882667542f, 0.008099896833301f,
N    0.089634194970131f,
N  0.008168790489435f, 0.090011447668076f, 0.008237972855568f,
N    0.090388655662537f,
N  0.008307444863021f, 0.090765804052353f, 0.008377205580473f,
N    0.091142900288105f,
N  0.008447255939245f, 0.091519944369793f, 0.008517595939338f,
N    0.091896936297417f,
N  0.008588224649429f, 0.092273868620396f, 0.008659142069519f,
N    0.092650748789310f,
N  0.008730349130929f, 0.093027576804161f, 0.008801844902337f,
N    0.093404345214367f,
N  0.008873629383743f, 0.093781061470509f, 0.008945702575147f,
N    0.094157725572586f,
N  0.009018065407872f, 0.094534330070019f, 0.009090716950595f,
N    0.094910882413387f,
N  0.009163657203317f, 0.095287375152111f, 0.009236886166036f,
N    0.095663815736771f,
N  0.009310402907431f, 0.096040196716785f, 0.009384209290147f,
N    0.096416525542736f,
N  0.009458304382861f, 0.096792794764042f, 0.009532688185573f,
N    0.097169004380703f,
N  0.009607359766960f, 0.097545161843300f, 0.009682320058346f,
N    0.097921259701252f,
N  0.009757569059730f, 0.098297297954559f, 0.009833106771111f,
N    0.098673284053802f,
N  0.009908932261169f, 0.099049203097820f, 0.009985045529902f,
N    0.099425069987774f,
N  0.010061448439956f, 0.099800877273083f, 0.010138138197362f,
N    0.100176624953747f,
N  0.010215117596090f, 0.100552320480347f, 0.010292383842170f,
N    0.100927948951721f,
N  0.010369938798249f, 0.101303517818451f, 0.010447781533003f,
N    0.101679034531116f,
N  0.010525912046432f, 0.102054484188557f, 0.010604331269860f,
N    0.102429874241352f,
N  0.010683037340641f, 0.102805204689503f, 0.010762032121420f,
N    0.103180475533009f,
N  0.010841314680874f, 0.103555686771870f, 0.010920885019004f,
N    0.103930838406086f,
N  0.011000742204487f, 0.104305922985077f, 0.011080888099968f,
N    0.104680955410004f,
N  0.011161320842803f, 0.105055920779705f, 0.011242041364312f,
N    0.105430819094181f,
N  0.011323049664497f, 0.105805665254593f, 0.011404345743358f,
N    0.106180444359779f,
N  0.011485928669572f, 0.106555156409740f, 0.011567799374461f,
N    0.106929816305637f,
N  0.011649956926703f, 0.107304409146309f, 0.011732402257621f,
N    0.107678934931755f,
N  0.011815134435892f, 0.108053401112556f, 0.011898153461516f,
N    0.108427800238132f,
N  0.011981460265815f, 0.108802139759064f, 0.012065053917468f,
N    0.109176412224770f,
N  0.012148935347795f, 0.109550617635250f, 0.012233102694154f,
N    0.109924763441086f,
N  0.012317557819188f, 0.110298842191696f, 0.012402298860252f,
N    0.110672861337662f,
N  0.012487327679992f, 0.111046813428402f, 0.012572642415762f,
N    0.111420698463917f,
N  0.012658244930208f, 0.111794516444206f, 0.012744133360684f,
N    0.112168267369270f,
N  0.012830308638513f, 0.112541958689690f, 0.012916770763695f,
N    0.112915575504303f,
N  0.013003518804908f, 0.113289132714272f, 0.013090553693473f,
N    0.113662622869015f,
N  0.013177875429392f, 0.114036038517952f, 0.013265483081341f,
N    0.114409394562244f,
N  0.013353376649320f, 0.114782683551311f, 0.013441557064652f,
N    0.115155905485153f,
N  0.013530024327338f, 0.115529052913189f, 0.013618776574731f,
N    0.115902140736580f,
N  0.013707815669477f, 0.116275154054165f, 0.013797140680254f,
N    0.116648100316525f,
N  0.013886751607060f, 0.117020979523659f, 0.013976648449898f,
N    0.117393791675568f,
N  0.014066831208766f, 0.117766529321671f, 0.014157299883664f,
N    0.118139199912548f,
N  0.014248054474592f, 0.118511803448200f, 0.014339094981551f,
N    0.118884332478046f,
N  0.014430420473218f, 0.119256794452667f, 0.014522032812238f,
N    0.119629189372063f,
N  0.014613929204643f, 0.120001509785652f, 0.014706112444401f,
N    0.120373763144016f,
N  0.014798580668867f, 0.120745941996574f, 0.014891333878040f,
N    0.121118053793907f,
N  0.014984373003244f, 0.121490091085434f, 0.015077698044479f,
N    0.121862053871155f,
N  0.015171307139099f, 0.122233949601650f, 0.015265202149749f,
N    0.122605770826340f,
N  0.015359382145107f, 0.122977524995804f, 0.015453847125173f,
N    0.123349204659462f,
N  0.015548598021269f, 0.123720809817314f, 0.015643632039428f,
N    0.124092340469360f,
N  0.015738952904940f, 0.124463804066181f, 0.015834558755159f,
N    0.124835193157196f,
N  0.015930447727442f, 0.125206500291824f, 0.016026621684432f,
N    0.125577747821808f,
N  0.016123080626130f, 0.125948905944824f, 0.016219824552536f,
N    0.126320004463196f,
N  0.016316853463650f, 0.126691013574600f, 0.016414167359471f,
N    0.127061963081360f,
N  0.016511764377356f, 0.127432823181152f, 0.016609646379948f,
N    0.127803623676300f,
N  0.016707813367248f, 0.128174334764481f, 0.016806263476610f,
N    0.128544986248016f,
N  0.016904998570681f, 0.128915548324585f, 0.017004016786814f,
N    0.129286035895348f,
N  0.017103319987655f, 0.129656463861465f, 0.017202908173203f,
N    0.130026802420616f,
N  0.017302779480815f, 0.130397051572800f, 0.017402933910489f,
N    0.130767241120338f,
N  0.017503373324871f, 0.131137356162071f, 0.017604095861316f,
N    0.131507381796837f,
N  0.017705103382468f, 0.131877332925797f, 0.017806394025683f,
N    0.132247209548950f,
N  0.017907967790961f, 0.132617011666298f, 0.018009826540947f,
N    0.132986739277840f,
N  0.018111966550350f, 0.133356377482414f, 0.018214391544461f,
N    0.133725941181183f,
N  0.018317099660635f, 0.134095430374146f, 0.018420090898871f,
N    0.134464830160141f,
N  0.018523367121816f, 0.134834155440331f, 0.018626924604177f,
N    0.135203406214714f,
N  0.018730765208602f, 0.135572582483292f, 0.018834890797734f,
N    0.135941669344902f,
N  0.018939297646284f, 0.136310681700706f, 0.019043987616897f,
N    0.136679604649544f,
N  0.019148962572217f, 0.137048453092575f, 0.019254218786955f,
N    0.137417227029800f,
N  0.019359756261110f, 0.137785911560059f, 0.019465578719974f,
N    0.138154521584511f,
N  0.019571684300900f, 0.138523042201996f, 0.019678071141243f,
N    0.138891488313675f,
N  0.019784741103649f, 0.139259845018387f, 0.019891692325473f,
N    0.139628127217293f,
N  0.019998926669359f, 0.139996320009232f, 0.020106444135308f,
N    0.140364438295364f,
N  0.020214242860675f, 0.140732467174530f, 0.020322324708104f,
N    0.141100421547890f,
N  0.020430689677596f, 0.141468286514282f, 0.020539334043860f,
N    0.141836062073708f,
N  0.020648263394833f, 0.142203763127327f, 0.020757472142577f,
N    0.142571389675140f,
N  0.020866964012384f, 0.142938911914825f, 0.020976737141609f,
N    0.143306359648705f,
N  0.021086793392897f, 0.143673732876778f, 0.021197130903602f,
N    0.144041016697884f,
N  0.021307749673724f, 0.144408211112022f, 0.021418649703264f,
N    0.144775316119194f,
N  0.021529832854867f, 0.145142331719399f, 0.021641295403242f,
N    0.145509272813797f,
N  0.021753041073680f, 0.145876124501228f, 0.021865066140890f,
N    0.146242901682854f,
N  0.021977374330163f, 0.146609574556351f, 0.022089963778853f,
N    0.146976172924042f,
N  0.022202832624316f, 0.147342681884766f, 0.022315984591842f,
N    0.147709101438522f,
N  0.022429415956140f, 0.148075446486473f, 0.022543128579855f,
N    0.148441687226295f,
N  0.022657122462988f, 0.148807853460312f, 0.022771397605538f,
N    0.149173930287361f,
N  0.022885952144861f, 0.149539917707443f, 0.023000787943602f,
N    0.149905815720558f,
N  0.023115905001760f, 0.150271624326706f, 0.023231301456690f,
N    0.150637343525887f,
N  0.023346979171038f, 0.151002973318100f, 0.023462938144803f,
N    0.151368513703346f,
N  0.023579176515341f, 0.151733979582787f, 0.023695694282651f,
N    0.152099341154099f,
N  0.023812493309379f, 0.152464613318443f, 0.023929571732879f,
N    0.152829796075821f,
N  0.024046931415796f, 0.153194904327393f, 0.024164570495486f,
N    0.153559908270836f,
N  0.024282488971949f, 0.153924822807312f, 0.024400688707829f,
N    0.154289647936821f,
N  0.024519165977836f, 0.154654383659363f, 0.024637924507260f,
N    0.155019029974937f,
N  0.024756962433457f, 0.155383571982384f, 0.024876279756427f,
N    0.155748039484024f,
N  0.024995878338814f, 0.156112402677536f, 0.025115754455328f,
N    0.156476691365242f,
N  0.025235909968615f, 0.156840875744820f, 0.025356344878674f,
N    0.157204970717430f,
N  0.025477059185505f, 0.157568961381912f, 0.025598052889109f,
N    0.157932877540588f,
N  0.025719324126840f, 0.158296689391136f, 0.025840876623988f,
N    0.158660411834717f,
N  0.025962706655264f, 0.159024044871330f, 0.026084816083312f,
N    0.159387573599815f,
N  0.026207204908133f, 0.159751012921333f, 0.026329871267080f,
N    0.160114362835884f,
N  0.026452817022800f, 0.160477623343468f, 0.026576040312648f,
N    0.160840779542923f,
N  0.026699542999268f, 0.161203846335411f, 0.026823325082660f,
N    0.161566808819771f,
N  0.026947384700179f, 0.161929681897163f, 0.027071721851826f,
N    0.162292465567589f,
N  0.027196336537600f, 0.162655144929886f, 0.027321230620146f,
N    0.163017734885216f,
N  0.027446404099464f, 0.163380220532417f, 0.027571853250265f,
N    0.163742616772652f,
N  0.027697581797838f, 0.164104923605919f, 0.027823587879539f,
N    0.164467126131058f,
N  0.027949871495366f, 0.164829224348068f, 0.028076432645321f,
N    0.165191248059273f,
N  0.028203271329403f, 0.165553152561188f, 0.028330387547612f,
N    0.165914967656136f,
N  0.028457781299949f, 0.166276678442955f, 0.028585452586412f,
N    0.166638299822807f,
N  0.028713401407003f, 0.166999831795692f, 0.028841627761722f,
N    0.167361244559288f,
N  0.028970129787922f, 0.167722567915916f, 0.029098909348249f,
N    0.168083801865578f,
N  0.029227968305349f, 0.168444931507111f, 0.029357301071286f,
N    0.168805956840515f,
N  0.029486913233995f, 0.169166877865791f, 0.029616801068187f,
N    0.169527709484100f,
N  0.029746964573860f, 0.169888436794281f, 0.029877405613661f,
N    0.170249074697495f,
N  0.030008124187589f, 0.170609608292580f, 0.030139118432999f,
N    0.170970037579536f,
N  0.030270388349891f, 0.171330362558365f, 0.030401935800910f,
N    0.171690583229065f,
N  0.030533758923411f, 0.172050714492798f, 0.030665857717395f,
N    0.172410741448402f,
N  0.030798232182860f, 0.172770664095879f, 0.030930884182453f,
N    0.173130482435226f,
N  0.031063811853528f, 0.173490211367607f, 0.031197015196085f,
N    0.173849821090698f,
N  0.031330492347479f, 0.174209341406822f, 0.031464248895645f,
N    0.174568757414818f,
N  0.031598277390003f, 0.174928069114685f, 0.031732585281134f,
N    0.175287276506424f,
N  0.031867165118456f, 0.175646379590034f, 0.032002024352551f,
N    0.176005378365517f,
N  0.032137155532837f, 0.176364272832870f, 0.032272562384605f,
N    0.176723077893257f,
N  0.032408244907856f, 0.177081763744354f, 0.032544203102589f,
N    0.177440345287323f,
N  0.032680433243513f, 0.177798837423325f, 0.032816942781210f,
N    0.178157210350037f,
N  0.032953724265099f, 0.178515478968620f, 0.033090781420469f,
N    0.178873643279076f,
N  0.033228114247322f, 0.179231703281403f, 0.033365719020367f,
N    0.179589673876762f,
N  0.033503599464893f, 0.179947525262833f, 0.033641755580902f,
N    0.180305257439613f,
N  0.033780183643103f, 0.180662900209427f, 0.033918887376785f,
N    0.181020438671112f,
N  0.034057866781950f, 0.181377857923508f, 0.034197118133307f,
N    0.181735187768936f,
N  0.034336645156145f, 0.182092398405075f, 0.034476444125175f,
N    0.182449504733086f,
N  0.034616518765688f, 0.182806491851807f, 0.034756865352392f,
N    0.183163389563560f,
N  0.034897487610579f, 0.183520168066025f, 0.035038381814957f,
N    0.183876842260361f,
N  0.035179551690817f, 0.184233412146568f, 0.035320993512869f,
N    0.184589877724648f,
N  0.035462711006403f, 0.184946224093437f, 0.035604696720839f,
N    0.185302466154099f,
N  0.035746958106756f, 0.185658603906631f, 0.035889495164156f,
N    0.186014622449875f,
N  0.036032304167747f, 0.186370536684990f, 0.036175385117531f,
N    0.186726331710815f,
N  0.036318738013506f, 0.187082037329674f, 0.036462362855673f,
N    0.187437608838081f,
N  0.036606263369322f, 0.187793090939522f, 0.036750435829163f,
N    0.188148453831673f,
N  0.036894880235195f, 0.188503712415695f, 0.037039596587420f,
N    0.188858851790428f,
N  0.037184584885836f, 0.189213871955872f, 0.037329845130444f,
N    0.189568802714348f,
N  0.037475381046534f, 0.189923599362373f, 0.037621185183525f,
N    0.190278306603432f,
N  0.037767261266708f, 0.190632879734039f, 0.037913613021374f,
N    0.190987363457680f,
N  0.038060232996941f, 0.191341713070869f, 0.038207128643990f,
N    0.191695958375931f,
N  0.038354292511940f, 0.192050099372864f, 0.038501728326082f,
N    0.192404121160507f,
N  0.038649436086416f, 0.192758023738861f, 0.038797415792942f,
N    0.193111822009087f,
N  0.038945667445660f, 0.193465501070023f, 0.039094187319279f,
N    0.193819075822830f,
N  0.039242979139090f, 0.194172516465187f, 0.039392042905092f,
N    0.194525867700577f,
N  0.039541378617287f, 0.194879084825516f, 0.039690986275673f,
N    0.195232197642326f,
N  0.039840862154961f, 0.195585191249847f, 0.039991009980440f,
N    0.195938065648079f,
N  0.040141426026821f, 0.196290835738182f, 0.040292114019394f,
N    0.196643486618996f,
N  0.040443073958158f, 0.196996018290520f, 0.040594302117825f,
N    0.197348430752754f,
N  0.040745802223682f, 0.197700738906860f, 0.040897574275732f,
N    0.198052927851677f,
N  0.041049610823393f, 0.198404997587204f, 0.041201923042536f,
N    0.198756948113441f,
N  0.041354499757290f, 0.199108779430389f, 0.041507352143526f,
N    0.199460506439209f,
N  0.041660469025373f, 0.199812099337578f, 0.041813857853413f,
N    0.200163587927818f,
N  0.041967518627644f, 0.200514942407608f, 0.042121443897486f,
N    0.200866192579269f,
N  0.042275641113520f, 0.201217323541641f, 0.042430106550455f,
N    0.201568335294724f,
N  0.042584843933582f, 0.201919227838516f, 0.042739849537611f,
N    0.202270001173019f,
N  0.042895123362541f, 0.202620655298233f, 0.043050665408373f,
N    0.202971190214157f,
N  0.043206475675106f, 0.203321605920792f, 0.043362557888031f,
N    0.203671902418137f,
N  0.043518904596567f, 0.204022079706192f, 0.043675523251295f,
N    0.204372137784958f,
N  0.043832406401634f, 0.204722076654434f, 0.043989561498165f,
N    0.205071896314621f,
N  0.044146984815598f, 0.205421581864357f, 0.044304672628641f,
N    0.205771163105965f,
N  0.044462632387877f, 0.206120610237122f, 0.044620860368013f,
N    0.206469938158989f,
N  0.044779352843761f, 0.206819161772728f, 0.044938117265701f,
N    0.207168251276016f,
N  0.045097146183252f, 0.207517206668854f, 0.045256443321705f,
N    0.207866057753563f,
N  0.045416008681059f, 0.208214774727821f, 0.045575842261314f,
N    0.208563387393951f,
N  0.045735940337181f, 0.208911851048470f, 0.045896306633949f,
N    0.209260210394859f,
N  0.046056941151619f, 0.209608450531960f, 0.046217843890190f,
N    0.209956556558609f,
N  0.046379011124372f, 0.210304543375969f, 0.046540446579456f,
N    0.210652396082878f,
N  0.046702146530151f, 0.211000129580498f, 0.046864114701748f,
N    0.211347743868828f,
N  0.047026351094246f, 0.211695238947868f, 0.047188851982355f,
N    0.212042599916458f,
N  0.047351621091366f, 0.212389841675758f, 0.047514654695988f,
N    0.212736949324608f,
N  0.047677956521511f, 0.213083937764168f, 0.047841522842646f,
N    0.213430806994438f,
N  0.048005353659391f, 0.213777542114258f, 0.048169452697039f,
N    0.214124158024788f,
N  0.048333816230297f, 0.214470639824867f, 0.048498444259167f,
N    0.214817002415657f,
N  0.048663340508938f, 0.215163245797157f, 0.048828501254320f,
N    0.215509355068207f,
N  0.048993926495314f, 0.215855330228806f, 0.049159619957209f,
N    0.216201186180115f,
N  0.049325577914715f, 0.216546908020973f, 0.049491796642542f,
N    0.216892510652542f,
N  0.049658283591270f, 0.217237979173660f, 0.049825038760900f,
N    0.217583328485489f,
N  0.049992054700851f, 0.217928543686867f, 0.050159335136414f,
N    0.218273624777794f,
N  0.050326880067587f, 0.218618586659431f, 0.050494693219662f,
N    0.218963414430618f,
N  0.050662767142057f, 0.219308122992516f, 0.050831105560064f,
N    0.219652697443962f,
N  0.050999708473682f, 0.219997137784958f, 0.051168579608202f,
N    0.220341444015503f,
N  0.051337707787752f, 0.220685631036758f, 0.051507104188204f,
N    0.221029683947563f,
N  0.051676765084267f, 0.221373617649078f, 0.051846686750650f,
N    0.221717402338982f,
N  0.052016876637936f, 0.222061067819595f, 0.052187327295542f,
N    0.222404599189758f,
N  0.052358038723469f, 0.222748011350632f, 0.052529018372297f,
N    0.223091274499893f,
N  0.052700258791447f, 0.223434418439865f, 0.052871759980917f,
N    0.223777428269386f,
N  0.053043525665998f, 0.224120303988457f, 0.053215555846691f,
N    0.224463045597076f,
N  0.053387850522995f, 0.224805667996407f, 0.053560405969620f,
N    0.225148141384125f,
N  0.053733222186565f, 0.225490495562553f, 0.053906302899122f,
N    0.225832715630531f,
N  0.054079644382000f, 0.226174786686897f, 0.054253250360489f,
N    0.226516738533974f,
N  0.054427117109299f, 0.226858556270599f, 0.054601248353720f,
N    0.227200239896774f,
N  0.054775636643171f, 0.227541789412498f, 0.054950293153524f,
N    0.227883204817772f,
N  0.055125206708908f, 0.228224486112595f, 0.055300384759903f,
N    0.228565633296967f,
N  0.055475823581219f, 0.228906646370888f, 0.055651523172855f,
N    0.229247525334358f,
N  0.055827483534813f, 0.229588270187378f, 0.056003704667091f,
N    0.229928880929947f,
N  0.056180190294981f, 0.230269357562065f, 0.056356932967901f,
N    0.230609700083733f,
N  0.056533940136433f, 0.230949893593788f, 0.056711208075285f,
N    0.231289967894554f,
N  0.056888736784458f, 0.231629893183708f, 0.057066522538662f,
N    0.231969684362412f,
N  0.057244572788477f, 0.232309341430664f, 0.057422880083323f,
N    0.232648864388466f,
N  0.057601451873779f, 0.232988253235817f, 0.057780280709267f,
N    0.233327493071556f,
N  0.057959370315075f, 0.233666598796844f, 0.058138720691204f,
N    0.234005570411682f,
N  0.058318331837654f, 0.234344407916069f, 0.058498200029135f,
N    0.234683111310005f,
N  0.058678328990936f, 0.235021665692329f, 0.058858718723059f,
N    0.235360085964203f,
N  0.059039369225502f, 0.235698372125626f, 0.059220276772976f,
N    0.236036509275436f,
N  0.059401445090771f, 0.236374512314796f, 0.059582870453596f,
N    0.236712381243706f,
N  0.059764556586742f, 0.237050101161003f, 0.059946499764919f,
N    0.237387686967850f,
N  0.060128703713417f, 0.237725138664246f, 0.060311164706945f,
N    0.238062441349030f,
N  0.060493886470795f, 0.238399609923363f, 0.060676865279675f,
N    0.238736644387245f,
N  0.060860104858875f, 0.239073529839516f, 0.061043601483107f,
N    0.239410281181335f,
N  0.061227355152369f, 0.239746883511543f, 0.061411365866661f,
N    0.240083336830139f,
N  0.061595637351274f, 0.240419670939446f, 0.061780165880919f,
N    0.240755841135979f,
N  0.061964951455593f, 0.241091892123222f, 0.062149997800589f,
N    0.241427779197693f,
N  0.062335297465324f, 0.241763532161713f, 0.062520854175091f,
N    0.242099151015282f,
N  0.062706671655178f, 0.242434620857239f, 0.062892749905586f,
N    0.242769956588745f,
N  0.063079081475735f, 0.243105143308640f, 0.063265666365623f,
N    0.243440181016922f,
N  0.063452512025833f, 0.243775084614754f, 0.063639611005783f,
N    0.244109839200974f,
N  0.063826970756054f, 0.244444444775581f, 0.064014583826065f,
N    0.244778916239738f,
N  0.064202457666397f, 0.245113238692284f, 0.064390584826469f,
N    0.245447427034378f,
N  0.064578965306282f, 0.245781451463699f, 0.064767606556416f,
N    0.246115356683731f,
N  0.064956501126289f, 0.246449097990990f, 0.065145656466484f,
N    0.246782705187798f,
N  0.065335065126419f, 0.247116148471832f, 0.065524727106094f,
N    0.247449472546577f,
N  0.065714649856091f, 0.247782632708550f, 0.065904818475246f,
N    0.248115643858910f,
N  0.066095255315304f, 0.248448520898819f, 0.066285938024521f,
N    0.248781248927116f,
N  0.066476874053478f, 0.249113827943802f, 0.066668070852757f,
N    0.249446272850037f,
N  0.066859520971775f, 0.249778553843498f, 0.067051224410534f,
N    0.250110685825348f,
N  0.067243188619614f, 0.250442683696747f, 0.067435398697853f,
N    0.250774532556534f,
N  0.067627869546413f, 0.251106232404709f, 0.067820593714714f,
N    0.251437783241272f,
N  0.068013571202755f, 0.251769185066223f, 0.068206802010536f,
N    0.252100437879562f,
N  0.068400286138058f, 0.252431541681290f, 0.068594031035900f,
N    0.252762526273727f,
N  0.068788021802902f, 0.253093332052231f, 0.068982265889645f,
N    0.253423988819122f,
N  0.069176770746708f, 0.253754496574402f, 0.069371521472931f,
N    0.254084855318069f,
N  0.069566532969475f, 0.254415065050125f, 0.069761790335178f,
N    0.254745125770569f,
N  0.069957308471203f, 0.255075037479401f, 0.070153072476387f,
N    0.255404800176620f,
N  0.070349089801311f, 0.255734413862228f, 0.070545360445976f,
N    0.256063878536224f,
N  0.070741884410381f, 0.256393194198608f, 0.070938661694527f,
N    0.256722360849380f,
N  0.071135692298412f, 0.257051378488541f, 0.071332976222038f,
N    0.257380217313766f,
N  0.071530513465405f, 0.257708936929703f, 0.071728296577930f,
N    0.258037507534027f,
N  0.071926333010197f, 0.258365899324417f, 0.072124622762203f,
N    0.258694142103195f,
N  0.072323165833950f, 0.259022265672684f, 0.072521962225437f,
N    0.259350210428238f,
N  0.072721004486084f, 0.259678006172180f, 0.072920300066471f,
N    0.260005623102188f,
N  0.073119848966599f, 0.260333120822906f, 0.073319651186466f,
N    0.260660469532013f,
N  0.073519699275494f, 0.260987639427185f, 0.073720000684261f,
N    0.261314690113068f,
N  0.073920547962189f, 0.261641561985016f, 0.074121348559856f,
N    0.261968284845352f,
N  0.074322402477264f, 0.262294828891754f, 0.074523709714413f,
N    0.262621253728867f,
N  0.074725262820721f, 0.262947499752045f, 0.074927061796188f,
N    0.263273626565933f,
N  0.075129114091396f, 0.263599574565887f, 0.075331419706345f,
N    0.263925373554230f,
N  0.075533971190453f, 0.264250993728638f, 0.075736775994301f,
N    0.264576494693756f,
N  0.075939826667309f, 0.264901816844940f, 0.076143130660057f,
N    0.265226989984512f,
N  0.076346680521965f, 0.265552014112473f, 0.076550483703613f,
N    0.265876859426498f,
N  0.076754532754421f, 0.266201555728912f, 0.076958827674389f,
N    0.266526103019714f,
N  0.077163375914097f, 0.266850501298904f, 0.077368170022964f,
N    0.267174720764160f,
N  0.077573217451572f, 0.267498821020126f, 0.077778510749340f,
N    0.267822742462158f,
N  0.077984049916267f, 0.268146485090256f, 0.078189842402935f,
N    0.268470078706741f,
N  0.078395880758762f, 0.268793523311615f, 0.078602164983749f,
N    0.269116818904877f,
N  0.078808702528477f, 0.269439965486526f, 0.079015478491783f,
N    0.269762933254242f,
N  0.079222507774830f, 0.270085722208023f, 0.079429790377617f,
N    0.270408391952515f,
N  0.079637311398983f, 0.270730882883072f, 0.079845085740089f,
N    0.271053224802017f,
N  0.080053105950356f, 0.271375387907028f, 0.080261372029781f,
N    0.271697402000427f,
N  0.080469883978367f, 0.272019267082214f, 0.080678641796112f,
N    0.272340953350067f,
N  0.080887645483017f, 0.272662490606308f, 0.081096902489662f,
N    0.272983878850937f,
N  0.081306397914886f, 0.273305088281631f, 0.081516146659851f,
N    0.273626148700714f,
N  0.081726133823395f, 0.273947030305862f, 0.081936374306679f,
N    0.274267762899399f,
N  0.082146860659122f, 0.274588316679001f, 0.082357585430145f,
N    0.274908751249313f,
N  0.082568563520908f, 0.275228977203369f, 0.082779780030251f,
N    0.275549083948135f,
N  0.082991249859333f, 0.275868982076645f, 0.083202958106995f,
N    0.276188760995865f,
N  0.083414919674397f, 0.276508361101151f, 0.083627119660378f,
N    0.276827782392502f,
N  0.083839565515518f, 0.277147054672241f, 0.084052257239819f,
N    0.277466177940369f,
N  0.084265194833279f, 0.277785122394562f, 0.084478378295898f,
N    0.278103888034821f,
N  0.084691800177097f, 0.278422504663467f, 0.084905467927456f,
N    0.278740972280502f,
N  0.085119381546974f, 0.279059261083603f, 0.085333541035652f,
N    0.279377400875092f,
N  0.085547938942909f, 0.279695361852646f, 0.085762590169907f,
N    0.280013144016266f,
N  0.085977479815483f, 0.280330777168274f, 0.086192607879639f,
N    0.280648261308670f,
N  0.086407989263535f, 0.280965566635132f, 0.086623609066010f,
N    0.281282693147659f,
N  0.086839467287064f, 0.281599670648575f, 0.087055571377277f,
N    0.281916469335556f,
N  0.087271921336651f, 0.282233119010925f, 0.087488517165184f,
N    0.282549589872360f,
N  0.087705351412296f, 0.282865911722183f, 0.087922424077988f,
N    0.283182054758072f,
N  0.088139742612839f, 0.283498018980026f, 0.088357307016850f,
N    0.283813834190369f,
N  0.088575109839439f, 0.284129470586777f, 0.088793158531189f,
N    0.284444957971573f,
N  0.089011445641518f, 0.284760266542435f, 0.089229971170425f,
N    0.285075396299362f,
N  0.089448742568493f, 0.285390377044678f, 0.089667752385139f,
N    0.285705178976059f,
N  0.089887008070946f, 0.286019802093506f, 0.090106502175331f,
N    0.286334276199341f,
N  0.090326242148876f, 0.286648571491241f, 0.090546220541000f,
N    0.286962717771530f,
N  0.090766437351704f, 0.287276685237885f, 0.090986892580986f,
N    0.287590473890305f,
N  0.091207593679428f, 0.287904083728790f, 0.091428533196449f,
N    0.288217544555664f,
N  0.091649711132050f, 0.288530826568604f, 0.091871134936810f,
N    0.288843959569931f,
N  0.092092797160149f, 0.289156883955002f, 0.092314697802067f,
N    0.289469659328461f,
N  0.092536836862564f, 0.289782285690308f, 0.092759214341640f,
N    0.290094703435898f,
N  0.092981837689877f, 0.290406972169876f, 0.093204692006111f,
N    0.290719062089920f,
N  0.093427792191505f, 0.291031002998352f, 0.093651130795479f,
N    0.291342735290527f,
N  0.093874707818031f, 0.291654318571091f, 0.094098523259163f,
N    0.291965723037720f,
N  0.094322577118874f, 0.292276978492737f, 0.094546869397163f,
N    0.292588025331497f,
N  0.094771400094032f, 0.292898923158646f, 0.094996169209480f,
N    0.293209642171860f,
N  0.095221176743507f, 0.293520182371140f, 0.095446422696114f,
N    0.293830573558807f,
N  0.095671907067299f, 0.294140785932541f, 0.095897629857063f,
N    0.294450789690018f,
N  0.096123591065407f, 0.294760644435883f, 0.096349790692329f,
N    0.295070350170136f,
N  0.096576221287251f, 0.295379847288132f, 0.096802897751331f,
N    0.295689195394516f,
N  0.097029805183411f, 0.295998334884644f, 0.097256951034069f,
N    0.296307325363159f,
N  0.097484335303307f, 0.296616137027740f, 0.097711957991123f,
N    0.296924799680710f,
N  0.097939811646938f, 0.297233253717422f, 0.098167903721333f,
N    0.297541528940201f,
N  0.098396234214306f, 0.297849655151367f, 0.098624803125858f,
N    0.298157602548599f,
N  0.098853603005409f, 0.298465341329575f, 0.099082641303539f,
N    0.298772931098938f,
N  0.099311910569668f, 0.299080342054367f, 0.099541425704956f,
N    0.299387603998184f,
N  0.099771171808243f, 0.299694657325745f, 0.100001148879528f,
N    0.300001531839371f,
N  0.100231364369392f, 0.300308227539063f, 0.100461818277836f,
N    0.300614774227142f,
N  0.100692503154278f, 0.300921112298965f, 0.100923426449299f,
N    0.301227301359177f,
N  0.101154580712318f, 0.301533311605453f, 0.101385973393917f,
N    0.301839113235474f,
N  0.101617597043514f, 0.302144765853882f, 0.101849451661110f,
N    0.302450239658356f,
N  0.102081544697285f, 0.302755534648895f, 0.102313876152039f,
N    0.303060621023178f,
N  0.102546438574791f, 0.303365558385849f, 0.102779231965542f,
N    0.303670316934586f,
N  0.103012263774872f, 0.303974896669388f, 0.103245526552200f,
N    0.304279297590256f,
N  0.103479020297527f, 0.304583519697189f, 0.103712752461433f,
N    0.304887533187866f,
N  0.103946708142757f, 0.305191397666931f, 0.104180909693241f,
N    0.305495083332062f,
N  0.104415334761143f, 0.305798590183258f, 0.104649998247623f,
N    0.306101888418198f,
N  0.104884892702103f, 0.306405037641525f, 0.105120018124580f,
N    0.306708008050919f,
N  0.105355374515057f, 0.307010769844055f, 0.105590961873531f,
N    0.307313382625580f,
N  0.105826787650585f, 0.307615786790848f, 0.106062836945057f,
N    0.307918041944504f,
N  0.106299124658108f, 0.308220088481903f, 0.106535643339157f,
N    0.308521956205368f,
N  0.106772392988205f, 0.308823645114899f, 0.107009373605251f,
N    0.309125155210495f,
N  0.107246585190296f, 0.309426486492157f, 0.107484027743340f,
N    0.309727638959885f,
N  0.107721701264381f, 0.310028612613678f, 0.107959605753422f,
N    0.310329377651215f,
N  0.108197741210461f, 0.310629993677139f, 0.108436107635498f,
N    0.310930401086807f,
N  0.108674705028534f, 0.311230629682541f, 0.108913525938988f,
N    0.311530679464340f,
N  0.109152585268021f, 0.311830550432205f, 0.109391868114471f,
N    0.312130242586136f,
N  0.109631389379501f, 0.312429755926132f, 0.109871134161949f,
N    0.312729060649872f,
N  0.110111102461815f, 0.313028186559677f, 0.110351309180260f,
N    0.313327133655548f,
N  0.110591746866703f, 0.313625901937485f, 0.110832408070564f,
N    0.313924491405487f,
N  0.111073300242424f, 0.314222872257233f, 0.111314415931702f,
N    0.314521104097366f,
N  0.111555770039558f, 0.314819127321243f, 0.111797347664833f,
N    0.315116971731186f,
N  0.112039148807526f, 0.315414607524872f, 0.112281180918217f,
N    0.315712094306946f,
N  0.112523443996906f, 0.316009372472763f, 0.112765938043594f,
N    0.316306471824646f,
N  0.113008655607700f, 0.316603392362595f, 0.113251596689224f,
N    0.316900104284287f,
N  0.113494776189327f, 0.317196637392044f, 0.113738171756268f,
N    0.317492991685867f,
N  0.113981798291206f, 0.317789167165756f, 0.114225655794144f,
N    0.318085134029388f,
N  0.114469736814499f, 0.318380922079086f, 0.114714048802853f,
N    0.318676531314850f,
N  0.114958584308624f, 0.318971961736679f, 0.115203343331814f,
N    0.319267183542252f,
N  0.115448333323002f, 0.319562226533890f, 0.115693546831608f,
N    0.319857090711594f,
N  0.115938983857632f, 0.320151746273041f, 0.116184651851654f,
N    0.320446223020554f,
N  0.116430543363094f, 0.320740520954132f, 0.116676658391953f,
N    0.321034610271454f,
N  0.116923004388809f, 0.321328520774841f, 0.117169573903084f,
N    0.321622252464294f,
N  0.117416366934776f, 0.321915775537491f, 0.117663383483887f,
N    0.322209119796753f,
N  0.117910631000996f, 0.322502255439758f, 0.118158094584942f,
N    0.322795242071152f,
N  0.118405789136887f, 0.323088020086288f, 0.118653707206249f,
N    0.323380589485168f,
N  0.118901848793030f, 0.323672980070114f, 0.119150213897228f,
N    0.323965191841125f,
N  0.119398809969425f, 0.324257194995880f, 0.119647622108459f,
N    0.324549019336700f,
N  0.119896657764912f, 0.324840664863586f, 0.120145916938782f,
N    0.325132101774216f,
N  0.120395407080650f, 0.325423330068588f, 0.120645113289356f,
N    0.325714409351349f,
N  0.120895043015480f, 0.326005280017853f, 0.121145196259022f,
N    0.326295942068100f,
N  0.121395580470562f, 0.326586425304413f, 0.121646173298359f,
N    0.326876699924469f,
N  0.121896997094154f, 0.327166795730591f, 0.122148044407368f,
N    0.327456712722778f,
N  0.122399315237999f, 0.327746421098709f, 0.122650802135468f,
N    0.328035950660706f,
N  0.122902512550354f, 0.328325271606445f, 0.123154446482658f,
N    0.328614413738251f,
N  0.123406603932381f, 0.328903347253799f, 0.123658977448940f,
N    0.329192101955414f,
N  0.123911574482918f, 0.329480648040771f, 0.124164395034313f,
N    0.329769015312195f,
N  0.124417431652546f, 0.330057173967361f, 0.124670691788197f,
N    0.330345153808594f,
N  0.124924175441265f, 0.330632925033569f, 0.125177875161171f,
N    0.330920487642288f,
N  0.125431805849075f, 0.331207901239395f, 0.125685945153236f,
N    0.331495076417923f,
N  0.125940307974815f, 0.331782072782516f, 0.126194894313812f,
N    0.332068890333176f,
N  0.126449704170227f, 0.332355499267578f, 0.126704722642899f,
N    0.332641899585724f,
N  0.126959964632988f, 0.332928121089935f, 0.127215430140495f,
N    0.333214133977890f,
N  0.127471104264259f, 0.333499968051910f, 0.127727001905441f,
N    0.333785593509674f,
N  0.127983123064041f, 0.334071010351181f, 0.128239467740059f,
N    0.334356248378754f,
N  0.128496021032333f, 0.334641307592392f, 0.128752797842026f,
N    0.334926128387451f,
N  0.129009798169136f, 0.335210770368576f, 0.129267007112503f,
N    0.335495233535767f,
N  0.129524439573288f, 0.335779488086700f, 0.129782080650330f,
N    0.336063534021378f,
N  0.130039945244789f, 0.336347371339798f, 0.130298033356667f,
N    0.336631029844284f,
N  0.130556344985962f, 0.336914509534836f, 0.130814850330353f,
N    0.337197750806808f,
N  0.131073594093323f, 0.337480813264847f, 0.131332546472549f,
N    0.337763696908951f,
N  0.131591722369194f, 0.338046342134476f, 0.131851106882095f,
N    0.338328808546066f,
N  0.132110700011253f, 0.338611096143723f, 0.132370531558990f,
N    0.338893145322800f,
N  0.132630556821823f, 0.339175015687943f, 0.132890805602074f,
N    0.339456677436829f,
N  0.133151277899742f, 0.339738160371780f, 0.133411958813667f,
N    0.340019434690475f,
N  0.133672863245010f, 0.340300500392914f, 0.133933976292610f,
N    0.340581357479095f,
N  0.134195312857628f, 0.340862035751343f, 0.134456858038902f,
N    0.341142505407333f,
N  0.134718611836433f, 0.341422766447067f, 0.134980589151382f,
N    0.341702848672867f,
N  0.135242775082588f, 0.341982692480087f, 0.135505184531212f,
N    0.342262357473373f,
N  0.135767802596092f, 0.342541843652725f, 0.136030644178391f,
N    0.342821091413498f,
N  0.136293679475784f, 0.343100160360336f, 0.136556953191757f,
N    0.343379020690918f,
N  0.136820420622826f, 0.343657672405243f, 0.137084111571312f,
N    0.343936115503311f,
N  0.137348011136055f, 0.344214379787445f, 0.137612134218216f,
N    0.344492435455322f,
N  0.137876465916634f, 0.344770282506943f, 0.138141006231308f,
N    0.345047920942307f,
N  0.138405755162239f, 0.345325350761414f, 0.138670727610588f,
N    0.345602601766586f,
N  0.138935908675194f, 0.345879614353180f, 0.139201298356056f,
N    0.346156448125839f,
N  0.139466896653175f, 0.346433073282242f, 0.139732718467712f,
N    0.346709519624710f,
N  0.139998748898506f, 0.346985727548599f, 0.140264987945557f,
N    0.347261756658554f,
N  0.140531435608864f, 0.347537547349930f, 0.140798106789589f,
N    0.347813159227371f,
N  0.141064971685410f, 0.348088562488556f, 0.141332060098648f,
N    0.348363757133484f,
N  0.141599357128143f, 0.348638743162155f, 0.141866862773895f,
N    0.348913550376892f,
N  0.142134591937065f, 0.349188119173050f, 0.142402514815331f,
N    0.349462509155273f,
N  0.142670661211014f, 0.349736660718918f, 0.142939001321793f,
N    0.350010633468628f,
N  0.143207564949989f, 0.350284397602081f, 0.143476337194443f,
N    0.350557953119278f,
N  0.143745318055153f, 0.350831300020218f, 0.144014507532120f,
N    0.351104438304901f,
N  0.144283905625343f, 0.351377367973328f, 0.144553512334824f,
N    0.351650089025497f,
N  0.144823327660561f, 0.351922631263733f, 0.145093351602554f,
N    0.352194935083389f,
N  0.145363584160805f, 0.352467030286789f, 0.145634025335312f,
N    0.352738946676254f,
N  0.145904675126076f, 0.353010624647141f, 0.146175548434258f,
N    0.353282123804092f,
N  0.146446615457535f, 0.353553384542465f, 0.146717891097069f,
N    0.353824466466904f,
N  0.146989375352860f, 0.354095309972763f, 0.147261068224907f,
N    0.354365974664688f,
N  0.147532954812050f, 0.354636400938034f, 0.147805064916611f,
N    0.354906648397446f,
N  0.148077383637428f, 0.355176687240601f, 0.148349896073341f,
N    0.355446487665176f,
N  0.148622632026672f, 0.355716109275818f, 0.148895561695099f,
N    0.355985492467880f,
N  0.149168699979782f, 0.356254696846008f, 0.149442046880722f,
N    0.356523662805557f,
N  0.149715602397919f, 0.356792420148849f, 0.149989366531372f,
N    0.357060998678207f,
N  0.150263324379921f, 0.357329338788986f, 0.150537505745888f,
N    0.357597470283508f,
N  0.150811880826950f, 0.357865422964096f, 0.151086464524269f,
N    0.358133137226105f,
N  0.151361241936684f, 0.358400642871857f, 0.151636242866516f,
N    0.358667939901352f,
N  0.151911437511444f, 0.358935028314590f, 0.152186840772629f,
N    0.359201908111572f,
N  0.152462437748909f, 0.359468549489975f, 0.152738258242607f,
N    0.359735012054443f,
N  0.153014272451401f, 0.360001266002655f, 0.153290495276451f,
N    0.360267281532288f,
N  0.153566911816597f, 0.360533088445663f, 0.153843536973000f,
N    0.360798716545105f,
N  0.154120370745659f, 0.361064106225967f, 0.154397398233414f,
N    0.361329287290573f,
N  0.154674649238586f, 0.361594229936600f, 0.154952079057693f,
N    0.361858993768692f,
N  0.155229732394218f, 0.362123548984528f, 0.155507579445839f,
N    0.362387865781784f,
N  0.155785620212555f, 0.362651973962784f, 0.156063869595528f,
N    0.362915903329849f,
N  0.156342327594757f, 0.363179564476013f, 0.156620979309082f,
N    0.363443046808243f,
N  0.156899839639664f, 0.363706320524216f, 0.157178908586502f,
N    0.363969355821610f,
N  0.157458171248436f, 0.364232182502747f, 0.157737627625465f,
N    0.364494800567627f,
N  0.158017292618752f, 0.364757210016251f, 0.158297166228294f,
N    0.365019410848618f,
N  0.158577233552933f, 0.365281373262405f, 0.158857494592667f,
N    0.365543156862259f,
N  0.159137964248657f, 0.365804702043533f, 0.159418627619743f,
N    0.366066008806229f,
N  0.159699499607086f, 0.366327136754990f, 0.159980565309525f,
N    0.366588026285172f,
N  0.160261839628220f, 0.366848707199097f, 0.160543307662010f,
N    0.367109179496765f,
N  0.160824984312058f, 0.367369443178177f, 0.161106839776039f,
N    0.367629468441010f,
N  0.161388918757439f, 0.367889285087585f, 0.161671176552773f,
N    0.368148893117905f,
N  0.161953642964363f, 0.368408292531967f, 0.162236317992210f,
N    0.368667453527451f,
N  0.162519171833992f, 0.368926405906677f, 0.162802234292030f,
N    0.369185149669647f,
N  0.163085505366325f, 0.369443655014038f, 0.163368955254555f,
N    0.369701951742172f,
N  0.163652613759041f, 0.369960039854050f, 0.163936465978622f,
N    0.370217919349670f,
N  0.164220526814461f, 0.370475560426712f, 0.164504766464233f,
N    0.370732992887497f,
N  0.164789214730263f, 0.370990216732025f, 0.165073871612549f,
N    0.371247202157974f,
N  0.165358707308769f, 0.371503978967667f, 0.165643751621246f,
N    0.371760547161102f,
N  0.165928974747658f, 0.372016876935959f, 0.166214406490326f,
N    0.372272998094559f,
N  0.166500031948090f, 0.372528880834579f, 0.166785866022110f,
N    0.372784584760666f,
N  0.167071878910065f, 0.373040050268173f, 0.167358100414276f,
N    0.373295277357101f,
N  0.167644515633583f, 0.373550295829773f, 0.167931124567986f,
N    0.373805105686188f,
N  0.168217927217484f, 0.374059677124023f, 0.168504923582077f,
N    0.374314039945602f,
N  0.168792113661766f, 0.374568194150925f, 0.169079497456551f,
N    0.374822109937668f,
N  0.169367074966431f, 0.375075817108154f, 0.169654861092567f,
N    0.375329315662384f,
N  0.169942826032639f, 0.375582575798035f, 0.170230999588966f,
N    0.375835597515106f,
N  0.170519351959229f, 0.376088410615921f, 0.170807912945747f,
N    0.376341015100479f,
N  0.171096652746201f, 0.376593410968781f, 0.171385586261749f,
N    0.376845568418503f,
N  0.171674728393555f, 0.377097487449646f, 0.171964049339294f,
N    0.377349197864532f,
N  0.172253578901291f, 0.377600699663162f, 0.172543287277222f,
N    0.377851963043213f,
N  0.172833189368248f, 0.378102988004684f, 0.173123285174370f,
N    0.378353834152222f,
N  0.173413574695587f, 0.378604412078857f, 0.173704057931900f,
N    0.378854811191559f,
N  0.173994734883308f, 0.379104942083359f, 0.174285605549812f,
N    0.379354894161224f,
N  0.174576655030251f, 0.379604607820511f, 0.174867913126946f,
N    0.379854083061218f,
N  0.175159350037575f, 0.380103349685669f, 0.175450980663300f,
N    0.380352377891541f,
N  0.175742805004120f, 0.380601197481155f, 0.176034808158875f,
N    0.380849778652191f,
N  0.176327019929886f, 0.381098151206970f, 0.176619410514832f,
N    0.381346285343170f,
N  0.176911994814873f, 0.381594210863113f, 0.177204772830009f,
N    0.381841897964478f,
N  0.177497729659081f, 0.382089376449585f, 0.177790880203247f,
N    0.382336616516113f,
N  0.178084224462509f, 0.382583618164063f, 0.178377762436867f,
N    0.382830440998077f,
N  0.178671479225159f, 0.383076995611191f, 0.178965389728546f,
N    0.383323341608047f,
N  0.179259493947029f, 0.383569449186325f, 0.179553776979446f,
N    0.383815348148346f,
N  0.179848253726959f, 0.384061008691788f, 0.180142924189568f,
N    0.384306460618973f,
N  0.180437773466110f, 0.384551674127579f, 0.180732816457748f,
N    0.384796649217606f,
N  0.181028053164482f, 0.385041415691376f, 0.181323468685150f,
N    0.385285943746567f,
N  0.181619063019753f, 0.385530263185501f, 0.181914865970612f,
N    0.385774344205856f,
N  0.182210832834244f, 0.386018186807632f, 0.182507008314133f,
N    0.386261820793152f,
N  0.182803362607956f, 0.386505216360092f, 0.183099895715714f,
N    0.386748403310776f,
N  0.183396622538567f, 0.386991351842880f, 0.183693528175354f,
N    0.387234061956406f,
N  0.183990627527237f, 0.387476563453674f, 0.184287920594215f,
N    0.387718826532364f,
N  0.184585392475128f, 0.387960851192474f, 0.184883043169975f,
N    0.388202667236328f,
N  0.185180887579918f, 0.388444244861603f, 0.185478910803795f,
N    0.388685584068298f,
N  0.185777112841606f, 0.388926714658737f, 0.186075508594513f,
N    0.389167606830597f,
N  0.186374098062515f, 0.389408260583878f, 0.186672851443291f,
N    0.389648675918579f,
N  0.186971798539162f, 0.389888882637024f, 0.187270939350128f,
N    0.390128880739212f,
N  0.187570258975029f, 0.390368610620499f, 0.187869757413864f,
N    0.390608131885529f,
N  0.188169434666634f, 0.390847414731979f, 0.188469305634499f,
N    0.391086459159851f,
N  0.188769355416298f, 0.391325294971466f, 0.189069598913193f,
N    0.391563892364502f,
N  0.189370006322861f, 0.391802251338959f, 0.189670607447624f,
N    0.392040401697159f,
N  0.189971387386322f, 0.392278283834457f, 0.190272361040115f,
N    0.392515957355499f,
N  0.190573498606682f, 0.392753422260284f, 0.190874829888344f,
N    0.392990618944168f,
N  0.191176339983940f, 0.393227607011795f, 0.191478043794632f,
N    0.393464356660843f,
N  0.191779911518097f, 0.393700867891312f, 0.192081972956657f,
N    0.393937170505524f,
N  0.192384198307991f, 0.394173204898834f, 0.192686617374420f,
N    0.394409030675888f,
N  0.192989215254784f, 0.394644618034363f, 0.193292006850243f,
N    0.394879996776581f,
N  0.193594962358475f, 0.395115107297897f, 0.193898096680641f,
N    0.395350009202957f,
N  0.194201424717903f, 0.395584672689438f, 0.194504916667938f,
N    0.395819097757339f,
N  0.194808602333069f, 0.396053284406662f, 0.195112451910973f,
N    0.396287262439728f,
N  0.195416495203972f, 0.396520972251892f, 0.195720717310905f,
N    0.396754473447800f,
N  0.196025103330612f, 0.396987736225128f, 0.196329683065414f,
N    0.397220760583878f,
N  0.196634441614151f, 0.397453576326370f, 0.196939364075661f,
N    0.397686123847961f,
N  0.197244480252266f, 0.397918462753296f, 0.197549775242805f,
N    0.398150533437729f,
N  0.197855234146118f, 0.398382395505905f, 0.198160871863365f,
N    0.398614019155502f,
N  0.198466703295708f, 0.398845434188843f, 0.198772698640823f,
N    0.399076581001282f,
N  0.199078872799873f, 0.399307489395142f, 0.199385225772858f,
N    0.399538189172745f,
N  0.199691757559776f, 0.399768620729446f, 0.199998468160629f,
N    0.399998843669891f,
N  0.200305357575417f, 0.400228828191757f, 0.200612410902977f,
N    0.400458574295044f,
N  0.200919643044472f, 0.400688081979752f, 0.201227053999901f,
N    0.400917351245880f,
N  0.201534643769264f, 0.401146411895752f, 0.201842412352562f,
N    0.401375204324722f,
N  0.202150344848633f, 0.401603758335114f, 0.202458456158638f,
N    0.401832103729248f,
N  0.202766746282578f, 0.402060180902481f, 0.203075215220451f,
N    0.402288049459457f,
N  0.203383848071098f, 0.402515679597855f, 0.203692659735680f,
N    0.402743041515350f,
N  0.204001650214195f, 0.402970194816589f, 0.204310819506645f,
N    0.403197109699249f,
N  0.204620152711868f, 0.403423786163330f, 0.204929664731026f,
N    0.403650224208832f,
N  0.205239340662956f, 0.403876423835754f, 0.205549195408821f,
N    0.404102355241776f,
N  0.205859228968620f, 0.404328078031540f, 0.206169426441193f,
N    0.404553562402725f,
N  0.206479802727699f, 0.404778808355331f, 0.206790357828140f,
N    0.405003815889359f,
N  0.207101076841354f, 0.405228585004807f, 0.207411959767342f,
N    0.405453115701675f,
N  0.207723021507263f, 0.405677437782288f, 0.208034262061119f,
N    0.405901491641998f,
N  0.208345666527748f, 0.406125307083130f, 0.208657249808311f,
N    0.406348884105682f,
N  0.208969011902809f, 0.406572192907333f, 0.209280923008919f,
N    0.406795293092728f,
N  0.209593027830124f, 0.407018154859543f, 0.209905281662941f,
N    0.407240778207779f,
N  0.210217714309692f, 0.407463163137436f, 0.210530325770378f,
N    0.407685309648514f,
N  0.210843101143837f, 0.407907217741013f, 0.211156040430069f,
N    0.408128857612610f,
N  0.211469158530235f, 0.408350288867950f, 0.211782455444336f,
N    0.408571451902390f,
N  0.212095901370049f, 0.408792406320572f, 0.212409526109695f,
N    0.409013092517853f,
N  0.212723329663277f, 0.409233570098877f, 0.213037282228470f,
N    0.409453779459000f,
N  0.213351413607597f, 0.409673750400543f, 0.213665723800659f,
N    0.409893482923508f,
N  0.213980183005333f, 0.410112977027893f, 0.214294821023941f,
N    0.410332232713699f,
N  0.214609622955322f, 0.410551249980927f, 0.214924603700638f,
N    0.410770028829575f,
N  0.215239733457565f, 0.410988569259644f, 0.215555042028427f,
N    0.411206841468811f,
N  0.215870529413223f, 0.411424905061722f, 0.216186165809631f,
N    0.411642700433731f,
N  0.216501981019974f, 0.411860257387161f, 0.216817945241928f,
N    0.412077575922012f,
N  0.217134088277817f, 0.412294656038284f, 0.217450410127640f,
N    0.412511497735977f,
N  0.217766880989075f, 0.412728071212769f, 0.218083515763283f,
N    0.412944436073303f,
N  0.218400329351425f, 0.413160532712936f, 0.218717306852341f,
N    0.413376390933990f,
N  0.219034433364868f, 0.413592010736465f, 0.219351738691330f,
N    0.413807392120361f,
N  0.219669207930565f, 0.414022535085678f, 0.219986841082573f,
N    0.414237409830093f,
N  0.220304638147354f, 0.414452046155930f, 0.220622614026070f,
N    0.414666473865509f,
N  0.220940738916397f, 0.414880603551865f, 0.221259027719498f,
N    0.415094524621964f,
N  0.221577480435371f, 0.415308207273483f, 0.221896097064018f,
N    0.415521621704102f,
N  0.222214877605438f, 0.415734797716141f, 0.222533836960793f,
N    0.415947735309601f,
N  0.222852945327759f, 0.416160434484482f, 0.223172217607498f,
N    0.416372895240784f,
N  0.223491653800011f, 0.416585087776184f, 0.223811239004135f,
N    0.416797041893005f,
N  0.224131003022194f, 0.417008757591248f, 0.224450930953026f,
N    0.417220205068588f,
N  0.224771007895470f, 0.417431443929672f, 0.225091263651848f,
N    0.417642414569855f,
N  0.225411668419838f, 0.417853146791458f, 0.225732237100601f,
N    0.418063640594482f,
N  0.226052969694138f, 0.418273866176605f, 0.226373866200447f,
N    0.418483853340149f,
N  0.226694911718369f, 0.418693602085114f, 0.227016136050224f,
N    0.418903112411499f,
N  0.227337509393692f, 0.419112354516983f, 0.227659046649933f,
N    0.419321358203888f,
N  0.227980732917786f, 0.419530123472214f, 0.228302597999573f,
N    0.419738620519638f,
N  0.228624612092972f, 0.419946908950806f, 0.228946775197983f,
N    0.420154929161072f,
N  0.229269117116928f, 0.420362681150436f, 0.229591608047485f,
N    0.420570224523544f,
N  0.229914262890816f, 0.420777499675751f, 0.230237081646919f,
N    0.420984506607056f,
N  0.230560049414635f, 0.421191304922104f, 0.230883181095123f,
N    0.421397835016251f,
N  0.231206461787224f, 0.421604126691818f, 0.231529906392097f,
N    0.421810150146484f,
N  0.231853514909744f, 0.422015935182571f, 0.232177272439003f,
N    0.422221481800079f,
N  0.232501193881035f, 0.422426789999008f, 0.232825264334679f,
N    0.422631829977036f,
N  0.233149498701096f, 0.422836631536484f, 0.233473882079124f,
N    0.423041164875031f,
N  0.233798429369926f, 0.423245459794998f, 0.234123140573502f,
N    0.423449516296387f,
N  0.234448000788689f, 0.423653304576874f, 0.234773010015488f,
N    0.423856884241104f,
N  0.235098183155060f, 0.424060165882111f, 0.235423520207405f,
N    0.424263238906860f,
N  0.235749006271362f, 0.424466013908386f, 0.236074641346931f,
N    0.424668580293655f,
N  0.236400425434113f, 0.424870878458023f, 0.236726388335228f,
N    0.425072938203812f,
N  0.237052485346794f, 0.425274729728699f, 0.237378746271133f,
N    0.425476282835007f,
N  0.237705156207085f, 0.425677597522736f, 0.238031730055809f,
N    0.425878643989563f,
N  0.238358452916145f, 0.426079452037811f, 0.238685324788094f,
N    0.426279991865158f,
N  0.239012360572815f, 0.426480293273926f, 0.239339530467987f,
N    0.426680356264114f,
N  0.239666879177094f, 0.426880151033401f, 0.239994361996651f,
N    0.427079707384110f,
N  0.240322008728981f, 0.427278995513916f, 0.240649804472923f,
N    0.427478045225143f,
N  0.240977749228477f, 0.427676826715469f, 0.241305842995644f,
N    0.427875369787216f,
N  0.241634100675583f, 0.428073674440384f, 0.241962507367134f,
N    0.428271710872650f,
N  0.242291063070297f, 0.428469479084015f, 0.242619767785072f,
N    0.428667008876801f,
N  0.242948621511459f, 0.428864300251007f, 0.243277639150620f,
N    0.429061323404312f,
N  0.243606805801392f, 0.429258108139038f, 0.243936106562614f,
N    0.429454624652863f,
N  0.244265571236610f, 0.429650902748108f, 0.244595184922218f,
N    0.429846942424774f,
N  0.244924947619438f, 0.430042684078217f, 0.245254859328270f,
N    0.430238217115402f,
N  0.245584934949875f, 0.430433481931686f, 0.245915144681931f,
N    0.430628478527069f,
N  0.246245503425598f, 0.430823236703873f, 0.246576011180878f,
N    0.431017726659775f,
N  0.246906682848930f, 0.431211978197098f, 0.247237488627434f,
N    0.431405961513519f,
N  0.247568443417549f, 0.431599706411362f, 0.247899547219276f,
N    0.431793183088303f,
N  0.248230814933777f, 0.431986421346664f, 0.248562216758728f,
N    0.432179391384125f,
N  0.248893767595291f, 0.432372123003006f, 0.249225467443466f,
N    0.432564586400986f,
N  0.249557301402092f, 0.432756811380386f, 0.249889299273491f,
N    0.432948768138886f,
N  0.250221431255341f, 0.433140486478806f, 0.250553727149963f,
N    0.433331936597824f,
N  0.250886172056198f, 0.433523118495941f, 0.251218736171722f,
N    0.433714061975479f,
N  0.251551479101181f, 0.433904737234116f, 0.251884341239929f,
N    0.434095174074173f,
N  0.252217382192612f, 0.434285342693329f, 0.252550542354584f,
N    0.434475272893906f,
N  0.252883851528168f, 0.434664934873581f, 0.253217309713364f,
N    0.434854328632355f,
N  0.253550916910172f, 0.435043483972549f, 0.253884643316269f,
N    0.435232400894165f,
N  0.254218548536301f, 0.435421019792557f, 0.254552572965622f,
N    0.435609430074692f,
N  0.254886746406555f, 0.435797542333603f, 0.255221068859100f,
N    0.435985416173935f,
N  0.255555540323257f, 0.436173021793365f, 0.255890160799026f,
N    0.436360388994217f,
N  0.256224930286407f, 0.436547487974167f, 0.256559818983078f,
N    0.436734348535538f,
N  0.256894856691360f, 0.436920911073685f, 0.257230043411255f,
N    0.437107264995575f,
N  0.257565379142761f, 0.437293320894241f, 0.257900834083557f,
N    0.437479138374329f,
N  0.258236467838287f, 0.437664687633514f, 0.258572220802307f,
N    0.437849998474121f,
N  0.258908122777939f, 0.438035041093826f, 0.259244143962860f,
N    0.438219845294952f,
N  0.259580343961716f, 0.438404351472855f, 0.259916663169861f,
N    0.438588619232178f,
N  0.260253131389618f, 0.438772648572922f, 0.260589718818665f,
N    0.438956409692764f,
N  0.260926485061646f, 0.439139902591705f, 0.261263370513916f,
N    0.439323127269745f,
N  0.261600375175476f, 0.439506113529205f, 0.261937558650970f,
N    0.439688831567764f,
N  0.262274861335754f, 0.439871311187744f, 0.262612313032150f,
N    0.440053492784500f,
N  0.262949883937836f, 0.440235435962677f, 0.263287603855133f,
N    0.440417140722275f,
N  0.263625472784042f, 0.440598547458649f, 0.263963490724564f,
N    0.440779715776443f,
N  0.264301627874374f, 0.440960645675659f, 0.264639914035797f,
N    0.441141277551651f,
N  0.264978319406509f, 0.441321671009064f, 0.265316903591156f,
N    0.441501796245575f,
N  0.265655577182770f, 0.441681683063507f, 0.265994429588318f,
N    0.441861271858215f,
N  0.266333401203156f, 0.442040622234344f, 0.266672492027283f,
N    0.442219734191895f,
N  0.267011761665344f, 0.442398548126221f, 0.267351150512695f,
N    0.442577123641968f,
N  0.267690658569336f, 0.442755430936813f, 0.268030315637589f,
N    0.442933470010757f,
N  0.268370121717453f, 0.443111270666122f, 0.268710047006607f,
N    0.443288803100586f,
N  0.269050091505051f, 0.443466067314148f, 0.269390314817429f,
N    0.443643063306808f,
N  0.269730657339096f, 0.443819820880890f, 0.270071119070053f,
N    0.443996280431747f,
N  0.270411729812622f, 0.444172531366348f, 0.270752459764481f,
N    0.444348484277725f,
N  0.271093338727951f, 0.444524168968201f, 0.271434366703033f,
N    0.444699615240097f,
N  0.271775513887405f, 0.444874793291092f, 0.272116780281067f,
N    0.445049703121185f,
N  0.272458195686340f, 0.445224374532700f, 0.272799760103226f,
N    0.445398747920990f,
N  0.273141443729401f, 0.445572882890701f, 0.273483246564865f,
N    0.445746749639511f,
N  0.273825198411942f, 0.445920348167419f, 0.274167299270630f,
N    0.446093708276749f,
N  0.274509519338608f, 0.446266770362854f, 0.274851858615875f,
N    0.446439594030380f,
N  0.275194346904755f, 0.446612149477005f, 0.275536954402924f,
N    0.446784436702728f,
N  0.275879681110382f, 0.446956485509872f, 0.276222556829453f,
N    0.447128236293793f,
N  0.276565581560135f, 0.447299748659134f, 0.276908725500107f,
N    0.447470992803574f,
N  0.277251988649368f, 0.447641968727112f, 0.277595400810242f,
N    0.447812676429749f,
N  0.277938932180405f, 0.447983115911484f, 0.278282582759857f,
N    0.448153316974640f,
N  0.278626382350922f, 0.448323249816895f, 0.278970301151276f,
N    0.448492884635925f,
N  0.279314368963242f, 0.448662281036377f, 0.279658555984497f,
N    0.448831409215927f,
N  0.280002862215042f, 0.449000298976898f, 0.280347317457199f,
N    0.449168890714645f,
N  0.280691891908646f, 0.449337244033813f, 0.281036585569382f,
N    0.449505299329758f,
N  0.281381398439407f, 0.449673116207123f, 0.281726360321045f,
N    0.449840664863586f,
N  0.282071471214294f, 0.450007945299149f, 0.282416671514511f,
N    0.450174957513809f,
N  0.282762020826340f, 0.450341701507568f, 0.283107489347458f,
N    0.450508207082748f,
N  0.283453077077866f, 0.450674414634705f, 0.283798813819885f,
N    0.450840383768082f,
N  0.284144669771194f, 0.451006084680557f, 0.284490644931793f,
N    0.451171487569809f,
N  0.284836769104004f, 0.451336652040482f, 0.285182982683182f,
N    0.451501548290253f,
N  0.285529345273972f, 0.451666176319122f, 0.285875827074051f,
N    0.451830536127090f,
N  0.286222457885742f, 0.451994657516479f, 0.286569178104401f,
N    0.452158480882645f,
N  0.286916047334671f, 0.452322036027908f, 0.287263035774231f,
N    0.452485352754593f,
N  0.287610173225403f, 0.452648371458054f, 0.287957400083542f,
N    0.452811151742935f,
N  0.288304775953293f, 0.452973634004593f, 0.288652241230011f,
N    0.453135877847672f,
N  0.288999855518341f, 0.453297853469849f, 0.289347589015961f,
N    0.453459560871124f,
N  0.289695471525192f, 0.453621000051498f, 0.290043443441391f,
N    0.453782171010971f,
N  0.290391564369202f, 0.453943043947220f, 0.290739774703979f,
N    0.454103678464890f,
N  0.291088134050369f, 0.454264044761658f, 0.291436612606049f,
N    0.454424172639847f,
N  0.291785210371017f, 0.454584002494812f, 0.292133957147598f,
N    0.454743564128876f,
N  0.292482793331146f, 0.454902857542038f, 0.292831748723984f,
N    0.455061882734299f,
N  0.293180853128433f, 0.455220639705658f, 0.293530046939850f,
N    0.455379128456116f,
N  0.293879389762878f, 0.455537378787994f, 0.294228851795197f,
N    0.455695331096649f,
N  0.294578403234482f, 0.455853015184402f, 0.294928103685379f,
N    0.456010431051254f,
N  0.295277923345566f, 0.456167578697205f, 0.295627862215042f,
N    0.456324487924576f,
N  0.295977920293808f, 0.456481099128723f, 0.296328097581863f,
N    0.456637442111969f,
N  0.296678394079208f, 0.456793516874313f, 0.297028809785843f,
N    0.456949323415756f,
N  0.297379344701767f, 0.457104891538620f, 0.297729998826981f,
N    0.457260161638260f,
N  0.298080772161484f, 0.457415163516998f, 0.298431664705276f,
N    0.457569897174835f,
N  0.298782676458359f, 0.457724362611771f, 0.299133807420731f,
N    0.457878559827805f,
N  0.299485057592392f, 0.458032488822937f, 0.299836426973343f,
N    0.458186149597168f,
N  0.300187885761261f, 0.458339542150497f, 0.300539493560791f,
N    0.458492636680603f,
N  0.300891220569611f, 0.458645492792130f, 0.301243066787720f,
N    0.458798080682755f,
N  0.301595002412796f, 0.458950400352478f, 0.301947087049484f,
N    0.459102421998978f,
N  0.302299261093140f, 0.459254205226898f, 0.302651554346085f,
N    0.459405690431595f,
N  0.303003966808319f, 0.459556937217712f, 0.303356528282166f,
N    0.459707885980606f,
N  0.303709149360657f, 0.459858566522598f, 0.304061919450760f,
N    0.460008978843689f,
N  0.304414808750153f, 0.460159152746201f, 0.304767817258835f,
N    0.460309028625488f,
N  0.305120915174484f, 0.460458606481552f, 0.305474132299423f,
N    0.460607945919037f,
N  0.305827468633652f, 0.460757017135620f, 0.306180924177170f,
N    0.460905820131302f,
N  0.306534498929977f, 0.461054325103760f, 0.306888192892075f,
N    0.461202591657639f,
N  0.307241976261139f, 0.461350560188293f, 0.307595878839493f,
N    0.461498260498047f,
N  0.307949900627136f, 0.461645722389221f, 0.308304041624069f,
N    0.461792886257172f,
N  0.308658272027969f, 0.461939752101898f, 0.309012651443481f,
N    0.462086379528046f,
N  0.309367120265961f, 0.462232738733292f, 0.309721708297729f,
N    0.462378799915314f,
N  0.310076385736465f, 0.462524622678757f, 0.310431212186813f,
N    0.462670147418976f,
N  0.310786128044128f, 0.462815403938293f, 0.311141163110733f,
N    0.462960392236710f,
N  0.311496287584305f, 0.463105112314224f, 0.311851561069489f,
N    0.463249564170837f,
N  0.312206923961639f, 0.463393747806549f, 0.312562376260757f,
N    0.463537633419037f,
N  0.312917977571487f, 0.463681250810623f, 0.313273668289185f,
N    0.463824629783630f,
N  0.313629478216171f, 0.463967710733414f, 0.313985377550125f,
N    0.464110493659973f,
N  0.314341396093369f, 0.464253038167953f, 0.314697533845901f,
N    0.464395314455032f,
N  0.315053790807724f, 0.464537292718887f, 0.315410137176514f,
N    0.464679002761841f,
N  0.315766572952271f, 0.464820444583893f, 0.316123157739639f,
N    0.464961618185043f,
N  0.316479831933975f, 0.465102523565292f, 0.316836595535278f,
N    0.465243130922318f,
N  0.317193508148193f, 0.465383470058441f, 0.317550510168076f,
N    0.465523540973663f,
N  0.317907601594925f, 0.465663343667984f, 0.318264812231064f,
N    0.465802878141403f,
N  0.318622142076492f, 0.465942144393921f, 0.318979561328888f,
N    0.466081112623215f,
N  0.319337099790573f, 0.466219812631607f, 0.319694727659225f,
N    0.466358244419098f,
N  0.320052474737167f, 0.466496407985687f, 0.320410341024399f,
N    0.466634273529053f,
N  0.320768296718597f, 0.466771900653839f, 0.321126341819763f,
N    0.466909229755402f,
N  0.321484506130219f, 0.467046260833740f, 0.321842789649963f,
N    0.467183053493500f,
N  0.322201162576675f, 0.467319577932358f, 0.322559654712677f,
N    0.467455804347992f,
N  0.322918236255646f, 0.467591762542725f, 0.323276937007904f,
N    0.467727422714233f,
N  0.323635727167130f, 0.467862844467163f, 0.323994606733322f,
N    0.467997968196869f,
N  0.324353635311127f, 0.468132823705673f, 0.324712723493576f,
N    0.468267410993576f,
N  0.325071930885315f, 0.468401730060577f, 0.325431257486343f,
N    0.468535751104355f,
N  0.325790673494339f, 0.468669503927231f, 0.326150178909302f,
N    0.468802988529205f,
N  0.326509803533554f, 0.468936175107956f, 0.326869517564774f,
N    0.469069123268127f,
N  0.327229350805283f, 0.469201773405075f, 0.327589273452759f,
N    0.469334155321121f,
N  0.327949285507202f, 0.469466239213943f, 0.328309416770935f,
N    0.469598054885864f,
N  0.328669637441635f, 0.469729602336884f, 0.329029977321625f,
N    0.469860881567001f,
N  0.329390406608582f, 0.469991862773895f, 0.329750925302505f,
N    0.470122605562210f,
N  0.330111563205719f, 0.470253020524979f, 0.330472290515900f,
N    0.470383197069168f,
N  0.330833107233047f, 0.470513075590134f, 0.331194043159485f,
N    0.470642685890198f,
N  0.331555068492889f, 0.470772027969360f, 0.331916213035584f,
N    0.470901101827621f,
N  0.332277417182922f, 0.471029877662659f, 0.332638740539551f,
N    0.471158385276794f,
N  0.333000183105469f, 0.471286594867706f, 0.333361685276031f,
N    0.471414536237717f,
N  0.333723306655884f, 0.471542209386826f, 0.334085017442703f,
N    0.471669614315033f,
N  0.334446847438812f, 0.471796721220016f, 0.334808766841888f,
N    0.471923559904099f,
N  0.335170775651932f, 0.472050130367279f, 0.335532873868942f,
N    0.472176402807236f,
N  0.335895091295242f, 0.472302407026291f, 0.336257368326187f,
N    0.472428143024445f,
N  0.336619764566422f, 0.472553610801697f, 0.336982280015945f,
N    0.472678780555725f,
N  0.337344855070114f, 0.472803652286530f, 0.337707549333572f,
N    0.472928285598755f,
N  0.338070303201675f, 0.473052620887756f, 0.338433176279068f,
N    0.473176687955856f,
N  0.338796168565750f, 0.473300457000732f, 0.339159220457077f,
N    0.473423957824707f,
N  0.339522391557693f, 0.473547190427780f, 0.339885622262955f,
N    0.473670125007629f,
N  0.340248972177505f, 0.473792791366577f, 0.340612411499023f,
N    0.473915189504623f,
N  0.340975970029831f, 0.474037289619446f, 0.341339588165283f,
N    0.474159121513367f,
N  0.341703325510025f, 0.474280685186386f, 0.342067122459412f,
N    0.474401950836182f,
N  0.342431038618088f, 0.474522948265076f, 0.342795044183731f,
N    0.474643647670746f,
N  0.343159139156342f, 0.474764078855515f, 0.343523323535919f,
N    0.474884241819382f,
N  0.343887597322464f, 0.475004136562347f, 0.344251960515976f,
N    0.475123733282089f,
N  0.344616413116455f, 0.475243031978607f, 0.344980984926224f,
N    0.475362062454224f,
N  0.345345616340637f, 0.475480824708939f, 0.345710366964340f,
N    0.475599318742752f,
N  0.346075177192688f, 0.475717514753342f, 0.346440106630325f,
N    0.475835442543030f,
N  0.346805095672607f, 0.475953072309494f, 0.347170203924179f,
N    0.476070433855057f,
N  0.347535371780396f, 0.476187497377396f, 0.347900658845901f,
N    0.476304292678833f,
N  0.348266035318375f, 0.476420819759369f, 0.348631471395493f,
N    0.476537048816681f,
N  0.348997026681900f, 0.476653009653091f, 0.349362671375275f,
N    0.476768702268600f,
N  0.349728375673294f, 0.476884096860886f, 0.350094199180603f,
N    0.476999223232269f,
N  0.350460082292557f, 0.477114051580429f, 0.350826084613800f,
N    0.477228611707687f,
N  0.351192146539688f, 0.477342873811722f, 0.351558297872543f,
N    0.477456867694855f,
N  0.351924568414688f, 0.477570593357086f, 0.352290898561478f,
N    0.477684020996094f,
N  0.352657318115234f, 0.477797180414200f, 0.353023827075958f,
N    0.477910041809082f,
N  0.353390425443649f, 0.478022634983063f, 0.353757113218308f,
N    0.478134930133820f,
N  0.354123860597610f, 0.478246957063675f, 0.354490727186203f,
N    0.478358715772629f,
N  0.354857653379440f, 0.478470176458359f, 0.355224698781967f,
N    0.478581339120865f,
N  0.355591803789139f, 0.478692263364792f, 0.355958998203278f,
N    0.478802859783173f,
N  0.356326282024384f, 0.478913217782974f, 0.356693625450134f,
N    0.479023247957230f,
N  0.357061088085175f, 0.479133039712906f, 0.357428610324860f,
N    0.479242533445358f,
N  0.357796221971512f, 0.479351729154587f, 0.358163923025131f,
N    0.479460656642914f,
N  0.358531713485718f, 0.479569315910339f, 0.358899593353271f,
N    0.479677677154541f,
N  0.359267532825470f, 0.479785770177841f, 0.359635561704636f,
N    0.479893565177917f,
N  0.360003679990768f, 0.480001062154770f, 0.360371887683868f,
N    0.480108320713043f,
N  0.360740154981613f, 0.480215251445770f, 0.361108511686325f,
N    0.480321943759918f,
N  0.361476957798004f, 0.480428308248520f, 0.361845493316650f,
N    0.480534434318542f,
N  0.362214088439941f, 0.480640232563019f, 0.362582772970200f,
N    0.480745792388916f,
N  0.362951546907425f, 0.480851024389267f, 0.363320380449295f,
N    0.480956017971039f,
N  0.363689333200455f, 0.481060713529587f, 0.364058345556259f,
N    0.481165111064911f,
N  0.364427417516708f, 0.481269240379334f, 0.364796578884125f,
N    0.481373071670532f,
N  0.365165829658508f, 0.481476634740829f, 0.365535169839859f,
N    0.481579899787903f,
N  0.365904569625854f, 0.481682896614075f, 0.366274058818817f,
N    0.481785595417023f,
N  0.366643607616425f, 0.481888025999069f, 0.367013275623322f,
N    0.481990188360214f,
N  0.367382973432541f, 0.482092022895813f, 0.367752790451050f,
N    0.482193619012833f,
N  0.368122667074203f, 0.482294887304306f, 0.368492603302002f,
N    0.482395917177200f,
N  0.368862658739090f, 0.482496619224548f, 0.369232743978500f,
N    0.482597053050995f,
N  0.369602948427200f, 0.482697218656540f, 0.369973212480545f,
N    0.482797086238861f,
N  0.370343536138535f, 0.482896685600281f, 0.370713949203491f,
N    0.482995986938477f,
N  0.371084451675415f, 0.483094990253448f, 0.371455013751984f,
N    0.483193725347519f,
N  0.371825665235519f, 0.483292192220688f, 0.372196376323700f,
N    0.483390361070633f,
N  0.372567176818848f, 0.483488231897354f, 0.372938036918640f,
N    0.483585834503174f,
N  0.373308986425400f, 0.483683139085770f, 0.373679995536804f,
N    0.483780175447464f,
N  0.374051094055176f, 0.483876913785934f, 0.374422252178192f,
N    0.483973383903503f,
N  0.374793499708176f, 0.484069555997849f, 0.375164806842804f,
N    0.484165430068970f,
N  0.375536203384399f, 0.484261035919189f, 0.375907659530640f,
N    0.484356373548508f,
N  0.376279205083847f, 0.484451413154602f, 0.376650810241699f,
N    0.484546154737473f,
N  0.377022475004196f, 0.484640628099442f, 0.377394229173660f,
N    0.484734803438187f,
N  0.377766042947769f, 0.484828680753708f, 0.378137946128845f,
N    0.484922289848328f,
N  0.378509908914566f, 0.485015630722046f, 0.378881961107254f,
N    0.485108673572540f,
N  0.379254043102264f, 0.485201418399811f, 0.379626244306564f,
N    0.485293895006180f,
N  0.379998475313187f, 0.485386073589325f, 0.380370795726776f,
N    0.485477954149246f,
N  0.380743205547333f, 0.485569566488266f, 0.381115674972534f,
N    0.485660910606384f,
N  0.381488204002380f, 0.485751956701279f, 0.381860792636871f,
N    0.485842704772949f,
N  0.382233470678329f, 0.485933154821396f, 0.382606208324432f,
N    0.486023366451263f,
N  0.382979035377502f, 0.486113250255585f, 0.383351892232895f,
N    0.486202865839005f,
N  0.383724838495255f, 0.486292183399200f, 0.384097874164581f,
N    0.486381232738495f,
N  0.384470939636230f, 0.486469984054565f, 0.384844094514847f,
N    0.486558437347412f,
N  0.385217308998108f, 0.486646622419357f, 0.385590612888336f,
N    0.486734509468079f,
N  0.385963946580887f, 0.486822128295898f, 0.386337369680405f,
N    0.486909449100494f,
N  0.386710882186890f, 0.486996471881866f, 0.387084424495697f,
N    0.487083226442337f,
N  0.387458056211472f, 0.487169682979584f, 0.387831717729568f,
N    0.487255871295929f,
N  0.388205498456955f, 0.487341761589050f, 0.388579308986664f,
N    0.487427353858948f,
N  0.388953179121017f, 0.487512677907944f, 0.389327138662338f,
N    0.487597703933716f,
N  0.389701157808304f, 0.487682431936264f, 0.390075236558914f,
N    0.487766891717911f,
N  0.390449374914169f, 0.487851053476334f, 0.390823602676392f,
N    0.487934947013855f,
N  0.391197860240936f, 0.488018542528152f, 0.391572207212448f,
N    0.488101840019226f,
N  0.391946613788605f, 0.488184869289398f, 0.392321079969406f,
N    0.488267600536346f,
N  0.392695605754852f, 0.488350033760071f, 0.393070191144943f,
N    0.488432198762894f,
N  0.393444836139679f, 0.488514065742493f, 0.393819570541382f,
N    0.488595664501190f,
N  0.394194334745407f, 0.488676935434341f, 0.394569188356400f,
N    0.488757967948914f,
N  0.394944071769714f, 0.488838672637939f, 0.395319044589996f,
N    0.488919109106064f,
N  0.395694077014923f, 0.488999247550964f, 0.396069169044495f,
N    0.489079117774963f,
N  0.396444320678711f, 0.489158689975739f, 0.396819531917572f,
N    0.489237964153290f,
N  0.397194802761078f, 0.489316970109940f, 0.397570133209229f,
N    0.489395678043365f,
N  0.397945523262024f, 0.489474087953568f, 0.398320972919464f,
N    0.489552229642868f,
N  0.398696482181549f, 0.489630073308945f, 0.399072051048279f,
N    0.489707618951797f,
N  0.399447679519653f, 0.489784896373749f, 0.399823367595673f,
N    0.489861875772476f,
N  0.400199115276337f, 0.489938557147980f, 0.400574922561646f,
N    0.490014940500259f,
N  0.400950789451599f, 0.490091055631638f, 0.401326715946198f,
N    0.490166902542114f,
N  0.401702702045441f, 0.490242421627045f, 0.402078747749329f,
N    0.490317672491074f,
N  0.402454853057861f, 0.490392625331879f, 0.402830988168716f,
N    0.490467309951782f,
N  0.403207212686539f, 0.490541696548462f, 0.403583467006683f,
N    0.490615785121918f,
N  0.403959810733795f, 0.490689605474472f, 0.404336184263229f,
N    0.490763127803802f,
N  0.404712617397308f, 0.490836352109909f, 0.405089110136032f,
N    0.490909278392792f,
N  0.405465662479401f, 0.490981936454773f, 0.405842274427414f,
N    0.491054296493530f,
N  0.406218945980072f, 0.491126358509064f, 0.406595647335052f,
N    0.491198152303696f,
N  0.406972438097000f, 0.491269648075104f, 0.407349258661270f,
N    0.491340845823288f,
N  0.407726138830185f, 0.491411775350571f, 0.408103078603745f,
N    0.491482406854630f,
N  0.408480048179626f, 0.491552740335464f, 0.408857107162476f,
N    0.491622805595398f,
N  0.409234195947647f, 0.491692543029785f, 0.409611344337463f,
N    0.491762012243271f,
N  0.409988552331924f, 0.491831213235855f, 0.410365819931030f,
N    0.491900116205215f,
N  0.410743117332459f, 0.491968721151352f, 0.411120474338531f,
N    0.492037028074265f,
N  0.411497890949249f, 0.492105036973953f, 0.411875367164612f,
N    0.492172777652740f,
N  0.412252873182297f, 0.492240220308304f, 0.412630438804626f,
N    0.492307394742966f,
N  0.413008064031601f, 0.492374241352081f, 0.413385748863220f,
N    0.492440819740295f,
N  0.413763463497162f, 0.492507129907608f, 0.414141237735748f,
N    0.492573112249374f,
N  0.414519041776657f, 0.492638826370239f, 0.414896935224533f,
N    0.492704242467880f,
N  0.415274858474731f, 0.492769360542297f, 0.415652841329575f,
N    0.492834210395813f,
N  0.416030853986740f, 0.492898762226105f, 0.416408926248550f,
N    0.492963016033173f,
N  0.416787058115005f, 0.493026971817017f, 0.417165219783783f,
N    0.493090659379959f,
N  0.417543441057205f, 0.493154048919678f, 0.417921721935272f,
N    0.493217140436172f,
N  0.418300032615662f, 0.493279963731766f, 0.418678402900696f,
N    0.493342459201813f,
N  0.419056802988052f, 0.493404686450958f, 0.419435262680054f,
N    0.493466645479202f,
N  0.419813781976700f, 0.493528276681900f, 0.420192331075668f,
N    0.493589639663696f,
N  0.420570939779282f, 0.493650704622269f, 0.420949578285217f,
N    0.493711471557617f,
N  0.421328276395798f, 0.493771970272064f, 0.421707004308701f,
N    0.493832170963287f,
N  0.422085791826248f, 0.493892073631287f, 0.422464638948441f,
N    0.493951678276062f,
N  0.422843515872955f, 0.494011014699936f, 0.423222452402115f,
N    0.494070053100586f,
N  0.423601418733597f, 0.494128793478012f, 0.423980414867401f,
N    0.494187235832214f,
N  0.424359470605850f, 0.494245409965515f, 0.424738585948944f,
N    0.494303256273270f,
N  0.425117731094360f, 0.494360834360123f, 0.425496935844421f,
N    0.494418144226074f,
N  0.425876170396805f, 0.494475126266479f, 0.426255434751511f,
N    0.494531840085983f,
N  0.426634758710861f, 0.494588255882263f, 0.427014142274857f,
N    0.494644373655319f,
N  0.427393525838852f, 0.494700223207474f, 0.427772998809814f,
N    0.494755744934082f,
N  0.428152471780777f, 0.494810998439789f, 0.428532034158707f,
N    0.494865983724594f,
N  0.428911596536636f, 0.494920641183853f, 0.429291218519211f,
N    0.494975030422211f,
N  0.429670870304108f, 0.495029091835022f, 0.430050581693649f,
N    0.495082914829254f,
N  0.430430322885513f, 0.495136409997940f, 0.430810123682022f,
N    0.495189607143402f,
N  0.431189924478531f, 0.495242536067963f, 0.431569814682007f,
N    0.495295166969299f,
N  0.431949704885483f, 0.495347499847412f, 0.432329654693604f,
N    0.495399564504623f,
N  0.432709634304047f, 0.495451331138611f, 0.433089673519135f,
N    0.495502769947052f,
N  0.433469742536545f, 0.495553970336914f, 0.433849841356277f,
N    0.495604842901230f,
N  0.434229999780655f, 0.495655417442322f, 0.434610158205032f,
N    0.495705723762512f,
N  0.434990376234055f, 0.495755732059479f, 0.435370653867722f,
N    0.495805442333221f,
N  0.435750931501389f, 0.495854884386063f, 0.436131268739700f,
N    0.495903998613358f,
N  0.436511665582657f, 0.495952844619751f, 0.436892062425613f,
N    0.496001392602921f,
N  0.437272518873215f, 0.496049642562866f, 0.437653005123138f,
N    0.496097624301910f,
N  0.438033521175385f, 0.496145308017731f, 0.438414067029953f,
N    0.496192663908005f,
N  0.438794672489166f, 0.496239781379700f, 0.439175277948380f,
N    0.496286571025848f,
N  0.439555943012238f, 0.496333062648773f, 0.439936667680740f,
N    0.496379286050797f,
N  0.440317392349243f, 0.496425211429596f, 0.440698176622391f,
N    0.496470838785172f,
N  0.441078960895538f, 0.496516168117523f, 0.441459804773331f,
N    0.496561229228973f,
N  0.441840678453445f, 0.496605962514877f, 0.442221581935883f,
N    0.496650427579880f,
N  0.442602545022964f, 0.496694594621658f, 0.442983508110046f,
N    0.496738493442535f,
N  0.443364530801773f, 0.496782064437866f, 0.443745553493500f,
N    0.496825367212296f,
N  0.444126635789871f, 0.496868371963501f, 0.444507747888565f,
N    0.496911078691483f,
N  0.444888889789581f, 0.496953487396240f, 0.445270061492920f,
N    0.496995598077774f,
N  0.445651292800903f, 0.497037440538406f, 0.446032524108887f,
N    0.497078984975815f,
N  0.446413785219193f, 0.497120231389999f, 0.446795076131821f,
N    0.497161179780960f,
N  0.447176426649094f, 0.497201830148697f, 0.447557777166367f,
N    0.497242212295532f,
N  0.447939187288284f, 0.497282296419144f, 0.448320597410202f,
N    0.497322082519531f,
N  0.448702067136765f, 0.497361570596695f, 0.449083566665649f,
N    0.497400760650635f,
N  0.449465066194534f, 0.497439652681351f, 0.449846625328064f,
N    0.497478276491165f,
N  0.450228184461594f, 0.497516602277756f, 0.450609803199768f,
N    0.497554630041122f,
N  0.450991421937943f, 0.497592359781265f, 0.451373100280762f,
N    0.497629791498184f,
N  0.451754778623581f, 0.497666954994202f, 0.452136516571045f,
N    0.497703820466995f,
N  0.452518254518509f, 0.497740387916565f, 0.452900022268295f,
N    0.497776657342911f,
N  0.453281819820404f, 0.497812628746033f, 0.453663676977158f,
N    0.497848302125931f,
N  0.454045534133911f, 0.497883707284927f, 0.454427421092987f,
N    0.497918814420700f,
N  0.454809308052063f, 0.497953623533249f, 0.455191254615784f,
N    0.497988134622574f,
N  0.455573230981827f, 0.498022347688675f, 0.455955207347870f,
N    0.498056292533875f,
N  0.456337243318558f, 0.498089909553528f, 0.456719279289246f,
N    0.498123258352280f,
N  0.457101345062256f, 0.498156309127808f, 0.457483440637589f,
N    0.498189061880112f,
N  0.457865566015244f, 0.498221516609192f, 0.458247691392899f,
N    0.498253703117371f,
N  0.458629876375198f, 0.498285561800003f, 0.459012061357498f,
N    0.498317152261734f,
N  0.459394276142120f, 0.498348444700241f, 0.459776520729065f,
N    0.498379439115524f,
N  0.460158795118332f, 0.498410135507584f, 0.460541069507599f,
N    0.498440563678741f,
N  0.460923373699188f, 0.498470664024353f, 0.461305707693100f,
N    0.498500496149063f,
N  0.461688071489334f, 0.498530030250549f, 0.462070435285568f,
N    0.498559266328812f,
N  0.462452858686447f, 0.498588204383850f, 0.462835282087326f,
N    0.498616874217987f,
N  0.463217705488205f, 0.498645216226578f, 0.463600188493729f,
N    0.498673290014267f,
N  0.463982671499252f, 0.498701065778732f, 0.464365184307098f,
N    0.498728543519974f,
N  0.464747726917267f, 0.498755723237991f, 0.465130269527435f,
N    0.498782604932785f,
N  0.465512841939926f, 0.498809218406677f, 0.465895414352417f,
N    0.498835533857346f,
N  0.466278046369553f, 0.498861521482468f, 0.466660678386688f,
N    0.498887240886688f,
N  0.467043310403824f, 0.498912662267685f, 0.467426002025604f,
N    0.498937815427780f,
N  0.467808693647385f, 0.498962640762329f, 0.468191385269165f,
N    0.498987197875977f,
N  0.468574106693268f, 0.499011427164078f, 0.468956857919693f,
N    0.499035388231277f,
N  0.469339638948441f, 0.499059051275253f, 0.469722419977188f,
N    0.499082416296005f,
N  0.470105201005936f, 0.499105513095856f, 0.470488041639328f,
N    0.499128282070160f,
N  0.470870882272720f, 0.499150782823563f, 0.471253722906113f,
N    0.499172955751419f,
N  0.471636593341827f, 0.499194860458374f, 0.472019463777542f,
N    0.499216467142105f,
N  0.472402364015579f, 0.499237775802612f, 0.472785294055939f,
N    0.499258816242218f,
N  0.473168224096298f, 0.499279528856277f, 0.473551183938980f,
N    0.499299973249435f,
N  0.473934143781662f, 0.499320119619370f, 0.474317133426666f,
N    0.499339967966080f,
N  0.474700123071671f, 0.499359518289566f, 0.475083142518997f,
N    0.499378770589828f,
N  0.475466161966324f, 0.499397724866867f, 0.475849211215973f,
N    0.499416410923004f,
N  0.476232260465622f, 0.499434769153595f, 0.476615339517593f,
N    0.499452859163284f,
N  0.476998418569565f, 0.499470651149750f, 0.477381497621536f,
N    0.499488145112991f,
N  0.477764606475830f, 0.499505341053009f, 0.478147745132446f,
N    0.499522238969803f,
N  0.478530883789063f, 0.499538868665695f, 0.478914022445679f,
N    0.499555170536041f,
N  0.479297190904617f, 0.499571204185486f, 0.479680359363556f,
N    0.499586939811707f,
N  0.480063527822495f, 0.499602377414703f, 0.480446726083755f,
N    0.499617516994476f,
N  0.480829954147339f, 0.499632388353348f, 0.481213152408600f,
N    0.499646931886673f,
N  0.481596380472183f, 0.499661177396774f, 0.481979638338089f,
N    0.499675154685974f,
N  0.482362866401672f, 0.499688833951950f, 0.482746154069901f,
N    0.499702215194702f,
N  0.483129411935806f, 0.499715298414230f, 0.483512699604034f,
N    0.499728083610535f,
N  0.483895987272263f, 0.499740600585938f, 0.484279274940491f,
N    0.499752789735794f,
N  0.484662592411041f, 0.499764710664749f, 0.485045909881592f,
N    0.499776333570480f,
N  0.485429257154465f, 0.499787658452988f, 0.485812574625015f,
N    0.499798685312271f,
N  0.486195921897888f, 0.499809414148331f, 0.486579269170761f,
N    0.499819844961166f,
N  0.486962646245956f, 0.499830007553101f, 0.487346023321152f,
N    0.499839842319489f,
N  0.487729400396347f, 0.499849408864975f, 0.488112777471542f,
N    0.499858677387238f,
N  0.488496154546738f, 0.499867647886276f, 0.488879561424255f,
N    0.499876320362091f,
N  0.489262968301773f, 0.499884694814682f, 0.489646375179291f,
N    0.499892801046371f,
N  0.490029782056808f, 0.499900579452515f, 0.490413218736649f,
N    0.499908089637756f,
N  0.490796625614166f, 0.499915301799774f, 0.491180062294006f,
N    0.499922215938568f,
N  0.491563498973846f, 0.499928832054138f, 0.491946935653687f,
N    0.499935150146484f,
N  0.492330402135849f, 0.499941170215607f, 0.492713838815689f,
N    0.499946922063828f,
N  0.493097305297852f, 0.499952346086502f, 0.493480771780014f,
N    0.499957501888275f,
N  0.493864238262177f, 0.499962359666824f, 0.494247704744339f,
N    0.499966919422150f,
N  0.494631171226501f, 0.499971181154251f, 0.495014637708664f,
N    0.499975144863129f,
N  0.495398133993149f, 0.499978810548782f, 0.495781600475311f,
N    0.499982208013535f,
N  0.496165096759796f, 0.499985307455063f, 0.496548563241959f,
N    0.499988079071045f,
N  0.496932059526443f, 0.499990582466125f, 0.497315555810928f,
N    0.499992787837982f,
N  0.497699022293091f, 0.499994695186615f, 0.498082518577576f,
N    0.499996334314346f,
N  0.498466014862061f, 0.499997645616531f, 0.498849511146545f,
N    0.499998688697815f,
N  0.499233007431030f, 0.499999403953552f, 0.499616503715515f,
N    0.499999850988388f,
N};
N
N
N/**    
N* \par   
N* Generation of realCoefB array:    
N* \par   
N* n = 4096    
N* <pre>for (i = 0; i < n; i++)    
N* {    
N*    pBTable[2 * i] = 0.5 * (1.0 + sin (2 * PI / (double) (2 * n) * (double) i));    
N*    pBTable[2 * i + 1] = 0.5 * (1.0 * cos (2 * PI / (double) (2 * n) * (double) i));    
N*  } </pre>    
N*    
N*/
Nstatic const float32_t realCoefB[8192] = {
N  0.500000000000000f, 0.500000000000000f, 0.500383496284485f,
N    0.499999850988388f,
N  0.500766992568970f, 0.499999403953552f, 0.501150488853455f,
N    0.499998688697815f,
N  0.501533985137939f, 0.499997645616531f, 0.501917481422424f,
N    0.499996334314346f,
N  0.502300977706909f, 0.499994695186615f, 0.502684473991394f,
N    0.499992787837982f,
N  0.503067970275879f, 0.499990582466125f, 0.503451406955719f,
N    0.499988079071045f,
N  0.503834903240204f, 0.499985307455063f, 0.504218399524689f,
N    0.499982208013535f,
N  0.504601895809174f, 0.499978810548782f, 0.504985332489014f,
N    0.499975144863129f,
N  0.505368828773499f, 0.499971181154251f, 0.505752325057983f,
N    0.499966919422150f,
N  0.506135761737823f, 0.499962359666824f, 0.506519258022308f,
N    0.499957501888275f,
N  0.506902694702148f, 0.499952346086502f, 0.507286131381989f,
N    0.499946922063828f,
N  0.507669627666473f, 0.499941170215607f, 0.508053064346313f,
N    0.499935150146484f,
N  0.508436501026154f, 0.499928832054138f, 0.508819937705994f,
N    0.499922215938568f,
N  0.509203374385834f, 0.499915301799774f, 0.509586811065674f,
N    0.499908089637756f,
N  0.509970188140869f, 0.499900579452515f, 0.510353624820709f,
N    0.499892801046371f,
N  0.510737061500549f, 0.499884694814682f, 0.511120438575745f,
N    0.499876320362091f,
N  0.511503815650940f, 0.499867647886276f, 0.511887252330780f,
N    0.499858677387238f,
N  0.512270629405975f, 0.499849408864975f, 0.512654006481171f,
N    0.499839842319489f,
N  0.513037383556366f, 0.499830007553101f, 0.513420701026917f,
N    0.499819844961166f,
N  0.513804078102112f, 0.499809414148331f, 0.514187395572662f,
N    0.499798685312271f,
N  0.514570772647858f, 0.499787658452988f, 0.514954090118408f,
N    0.499776333570480f,
N  0.515337407588959f, 0.499764710664749f, 0.515720725059509f,
N    0.499752789735794f,
N  0.516103982925415f, 0.499740600585938f, 0.516487300395966f,
N    0.499728083610535f,
N  0.516870558261871f, 0.499715298414230f, 0.517253875732422f,
N    0.499702215194702f,
N  0.517637133598328f, 0.499688833951950f, 0.518020391464233f,
N    0.499675154685974f,
N  0.518403589725494f, 0.499661177396774f, 0.518786847591400f,
N    0.499646931886673f,
N  0.519170045852661f, 0.499632388353348f, 0.519553244113922f,
N    0.499617516994476f,
N  0.519936442375183f, 0.499602377414703f, 0.520319640636444f,
N    0.499586939811707f,
N  0.520702838897705f, 0.499571204185486f, 0.521085977554321f,
N    0.499555170536041f,
N  0.521469116210938f, 0.499538868665695f, 0.521852254867554f,
N    0.499522238969803f,
N  0.522235393524170f, 0.499505341053009f, 0.522618472576141f,
N    0.499488145112991f,
N  0.523001611232758f, 0.499470651149750f, 0.523384690284729f,
N    0.499452859163284f,
N  0.523767769336700f, 0.499434769153595f, 0.524150788784027f,
N    0.499416410923004f,
N  0.524533808231354f, 0.499397724866867f, 0.524916887283325f,
N    0.499378770589828f,
N  0.525299847126007f, 0.499359518289566f, 0.525682866573334f,
N    0.499339967966080f,
N  0.526065826416016f, 0.499320119619370f, 0.526448845863342f,
N    0.499299973249435f,
N  0.526831746101379f, 0.499279528856277f, 0.527214705944061f,
N    0.499258816242218f,
N  0.527597606182098f, 0.499237775802612f, 0.527980506420136f,
N    0.499216467142105f,
N  0.528363406658173f, 0.499194860458374f, 0.528746306896210f,
N    0.499172955751419f,
N  0.529129147529602f, 0.499150782823563f, 0.529511988162994f,
N    0.499128282070160f,
N  0.529894769191742f, 0.499105513095856f, 0.530277609825134f,
N    0.499082416296005f,
N  0.530660390853882f, 0.499059051275253f, 0.531043112277985f,
N    0.499035388231277f,
N  0.531425893306732f, 0.499011427164078f, 0.531808614730835f,
N    0.498987197875977f,
N  0.532191336154938f, 0.498962640762329f, 0.532573997974396f,
N    0.498937815427780f,
N  0.532956659793854f, 0.498912662267685f, 0.533339321613312f,
N    0.498887240886688f,
N  0.533721983432770f, 0.498861521482468f, 0.534104585647583f,
N    0.498835533857346f,
N  0.534487187862396f, 0.498809218406677f, 0.534869730472565f,
N    0.498782604932785f,
N  0.535252273082733f, 0.498755723237991f, 0.535634815692902f,
N    0.498728543519974f,
N  0.536017298698425f, 0.498701065778732f, 0.536399841308594f,
N    0.498673290014267f,
N  0.536782264709473f, 0.498645216226578f, 0.537164747714996f,
N    0.498616874217987f,
N  0.537547171115875f, 0.498588204383850f, 0.537929534912109f,
N    0.498559266328812f,
N  0.538311958312988f, 0.498530030250549f, 0.538694262504578f,
N    0.498500496149063f,
N  0.539076626300812f, 0.498470664024353f, 0.539458930492401f,
N    0.498440563678741f,
N  0.539841234683990f, 0.498410135507584f, 0.540223479270935f,
N    0.498379439115524f,
N  0.540605723857880f, 0.498348444700241f, 0.540987968444824f,
N    0.498317152261734f,
N  0.541370153427124f, 0.498285561800003f, 0.541752278804779f,
N    0.498253703117371f,
N  0.542134463787079f, 0.498221516609192f, 0.542516589164734f,
N    0.498189061880112f,
N  0.542898654937744f, 0.498156309127808f, 0.543280720710754f,
N    0.498123258352280f,
N  0.543662786483765f, 0.498089909553528f, 0.544044792652130f,
N    0.498056292533875f,
N  0.544426798820496f, 0.498022347688675f, 0.544808745384216f,
N    0.497988134622574f,
N  0.545190691947937f, 0.497953623533249f, 0.545572578907013f,
N    0.497918814420700f,
N  0.545954465866089f, 0.497883707284927f, 0.546336352825165f,
N    0.497848302125931f,
N  0.546718180179596f, 0.497812628746033f, 0.547099947929382f,
N    0.497776657342911f,
N  0.547481775283813f, 0.497740387916565f, 0.547863483428955f,
N    0.497703820466995f,
N  0.548245191574097f, 0.497666954994202f, 0.548626899719238f,
N    0.497629791498184f,
N  0.549008548259735f, 0.497592359781265f, 0.549390196800232f,
N    0.497554630041122f,
N  0.549771785736084f, 0.497516602277756f, 0.550153374671936f,
N    0.497478276491165f,
N  0.550534904003143f, 0.497439652681351f, 0.550916433334351f,
N    0.497400760650635f,
N  0.551297962665558f, 0.497361570596695f, 0.551679372787476f,
N    0.497322082519531f,
N  0.552060842514038f, 0.497282296419144f, 0.552442193031311f,
N    0.497242212295532f,
N  0.552823603153229f, 0.497201830148697f, 0.553204894065857f,
N    0.497161179780960f,
N  0.553586184978485f, 0.497120231389999f, 0.553967475891113f,
N    0.497078984975815f,
N  0.554348707199097f, 0.497037440538406f, 0.554729938507080f,
N    0.496995598077774f,
N  0.555111110210419f, 0.496953487396240f, 0.555492222309113f,
N    0.496911078691483f,
N  0.555873334407806f, 0.496868371963501f, 0.556254446506500f,
N    0.496825367212296f,
N  0.556635499000549f, 0.496782064437866f, 0.557016491889954f,
N    0.496738493442535f,
N  0.557397484779358f, 0.496694594621658f, 0.557778418064117f,
N    0.496650427579880f,
N  0.558159291744232f, 0.496605962514877f, 0.558540165424347f,
N    0.496561229228973f,
N  0.558921039104462f, 0.496516168117523f, 0.559301853179932f,
N    0.496470838785172f,
N  0.559682607650757f, 0.496425211429596f, 0.560063362121582f,
N    0.496379286050797f,
N  0.560444056987762f, 0.496333062648773f, 0.560824692249298f,
N    0.496286571025848f,
N  0.561205327510834f, 0.496239781379700f, 0.561585903167725f,
N    0.496192663908005f,
N  0.561966478824615f, 0.496145308017731f, 0.562346994876862f,
N    0.496097624301910f,
N  0.562727510929108f, 0.496049642562866f, 0.563107967376709f,
N    0.496001392602921f,
N  0.563488364219666f, 0.495952844619751f, 0.563868701457977f,
N    0.495903998613358f,
N  0.564249038696289f, 0.495854884386063f, 0.564629375934601f,
N    0.495805442333221f,
N  0.565009593963623f, 0.495755732059479f, 0.565389811992645f,
N    0.495705723762512f,
N  0.565770030021667f, 0.495655417442322f, 0.566150128841400f,
N    0.495604842901230f,
N  0.566530287265778f, 0.495553970336914f, 0.566910326480865f,
N    0.495502769947052f,
N  0.567290365695953f, 0.495451331138611f, 0.567670345306396f,
N    0.495399564504623f,
N  0.568050265312195f, 0.495347499847412f, 0.568430185317993f,
N    0.495295166969299f,
N  0.568810045719147f, 0.495242536067963f, 0.569189906120300f,
N    0.495189607143402f,
N  0.569569647312164f, 0.495136409997940f, 0.569949388504028f,
N    0.495082914829254f,
N  0.570329129695892f, 0.495029091835022f, 0.570708811283112f,
N    0.494975030422211f,
N  0.571088373661041f, 0.494920641183853f, 0.571467995643616f,
N    0.494865983724594f,
N  0.571847498416901f, 0.494810998439789f, 0.572227001190186f,
N    0.494755744934082f,
N  0.572606444358826f, 0.494700223207474f, 0.572985887527466f,
N    0.494644373655319f,
N  0.573365211486816f, 0.494588255882263f, 0.573744535446167f,
N    0.494531840085983f,
N  0.574123859405518f, 0.494475126266479f, 0.574503064155579f,
N    0.494418144226074f,
N  0.574882268905640f, 0.494360834360123f, 0.575261414051056f,
N    0.494303256273270f,
N  0.575640499591827f, 0.494245409965515f, 0.576019585132599f,
N    0.494187235832214f,
N  0.576398611068726f, 0.494128793478012f, 0.576777577400208f,
N    0.494070053100586f,
N  0.577156484127045f, 0.494011014699936f, 0.577535390853882f,
N    0.493951678276062f,
N  0.577914178371429f, 0.493892073631287f, 0.578292965888977f,
N    0.493832170963287f,
N  0.578671753406525f, 0.493771970272064f, 0.579050421714783f,
N    0.493711471557617f,
N  0.579429090023041f, 0.493650704622269f, 0.579807698726654f,
N    0.493589639663696f,
N  0.580186247825623f, 0.493528276681900f, 0.580564737319946f,
N    0.493466645479202f,
N  0.580943167209625f, 0.493404686450958f, 0.581321597099304f,
N    0.493342459201813f,
N  0.581699967384338f, 0.493279963731766f, 0.582078278064728f,
N    0.493217140436172f,
N  0.582456588745117f, 0.493154048919678f, 0.582834780216217f,
N    0.493090659379959f,
N  0.583212971687317f, 0.493026971817017f, 0.583591103553772f,
N    0.492963016033173f,
N  0.583969175815582f, 0.492898762226105f, 0.584347188472748f,
N    0.492834210395813f,
N  0.584725141525269f, 0.492769360542297f, 0.585103094577789f,
N    0.492704242467880f,
N  0.585480928421021f, 0.492638826370239f, 0.585858762264252f,
N    0.492573112249374f,
N  0.586236536502838f, 0.492507129907608f, 0.586614251136780f,
N    0.492440819740295f,
N  0.586991965770721f, 0.492374241352081f, 0.587369561195374f,
N    0.492307394742966f,
N  0.587747097015381f, 0.492240220308304f, 0.588124632835388f,
N    0.492172777652740f,
N  0.588502109050751f, 0.492105036973953f, 0.588879525661469f,
N    0.492037028074265f,
N  0.589256882667542f, 0.491968721151352f, 0.589634180068970f,
N    0.491900116205215f,
N  0.590011477470398f, 0.491831213235855f, 0.590388655662537f,
N    0.491762012243271f,
N  0.590765833854675f, 0.491692543029785f, 0.591142892837524f,
N    0.491622805595398f,
N  0.591519951820374f, 0.491552740335464f, 0.591896951198578f,
N    0.491482406854630f,
N  0.592273890972137f, 0.491411775350571f, 0.592650771141052f,
N    0.491340845823288f,
N  0.593027591705322f, 0.491269648075104f, 0.593404352664948f,
N    0.491198152303696f,
N  0.593781054019928f, 0.491126358509064f, 0.594157755374908f,
N    0.491054296493530f,
N  0.594534337520599f, 0.490981936454773f, 0.594910860061646f,
N    0.490909278392792f,
N  0.595287382602692f, 0.490836352109909f, 0.595663845539093f,
N    0.490763127803802f,
N  0.596040189266205f, 0.490689605474472f, 0.596416532993317f,
N    0.490615785121918f,
N  0.596792817115784f, 0.490541696548462f, 0.597168982028961f,
N    0.490467309951782f,
N  0.597545146942139f, 0.490392625331879f, 0.597921252250671f,
N    0.490317672491074f,
N  0.598297297954559f, 0.490242421627045f, 0.598673284053802f,
N    0.490166902542114f,
N  0.599049210548401f, 0.490091055631638f, 0.599425077438354f,
N    0.490014940500259f,
N  0.599800884723663f, 0.489938557147980f, 0.600176632404327f,
N    0.489861875772476f,
N  0.600552320480347f, 0.489784896373749f, 0.600927948951721f,
N    0.489707618951797f,
N  0.601303517818451f, 0.489630073308945f, 0.601679027080536f,
N    0.489552229642868f,
N  0.602054476737976f, 0.489474087953568f, 0.602429866790771f,
N    0.489395678043365f,
N  0.602805197238922f, 0.489316970109940f, 0.603180468082428f,
N    0.489237964153290f,
N  0.603555679321289f, 0.489158689975739f, 0.603930830955505f,
N    0.489079117774963f,
N  0.604305922985077f, 0.488999247550964f, 0.604680955410004f,
N    0.488919109106064f,
N  0.605055928230286f, 0.488838672637939f, 0.605430841445923f,
N    0.488757967948914f,
N  0.605805635452271f, 0.488676935434341f, 0.606180429458618f,
N    0.488595664501190f,
N  0.606555163860321f, 0.488514065742493f, 0.606929838657379f,
N    0.488432198762894f,
N  0.607304394245148f, 0.488350033760071f, 0.607678949832916f,
N    0.488267600536346f,
N  0.608053386211395f, 0.488184869289398f, 0.608427822589874f,
N    0.488101840019226f,
N  0.608802139759064f, 0.488018542528152f, 0.609176397323608f,
N    0.487934947013855f,
N  0.609550595283508f, 0.487851053476334f, 0.609924793243408f,
N    0.487766891717911f,
N  0.610298871994019f, 0.487682431936264f, 0.610672831535339f,
N    0.487597703933716f,
N  0.611046791076660f, 0.487512677907944f, 0.611420691013336f,
N    0.487427353858948f,
N  0.611794531345367f, 0.487341761589050f, 0.612168252468109f,
N    0.487255871295929f,
N  0.612541973590851f, 0.487169682979584f, 0.612915575504303f,
N    0.487083226442337f,
N  0.613289117813110f, 0.486996471881866f, 0.613662600517273f,
N    0.486909449100494f,
N  0.614036023616791f, 0.486822128295898f, 0.614409387111664f,
N    0.486734509468079f,
N  0.614782691001892f, 0.486646622419357f, 0.615155875682831f,
N    0.486558437347412f,
N  0.615529060363770f, 0.486469984054565f, 0.615902125835419f,
N    0.486381232738495f,
N  0.616275131702423f, 0.486292183399200f, 0.616648077964783f,
N    0.486202865839005f,
N  0.617020964622498f, 0.486113250255585f, 0.617393791675568f,
N    0.486023366451263f,
N  0.617766559123993f, 0.485933154821396f, 0.618139207363129f,
N    0.485842704772949f,
N  0.618511795997620f, 0.485751956701279f, 0.618884325027466f,
N    0.485660910606384f,
N  0.619256794452667f, 0.485569566488266f, 0.619629204273224f,
N    0.485477954149246f,
N  0.620001494884491f, 0.485386073589325f, 0.620373785495758f,
N    0.485293895006180f,
N  0.620745956897736f, 0.485201418399811f, 0.621118068695068f,
N    0.485108673572540f,
N  0.621490061283112f, 0.485015630722046f, 0.621862053871155f,
N    0.484922289848328f,
N  0.622233927249908f, 0.484828680753708f, 0.622605800628662f,
N    0.484734803438187f,
N  0.622977554798126f, 0.484640628099442f, 0.623349189758301f,
N    0.484546154737473f,
N  0.623720824718475f, 0.484451413154602f, 0.624092340469360f,
N    0.484356373548508f,
N  0.624463796615601f, 0.484261035919189f, 0.624835193157196f,
N    0.484165430068970f,
N  0.625206530094147f, 0.484069555997849f, 0.625577747821808f,
N    0.483973383903503f,
N  0.625948905944824f, 0.483876913785934f, 0.626320004463196f,
N    0.483780175447464f,
N  0.626691043376923f, 0.483683139085770f, 0.627061963081360f,
N    0.483585834503174f,
N  0.627432823181152f, 0.483488231897354f, 0.627803623676300f,
N    0.483390361070633f,
N  0.628174364566803f, 0.483292192220688f, 0.628544986248016f,
N    0.483193725347519f,
N  0.628915548324585f, 0.483094990253448f, 0.629286050796509f,
N    0.482995986938477f,
N  0.629656434059143f, 0.482896685600281f, 0.630026817321777f,
N    0.482797086238861f,
N  0.630397081375122f, 0.482697218656540f, 0.630767226219177f,
N    0.482597053050995f,
N  0.631137371063232f, 0.482496619224548f, 0.631507396697998f,
N    0.482395917177200f,
N  0.631877362728119f, 0.482294887304306f, 0.632247209548950f,
N    0.482193619012833f,
N  0.632616996765137f, 0.482092022895813f, 0.632986724376678f,
N    0.481990188360214f,
N  0.633356392383575f, 0.481888025999069f, 0.633725941181183f,
N    0.481785595417023f,
N  0.634095430374146f, 0.481682896614075f, 0.634464859962463f,
N    0.481579899787903f,
N  0.634834170341492f, 0.481476634740829f, 0.635203421115875f,
N    0.481373071670532f,
N  0.635572552680969f, 0.481269240379334f, 0.635941684246063f,
N    0.481165111064911f,
N  0.636310696601868f, 0.481060713529587f, 0.636679589748383f,
N    0.480956017971039f,
N  0.637048482894897f, 0.480851024389267f, 0.637417197227478f,
N    0.480745792388916f,
N  0.637785911560059f, 0.480640232563019f, 0.638154506683350f,
N    0.480534434318542f,
N  0.638523042201996f, 0.480428308248520f, 0.638891458511353f,
N    0.480321943759918f,
N  0.639259815216064f, 0.480215251445770f, 0.639628112316132f,
N    0.480108320713043f,
N  0.639996349811554f, 0.480001062154770f, 0.640364408493042f,
N    0.479893565177917f,
N  0.640732467174530f, 0.479785770177841f, 0.641100406646729f,
N    0.479677677154541f,
N  0.641468286514282f, 0.479569315910339f, 0.641836047172546f,
N    0.479460656642914f,
N  0.642203748226166f, 0.479351729154587f, 0.642571389675140f,
N    0.479242533445358f,
N  0.642938911914825f, 0.479133039712906f, 0.643306374549866f,
N    0.479023247957230f,
N  0.643673717975616f, 0.478913217782974f, 0.644041001796722f,
N    0.478802859783173f,
N  0.644408226013184f, 0.478692263364792f, 0.644775331020355f,
N    0.478581339120865f,
N  0.645142316818237f, 0.478470176458359f, 0.645509302616119f,
N    0.478358715772629f,
N  0.645876109600067f, 0.478246957063675f, 0.646242916584015f,
N    0.478134930133820f,
N  0.646609604358673f, 0.478022634983063f, 0.646976172924042f,
N    0.477910041809082f,
N  0.647342681884766f, 0.477797180414200f, 0.647709131240845f,
N    0.477684020996094f,
N  0.648075461387634f, 0.477570593357086f, 0.648441672325134f,
N    0.477456867694855f,
N  0.648807883262634f, 0.477342873811722f, 0.649173915386200f,
N    0.477228611707687f,
N  0.649539887905121f, 0.477114051580429f, 0.649905800819397f,
N    0.476999223232269f,
N  0.650271594524384f, 0.476884096860886f, 0.650637328624725f,
N    0.476768702268600f,
N  0.651003003120422f, 0.476653009653091f, 0.651368498802185f,
N    0.476537048816681f,
N  0.651733994483948f, 0.476420819759369f, 0.652099311351776f,
N    0.476304292678833f,
N  0.652464628219604f, 0.476187497377396f, 0.652829825878143f,
N    0.476070433855057f,
N  0.653194904327393f, 0.475953072309494f, 0.653559923171997f,
N    0.475835442543030f,
N  0.653924822807312f, 0.475717514753342f, 0.654289662837982f,
N    0.475599318742752f,
N  0.654654383659363f, 0.475480824708939f, 0.655019044876099f,
N    0.475362062454224f,
N  0.655383586883545f, 0.475243031978607f, 0.655748009681702f,
N    0.475123733282089f,
N  0.656112432479858f, 0.475004136562347f, 0.656476676464081f,
N    0.474884241819382f,
N  0.656840860843658f, 0.474764078855515f, 0.657204985618591f,
N    0.474643647670746f,
N  0.657568991184235f, 0.474522948265076f, 0.657932877540588f,
N    0.474401950836182f,
N  0.658296704292297f, 0.474280685186386f, 0.658660411834717f,
N    0.474159121513367f,
N  0.659024059772491f, 0.474037289619446f, 0.659387588500977f,
N    0.473915189504623f,
N  0.659750998020172f, 0.473792791366577f, 0.660114347934723f,
N    0.473670125007629f,
N  0.660477638244629f, 0.473547190427780f, 0.660840749740601f,
N    0.473423957824707f,
N  0.661203861236572f, 0.473300457000732f, 0.661566793918610f,
N    0.473176687955856f,
N  0.661929666996002f, 0.473052620887756f, 0.662292480468750f,
N    0.472928285598755f,
N  0.662655174732208f, 0.472803652286530f, 0.663017749786377f,
N    0.472678780555725f,
N  0.663380205631256f, 0.472553610801697f, 0.663742601871490f,
N    0.472428143024445f,
N  0.664104938507080f, 0.472302407026291f, 0.664467096328735f,
N    0.472176402807236f,
N  0.664829254150391f, 0.472050130367279f, 0.665191233158112f,
N    0.471923559904099f,
N  0.665553152561188f, 0.471796721220016f, 0.665914952754974f,
N    0.471669614315033f,
N  0.666276693344116f, 0.471542209386826f, 0.666638314723969f,
N    0.471414536237717f,
N  0.666999816894531f, 0.471286594867706f, 0.667361259460449f,
N    0.471158385276794f,
N  0.667722582817078f, 0.471029877662659f, 0.668083786964417f,
N    0.470901101827621f,
N  0.668444931507111f, 0.470772027969360f, 0.668805956840515f,
N    0.470642685890198f,
N  0.669166862964630f, 0.470513075590134f, 0.669527709484100f,
N    0.470383197069168f,
N  0.669888436794281f, 0.470253020524979f, 0.670249044895172f,
N    0.470122605562210f,
N  0.670609593391418f, 0.469991862773895f, 0.670970022678375f,
N    0.469860881567001f,
N  0.671330332756042f, 0.469729602336884f, 0.671690583229065f,
N    0.469598054885864f,
N  0.672050714492798f, 0.469466239213943f, 0.672410726547241f,
N    0.469334155321121f,
N  0.672770678997040f, 0.469201773405075f, 0.673130512237549f,
N    0.469069123268127f,
N  0.673490226268768f, 0.468936175107956f, 0.673849821090698f,
N    0.468802988529205f,
N  0.674209356307983f, 0.468669503927231f, 0.674568772315979f,
N    0.468535751104355f,
N  0.674928069114685f, 0.468401730060577f, 0.675287246704102f,
N    0.468267410993576f,
N  0.675646364688873f, 0.468132823705673f, 0.676005363464355f,
N    0.467997968196869f,
N  0.676364302635193f, 0.467862844467163f, 0.676723062992096f,
N    0.467727422714233f,
N  0.677081763744354f, 0.467591762542725f, 0.677440345287323f,
N    0.467455804347992f,
N  0.677798807621002f, 0.467319577932358f, 0.678157210350037f,
N    0.467183053493500f,
N  0.678515493869781f, 0.467046260833740f, 0.678873658180237f,
N    0.466909229755402f,
N  0.679231703281403f, 0.466771900653839f, 0.679589688777924f,
N    0.466634273529053f,
N  0.679947495460510f, 0.466496407985687f, 0.680305242538452f,
N    0.466358244419098f,
N  0.680662930011749f, 0.466219812631607f, 0.681020438671112f,
N    0.466081112623215f,
N  0.681377887725830f, 0.465942144393921f, 0.681735157966614f,
N    0.465802878141403f,
N  0.682092368602753f, 0.465663343667984f, 0.682449519634247f,
N    0.465523540973663f,
N  0.682806491851807f, 0.465383470058441f, 0.683163404464722f,
N    0.465243130922318f,
N  0.683520197868347f, 0.465102523565292f, 0.683876872062683f,
N    0.464961618185043f,
N  0.684233427047729f, 0.464820444583893f, 0.684589862823486f,
N    0.464679002761841f,
N  0.684946238994598f, 0.464537292718887f, 0.685302436351776f,
N    0.464395314455032f,
N  0.685658574104309f, 0.464253038167953f, 0.686014592647552f,
N    0.464110493659973f,
N  0.686370551586151f, 0.463967710733414f, 0.686726331710815f,
N    0.463824629783630f,
N  0.687082052230835f, 0.463681250810623f, 0.687437593936920f,
N    0.463537633419037f,
N  0.687793076038361f, 0.463393747806549f, 0.688148438930511f,
N    0.463249564170837f,
N  0.688503682613373f, 0.463105112314224f, 0.688858866691589f,
N    0.462960392236710f,
N  0.689213871955872f, 0.462815403938293f, 0.689568817615509f,
N    0.462670147418976f,
N  0.689923584461212f, 0.462524622678757f, 0.690278291702271f,
N    0.462378799915314f,
N  0.690632879734039f, 0.462232738733292f, 0.690987348556519f,
N    0.462086379528046f,
N  0.691341698169708f, 0.461939752101898f, 0.691695988178253f,
N    0.461792886257172f,
N  0.692050099372864f, 0.461645722389221f, 0.692404091358185f,
N    0.461498260498047f,
N  0.692758023738861f, 0.461350560188293f, 0.693111836910248f,
N    0.461202591657639f,
N  0.693465530872345f, 0.461054325103760f, 0.693819046020508f,
N    0.460905820131302f,
N  0.694172501564026f, 0.460757017135620f, 0.694525837898254f,
N    0.460607945919037f,
N  0.694879114627838f, 0.460458606481552f, 0.695232212543488f,
N    0.460309028625488f,
N  0.695585191249847f, 0.460159152746201f, 0.695938050746918f,
N    0.460008978843689f,
N  0.696290850639343f, 0.459858566522598f, 0.696643471717834f,
N    0.459707885980606f,
N  0.696996033191681f, 0.459556937217712f, 0.697348415851593f,
N    0.459405690431595f,
N  0.697700738906860f, 0.459254205226898f, 0.698052942752838f,
N    0.459102421998978f,
N  0.698404967784882f, 0.458950400352478f, 0.698756933212280f,
N    0.458798080682755f,
N  0.699108779430389f, 0.458645492792130f, 0.699460506439209f,
N    0.458492636680603f,
N  0.699812114238739f, 0.458339542150497f, 0.700163602828979f,
N    0.458186149597168f,
N  0.700514972209930f, 0.458032488822937f, 0.700866222381592f,
N    0.457878559827805f,
N  0.701217353343964f, 0.457724362611771f, 0.701568365097046f,
N    0.457569897174835f,
N  0.701919257640839f, 0.457415163516998f, 0.702270030975342f,
N    0.457260161638260f,
N  0.702620685100555f, 0.457104891538620f, 0.702971220016479f,
N    0.456949323415756f,
N  0.703321635723114f, 0.456793516874313f, 0.703671932220459f,
N    0.456637442111969f,
N  0.704022109508514f, 0.456481099128723f, 0.704372167587280f,
N    0.456324487924576f,
N  0.704722046852112f, 0.456167578697205f, 0.705071866512299f,
N    0.456010431051254f,
N  0.705421566963196f, 0.455853015184402f, 0.705771148204803f,
N    0.455695331096649f,
N  0.706120610237122f, 0.455537378787994f, 0.706469953060150f,
N    0.455379128456116f,
N  0.706819176673889f, 0.455220639705658f, 0.707168221473694f,
N    0.455061882734299f,
N  0.707517206668854f, 0.454902857542038f, 0.707866072654724f,
N    0.454743564128876f,
N  0.708214759826660f, 0.454584002494812f, 0.708563387393951f,
N    0.454424172639847f,
N  0.708911836147308f, 0.454264044761658f, 0.709260225296021f,
N    0.454103678464890f,
N  0.709608435630798f, 0.453943043947220f, 0.709956526756287f,
N    0.453782171010971f,
N  0.710304558277130f, 0.453621000051498f, 0.710652410984039f,
N    0.453459560871124f,
N  0.711000144481659f, 0.453297853469849f, 0.711347758769989f,
N    0.453135877847672f,
N  0.711695253849030f, 0.452973634004593f, 0.712042629718781f,
N    0.452811151742935f,
N  0.712389826774597f, 0.452648371458054f, 0.712736964225769f,
N    0.452485352754593f,
N  0.713083922863007f, 0.452322036027908f, 0.713430821895599f,
N    0.452158480882645f,
N  0.713777542114258f, 0.451994657516479f, 0.714124143123627f,
N    0.451830536127090f,
N  0.714470624923706f, 0.451666176319122f, 0.714816987514496f,
N    0.451501548290253f,
N  0.715163230895996f, 0.451336652040482f, 0.715509355068207f,
N    0.451171487569809f,
N  0.715855300426483f, 0.451006084680557f, 0.716201186180115f,
N    0.450840383768082f,
N  0.716546893119812f, 0.450674414634705f, 0.716892480850220f,
N    0.450508207082748f,
N  0.717238008975983f, 0.450341701507568f, 0.717583298683167f,
N    0.450174957513809f,
N  0.717928528785706f, 0.450007945299149f, 0.718273639678955f,
N    0.449840664863586f,
N  0.718618571758270f, 0.449673116207123f, 0.718963444232941f,
N    0.449505299329758f,
N  0.719308137893677f, 0.449337244033813f, 0.719652712345123f,
N    0.449168890714645f,
N  0.719997107982636f, 0.449000298976898f, 0.720341444015503f,
N    0.448831409215927f,
N  0.720685660839081f, 0.448662281036377f, 0.721029698848724f,
N    0.448492884635925f,
N  0.721373617649078f, 0.448323249816895f, 0.721717417240143f,
N    0.448153316974640f,
N  0.722061097621918f, 0.447983115911484f, 0.722404599189758f,
N    0.447812676429749f,
N  0.722747981548309f, 0.447641968727112f, 0.723091304302216f,
N    0.447470992803574f,
N  0.723434448242188f, 0.447299748659134f, 0.723777413368225f,
N    0.447128236293793f,
N  0.724120318889618f, 0.446956485509872f, 0.724463045597076f,
N    0.446784436702728f,
N  0.724805653095245f, 0.446612149477005f, 0.725148141384125f,
N    0.446439594030380f,
N  0.725490510463715f, 0.446266770362854f, 0.725832700729370f,
N    0.446093708276749f,
N  0.726174771785736f, 0.445920348167419f, 0.726516723632813f,
N    0.445746749639511f,
N  0.726858556270599f, 0.445572882890701f, 0.727200269699097f,
N    0.445398747920990f,
N  0.727541804313660f, 0.445224374532700f, 0.727883219718933f,
N    0.445049703121185f,
N  0.728224515914917f, 0.444874793291092f, 0.728565633296967f,
N    0.444699615240097f,
N  0.728906631469727f, 0.444524168968201f, 0.729247510433197f,
N    0.444348484277725f,
N  0.729588270187378f, 0.444172531366348f, 0.729928910732269f,
N    0.443996280431747f,
N  0.730269372463226f, 0.443819820880890f, 0.730609714984894f,
N    0.443643063306808f,
N  0.730949878692627f, 0.443466067314148f, 0.731289982795715f,
N    0.443288803100586f,
N  0.731629908084869f, 0.443111270666122f, 0.731969714164734f,
N    0.442933470010757f,
N  0.732309341430664f, 0.442755430936813f, 0.732648849487305f,
N    0.442577123641968f,
N  0.732988238334656f, 0.442398548126221f, 0.733327507972717f,
N    0.442219734191895f,
N  0.733666598796844f, 0.442040622234344f, 0.734005570411682f,
N    0.441861271858215f,
N  0.734344422817230f, 0.441681683063507f, 0.734683096408844f,
N    0.441501796245575f,
N  0.735021650791168f, 0.441321671009064f, 0.735360085964203f,
N    0.441141277551651f,
N  0.735698342323303f, 0.440960645675659f, 0.736036539077759f,
N    0.440779715776443f,
N  0.736374497413635f, 0.440598547458649f, 0.736712396144867f,
N    0.440417140722275f,
N  0.737050116062164f, 0.440235435962677f, 0.737387716770172f,
N    0.440053492784500f,
N  0.737725138664246f, 0.439871311187744f, 0.738062441349030f,
N    0.439688831567764f,
N  0.738399624824524f, 0.439506113529205f, 0.738736629486084f,
N    0.439323127269745f,
N  0.739073514938354f, 0.439139902591705f, 0.739410281181335f,
N    0.438956409692764f,
N  0.739746868610382f, 0.438772648572922f, 0.740083336830139f,
N    0.438588619232178f,
N  0.740419685840607f, 0.438404351472855f, 0.740755856037140f,
N    0.438219845294952f,
N  0.741091907024384f, 0.438035041093826f, 0.741427779197693f,
N    0.437849998474121f,
N  0.741763532161713f, 0.437664687633514f, 0.742099165916443f,
N    0.437479138374329f,
N  0.742434620857239f, 0.437293320894241f, 0.742769956588745f,
N    0.437107264995575f,
N  0.743105113506317f, 0.436920911073685f, 0.743440151214600f,
N    0.436734348535538f,
N  0.743775069713593f, 0.436547487974167f, 0.744109809398651f,
N    0.436360388994217f,
N  0.744444429874420f, 0.436173021793365f, 0.744778931140900f,
N    0.435985416173935f,
N  0.745113253593445f, 0.435797542333603f, 0.745447397232056f,
N    0.435609430074692f,
N  0.745781481266022f, 0.435421019792557f, 0.746115326881409f,
N    0.435232400894165f,
N  0.746449112892151f, 0.435043483972549f, 0.746782720088959f,
N    0.434854328632355f,
N  0.747116148471832f, 0.434664934873581f, 0.747449457645416f,
N    0.434475272893906f,
N  0.747782647609711f, 0.434285342693329f, 0.748115658760071f,
N    0.434095174074173f,
N  0.748448550701141f, 0.433904737234116f, 0.748781263828278f,
N    0.433714061975479f,
N  0.749113857746124f, 0.433523118495941f, 0.749446272850037f,
N    0.433331936597824f,
N  0.749778568744659f, 0.433140486478806f, 0.750110685825348f,
N    0.432948768138886f,
N  0.750442683696747f, 0.432756811380386f, 0.750774562358856f,
N    0.432564586400986f,
N  0.751106262207031f, 0.432372123003006f, 0.751437783241272f,
N    0.432179391384125f,
N  0.751769185066223f, 0.431986421346664f, 0.752100467681885f,
N    0.431793183088303f,
N  0.752431571483612f, 0.431599706411362f, 0.752762496471405f,
N    0.431405961513519f,
N  0.753093302249908f, 0.431211978197098f, 0.753423988819122f,
N    0.431017726659775f,
N  0.753754496574402f, 0.430823236703873f, 0.754084885120392f,
N    0.430628478527069f,
N  0.754415094852448f, 0.430433481931686f, 0.754745125770569f,
N    0.430238217115402f,
N  0.755075037479401f, 0.430042684078217f, 0.755404829978943f,
N    0.429846942424774f,
N  0.755734443664551f, 0.429650902748108f, 0.756063878536224f,
N    0.429454624652863f,
N  0.756393194198608f, 0.429258108139038f, 0.756722390651703f,
N    0.429061323404312f,
N  0.757051348686218f, 0.428864300251007f, 0.757380247116089f,
N    0.428667008876801f,
N  0.757708966732025f, 0.428469479084015f, 0.758037507534027f,
N    0.428271710872650f,
N  0.758365929126740f, 0.428073674440384f, 0.758694171905518f,
N    0.427875369787216f,
N  0.759022235870361f, 0.427676826715469f, 0.759350180625916f,
N    0.427478045225143f,
N  0.759678006172180f, 0.427278995513916f, 0.760005652904511f,
N    0.427079707384110f,
N  0.760333120822906f, 0.426880151033401f, 0.760660469532013f,
N    0.426680356264114f,
N  0.760987639427185f, 0.426480293273926f, 0.761314690113068f,
N    0.426279991865158f,
N  0.761641561985016f, 0.426079452037811f, 0.761968255043030f,
N    0.425878643989563f,
N  0.762294828891754f, 0.425677597522736f, 0.762621283531189f,
N    0.425476282835007f,
N  0.762947499752045f, 0.425274729728699f, 0.763273596763611f,
N    0.425072938203812f,
N  0.763599574565887f, 0.424870878458023f, 0.763925373554230f,
N    0.424668580293655f,
N  0.764250993728638f, 0.424466013908386f, 0.764576494693756f,
N    0.424263238906860f,
N  0.764901816844940f, 0.424060165882111f, 0.765226960182190f,
N    0.423856884241104f,
N  0.765551984310150f, 0.423653304576874f, 0.765876889228821f,
N    0.423449516296387f,
N  0.766201555728912f, 0.423245459794998f, 0.766526103019714f,
N    0.423041164875031f,
N  0.766850471496582f, 0.422836631536484f, 0.767174720764160f,
N    0.422631829977036f,
N  0.767498791217804f, 0.422426789999008f, 0.767822742462158f,
N    0.422221481800079f,
N  0.768146514892578f, 0.422015935182571f, 0.768470108509064f,
N    0.421810150146484f,
N  0.768793523311615f, 0.421604126691818f, 0.769116818904877f,
N    0.421397835016251f,
N  0.769439935684204f, 0.421191304922104f, 0.769762933254242f,
N    0.420984506607056f,
N  0.770085752010345f, 0.420777499675751f, 0.770408391952515f,
N    0.420570224523544f,
N  0.770730912685394f, 0.420362681150436f, 0.771053194999695f,
N    0.420154929161072f,
N  0.771375417709351f, 0.419946908950806f, 0.771697402000427f,
N    0.419738620519638f,
N  0.772019267082214f, 0.419530123472214f, 0.772340953350067f,
N    0.419321358203888f,
N  0.772662520408630f, 0.419112354516983f, 0.772983849048615f,
N    0.418903112411499f,
N  0.773305058479309f, 0.418693602085114f, 0.773626148700714f,
N    0.418483853340149f,
N  0.773947000503540f, 0.418273866176605f, 0.774267733097076f,
N    0.418063640594482f,
N  0.774588346481323f, 0.417853146791458f, 0.774908721446991f,
N    0.417642414569855f,
N  0.775228977203369f, 0.417431443929672f, 0.775549054145813f,
N    0.417220205068588f,
N  0.775869011878967f, 0.417008757591248f, 0.776188731193542f,
N    0.416797041893005f,
N  0.776508331298828f, 0.416585087776184f, 0.776827812194824f,
N    0.416372895240784f,
N  0.777147054672241f, 0.416160434484482f, 0.777466177940369f,
N    0.415947735309601f,
N  0.777785122394562f, 0.415734797716141f, 0.778103888034821f,
N    0.415521621704102f,
N  0.778422534465790f, 0.415308207273483f, 0.778741002082825f,
N    0.415094524621964f,
N  0.779059290885925f, 0.414880603551865f, 0.779377400875092f,
N    0.414666473865509f,
N  0.779695332050323f, 0.414452046155930f, 0.780013144016266f,
N    0.414237409830093f,
N  0.780330777168274f, 0.414022535085678f, 0.780648231506348f,
N    0.413807392120361f,
N  0.780965566635132f, 0.413592010736465f, 0.781282722949982f,
N    0.413376390933990f,
N  0.781599700450897f, 0.413160532712936f, 0.781916499137878f,
N    0.412944436073303f,
N  0.782233119010925f, 0.412728071212769f, 0.782549619674683f,
N    0.412511497735977f,
N  0.782865881919861f, 0.412294656038284f, 0.783182024955750f,
N    0.412077575922012f,
N  0.783498048782349f, 0.411860257387161f, 0.783813834190369f,
N    0.411642700433731f,
N  0.784129500389099f, 0.411424905061722f, 0.784444928169250f,
N    0.411206841468811f,
N  0.784760236740112f, 0.410988569259644f, 0.785075426101685f,
N    0.410770028829575f,
N  0.785390377044678f, 0.410551249980927f, 0.785705149173737f,
N    0.410332232713699f,
N  0.786019802093506f, 0.410112977027893f, 0.786334276199341f,
N    0.409893482923508f,
N  0.786648571491241f, 0.409673750400543f, 0.786962687969208f,
N    0.409453779459000f,
N  0.787276685237885f, 0.409233570098877f, 0.787590444087982f,
N    0.409013092517853f,
N  0.787904083728790f, 0.408792406320572f, 0.788217544555664f,
N    0.408571451902390f,
N  0.788530826568604f, 0.408350288867950f, 0.788843929767609f,
N    0.408128857612610f,
N  0.789156913757324f, 0.407907217741013f, 0.789469659328461f,
N    0.407685309648514f,
N  0.789782285690308f, 0.407463163137436f, 0.790094733238220f,
N    0.407240778207779f,
N  0.790407001972198f, 0.407018154859543f, 0.790719091892242f,
N    0.406795293092728f,
N  0.791031002998352f, 0.406572192907333f, 0.791342735290527f,
N    0.406348884105682f,
N  0.791654348373413f, 0.406125307083130f, 0.791965723037720f,
N    0.405901491641998f,
N  0.792276978492737f, 0.405677437782288f, 0.792588055133820f,
N    0.405453115701675f,
N  0.792898952960968f, 0.405228585004807f, 0.793209671974182f,
N    0.405003815889359f,
N  0.793520212173462f, 0.404778808355331f, 0.793830573558807f,
N    0.404553562402725f,
N  0.794140756130219f, 0.404328078031540f, 0.794450819492340f,
N    0.404102355241776f,
N  0.794760644435883f, 0.403876423835754f, 0.795070350170136f,
N    0.403650224208832f,
N  0.795379877090454f, 0.403423786163330f, 0.795689165592194f,
N    0.403197109699249f,
N  0.795998334884644f, 0.402970194816589f, 0.796307325363159f,
N    0.402743041515350f,
N  0.796616137027740f, 0.402515679597855f, 0.796924769878387f,
N    0.402288049459457f,
N  0.797233223915100f, 0.402060180902481f, 0.797541558742523f,
N    0.401832103729248f,
N  0.797849655151367f, 0.401603758335114f, 0.798157572746277f,
N    0.401375204324722f,
N  0.798465371131897f, 0.401146411895752f, 0.798772931098938f,
N    0.400917351245880f,
N  0.799080371856689f, 0.400688081979752f, 0.799387574195862f,
N    0.400458574295044f,
N  0.799694657325745f, 0.400228828191757f, 0.800001561641693f,
N    0.399998843669891f,
N  0.800308227539063f, 0.399768620729446f, 0.800614774227142f,
N    0.399538189172745f,
N  0.800921142101288f, 0.399307489395142f, 0.801227271556854f,
N    0.399076581001282f,
N  0.801533281803131f, 0.398845434188843f, 0.801839113235474f,
N    0.398614019155502f,
N  0.802144765853882f, 0.398382395505905f, 0.802450239658356f,
N    0.398150533437729f,
N  0.802755534648895f, 0.397918462753296f, 0.803060650825500f,
N    0.397686123847961f,
N  0.803365588188171f, 0.397453576326370f, 0.803670346736908f,
N    0.397220760583878f,
N  0.803974866867065f, 0.396987736225128f, 0.804279267787933f,
N    0.396754473447800f,
N  0.804583489894867f, 0.396520972251892f, 0.804887533187866f,
N    0.396287262439728f,
N  0.805191397666931f, 0.396053284406662f, 0.805495083332062f,
N    0.395819097757339f,
N  0.805798590183258f, 0.395584672689438f, 0.806101918220520f,
N    0.395350009202957f,
N  0.806405067443848f, 0.395115107297897f, 0.806707978248596f,
N    0.394879996776581f,
N  0.807010769844055f, 0.394644618034363f, 0.807313382625580f,
N    0.394409030675888f,
N  0.807615816593170f, 0.394173204898834f, 0.807918012142181f,
N    0.393937170505524f,
N  0.808220088481903f, 0.393700867891312f, 0.808521986007690f,
N    0.393464356660843f,
N  0.808823645114899f, 0.393227607011795f, 0.809125185012817f,
N    0.392990618944168f,
N  0.809426486492157f, 0.392753422260284f, 0.809727668762207f,
N    0.392515957355499f,
N  0.810028612613678f, 0.392278283834457f, 0.810329377651215f,
N    0.392040401697159f,
N  0.810629963874817f, 0.391802251338959f, 0.810930430889130f,
N    0.391563892364502f,
N  0.811230659484863f, 0.391325294971466f, 0.811530709266663f,
N    0.391086459159851f,
N  0.811830580234528f, 0.390847414731979f, 0.812130272388458f,
N    0.390608131885529f,
N  0.812429726123810f, 0.390368610620499f, 0.812729060649872f,
N    0.390128880739212f,
N  0.813028216362000f, 0.389888882637024f, 0.813327133655548f,
N    0.389648675918579f,
N  0.813625931739807f, 0.389408260583878f, 0.813924491405487f,
N    0.389167606830597f,
N  0.814222872257233f, 0.388926714658737f, 0.814521074295044f,
N    0.388685584068298f,
N  0.814819097518921f, 0.388444244861603f, 0.815116941928864f,
N    0.388202667236328f,
N  0.815414607524872f, 0.387960851192474f, 0.815712094306946f,
N    0.387718826532364f,
N  0.816009342670441f, 0.387476563453674f, 0.816306471824646f,
N    0.387234061956406f,
N  0.816603362560272f, 0.386991351842880f, 0.816900074481964f,
N    0.386748403310776f,
N  0.817196667194366f, 0.386505216360092f, 0.817493021488190f,
N    0.386261820793152f,
N  0.817789137363434f, 0.386018186807632f, 0.818085134029388f,
N    0.385774344205856f,
N  0.818380951881409f, 0.385530263185501f, 0.818676531314850f,
N    0.385285943746567f,
N  0.818971931934357f, 0.385041415691376f, 0.819267153739929f,
N    0.384796649217606f,
N  0.819562196731567f, 0.384551674127579f, 0.819857060909271f,
N    0.384306460618973f,
N  0.820151746273041f, 0.384061008691788f, 0.820446193218231f,
N    0.383815348148346f,
N  0.820740520954132f, 0.383569449186325f, 0.821034610271454f,
N    0.383323341608047f,
N  0.821328520774841f, 0.383076995611191f, 0.821622252464294f,
N    0.382830440998077f,
N  0.821915745735168f, 0.382583618164063f, 0.822209119796753f,
N    0.382336616516113f,
N  0.822502255439758f, 0.382089376449585f, 0.822795212268829f,
N    0.381841897964478f,
N  0.823087990283966f, 0.381594210863113f, 0.823380589485168f,
N    0.381346285343170f,
N  0.823673009872437f, 0.381098151206970f, 0.823965191841125f,
N    0.380849778652191f,
N  0.824257194995880f, 0.380601197481155f, 0.824549019336700f,
N    0.380352377891541f,
N  0.824840664863586f, 0.380103349685669f, 0.825132071971893f,
N    0.379854083061218f,
N  0.825423359870911f, 0.379604607820511f, 0.825714409351349f,
N    0.379354894161224f,
N  0.826005280017853f, 0.379104942083359f, 0.826295912265778f,
N    0.378854811191559f,
N  0.826586425304413f, 0.378604412078857f, 0.826876699924469f,
N    0.378353834152222f,
N  0.827166795730591f, 0.378102988004684f, 0.827456712722778f,
N    0.377851963043213f,
N  0.827746450901031f, 0.377600699663162f, 0.828035950660706f,
N    0.377349197864532f,
N  0.828325271606445f, 0.377097487449646f, 0.828614413738251f,
N    0.376845568418503f,
N  0.828903317451477f, 0.376593410968781f, 0.829192101955414f,
N    0.376341015100479f,
N  0.829480648040771f, 0.376088410615921f, 0.829769015312195f,
N    0.375835597515106f,
N  0.830057144165039f, 0.375582575798035f, 0.830345153808594f,
N    0.375329315662384f,
N  0.830632925033569f, 0.375075817108154f, 0.830920517444611f,
N    0.374822109937668f,
N  0.831207871437073f, 0.374568194150925f, 0.831495106220245f,
N    0.374314039945602f,
N  0.831782102584839f, 0.374059677124023f, 0.832068860530853f,
N    0.373805105686188f,
N  0.832355499267578f, 0.373550295829773f, 0.832641899585724f,
N    0.373295277357101f,
N  0.832928121089935f, 0.373040050268173f, 0.833214163780212f,
N    0.372784584760666f,
N  0.833499968051910f, 0.372528880834579f, 0.833785593509674f,
N    0.372272998094559f,
N  0.834071040153503f, 0.372016876935959f, 0.834356248378754f,
N    0.371760547161102f,
N  0.834641277790070f, 0.371503978967667f, 0.834926128387451f,
N    0.371247202157974f,
N  0.835210800170898f, 0.370990216732025f, 0.835495233535767f,
N    0.370732992887497f,
N  0.835779488086700f, 0.370475560426712f, 0.836063504219055f,
N    0.370217919349670f,
N  0.836347401142120f, 0.369960039854050f, 0.836631059646606f,
N    0.369701951742172f,
N  0.836914479732513f, 0.369443655014038f, 0.837197780609131f,
N    0.369185149669647f,
N  0.837480843067169f, 0.368926405906677f, 0.837763667106628f,
N    0.368667453527451f,
N  0.838046371936798f, 0.368408292531967f, 0.838328838348389f,
N    0.368148893117905f,
N  0.838611066341400f, 0.367889285087585f, 0.838893175125122f,
N    0.367629468441010f,
N  0.839175045490265f, 0.367369443178177f, 0.839456677436829f,
N    0.367109179496765f,
N  0.839738130569458f, 0.366848707199097f, 0.840019404888153f,
N    0.366588026285172f,
N  0.840300500392914f, 0.366327136754990f, 0.840581357479095f,
N    0.366066008806229f,
N  0.840862035751343f, 0.365804702043533f, 0.841142535209656f,
N    0.365543156862259f,
N  0.841422796249390f, 0.365281373262405f, 0.841702818870544f,
N    0.365019410848618f,
N  0.841982722282410f, 0.364757210016251f, 0.842262387275696f,
N    0.364494800567627f,
N  0.842541813850403f, 0.364232182502747f, 0.842821121215820f,
N    0.363969355821610f,
N  0.843100130558014f, 0.363706320524216f, 0.843379020690918f,
N    0.363443046808243f,
N  0.843657672405243f, 0.363179564476013f, 0.843936145305634f,
N    0.362915903329849f,
N  0.844214379787445f, 0.362651973962784f, 0.844492435455322f,
N    0.362387865781784f,
N  0.844770252704620f, 0.362123548984528f, 0.845047891139984f,
N    0.361858993768692f,
N  0.845325350761414f, 0.361594229936600f, 0.845602571964264f,
N    0.361329287290573f,
N  0.845879614353180f, 0.361064106225967f, 0.846156477928162f,
N    0.360798716545105f,
N  0.846433103084564f, 0.360533088445663f, 0.846709489822388f,
N    0.360267281532288f,
N  0.846985757350922f, 0.360001266002655f, 0.847261726856232f,
N    0.359735012054443f,
N  0.847537577152252f, 0.359468549489975f, 0.847813189029694f,
N    0.359201908111572f,
N  0.848088562488556f, 0.358935028314590f, 0.848363757133484f,
N    0.358667939901352f,
N  0.848638772964478f, 0.358400642871857f, 0.848913550376892f,
N    0.358133137226105f,
N  0.849188148975372f, 0.357865422964096f, 0.849462509155273f,
N    0.357597470283508f,
N  0.849736690521240f, 0.357329338788986f, 0.850010633468628f,
N    0.357060998678207f,
N  0.850284397602081f, 0.356792420148849f, 0.850557923316956f,
N    0.356523662805557f,
N  0.850831270217896f, 0.356254696846008f, 0.851104438304901f,
N    0.355985492467880f,
N  0.851377367973328f, 0.355716109275818f, 0.851650118827820f,
N    0.355446487665176f,
N  0.851922631263733f, 0.355176687240601f, 0.852194905281067f,
N    0.354906648397446f,
N  0.852467060089111f, 0.354636400938034f, 0.852738916873932f,
N    0.354365974664688f,
N  0.853010654449463f, 0.354095309972763f, 0.853282094001770f,
N    0.353824466466904f,
N  0.853553414344788f, 0.353553384542465f, 0.853824436664581f,
N    0.353282123804092f,
N  0.854095339775085f, 0.353010624647141f, 0.854365944862366f,
N    0.352738946676254f,
N  0.854636430740356f, 0.352467030286789f, 0.854906618595123f,
N    0.352194935083389f,
N  0.855176687240601f, 0.351922631263733f, 0.855446517467499f,
N    0.351650089025497f,
N  0.855716109275818f, 0.351377367973328f, 0.855985522270203f,
N    0.351104438304901f,
N  0.856254696846008f, 0.350831300020218f, 0.856523692607880f,
N    0.350557953119278f,
N  0.856792449951172f, 0.350284397602081f, 0.857060968875885f,
N    0.350010633468628f,
N  0.857329368591309f, 0.349736660718918f, 0.857597470283508f,
N    0.349462509155273f,
N  0.857865393161774f, 0.349188119173050f, 0.858133137226105f,
N    0.348913550376892f,
N  0.858400642871857f, 0.348638743162155f, 0.858667910099030f,
N    0.348363757133484f,
N  0.858934998512268f, 0.348088562488556f, 0.859201908111572f,
N    0.347813159227371f,
N  0.859468579292297f, 0.347537547349930f, 0.859735012054443f,
N    0.347261756658554f,
N  0.860001266002655f, 0.346985727548599f, 0.860267281532288f,
N    0.346709519624710f,
N  0.860533118247986f, 0.346433073282242f, 0.860798716545105f,
N    0.346156448125839f,
N  0.861064076423645f, 0.345879614353180f, 0.861329257488251f,
N    0.345602601766586f,
N  0.861594259738922f, 0.345325350761414f, 0.861859023571014f,
N    0.345047920942307f,
N  0.862123548984528f, 0.344770282506943f, 0.862387895584106f,
N    0.344492435455322f,
N  0.862652003765106f, 0.344214379787445f, 0.862915873527527f,
N    0.343936115503311f,
N  0.863179564476013f, 0.343657672405243f, 0.863443076610565f,
N    0.343379020690918f,
N  0.863706290721893f, 0.343100160360336f, 0.863969385623932f,
N    0.342821091413498f,
N  0.864232182502747f, 0.342541843652725f, 0.864494800567627f,
N    0.342262357473373f,
N  0.864757239818573f, 0.341982692480087f, 0.865019381046295f,
N    0.341702848672867f,
N  0.865281403064728f, 0.341422766447067f, 0.865543127059937f,
N    0.341142505407333f,
N  0.865804672241211f, 0.340862035751343f, 0.866066038608551f,
N    0.340581357479095f,
N  0.866327106952667f, 0.340300500392914f, 0.866588056087494f,
N    0.340019434690475f,
N  0.866848707199097f, 0.339738160371780f, 0.867109179496765f,
N    0.339456677436829f,
N  0.867369413375854f, 0.339175015687943f, 0.867629468441010f,
N    0.338893145322800f,
N  0.867889285087585f, 0.338611096143723f, 0.868148922920227f,
N    0.338328808546066f,
N  0.868408262729645f, 0.338046342134476f, 0.868667483329773f,
N    0.337763696908951f,
N  0.868926405906677f, 0.337480813264847f, 0.869185149669647f,
N    0.337197750806808f,
N  0.869443655014038f, 0.336914509534836f, 0.869701981544495f,
N    0.336631029844284f,
N  0.869960069656372f, 0.336347371339798f, 0.870217919349670f,
N    0.336063534021378f,
N  0.870475590229034f, 0.335779488086700f, 0.870733022689819f,
N    0.335495233535767f,
N  0.870990216732025f, 0.335210770368576f, 0.871247172355652f,
N    0.334926128387451f,
N  0.871503949165344f, 0.334641307592392f, 0.871760547161102f,
N    0.334356248378754f,
N  0.872016847133636f, 0.334071010351181f, 0.872272968292236f,
N    0.333785593509674f,
N  0.872528910636902f, 0.333499968051910f, 0.872784554958344f,
N    0.333214133977890f,
N  0.873040020465851f, 0.332928121089935f, 0.873295307159424f,
N    0.332641899585724f,
N  0.873550295829773f, 0.332355499267578f, 0.873805105686188f,
N    0.332068890333176f,
N  0.874059677124023f, 0.331782072782516f, 0.874314069747925f,
N    0.331495076417923f,
N  0.874568223953247f, 0.331207901239395f, 0.874822139739990f,
N    0.330920487642288f,
N  0.875075817108154f, 0.330632925033569f, 0.875329315662384f,
N    0.330345153808594f,
N  0.875582575798035f, 0.330057173967361f, 0.875835597515106f,
N    0.329769015312195f,
N  0.876088440418243f, 0.329480648040771f, 0.876341044902802f,
N    0.329192101955414f,
N  0.876593410968781f, 0.328903347253799f, 0.876845538616180f,
N    0.328614413738251f,
N  0.877097487449646f, 0.328325271606445f, 0.877349197864532f,
N    0.328035950660706f,
N  0.877600669860840f, 0.327746421098709f, 0.877851963043213f,
N    0.327456712722778f,
N  0.878103017807007f, 0.327166795730591f, 0.878353834152222f,
N    0.326876699924469f,
N  0.878604412078857f, 0.326586425304413f, 0.878854811191559f,
N    0.326295942068100f,
N  0.879104971885681f, 0.326005280017853f, 0.879354894161224f,
N    0.325714409351349f,
N  0.879604578018188f, 0.325423330068588f, 0.879854083061218f,
N    0.325132101774216f,
N  0.880103349685669f, 0.324840664863586f, 0.880352377891541f,
N    0.324549019336700f,
N  0.880601167678833f, 0.324257194995880f, 0.880849778652191f,
N    0.323965191841125f,
N  0.881098151206970f, 0.323672980070114f, 0.881346285343170f,
N    0.323380589485168f,
N  0.881594181060791f, 0.323088020086288f, 0.881841897964478f,
N    0.322795242071152f,
N  0.882089376449585f, 0.322502255439758f, 0.882336616516113f,
N    0.322209119796753f,
N  0.882583618164063f, 0.321915775537491f, 0.882830440998077f,
N    0.321622252464294f,
N  0.883076965808868f, 0.321328520774841f, 0.883323311805725f,
N    0.321034610271454f,
N  0.883569478988647f, 0.320740520954132f, 0.883815348148346f,
N    0.320446223020554f,
N  0.884061038494110f, 0.320151746273041f, 0.884306430816650f,
N    0.319857090711594f,
N  0.884551644325256f, 0.319562226533890f, 0.884796679019928f,
N    0.319267183542252f,
N  0.885041415691376f, 0.318971961736679f, 0.885285973548889f,
N    0.318676531314850f,
N  0.885530233383179f, 0.318380922079086f, 0.885774314403534f,
N    0.318085134029388f,
N  0.886018216609955f, 0.317789167165756f, 0.886261820793152f,
N    0.317492991685867f,
N  0.886505246162415f, 0.317196637392044f, 0.886748373508453f,
N    0.316900104284287f,
N  0.886991322040558f, 0.316603392362595f, 0.887234091758728f,
N    0.316306471824646f,
N  0.887476563453674f, 0.316009372472763f, 0.887718796730042f,
N    0.315712094306946f,
N  0.887960851192474f, 0.315414607524872f, 0.888202667236328f,
N    0.315116971731186f,
N  0.888444244861603f, 0.314819127321243f, 0.888685584068298f,
N    0.314521104097366f,
N  0.888926684856415f, 0.314222872257233f, 0.889167606830597f,
N    0.313924491405487f,
N  0.889408230781555f, 0.313625901937485f, 0.889648675918579f,
N    0.313327133655548f,
N  0.889888882637024f, 0.313028186559677f, 0.890128850936890f,
N    0.312729060649872f,
N  0.890368640422821f, 0.312429755926132f, 0.890608131885529f,
N    0.312130242586136f,
N  0.890847444534302f, 0.311830550432205f, 0.891086459159851f,
N    0.311530679464340f,
N  0.891325294971466f, 0.311230629682541f, 0.891563892364502f,
N    0.310930401086807f,
N  0.891802251338959f, 0.310629993677139f, 0.892040371894836f,
N    0.310329377651215f,
N  0.892278313636780f, 0.310028612613678f, 0.892515957355499f,
N    0.309727638959885f,
N  0.892753422260284f, 0.309426486492157f, 0.892990648746490f,
N    0.309125155210495f,
N  0.893227577209473f, 0.308823645114899f, 0.893464326858521f,
N    0.308521956205368f,
N  0.893700897693634f, 0.308220088481903f, 0.893937170505524f,
N    0.307918041944504f,
N  0.894173204898834f, 0.307615786790848f, 0.894409060478210f,
N    0.307313382625580f,
N  0.894644618034363f, 0.307010769844055f, 0.894879996776581f,
N    0.306708008050919f,
N  0.895115137100220f, 0.306405037641525f, 0.895349979400635f,
N    0.306101888418198f,
N  0.895584642887115f, 0.305798590183258f, 0.895819067955017f,
N    0.305495083332062f,
N  0.896053314208984f, 0.305191397666931f, 0.896287262439728f,
N    0.304887533187866f,
N  0.896520972251892f, 0.304583519697189f, 0.896754503250122f,
N    0.304279297590256f,
N  0.896987736225128f, 0.303974896669388f, 0.897220790386200f,
N    0.303670316934586f,
N  0.897453546524048f, 0.303365558385849f, 0.897686123847961f,
N    0.303060621023178f,
N  0.897918462753296f, 0.302755534648895f, 0.898150563240051f,
N    0.302450239658356f,
N  0.898382425308228f, 0.302144765853882f, 0.898614048957825f,
N    0.301839113235474f,
N  0.898845434188843f, 0.301533311605453f, 0.899076581001282f,
N    0.301227301359177f,
N  0.899307489395142f, 0.300921112298965f, 0.899538159370422f,
N    0.300614774227142f,
N  0.899768650531769f, 0.300308227539063f, 0.899998843669891f,
N    0.300001531839371f,
N  0.900228857994080f, 0.299694657325745f, 0.900458574295044f,
N    0.299387603998184f,
N  0.900688111782074f, 0.299080342054367f, 0.900917351245880f,
N    0.298772931098938f,
N  0.901146411895752f, 0.298465341329575f, 0.901375174522400f,
N    0.298157602548599f,
N  0.901603758335114f, 0.297849655151367f, 0.901832103729248f,
N    0.297541528940201f,
N  0.902060210704803f, 0.297233253717422f, 0.902288019657135f,
N    0.296924799680710f,
N  0.902515649795532f, 0.296616137027740f, 0.902743041515350f,
N    0.296307325363159f,
N  0.902970194816589f, 0.295998334884644f, 0.903197109699249f,
N    0.295689195394516f,
N  0.903423786163330f, 0.295379847288132f, 0.903650224208832f,
N    0.295070350170136f,
N  0.903876423835754f, 0.294760644435883f, 0.904102385044098f,
N    0.294450789690018f,
N  0.904328107833862f, 0.294140785932541f, 0.904553592205048f,
N    0.293830573558807f,
N  0.904778838157654f, 0.293520182371140f, 0.905003845691681f,
N    0.293209642171860f,
N  0.905228614807129f, 0.292898923158646f, 0.905453145503998f,
N    0.292588025331497f,
N  0.905677437782288f, 0.292276978492737f, 0.905901491641998f,
N    0.291965723037720f,
N  0.906125307083130f, 0.291654318571091f, 0.906348884105682f,
N    0.291342735290527f,
N  0.906572222709656f, 0.291031002998352f, 0.906795322895050f,
N    0.290719062089920f,
N  0.907018184661865f, 0.290406972169876f, 0.907240808010101f,
N    0.290094703435898f,
N  0.907463192939758f, 0.289782285690308f, 0.907685279846191f,
N    0.289469659328461f,
N  0.907907187938690f, 0.289156883955002f, 0.908128857612610f,
N    0.288843959569931f,
N  0.908350288867950f, 0.288530826568604f, 0.908571481704712f,
N    0.288217544555664f,
N  0.908792436122894f, 0.287904083728790f, 0.909013092517853f,
N    0.287590473890305f,
N  0.909233570098877f, 0.287276685237885f, 0.909453809261322f,
N    0.286962717771530f,
N  0.909673750400543f, 0.286648571491241f, 0.909893512725830f,
N    0.286334276199341f,
N  0.910112977027893f, 0.286019802093506f, 0.910332262516022f,
N    0.285705178976059f,
N  0.910551249980927f, 0.285390377044678f, 0.910769999027252f,
N    0.285075396299362f,
N  0.910988569259644f, 0.284760266542435f, 0.911206841468811f,
N    0.284444957971573f,
N  0.911424875259399f, 0.284129470586777f, 0.911642670631409f,
N    0.283813834190369f,
N  0.911860227584839f, 0.283498018980026f, 0.912077546119690f,
N    0.283182054758072f,
N  0.912294626235962f, 0.282865911722183f, 0.912511467933655f,
N    0.282549589872360f,
N  0.912728071212769f, 0.282233119010925f, 0.912944436073303f,
N    0.281916469335556f,
N  0.913160502910614f, 0.281599670648575f, 0.913376390933990f,
N    0.281282693147659f,
N  0.913592040538788f, 0.280965566635132f, 0.913807392120361f,
N    0.280648261308670f,
N  0.914022505283356f, 0.280330777168274f, 0.914237439632416f,
N    0.280013144016266f,
N  0.914452075958252f, 0.279695361852646f, 0.914666473865509f,
N    0.279377400875092f,
N  0.914880633354187f, 0.279059261083603f, 0.915094554424286f,
N    0.278740972280502f,
N  0.915308177471161f, 0.278422504663467f, 0.915521621704102f,
N    0.278103888034821f,
N  0.915734827518463f, 0.277785122394562f, 0.915947735309601f,
N    0.277466177940369f,
N  0.916160404682159f, 0.277147054672241f, 0.916372895240784f,
N    0.276827782392502f,
N  0.916585087776184f, 0.276508361101151f, 0.916797041893005f,
N    0.276188760995865f,
N  0.917008757591248f, 0.275868982076645f, 0.917220234870911f,
N    0.275549083948135f,
N  0.917431414127350f, 0.275228977203369f, 0.917642414569855f,
N    0.274908751249313f,
N  0.917853116989136f, 0.274588316679001f, 0.918063640594482f,
N    0.274267762899399f,
N  0.918273866176605f, 0.273947030305862f, 0.918483853340149f,
N    0.273626148700714f,
N  0.918693602085114f, 0.273305088281631f, 0.918903112411499f,
N    0.272983878850937f,
N  0.919112324714661f, 0.272662490606308f, 0.919321358203888f,
N    0.272340953350067f,
N  0.919530093669891f, 0.272019267082214f, 0.919738650321960f,
N    0.271697402000427f,
N  0.919946908950806f, 0.271375387907028f, 0.920154929161072f,
N    0.271053224802017f,
N  0.920362710952759f, 0.270730882883072f, 0.920570194721222f,
N    0.270408391952515f,
N  0.920777499675751f, 0.270085722208023f, 0.920984506607056f,
N    0.269762933254242f,
N  0.921191275119781f, 0.269439965486526f, 0.921397805213928f,
N    0.269116818904877f,
N  0.921604096889496f, 0.268793523311615f, 0.921810150146484f,
N    0.268470078706741f,
N  0.922015964984894f, 0.268146485090256f, 0.922221481800079f,
N    0.267822742462158f,
N  0.922426760196686f, 0.267498821020126f, 0.922631800174713f,
N    0.267174720764160f,
N  0.922836601734161f, 0.266850501298904f, 0.923041164875031f,
N    0.266526103019714f,
N  0.923245489597321f, 0.266201555728912f, 0.923449516296387f,
N    0.265876859426498f,
N  0.923653304576874f, 0.265552014112473f, 0.923856854438782f,
N    0.265226989984512f,
N  0.924060165882111f, 0.264901816844940f, 0.924263238906860f,
N    0.264576494693756f,
N  0.924466013908386f, 0.264250993728638f, 0.924668610095978f,
N    0.263925373554230f,
N  0.924870908260345f, 0.263599574565887f, 0.925072908401489f,
N    0.263273626565933f,
N  0.925274729728699f, 0.262947499752045f, 0.925476312637329f,
N    0.262621253728867f,
N  0.925677597522736f, 0.262294828891754f, 0.925878643989563f,
N    0.261968284845352f,
N  0.926079452037811f, 0.261641561985016f, 0.926280021667480f,
N    0.261314690113068f,
N  0.926480293273926f, 0.260987639427185f, 0.926680326461792f,
N    0.260660469532013f,
N  0.926880121231079f, 0.260333120822906f, 0.927079677581787f,
N    0.260005623102188f,
N  0.927278995513916f, 0.259678006172180f, 0.927478015422821f,
N    0.259350210428238f,
N  0.927676856517792f, 0.259022265672684f, 0.927875399589539f,
N    0.258694142103195f,
N  0.928073644638062f, 0.258365899324417f, 0.928271710872650f,
N    0.258037507534027f,
N  0.928469479084015f, 0.257708936929703f, 0.928667008876801f,
N    0.257380217313766f,
N  0.928864300251007f, 0.257051378488541f, 0.929061353206635f,
N    0.256722360849380f,
N  0.929258108139038f, 0.256393194198608f, 0.929454624652863f,
N    0.256063878536224f,
N  0.929650902748108f, 0.255734413862228f, 0.929846942424774f,
N    0.255404800176620f,
N  0.930042684078217f, 0.255075037479401f, 0.930238187313080f,
N    0.254745125770569f,
N  0.930433452129364f, 0.254415065050125f, 0.930628478527069f,
N    0.254084855318069f,
N  0.930823206901550f, 0.253754496574402f, 0.931017756462097f,
N    0.253423988819122f,
N  0.931211948394775f, 0.253093332052231f, 0.931405961513519f,
N    0.252762526273727f,
N  0.931599736213684f, 0.252431541681290f, 0.931793212890625f,
N    0.252100437879562f,
N  0.931986451148987f, 0.251769185066223f, 0.932179391384125f,
N    0.251437783241272f,
N  0.932372152805328f, 0.251106232404709f, 0.932564616203308f,
N    0.250774532556534f,
N  0.932756841182709f, 0.250442683696747f, 0.932948768138886f,
N    0.250110685825348f,
N  0.933140456676483f, 0.249778553843498f, 0.933331906795502f,
N    0.249446272850037f,
N  0.933523118495941f, 0.249113827943802f, 0.933714091777802f,
N    0.248781248927116f,
N  0.933904767036438f, 0.248448520898819f, 0.934095203876495f,
N    0.248115643858910f,
N  0.934285342693329f, 0.247782632708550f, 0.934475243091583f,
N    0.247449472546577f,
N  0.934664964675903f, 0.247116148471832f, 0.934854328632355f,
N    0.246782705187798f,
N  0.935043513774872f, 0.246449097990990f, 0.935232400894165f,
N    0.246115356683731f,
N  0.935421049594879f, 0.245781451463699f, 0.935609400272369f,
N    0.245447427034378f,
N  0.935797572135925f, 0.245113238692284f, 0.935985386371613f,
N    0.244778916239738f,
N  0.936173021793365f, 0.244444444775581f, 0.936360359191895f,
N    0.244109839200974f,
N  0.936547517776489f, 0.243775084614754f, 0.936734318733215f,
N    0.243440181016922f,
N  0.936920940876007f, 0.243105143308640f, 0.937107264995575f,
N    0.242769956588745f,
N  0.937293350696564f, 0.242434620857239f, 0.937479138374329f,
N    0.242099151015282f,
N  0.937664687633514f, 0.241763532161713f, 0.937849998474121f,
N    0.241427779197693f,
N  0.938035070896149f, 0.241091892123222f, 0.938219845294952f,
N    0.240755841135979f,
N  0.938404381275177f, 0.240419670939446f, 0.938588619232178f,
N    0.240083336830139f,
N  0.938772618770599f, 0.239746883511543f, 0.938956379890442f,
N    0.239410281181335f,
N  0.939139902591705f, 0.239073529839516f, 0.939323127269745f,
N    0.238736644387245f,
N  0.939506113529205f, 0.238399609923363f, 0.939688861370087f,
N    0.238062441349030f,
N  0.939871311187744f, 0.237725138664246f, 0.940053522586823f,
N    0.237387686967850f,
N  0.940235435962677f, 0.237050101161003f, 0.940417110919952f,
N    0.236712381243706f,
N  0.940598547458649f, 0.236374512314796f, 0.940779745578766f,
N    0.236036509275436f,
N  0.940960645675659f, 0.235698372125626f, 0.941141307353973f,
N    0.235360085964203f,
N  0.941321671009064f, 0.235021665692329f, 0.941501796245575f,
N    0.234683111310005f,
N  0.941681683063507f, 0.234344407916069f, 0.941861271858215f,
N    0.234005570411682f,
N  0.942040622234344f, 0.233666598796844f, 0.942219734191895f,
N    0.233327493071556f,
N  0.942398548126221f, 0.232988253235817f, 0.942577123641968f,
N    0.232648864388466f,
N  0.942755401134491f, 0.232309341430664f, 0.942933499813080f,
N    0.231969684362412f,
N  0.943111240863800f, 0.231629893183708f, 0.943288803100586f,
N    0.231289967894554f,
N  0.943466067314148f, 0.230949893593788f, 0.943643093109131f,
N    0.230609700083733f,
N  0.943819820880890f, 0.230269357562065f, 0.943996310234070f,
N    0.229928880929947f,
N  0.944172501564026f, 0.229588270187378f, 0.944348454475403f,
N    0.229247525334358f,
N  0.944524168968201f, 0.228906646370888f, 0.944699645042419f,
N    0.228565633296967f,
N  0.944874763488770f, 0.228224486112595f, 0.945049703121185f,
N    0.227883204817772f,
N  0.945224344730377f, 0.227541789412498f, 0.945398747920990f,
N    0.227200239896774f,
N  0.945572853088379f, 0.226858556270599f, 0.945746779441834f,
N    0.226516738533974f,
N  0.945920348167419f, 0.226174786686897f, 0.946093678474426f,
N    0.225832715630531f,
N  0.946266770362854f, 0.225490495562553f, 0.946439623832703f,
N    0.225148141384125f,
N  0.946612179279327f, 0.224805667996407f, 0.946784436702728f,
N    0.224463045597076f,
N  0.946956455707550f, 0.224120303988457f, 0.947128236293793f,
N    0.223777428269386f,
N  0.947299718856812f, 0.223434418439865f, 0.947470963001251f,
N    0.223091274499893f,
N  0.947641968727112f, 0.222748011350632f, 0.947812676429749f,
N    0.222404599189758f,
N  0.947983145713806f, 0.222061067819595f, 0.948153316974640f,
N    0.221717402338982f,
N  0.948323249816895f, 0.221373617649078f, 0.948492884635925f,
N    0.221029683947563f,
N  0.948662281036377f, 0.220685631036758f, 0.948831439018250f,
N    0.220341444015503f,
N  0.949000298976898f, 0.219997137784958f, 0.949168920516968f,
N    0.219652697443962f,
N  0.949337244033813f, 0.219308122992516f, 0.949505329132080f,
N    0.218963414430618f,
N  0.949673116207123f, 0.218618586659431f, 0.949840664863586f,
N    0.218273624777794f,
N  0.950007975101471f, 0.217928543686867f, 0.950174987316132f,
N    0.217583328485489f,
N  0.950341701507568f, 0.217237979173660f, 0.950508177280426f,
N    0.216892510652542f,
N  0.950674414634705f, 0.216546908020973f, 0.950840353965759f,
N    0.216201186180115f,
N  0.951006054878235f, 0.215855330228806f, 0.951171517372131f,
N    0.215509355068207f,
N  0.951336681842804f, 0.215163245797157f, 0.951501548290253f,
N    0.214817002415657f,
N  0.951666176319122f, 0.214470639824867f, 0.951830565929413f,
N    0.214124158024788f,
N  0.951994657516479f, 0.213777542114258f, 0.952158451080322f,
N    0.213430806994438f,
N  0.952322065830231f, 0.213083937764168f, 0.952485322952271f,
N    0.212736949324608f,
N  0.952648401260376f, 0.212389841675758f, 0.952811121940613f,
N    0.212042599916458f,
N  0.952973663806915f, 0.211695238947868f, 0.953135907649994f,
N    0.211347743868828f,
N  0.953297853469849f, 0.211000129580498f, 0.953459560871124f,
N    0.210652396082878f,
N  0.953620970249176f, 0.210304543375969f, 0.953782141208649f,
N    0.209956556558609f,
N  0.953943073749542f, 0.209608450531960f, 0.954103708267212f,
N    0.209260210394859f,
N  0.954264044761658f, 0.208911851048470f, 0.954424142837524f,
N    0.208563387393951f,
N  0.954584002494812f, 0.208214774727821f, 0.954743564128876f,
N    0.207866057753563f,
N  0.954902827739716f, 0.207517206668854f, 0.955061912536621f,
N    0.207168251276016f,
N  0.955220639705658f, 0.206819161772728f, 0.955379128456116f,
N    0.206469938158989f,
N  0.955537378787994f, 0.206120610237122f, 0.955695331096649f,
N    0.205771163105965f,
N  0.955853044986725f, 0.205421581864357f, 0.956010460853577f,
N    0.205071896314621f,
N  0.956167578697205f, 0.204722076654434f, 0.956324458122253f,
N    0.204372137784958f,
N  0.956481099128723f, 0.204022079706192f, 0.956637442111969f,
N    0.203671902418137f,
N  0.956793546676636f, 0.203321605920792f, 0.956949353218079f,
N    0.202971190214157f,
N  0.957104861736298f, 0.202620655298233f, 0.957260131835938f,
N    0.202270001173019f,
N  0.957415163516998f, 0.201919227838516f, 0.957569897174835f,
N    0.201568335294724f,
N  0.957724332809448f, 0.201217323541641f, 0.957878530025482f,
N    0.200866192579269f,
N  0.958032488822937f, 0.200514942407608f, 0.958186149597168f,
N    0.200163587927818f,
N  0.958339512348175f, 0.199812099337578f, 0.958492636680603f,
N    0.199460506439209f,
N  0.958645522594452f, 0.199108779430389f, 0.958798050880432f,
N    0.198756948113441f,
N  0.958950400352478f, 0.198404997587204f, 0.959102451801300f,
N    0.198052927851677f,
N  0.959254205226898f, 0.197700738906860f, 0.959405720233917f,
N    0.197348430752754f,
N  0.959556937217712f, 0.196996018290520f, 0.959707856178284f,
N    0.196643486618996f,
N  0.959858596324921f, 0.196290835738182f, 0.960008978843689f,
N    0.195938065648079f,
N  0.960159122943878f, 0.195585191249847f, 0.960309028625488f,
N    0.195232197642326f,
N  0.960458636283875f, 0.194879084825516f, 0.960607945919037f,
N    0.194525867700577f,
N  0.960757017135620f, 0.194172516465187f, 0.960905790328979f,
N    0.193819075822830f,
N  0.961054325103760f, 0.193465501070023f, 0.961202561855316f,
N    0.193111822009087f,
N  0.961350560188293f, 0.192758023738861f, 0.961498260498047f,
N    0.192404121160507f,
N  0.961645722389221f, 0.192050099372864f, 0.961792886257172f,
N    0.191695958375931f,
N  0.961939752101898f, 0.191341713070869f, 0.962086379528046f,
N    0.190987363457680f,
N  0.962232708930969f, 0.190632879734039f, 0.962378799915314f,
N    0.190278306603432f,
N  0.962524592876434f, 0.189923599362373f, 0.962670147418976f,
N    0.189568802714348f,
N  0.962815403938293f, 0.189213871955872f, 0.962960422039032f,
N    0.188858851790428f,
N  0.963105142116547f, 0.188503712415695f, 0.963249564170837f,
N    0.188148453831673f,
N  0.963393747806549f, 0.187793090939522f, 0.963537633419037f,
N    0.187437608838081f,
N  0.963681280612946f, 0.187082037329674f, 0.963824629783630f,
N    0.186726331710815f,
N  0.963967680931091f, 0.186370536684990f, 0.964110493659973f,
N    0.186014622449875f,
N  0.964253067970276f, 0.185658603906631f, 0.964395284652710f,
N    0.185302466154099f,
N  0.964537262916565f, 0.184946224093437f, 0.964679002761841f,
N    0.184589877724648f,
N  0.964820444583893f, 0.184233412146568f, 0.964961588382721f,
N    0.183876842260361f,
N  0.965102493762970f, 0.183520168066025f, 0.965243160724640f,
N    0.183163389563560f,
N  0.965383470058441f, 0.182806491851807f, 0.965523540973663f,
N    0.182449504733086f,
N  0.965663373470306f, 0.182092398405075f, 0.965802907943726f,
N    0.181735187768936f,
N  0.965942144393921f, 0.181377857923508f, 0.966081082820892f,
N    0.181020438671112f,
N  0.966219842433929f, 0.180662900209427f, 0.966358244419098f,
N    0.180305257439613f,
N  0.966496407985687f, 0.179947525262833f, 0.966634273529053f,
N    0.179589673876762f,
N  0.966771900653839f, 0.179231703281403f, 0.966909229755402f,
N    0.178873643279076f,
N  0.967046260833740f, 0.178515478968620f, 0.967183053493500f,
N    0.178157210350037f,
N  0.967319548130035f, 0.177798837423325f, 0.967455804347992f,
N    0.177440345287323f,
N  0.967591762542725f, 0.177081763744354f, 0.967727422714233f,
N    0.176723077893257f,
N  0.967862844467163f, 0.176364272832870f, 0.967997968196869f,
N    0.176005378365517f,
N  0.968132853507996f, 0.175646379590034f, 0.968267440795898f,
N    0.175287276506424f,
N  0.968401730060577f, 0.174928069114685f, 0.968535780906677f,
N    0.174568757414818f,
N  0.968669533729553f, 0.174209341406822f, 0.968802988529205f,
N    0.173849821090698f,
N  0.968936204910278f, 0.173490211367607f, 0.969069123268127f,
N    0.173130482435226f,
N  0.969201743602753f, 0.172770664095879f, 0.969334125518799f,
N    0.172410741448402f,
N  0.969466269016266f, 0.172050714492798f, 0.969598054885864f,
N    0.171690583229065f,
N  0.969729602336884f, 0.171330362558365f, 0.969860911369324f,
N    0.170970037579536f,
N  0.969991862773895f, 0.170609608292580f, 0.970122575759888f,
N    0.170249074697495f,
N  0.970253050327301f, 0.169888436794281f, 0.970383226871490f,
N    0.169527709484100f,
N  0.970513105392456f, 0.169166877865791f, 0.970642685890198f,
N    0.168805956840515f,
N  0.970772027969360f, 0.168444931507111f, 0.970901072025299f,
N    0.168083801865578f,
N  0.971029877662659f, 0.167722567915916f, 0.971158385276794f,
N    0.167361244559288f,
N  0.971286594867706f, 0.166999831795692f, 0.971414566040039f,
N    0.166638299822807f,
N  0.971542239189148f, 0.166276678442955f, 0.971669614315033f,
N    0.165914967656136f,
N  0.971796751022339f, 0.165553152561188f, 0.971923589706421f,
N    0.165191248059273f,
N  0.972050130367279f, 0.164829224348068f, 0.972176432609558f,
N    0.164467126131058f,
N  0.972302436828613f, 0.164104923605919f, 0.972428143024445f,
N    0.163742616772652f,
N  0.972553610801697f, 0.163380220532417f, 0.972678780555725f,
N    0.163017734885216f,
N  0.972803652286530f, 0.162655144929886f, 0.972928285598755f,
N    0.162292465567589f,
N  0.973052620887756f, 0.161929681897163f, 0.973176658153534f,
N    0.161566808819771f,
N  0.973300457000732f, 0.161203846335411f, 0.973423957824707f,
N    0.160840779542923f,
N  0.973547160625458f, 0.160477623343468f, 0.973670125007629f,
N    0.160114362835884f,
N  0.973792791366577f, 0.159751012921333f, 0.973915159702301f,
N    0.159387573599815f,
N  0.974037289619446f, 0.159024044871330f, 0.974159121513367f,
N    0.158660411834717f,
N  0.974280655384064f, 0.158296689391136f, 0.974401950836182f,
N    0.157932877540588f,
N  0.974522948265076f, 0.157568961381912f, 0.974643647670746f,
N    0.157204970717430f,
N  0.974764108657837f, 0.156840875744820f, 0.974884271621704f,
N    0.156476691365242f,
N  0.975004136562347f, 0.156112402677536f, 0.975123703479767f,
N    0.155748039484024f,
N  0.975243031978607f, 0.155383571982384f, 0.975362062454224f,
N    0.155019029974937f,
N  0.975480854511261f, 0.154654383659363f, 0.975599288940430f,
N    0.154289647936821f,
N  0.975717484951019f, 0.153924822807312f, 0.975835442543030f,
N    0.153559908270836f,
N  0.975953042507172f, 0.153194904327393f, 0.976070404052734f,
N    0.152829796075821f,
N  0.976187527179718f, 0.152464613318443f, 0.976304292678833f,
N    0.152099341154099f,
N  0.976420819759369f, 0.151733979582787f, 0.976537048816681f,
N    0.151368513703346f,
N  0.976653039455414f, 0.151002973318100f, 0.976768672466278f,
N    0.150637343525887f,
N  0.976884067058563f, 0.150271624326706f, 0.976999223232269f,
N    0.149905815720558f,
N  0.977114021778107f, 0.149539917707443f, 0.977228581905365f,
N    0.149173930287361f,
N  0.977342903614044f, 0.148807853460312f, 0.977456867694855f,
N    0.148441687226295f,
N  0.977570593357086f, 0.148075446486473f, 0.977684020996094f,
N    0.147709101438522f,
N  0.977797150611877f, 0.147342681884766f, 0.977910041809082f,
N    0.146976172924042f,
N  0.978022634983063f, 0.146609574556351f, 0.978134930133820f,
N    0.146242901682854f,
N  0.978246986865997f, 0.145876124501228f, 0.978358685970306f,
N    0.145509272813797f,
N  0.978470146656036f, 0.145142331719399f, 0.978581368923187f,
N    0.144775316119194f,
N  0.978692233562469f, 0.144408211112022f, 0.978802859783173f,
N    0.144041016697884f,
N  0.978913187980652f, 0.143673732876778f, 0.979023277759552f,
N    0.143306359648705f,
N  0.979133009910584f, 0.142938911914825f, 0.979242503643036f,
N    0.142571389675140f,
N  0.979351758956909f, 0.142203763127327f, 0.979460656642914f,
N    0.141836062073708f,
N  0.979569315910339f, 0.141468286514282f, 0.979677677154541f,
N    0.141100421547890f,
N  0.979785740375519f, 0.140732467174530f, 0.979893565177917f,
N    0.140364438295364f,
N  0.980001091957092f, 0.139996320009232f, 0.980108320713043f,
N    0.139628127217293f,
N  0.980215251445770f, 0.139259845018387f, 0.980321943759918f,
N    0.138891488313675f,
N  0.980428338050842f, 0.138523042201996f, 0.980534434318542f,
N    0.138154521584511f,
N  0.980640232563019f, 0.137785911560059f, 0.980745792388916f,
N    0.137417227029800f,
N  0.980851054191589f, 0.137048453092575f, 0.980956017971039f,
N    0.136679604649544f,
N  0.981060683727264f, 0.136310681700706f, 0.981165111064911f,
N    0.135941669344902f,
N  0.981269240379334f, 0.135572582483292f, 0.981373071670532f,
N    0.135203406214714f,
N  0.981476604938507f, 0.134834155440331f, 0.981579899787903f,
N    0.134464830160141f,
N  0.981682896614075f, 0.134095430374146f, 0.981785595417023f,
N    0.133725941181183f,
N  0.981888055801392f, 0.133356377482414f, 0.981990158557892f,
N    0.132986739277840f,
N  0.982092022895813f, 0.132617011666298f, 0.982193589210510f,
N    0.132247209548950f,
N  0.982294917106628f, 0.131877332925797f, 0.982395887374878f,
N    0.131507381796837f,
N  0.982496619224548f, 0.131137356162071f, 0.982597053050995f,
N    0.130767241120338f,
N  0.982697248458862f, 0.130397051572800f, 0.982797086238861f,
N    0.130026802420616f,
N  0.982896685600281f, 0.129656463861465f, 0.982995986938477f,
N    0.129286035895348f,
N  0.983094990253448f, 0.128915548324585f, 0.983193755149841f,
N    0.128544986248016f,
N  0.983292162418365f, 0.128174334764481f, 0.983390331268311f,
N    0.127803623676300f,
N  0.983488261699677f, 0.127432823181152f, 0.983585834503174f,
N    0.127061963081360f,
N  0.983683168888092f, 0.126691013574600f, 0.983780145645142f,
N    0.126320004463196f,
N  0.983876943588257f, 0.125948905944824f, 0.983973383903503f,
N    0.125577747821808f,
N  0.984069526195526f, 0.125206500291824f, 0.984165430068970f,
N    0.124835193157196f,
N  0.984261035919189f, 0.124463804066181f, 0.984356343746185f,
N    0.124092340469360f,
N  0.984451413154602f, 0.123720809817314f, 0.984546124935150f,
N    0.123349204659462f,
N  0.984640598297119f, 0.122977524995804f, 0.984734773635864f,
N    0.122605770826340f,
N  0.984828710556030f, 0.122233949601650f, 0.984922289848328f,
N    0.121862053871155f,
N  0.985015630722046f, 0.121490091085434f, 0.985108673572540f,
N    0.121118053793907f,
N  0.985201418399811f, 0.120745941996574f, 0.985293865203857f,
N    0.120373763144016f,
N  0.985386073589325f, 0.120001509785652f, 0.985477983951569f,
N    0.119629189372063f,
N  0.985569596290588f, 0.119256794452667f, 0.985660910606384f,
N    0.118884332478046f,
N  0.985751926898956f, 0.118511803448200f, 0.985842704772949f,
N    0.118139199912548f,
N  0.985933184623718f, 0.117766529321671f, 0.986023366451263f,
N    0.117393791675568f,
N  0.986113250255585f, 0.117020979523659f, 0.986202836036682f,
N    0.116648100316525f,
N  0.986292183399200f, 0.116275154054165f, 0.986381232738495f,
N    0.115902140736580f,
N  0.986469984054565f, 0.115529052913189f, 0.986558437347412f,
N    0.115155905485153f,
N  0.986646652221680f, 0.114782683551311f, 0.986734509468079f,
N    0.114409394562244f,
N  0.986822128295898f, 0.114036038517952f, 0.986909449100494f,
N    0.113662622869015f,
N  0.986996471881866f, 0.113289132714272f, 0.987083256244659f,
N    0.112915575504303f,
N  0.987169682979584f, 0.112541958689690f, 0.987255871295929f,
N    0.112168267369270f,
N  0.987341761589050f, 0.111794516444206f, 0.987427353858948f,
N    0.111420698463917f,
N  0.987512648105621f, 0.111046813428402f, 0.987597703933716f,
N    0.110672861337662f,
N  0.987682461738586f, 0.110298842191696f, 0.987766921520233f,
N    0.109924763441086f,
N  0.987851083278656f, 0.109550617635250f, 0.987934947013855f,
N    0.109176412224770f,
N  0.988018512725830f, 0.108802139759064f, 0.988101840019226f,
N    0.108427800238132f,
N  0.988184869289398f, 0.108053401112556f, 0.988267600536346f,
N    0.107678934931755f,
N  0.988350033760071f, 0.107304409146309f, 0.988432228565216f,
N    0.106929816305637f,
N  0.988514065742493f, 0.106555156409740f, 0.988595664501190f,
N    0.106180444359779f,
N  0.988676965236664f, 0.105805665254593f, 0.988757967948914f,
N    0.105430819094181f,
N  0.988838672637939f, 0.105055920779705f, 0.988919138908386f,
N    0.104680955410004f,
N  0.988999247550964f, 0.104305922985077f, 0.989079117774963f,
N    0.103930838406086f,
N  0.989158689975739f, 0.103555686771870f, 0.989237964153290f,
N    0.103180475533009f,
N  0.989316940307617f, 0.102805204689503f, 0.989395678043365f,
N    0.102429874241352f,
N  0.989474058151245f, 0.102054484188557f, 0.989552199840546f,
N    0.101679034531116f,
N  0.989630043506622f, 0.101303517818451f, 0.989707589149475f,
N    0.100927948951721f,
N  0.989784896373749f, 0.100552320480347f, 0.989861845970154f,
N    0.100176624953747f,
N  0.989938557147980f, 0.099800877273083f, 0.990014970302582f,
N    0.099425069987774f,
N  0.990091085433960f, 0.099049203097820f, 0.990166902542114f,
N    0.098673284053802f,
N  0.990242421627045f, 0.098297297954559f, 0.990317702293396f,
N    0.097921259701252f,
N  0.990392625331879f, 0.097545161843300f, 0.990467309951782f,
N    0.097169004380703f,
N  0.990541696548462f, 0.096792794764042f, 0.990615785121918f,
N    0.096416525542736f,
N  0.990689575672150f, 0.096040196716785f, 0.990763127803802f,
N    0.095663815736771f,
N  0.990836322307587f, 0.095287375152111f, 0.990909278392792f,
N    0.094910882413387f,
N  0.990981936454773f, 0.094534330070019f, 0.991054296493530f,
N    0.094157725572586f,
N  0.991126358509064f, 0.093781061470509f, 0.991198182106018f,
N    0.093404345214367f,
N  0.991269648075104f, 0.093027576804161f, 0.991340875625610f,
N    0.092650748789310f,
N  0.991411805152893f, 0.092273868620396f, 0.991482377052307f,
N    0.091896936297417f,
N  0.991552770137787f, 0.091519944369793f, 0.991622805595398f,
N    0.091142900288105f,
N  0.991692543029785f, 0.090765804052353f, 0.991762042045593f,
N    0.090388655662537f,
N  0.991831183433533f, 0.090011447668076f, 0.991900086402893f,
N    0.089634194970131f,
N  0.991968691349030f, 0.089256882667542f, 0.992036998271942f,
N    0.088879525661469f,
N  0.992105066776276f, 0.088502109050751f, 0.992172777652740f,
N    0.088124647736549f,
N  0.992240250110626f, 0.087747126817703f, 0.992307364940643f,
N    0.087369553744793f,
N  0.992374241352081f, 0.086991935968399f, 0.992440819740295f,
N    0.086614266037941f,
N  0.992507100105286f, 0.086236543953419f, 0.992573142051697f,
N    0.085858769714832f,
N  0.992638826370239f, 0.085480943322182f, 0.992704212665558f,
N    0.085103072226048f,
N  0.992769360542297f, 0.084725148975849f, 0.992834210395813f,
N    0.084347173571587f,
N  0.992898762226105f, 0.083969146013260f, 0.992963016033173f,
N    0.083591073751450f,
N  0.993026971817017f, 0.083212949335575f, 0.993090689182281f,
N    0.082834780216217f,
N  0.993154048919678f, 0.082456558942795f, 0.993217170238495f,
N    0.082078292965889f,
N  0.993279933929443f, 0.081699974834919f, 0.993342459201813f,
N    0.081321612000465f,
N  0.993404686450958f, 0.080943197011948f, 0.993466615676880f,
N    0.080564737319946f,
N  0.993528306484222f, 0.080186225473881f, 0.993589639663696f,
N    0.079807676374912f,
N  0.993650734424591f, 0.079429075121880f, 0.993711471557617f,
N    0.079050421714783f,
N  0.993771970272064f, 0.078671731054783f, 0.993832170963287f,
N    0.078292988240719f,
N  0.993892073631287f, 0.077914200723171f, 0.993951678276062f,
N    0.077535368502140f,
N  0.994010984897614f, 0.077156484127045f, 0.994070053100586f,
N    0.076777562499046f,
N  0.994128763675690f, 0.076398596167564f, 0.994187235832214f,
N    0.076019577682018f,
N  0.994245409965515f, 0.075640521943569f, 0.994303286075592f,
N    0.075261414051056f,
N  0.994360864162445f, 0.074882268905640f, 0.994418144226074f,
N    0.074503071606159f,
N  0.994475126266479f, 0.074123837053776f, 0.994531810283661f,
N    0.073744557797909f,
N  0.994588255882263f, 0.073365233838558f, 0.994644403457642f,
N    0.072985872626305f,
N  0.994700193405151f, 0.072606459259987f, 0.994755744934082f,
N    0.072227008640766f,
N  0.994810998439789f, 0.071847513318062f, 0.994865953922272f,
N    0.071467980742455f,
N  0.994920611381531f, 0.071088403463364f, 0.994975030422211f,
N    0.070708781480789f,
N  0.995029091835022f, 0.070329122245312f, 0.995082914829254f,
N    0.069949418306351f,
N  0.995136380195618f, 0.069569669663906f, 0.995189607143402f,
N    0.069189883768559f,
N  0.995242536067963f, 0.068810060620308f, 0.995295166969299f,
N    0.068430192768574f,
N  0.995347499847412f, 0.068050287663937f, 0.995399534702301f,
N    0.067670337855816f,
N  0.995451331138611f, 0.067290350794792f, 0.995502769947052f,
N    0.066910326480865f,
N  0.995553970336914f, 0.066530264914036f, 0.995604813098907f,
N    0.066150158643723f,
N  0.995655417442322f, 0.065770015120506f, 0.995705723762512f,
N    0.065389834344387f,
N  0.995755732059479f, 0.065009608864784f, 0.995805442333221f,
N    0.064629353582859f,
N  0.995854854583740f, 0.064249053597450f, 0.995904028415680f,
N    0.063868723809719f,
N  0.995952844619751f, 0.063488349318504f, 0.996001422405243f,
N    0.063107937574387f,
N  0.996049642562866f, 0.062727488577366f, 0.996097624301910f,
N    0.062347009778023f,
N  0.996145308017731f, 0.061966486275196f, 0.996192693710327f,
N    0.061585929244757f,
N  0.996239781379700f, 0.061205338686705f, 0.996286571025848f,
N    0.060824707150459f,
N  0.996333062648773f, 0.060444042086601f, 0.996379256248474f,
N    0.060063343495131f,
N  0.996425211429596f, 0.059682607650757f, 0.996470808982849f,
N    0.059301838278770f,
N  0.996516168117523f, 0.058921031653881f, 0.996561229228973f,
N    0.058540191501379f,
N  0.996605992317200f, 0.058159314095974f, 0.996650457382202f,
N    0.057778406888247f,
N  0.996694624423981f, 0.057397462427616f, 0.996738493442535f,
N    0.057016488164663f,
N  0.996782064437866f, 0.056635476648808f, 0.996825337409973f,
N    0.056254431605339f,
N  0.996868371963501f, 0.055873356759548f, 0.996911048889160f,
N    0.055492244660854f,
N  0.996953487396240f, 0.055111102759838f, 0.996995627880096f,
N    0.054729927331209f,
N  0.997037410736084f, 0.054348722100258f, 0.997078955173492f,
N    0.053967483341694f,
N  0.997120201587677f, 0.053586211055517f, 0.997161149978638f,
N    0.053204908967018f,
N  0.997201859951019f, 0.052823577076197f, 0.997242212295532f,
N    0.052442211657763f,
N  0.997282266616821f, 0.052060816437006f, 0.997322082519531f,
N    0.051679391413927f,
N  0.997361540794373f, 0.051297932863235f, 0.997400760650635f,
N    0.050916448235512f,
N  0.997439682483673f, 0.050534930080175f, 0.997478306293488f,
N    0.050153385847807f,
N  0.997516572475433f, 0.049771808087826f, 0.997554600238800f,
N    0.049390204250813f,
N  0.997592389583588f, 0.049008570611477f, 0.997629821300507f,
N    0.048626907169819f,
N  0.997666954994202f, 0.048245213925838f, 0.997703790664673f,
N    0.047863494604826f,
N  0.997740387916565f, 0.047481749206781f, 0.997776627540588f,
N    0.047099970281124f,
N  0.997812628746033f, 0.046718169003725f, 0.997848331928253f,
N    0.046336337924004f,
N  0.997883677482605f, 0.045954477041960f, 0.997918784618378f,
N    0.045572593808174f,
N  0.997953593730927f, 0.045190680772066f, 0.997988104820251f,
N    0.044808741658926f,
N  0.998022377490997f, 0.044426776468754f, 0.998056292533875f,
N    0.044044785201550f,
N  0.998089909553528f, 0.043662767857313f, 0.998123228549957f,
N    0.043280724436045f,
N  0.998156309127808f, 0.042898654937744f, 0.998189091682434f,
N    0.042516563087702f,
N  0.998221516609192f, 0.042134445160627f, 0.998253703117371f,
N    0.041752301156521f,
N  0.998285591602325f, 0.041370131075382f, 0.998317182064056f,
N    0.040987938642502f,
N  0.998348474502563f, 0.040605723857880f, 0.998379468917847f,
N    0.040223482996225f,
N  0.998410165309906f, 0.039841219782829f, 0.998440563678741f,
N    0.039458930492401f,
N  0.998470664024353f, 0.039076622575521f, 0.998500525951386f,
N    0.038694288581610f,
N  0.998530030250549f, 0.038311932235956f, 0.998559296131134f,
N    0.037929553538561f,
N  0.998588204383850f, 0.037547148764133f, 0.998616874217987f,
N    0.037164725363255f,
N  0.998645246028900f, 0.036782283335924f, 0.998673319816589f,
N    0.036399815231562f,
N  0.998701035976410f, 0.036017324775457f, 0.998728513717651f,
N    0.035634815692902f,
N  0.998755753040314f, 0.035252287983894f, 0.998782634735107f,
N    0.034869734197855f,
N  0.998809218406677f, 0.034487165510654f, 0.998835504055023f,
N    0.034104570746422f,
N  0.998861551284790f, 0.033721961081028f, 0.998887240886688f,
N    0.033339329063892f,
N  0.998912692070007f, 0.032956674695015f, 0.998937785625458f,
N    0.032574005424976f,
N  0.998962640762329f, 0.032191313803196f, 0.998987197875977f,
N    0.031808607280254f,
N  0.999011456966400f, 0.031425878405571f, 0.999035418033600f,
N    0.031043132767081f,
N  0.999059081077576f, 0.030660368502140f, 0.999082446098328f,
N    0.030277585610747f,
N  0.999105513095856f, 0.029894785955548f, 0.999128282070160f,
N    0.029511967673898f,
N  0.999150753021240f, 0.029129132628441f, 0.999172985553741f,
N    0.028746278956532f,
N  0.999194860458374f, 0.028363410383463f, 0.999216496944427f,
N    0.027980525046587f,
N  0.999237775802612f, 0.027597622945905f, 0.999258816242218f,
N    0.027214704081416f,
N  0.999279558658600f, 0.026831768453121f, 0.999299943447113f,
N    0.026448817923665f,
N  0.999320089817047f, 0.026065852493048f, 0.999339938163757f,
N    0.025682870298624f,
N  0.999359488487244f, 0.025299875065684f, 0.999378740787506f,
N    0.024916863068938f,
N  0.999397754669189f, 0.024533838033676f, 0.999416410923004f,
N    0.024150796234608f,
N  0.999434769153595f, 0.023767741397023f, 0.999452829360962f,
N    0.023384673520923f,
N  0.999470651149750f, 0.023001590743661f, 0.999488115310669f,
N    0.022618494927883f,
N  0.999505341053009f, 0.022235386073589f, 0.999522268772125f,
N    0.021852264180779f,
N  0.999538838863373f, 0.021469129249454f, 0.999555170536041f,
N    0.021085981279612f,
N  0.999571204185486f, 0.020702820271254f, 0.999586939811707f,
N    0.020319648087025f,
N  0.999602377414703f, 0.019936462864280f, 0.999617516994476f,
N    0.019553268328309f,
N  0.999632358551025f, 0.019170060753822f, 0.999646902084351f,
N    0.018786842003465f,
N  0.999661207199097f, 0.018403612077236f, 0.999675154685974f,
N    0.018020370975137f,
N  0.999688863754272f, 0.017637118697166f, 0.999702215194702f,
N    0.017253857105970f,
N  0.999715328216553f, 0.016870586201549f, 0.999728083610535f,
N    0.016487304121256f,
N  0.999740600585938f, 0.016104012727737f, 0.999752819538116f,
N    0.015720712020993f,
N  0.999764680862427f, 0.015337402001023f, 0.999776303768158f,
N    0.014954082667828f,
N  0.999787628650665f, 0.014570754021406f, 0.999798655509949f,
N    0.014187417924404f,
N  0.999809384346008f, 0.013804072514176f, 0.999819874763489f,
N    0.013420719653368f,
N  0.999830007553101f, 0.013037359341979f, 0.999839842319489f,
N    0.012653990648687f,
N  0.999849438667297f, 0.012270614504814f, 0.999858677387238f,
N    0.011887230910361f,
N  0.999867618083954f, 0.011503840796649f, 0.999876320362091f,
N    0.011120444163680f,
N  0.999884724617004f, 0.010737040080130f, 0.999892771244049f,
N    0.010353630408645f,
N  0.999900579452515f, 0.009970214217901f, 0.999908089637756f,
N    0.009586792439222f,
N  0.999915301799774f, 0.009203365072608f, 0.999922215938568f,
N    0.008819932118058f,
N  0.999928832054138f, 0.008436493575573f, 0.999935150146484f,
N    0.008053051307797f,
N  0.999941170215607f, 0.007669602986425f, 0.999946892261505f,
N    0.007286150939763f,
N  0.999952375888824f, 0.006902694236487f, 0.999957501888275f,
N    0.006519233807921f,
N  0.999962329864502f, 0.006135769188404f, 0.999966919422150f,
N    0.005752300843596f,
N  0.999971151351929f, 0.005368829704821f, 0.999975144863129f,
N    0.004985354840755f,
N  0.999978840351105f, 0.004601877182722f, 0.999982178211212f,
N    0.004218397196382f,
N  0.999985277652740f, 0.003834914416075f, 0.999988079071045f,
N    0.003451429307461f,
N  0.999990582466125f, 0.003067942336202f, 0.999992787837982f,
N    0.002684453502297f,
N  0.999994695186615f, 0.002300963038579f, 0.999996304512024f,
N    0.001917471294291f,
N  0.999997675418854f, 0.001533978385851f, 0.999998688697815f,
N    0.001150484546088f,
N  0.999999403953552f, 0.000766990066040f, 0.999999880790710f,
N    0.000383495149435f,
N  1.000000000000000f, 0.000000000000023f, 0.999999880790710f,
N    -0.000383495149435f,
N  0.999999403953552f, -0.000766990066040f, 0.999998688697815f,
N    -0.001150484546088f,
N  0.999997675418854f, -0.001533978385851f, 0.999996304512024f,
N    -0.001917471294291f,
N  0.999994695186615f, -0.002300963038579f, 0.999992787837982f,
N    -0.002684453502297f,
N  0.999990582466125f, -0.003067942336202f, 0.999988079071045f,
N    -0.003451429307461f,
N  0.999985277652740f, -0.003834914416075f, 0.999982178211212f,
N    -0.004218397196382f,
N  0.999978840351105f, -0.004601877182722f, 0.999975144863129f,
N    -0.004985354840755f,
N  0.999971151351929f, -0.005368829704821f, 0.999966919422150f,
N    -0.005752300843596f,
N  0.999962329864502f, -0.006135769188404f, 0.999957501888275f,
N    -0.006519233807921f,
N  0.999952375888824f, -0.006902694236487f, 0.999946892261505f,
N    -0.007286150939763f,
N  0.999941170215607f, -0.007669602986425f, 0.999935150146484f,
N    -0.008053051307797f,
N  0.999928832054138f, -0.008436493575573f, 0.999922215938568f,
N    -0.008819932118058f,
N  0.999915301799774f, -0.009203365072608f, 0.999908089637756f,
N    -0.009586792439222f,
N  0.999900579452515f, -0.009970214217901f, 0.999892771244049f,
N    -0.010353630408645f,
N  0.999884724617004f, -0.010737040080130f, 0.999876320362091f,
N    -0.011120444163680f,
N  0.999867618083954f, -0.011503840796649f, 0.999858677387238f,
N    -0.011887230910361f,
N  0.999849438667297f, -0.012270614504814f, 0.999839842319489f,
N    -0.012653990648687f,
N  0.999830007553101f, -0.013037359341979f, 0.999819874763489f,
N    -0.013420719653368f,
N  0.999809384346008f, -0.013804072514176f, 0.999798655509949f,
N    -0.014187417924404f,
N  0.999787628650665f, -0.014570754021406f, 0.999776303768158f,
N    -0.014954082667828f,
N  0.999764680862427f, -0.015337402001023f, 0.999752819538116f,
N    -0.015720712020993f,
N  0.999740600585938f, -0.016104012727737f, 0.999728083610535f,
N    -0.016487304121256f,
N  0.999715328216553f, -0.016870586201549f, 0.999702215194702f,
N    -0.017253857105970f,
N  0.999688863754272f, -0.017637118697166f, 0.999675154685974f,
N    -0.018020370975137f,
N  0.999661207199097f, -0.018403612077236f, 0.999646902084351f,
N    -0.018786842003465f,
N  0.999632358551025f, -0.019170060753822f, 0.999617516994476f,
N    -0.019553268328309f,
N  0.999602377414703f, -0.019936462864280f, 0.999586939811707f,
N    -0.020319648087025f,
N  0.999571204185486f, -0.020702820271254f, 0.999555170536041f,
N    -0.021085981279612f,
N  0.999538838863373f, -0.021469129249454f, 0.999522268772125f,
N    -0.021852264180779f,
N  0.999505341053009f, -0.022235386073589f, 0.999488115310669f,
N    -0.022618494927883f,
N  0.999470651149750f, -0.023001590743661f, 0.999452829360962f,
N    -0.023384673520923f,
N  0.999434769153595f, -0.023767741397023f, 0.999416410923004f,
N    -0.024150796234608f,
N  0.999397754669189f, -0.024533838033676f, 0.999378740787506f,
N    -0.024916863068938f,
N  0.999359488487244f, -0.025299875065684f, 0.999339938163757f,
N    -0.025682870298624f,
N  0.999320089817047f, -0.026065852493048f, 0.999299943447113f,
N    -0.026448817923665f,
N  0.999279558658600f, -0.026831768453121f, 0.999258816242218f,
N    -0.027214704081416f,
N  0.999237775802612f, -0.027597622945905f, 0.999216496944427f,
N    -0.027980525046587f,
N  0.999194860458374f, -0.028363410383463f, 0.999172985553741f,
N    -0.028746278956532f,
N  0.999150753021240f, -0.029129132628441f, 0.999128282070160f,
N    -0.029511967673898f,
N  0.999105513095856f, -0.029894785955548f, 0.999082446098328f,
N    -0.030277585610747f,
N  0.999059081077576f, -0.030660368502140f, 0.999035418033600f,
N    -0.031043132767081f,
N  0.999011456966400f, -0.031425878405571f, 0.998987197875977f,
N    -0.031808607280254f,
N  0.998962640762329f, -0.032191313803196f, 0.998937785625458f,
N    -0.032574005424976f,
N  0.998912692070007f, -0.032956674695015f, 0.998887240886688f,
N    -0.033339329063892f,
N  0.998861551284790f, -0.033721961081028f, 0.998835504055023f,
N    -0.034104570746422f,
N  0.998809218406677f, -0.034487165510654f, 0.998782634735107f,
N    -0.034869734197855f,
N  0.998755753040314f, -0.035252287983894f, 0.998728513717651f,
N    -0.035634815692902f,
N  0.998701035976410f, -0.036017324775457f, 0.998673319816589f,
N    -0.036399815231562f,
N  0.998645246028900f, -0.036782283335924f, 0.998616874217987f,
N    -0.037164725363255f,
N  0.998588204383850f, -0.037547148764133f, 0.998559296131134f,
N    -0.037929553538561f,
N  0.998530030250549f, -0.038311932235956f, 0.998500525951386f,
N    -0.038694288581610f,
N  0.998470664024353f, -0.039076622575521f, 0.998440563678741f,
N    -0.039458930492401f,
N  0.998410165309906f, -0.039841219782829f, 0.998379468917847f,
N    -0.040223482996225f,
N  0.998348474502563f, -0.040605723857880f, 0.998317182064056f,
N    -0.040987938642502f,
N  0.998285591602325f, -0.041370131075382f, 0.998253703117371f,
N    -0.041752301156521f,
N  0.998221516609192f, -0.042134445160627f, 0.998189091682434f,
N    -0.042516563087702f,
N  0.998156309127808f, -0.042898654937744f, 0.998123228549957f,
N    -0.043280724436045f,
N  0.998089909553528f, -0.043662767857313f, 0.998056292533875f,
N    -0.044044785201550f,
N  0.998022377490997f, -0.044426776468754f, 0.997988104820251f,
N    -0.044808741658926f,
N  0.997953593730927f, -0.045190680772066f, 0.997918784618378f,
N    -0.045572593808174f,
N  0.997883677482605f, -0.045954477041960f, 0.997848331928253f,
N    -0.046336337924004f,
N  0.997812628746033f, -0.046718169003725f, 0.997776627540588f,
N    -0.047099970281124f,
N  0.997740387916565f, -0.047481749206781f, 0.997703790664673f,
N    -0.047863494604826f,
N  0.997666954994202f, -0.048245213925838f, 0.997629821300507f,
N    -0.048626907169819f,
N  0.997592389583588f, -0.049008570611477f, 0.997554600238800f,
N    -0.049390204250813f,
N  0.997516572475433f, -0.049771808087826f, 0.997478306293488f,
N    -0.050153385847807f,
N  0.997439682483673f, -0.050534930080175f, 0.997400760650635f,
N    -0.050916448235512f,
N  0.997361540794373f, -0.051297932863235f, 0.997322082519531f,
N    -0.051679391413927f,
N  0.997282266616821f, -0.052060816437006f, 0.997242212295532f,
N    -0.052442211657763f,
N  0.997201859951019f, -0.052823577076197f, 0.997161149978638f,
N    -0.053204908967018f,
N  0.997120201587677f, -0.053586211055517f, 0.997078955173492f,
N    -0.053967483341694f,
N  0.997037410736084f, -0.054348722100258f, 0.996995627880096f,
N    -0.054729927331209f,
N  0.996953487396240f, -0.055111102759838f, 0.996911048889160f,
N    -0.055492244660854f,
N  0.996868371963501f, -0.055873356759548f, 0.996825337409973f,
N    -0.056254431605339f,
N  0.996782064437866f, -0.056635476648808f, 0.996738493442535f,
N    -0.057016488164663f,
N  0.996694624423981f, -0.057397462427616f, 0.996650457382202f,
N    -0.057778406888247f,
N  0.996605992317200f, -0.058159314095974f, 0.996561229228973f,
N    -0.058540191501379f,
N  0.996516168117523f, -0.058921031653881f, 0.996470808982849f,
N    -0.059301838278770f,
N  0.996425211429596f, -0.059682607650757f, 0.996379256248474f,
N    -0.060063343495131f,
N  0.996333062648773f, -0.060444042086601f, 0.996286571025848f,
N    -0.060824707150459f,
N  0.996239781379700f, -0.061205338686705f, 0.996192693710327f,
N    -0.061585929244757f,
N  0.996145308017731f, -0.061966486275196f, 0.996097624301910f,
N    -0.062347009778023f,
N  0.996049642562866f, -0.062727488577366f, 0.996001422405243f,
N    -0.063107937574387f,
N  0.995952844619751f, -0.063488349318504f, 0.995904028415680f,
N    -0.063868723809719f,
N  0.995854854583740f, -0.064249053597450f, 0.995805442333221f,
N    -0.064629353582859f,
N  0.995755732059479f, -0.065009608864784f, 0.995705723762512f,
N    -0.065389834344387f,
N  0.995655417442322f, -0.065770015120506f, 0.995604813098907f,
N    -0.066150158643723f,
N  0.995553970336914f, -0.066530264914036f, 0.995502769947052f,
N    -0.066910326480865f,
N  0.995451331138611f, -0.067290350794792f, 0.995399534702301f,
N    -0.067670337855816f,
N  0.995347499847412f, -0.068050287663937f, 0.995295166969299f,
N    -0.068430192768574f,
N  0.995242536067963f, -0.068810060620308f, 0.995189607143402f,
N    -0.069189883768559f,
N  0.995136380195618f, -0.069569669663906f, 0.995082914829254f,
N    -0.069949418306351f,
N  0.995029091835022f, -0.070329122245312f, 0.994975030422211f,
N    -0.070708781480789f,
N  0.994920611381531f, -0.071088403463364f, 0.994865953922272f,
N    -0.071467980742455f,
N  0.994810998439789f, -0.071847513318062f, 0.994755744934082f,
N    -0.072227008640766f,
N  0.994700193405151f, -0.072606459259987f, 0.994644403457642f,
N    -0.072985872626305f,
N  0.994588255882263f, -0.073365233838558f, 0.994531810283661f,
N    -0.073744557797909f,
N  0.994475126266479f, -0.074123837053776f, 0.994418144226074f,
N    -0.074503071606159f,
N  0.994360864162445f, -0.074882268905640f, 0.994303286075592f,
N    -0.075261414051056f,
N  0.994245409965515f, -0.075640521943569f, 0.994187235832214f,
N    -0.076019577682018f,
N  0.994128763675690f, -0.076398596167564f, 0.994070053100586f,
N    -0.076777562499046f,
N  0.994010984897614f, -0.077156484127045f, 0.993951678276062f,
N    -0.077535368502140f,
N  0.993892073631287f, -0.077914200723171f, 0.993832170963287f,
N    -0.078292988240719f,
N  0.993771970272064f, -0.078671731054783f, 0.993711471557617f,
N    -0.079050421714783f,
N  0.993650734424591f, -0.079429075121880f, 0.993589639663696f,
N    -0.079807676374912f,
N  0.993528306484222f, -0.080186225473881f, 0.993466615676880f,
N    -0.080564737319946f,
N  0.993404686450958f, -0.080943197011948f, 0.993342459201813f,
N    -0.081321612000465f,
N  0.993279933929443f, -0.081699974834919f, 0.993217170238495f,
N    -0.082078292965889f,
N  0.993154048919678f, -0.082456558942795f, 0.993090689182281f,
N    -0.082834780216217f,
N  0.993026971817017f, -0.083212949335575f, 0.992963016033173f,
N    -0.083591073751450f,
N  0.992898762226105f, -0.083969146013260f, 0.992834210395813f,
N    -0.084347173571587f,
N  0.992769360542297f, -0.084725148975849f, 0.992704212665558f,
N    -0.085103072226048f,
N  0.992638826370239f, -0.085480943322182f, 0.992573142051697f,
N    -0.085858769714832f,
N  0.992507100105286f, -0.086236543953419f, 0.992440819740295f,
N    -0.086614266037941f,
N  0.992374241352081f, -0.086991935968399f, 0.992307364940643f,
N    -0.087369553744793f,
N  0.992240250110626f, -0.087747126817703f, 0.992172777652740f,
N    -0.088124647736549f,
N  0.992105066776276f, -0.088502109050751f, 0.992036998271942f,
N    -0.088879525661469f,
N  0.991968691349030f, -0.089256882667542f, 0.991900086402893f,
N    -0.089634194970131f,
N  0.991831183433533f, -0.090011447668076f, 0.991762042045593f,
N    -0.090388655662537f,
N  0.991692543029785f, -0.090765804052353f, 0.991622805595398f,
N    -0.091142900288105f,
N  0.991552770137787f, -0.091519944369793f, 0.991482377052307f,
N    -0.091896936297417f,
N  0.991411805152893f, -0.092273868620396f, 0.991340875625610f,
N    -0.092650748789310f,
N  0.991269648075104f, -0.093027576804161f, 0.991198182106018f,
N    -0.093404345214367f,
N  0.991126358509064f, -0.093781061470509f, 0.991054296493530f,
N    -0.094157725572586f,
N  0.990981936454773f, -0.094534330070019f, 0.990909278392792f,
N    -0.094910882413387f,
N  0.990836322307587f, -0.095287375152111f, 0.990763127803802f,
N    -0.095663815736771f,
N  0.990689575672150f, -0.096040196716785f, 0.990615785121918f,
N    -0.096416525542736f,
N  0.990541696548462f, -0.096792794764042f, 0.990467309951782f,
N    -0.097169004380703f,
N  0.990392625331879f, -0.097545161843300f, 0.990317702293396f,
N    -0.097921259701252f,
N  0.990242421627045f, -0.098297297954559f, 0.990166902542114f,
N    -0.098673284053802f,
N  0.990091085433960f, -0.099049203097820f, 0.990014970302582f,
N    -0.099425069987774f,
N  0.989938557147980f, -0.099800877273083f, 0.989861845970154f,
N    -0.100176624953747f,
N  0.989784896373749f, -0.100552320480347f, 0.989707589149475f,
N    -0.100927948951721f,
N  0.989630043506622f, -0.101303517818451f, 0.989552199840546f,
N    -0.101679034531116f,
N  0.989474058151245f, -0.102054484188557f, 0.989395678043365f,
N    -0.102429874241352f,
N  0.989316940307617f, -0.102805204689503f, 0.989237964153290f,
N    -0.103180475533009f,
N  0.989158689975739f, -0.103555686771870f, 0.989079117774963f,
N    -0.103930838406086f,
N  0.988999247550964f, -0.104305922985077f, 0.988919138908386f,
N    -0.104680955410004f,
N  0.988838672637939f, -0.105055920779705f, 0.988757967948914f,
N    -0.105430819094181f,
N  0.988676965236664f, -0.105805665254593f, 0.988595664501190f,
N    -0.106180444359779f,
N  0.988514065742493f, -0.106555156409740f, 0.988432228565216f,
N    -0.106929816305637f,
N  0.988350033760071f, -0.107304409146309f, 0.988267600536346f,
N    -0.107678934931755f,
N  0.988184869289398f, -0.108053401112556f, 0.988101840019226f,
N    -0.108427800238132f,
N  0.988018512725830f, -0.108802139759064f, 0.987934947013855f,
N    -0.109176412224770f,
N  0.987851083278656f, -0.109550617635250f, 0.987766921520233f,
N    -0.109924763441086f,
N  0.987682461738586f, -0.110298842191696f, 0.987597703933716f,
N    -0.110672861337662f,
N  0.987512648105621f, -0.111046813428402f, 0.987427353858948f,
N    -0.111420698463917f,
N  0.987341761589050f, -0.111794516444206f, 0.987255871295929f,
N    -0.112168267369270f,
N  0.987169682979584f, -0.112541958689690f, 0.987083256244659f,
N    -0.112915575504303f,
N  0.986996471881866f, -0.113289132714272f, 0.986909449100494f,
N    -0.113662622869015f,
N  0.986822128295898f, -0.114036038517952f, 0.986734509468079f,
N    -0.114409394562244f,
N  0.986646652221680f, -0.114782683551311f, 0.986558437347412f,
N    -0.115155905485153f,
N  0.986469984054565f, -0.115529052913189f, 0.986381232738495f,
N    -0.115902140736580f,
N  0.986292183399200f, -0.116275154054165f, 0.986202836036682f,
N    -0.116648100316525f,
N  0.986113250255585f, -0.117020979523659f, 0.986023366451263f,
N    -0.117393791675568f,
N  0.985933184623718f, -0.117766529321671f, 0.985842704772949f,
N    -0.118139199912548f,
N  0.985751926898956f, -0.118511803448200f, 0.985660910606384f,
N    -0.118884332478046f,
N  0.985569596290588f, -0.119256794452667f, 0.985477983951569f,
N    -0.119629189372063f,
N  0.985386073589325f, -0.120001509785652f, 0.985293865203857f,
N    -0.120373763144016f,
N  0.985201418399811f, -0.120745941996574f, 0.985108673572540f,
N    -0.121118053793907f,
N  0.985015630722046f, -0.121490091085434f, 0.984922289848328f,
N    -0.121862053871155f,
N  0.984828710556030f, -0.122233949601650f, 0.984734773635864f,
N    -0.122605770826340f,
N  0.984640598297119f, -0.122977524995804f, 0.984546124935150f,
N    -0.123349204659462f,
N  0.984451413154602f, -0.123720809817314f, 0.984356343746185f,
N    -0.124092340469360f,
N  0.984261035919189f, -0.124463804066181f, 0.984165430068970f,
N    -0.124835193157196f,
N  0.984069526195526f, -0.125206500291824f, 0.983973383903503f,
N    -0.125577747821808f,
N  0.983876943588257f, -0.125948905944824f, 0.983780145645142f,
N    -0.126320004463196f,
N  0.983683168888092f, -0.126691013574600f, 0.983585834503174f,
N    -0.127061963081360f,
N  0.983488261699677f, -0.127432823181152f, 0.983390331268311f,
N    -0.127803623676300f,
N  0.983292162418365f, -0.128174334764481f, 0.983193755149841f,
N    -0.128544986248016f,
N  0.983094990253448f, -0.128915548324585f, 0.982995986938477f,
N    -0.129286035895348f,
N  0.982896685600281f, -0.129656463861465f, 0.982797086238861f,
N    -0.130026802420616f,
N  0.982697248458862f, -0.130397051572800f, 0.982597053050995f,
N    -0.130767241120338f,
N  0.982496619224548f, -0.131137356162071f, 0.982395887374878f,
N    -0.131507381796837f,
N  0.982294917106628f, -0.131877332925797f, 0.982193589210510f,
N    -0.132247209548950f,
N  0.982092022895813f, -0.132617011666298f, 0.981990158557892f,
N    -0.132986739277840f,
N  0.981888055801392f, -0.133356377482414f, 0.981785595417023f,
N    -0.133725941181183f,
N  0.981682896614075f, -0.134095430374146f, 0.981579899787903f,
N    -0.134464830160141f,
N  0.981476604938507f, -0.134834155440331f, 0.981373071670532f,
N    -0.135203406214714f,
N  0.981269240379334f, -0.135572582483292f, 0.981165111064911f,
N    -0.135941669344902f,
N  0.981060683727264f, -0.136310681700706f, 0.980956017971039f,
N    -0.136679604649544f,
N  0.980851054191589f, -0.137048453092575f, 0.980745792388916f,
N    -0.137417227029800f,
N  0.980640232563019f, -0.137785911560059f, 0.980534434318542f,
N    -0.138154521584511f,
N  0.980428338050842f, -0.138523042201996f, 0.980321943759918f,
N    -0.138891488313675f,
N  0.980215251445770f, -0.139259845018387f, 0.980108320713043f,
N    -0.139628127217293f,
N  0.980001091957092f, -0.139996320009232f, 0.979893565177917f,
N    -0.140364438295364f,
N  0.979785740375519f, -0.140732467174530f, 0.979677677154541f,
N    -0.141100421547890f,
N  0.979569315910339f, -0.141468286514282f, 0.979460656642914f,
N    -0.141836062073708f,
N  0.979351758956909f, -0.142203763127327f, 0.979242503643036f,
N    -0.142571389675140f,
N  0.979133009910584f, -0.142938911914825f, 0.979023277759552f,
N    -0.143306359648705f,
N  0.978913187980652f, -0.143673732876778f, 0.978802859783173f,
N    -0.144041016697884f,
N  0.978692233562469f, -0.144408211112022f, 0.978581368923187f,
N    -0.144775316119194f,
N  0.978470146656036f, -0.145142331719399f, 0.978358685970306f,
N    -0.145509272813797f,
N  0.978246986865997f, -0.145876124501228f, 0.978134930133820f,
N    -0.146242901682854f,
N  0.978022634983063f, -0.146609574556351f, 0.977910041809082f,
N    -0.146976172924042f,
N  0.977797150611877f, -0.147342681884766f, 0.977684020996094f,
N    -0.147709101438522f,
N  0.977570593357086f, -0.148075446486473f, 0.977456867694855f,
N    -0.148441687226295f,
N  0.977342903614044f, -0.148807853460312f, 0.977228581905365f,
N    -0.149173930287361f,
N  0.977114021778107f, -0.149539917707443f, 0.976999223232269f,
N    -0.149905815720558f,
N  0.976884067058563f, -0.150271624326706f, 0.976768672466278f,
N    -0.150637343525887f,
N  0.976653039455414f, -0.151002973318100f, 0.976537048816681f,
N    -0.151368513703346f,
N  0.976420819759369f, -0.151733979582787f, 0.976304292678833f,
N    -0.152099341154099f,
N  0.976187527179718f, -0.152464613318443f, 0.976070404052734f,
N    -0.152829796075821f,
N  0.975953042507172f, -0.153194904327393f, 0.975835442543030f,
N    -0.153559908270836f,
N  0.975717484951019f, -0.153924822807312f, 0.975599288940430f,
N    -0.154289647936821f,
N  0.975480854511261f, -0.154654383659363f, 0.975362062454224f,
N    -0.155019029974937f,
N  0.975243031978607f, -0.155383571982384f, 0.975123703479767f,
N    -0.155748039484024f,
N  0.975004136562347f, -0.156112402677536f, 0.974884271621704f,
N    -0.156476691365242f,
N  0.974764108657837f, -0.156840875744820f, 0.974643647670746f,
N    -0.157204970717430f,
N  0.974522948265076f, -0.157568961381912f, 0.974401950836182f,
N    -0.157932877540588f,
N  0.974280655384064f, -0.158296689391136f, 0.974159121513367f,
N    -0.158660411834717f,
N  0.974037289619446f, -0.159024044871330f, 0.973915159702301f,
N    -0.159387573599815f,
N  0.973792791366577f, -0.159751012921333f, 0.973670125007629f,
N    -0.160114362835884f,
N  0.973547160625458f, -0.160477623343468f, 0.973423957824707f,
N    -0.160840779542923f,
N  0.973300457000732f, -0.161203846335411f, 0.973176658153534f,
N    -0.161566808819771f,
N  0.973052620887756f, -0.161929681897163f, 0.972928285598755f,
N    -0.162292465567589f,
N  0.972803652286530f, -0.162655144929886f, 0.972678780555725f,
N    -0.163017734885216f,
N  0.972553610801697f, -0.163380220532417f, 0.972428143024445f,
N    -0.163742616772652f,
N  0.972302436828613f, -0.164104923605919f, 0.972176432609558f,
N    -0.164467126131058f,
N  0.972050130367279f, -0.164829224348068f, 0.971923589706421f,
N    -0.165191248059273f,
N  0.971796751022339f, -0.165553152561188f, 0.971669614315033f,
N    -0.165914967656136f,
N  0.971542239189148f, -0.166276678442955f, 0.971414566040039f,
N    -0.166638299822807f,
N  0.971286594867706f, -0.166999831795692f, 0.971158385276794f,
N    -0.167361244559288f,
N  0.971029877662659f, -0.167722567915916f, 0.970901072025299f,
N    -0.168083801865578f,
N  0.970772027969360f, -0.168444931507111f, 0.970642685890198f,
N    -0.168805956840515f,
N  0.970513105392456f, -0.169166877865791f, 0.970383226871490f,
N    -0.169527709484100f,
N  0.970253050327301f, -0.169888436794281f, 0.970122575759888f,
N    -0.170249074697495f,
N  0.969991862773895f, -0.170609608292580f, 0.969860911369324f,
N    -0.170970037579536f,
N  0.969729602336884f, -0.171330362558365f, 0.969598054885864f,
N    -0.171690583229065f,
N  0.969466269016266f, -0.172050714492798f, 0.969334125518799f,
N    -0.172410741448402f,
N  0.969201743602753f, -0.172770664095879f, 0.969069123268127f,
N    -0.173130482435226f,
N  0.968936204910278f, -0.173490211367607f, 0.968802988529205f,
N    -0.173849821090698f,
N  0.968669533729553f, -0.174209341406822f, 0.968535780906677f,
N    -0.174568757414818f,
N  0.968401730060577f, -0.174928069114685f, 0.968267440795898f,
N    -0.175287276506424f,
N  0.968132853507996f, -0.175646379590034f, 0.967997968196869f,
N    -0.176005378365517f,
N  0.967862844467163f, -0.176364272832870f, 0.967727422714233f,
N    -0.176723077893257f,
N  0.967591762542725f, -0.177081763744354f, 0.967455804347992f,
N    -0.177440345287323f,
N  0.967319548130035f, -0.177798837423325f, 0.967183053493500f,
N    -0.178157210350037f,
N  0.967046260833740f, -0.178515478968620f, 0.966909229755402f,
N    -0.178873643279076f,
N  0.966771900653839f, -0.179231703281403f, 0.966634273529053f,
N    -0.179589673876762f,
N  0.966496407985687f, -0.179947525262833f, 0.966358244419098f,
N    -0.180305257439613f,
N  0.966219842433929f, -0.180662900209427f, 0.966081082820892f,
N    -0.181020438671112f,
N  0.965942144393921f, -0.181377857923508f, 0.965802907943726f,
N    -0.181735187768936f,
N  0.965663373470306f, -0.182092398405075f, 0.965523540973663f,
N    -0.182449504733086f,
N  0.965383470058441f, -0.182806491851807f, 0.965243160724640f,
N    -0.183163389563560f,
N  0.965102493762970f, -0.183520168066025f, 0.964961588382721f,
N    -0.183876842260361f,
N  0.964820444583893f, -0.184233412146568f, 0.964679002761841f,
N    -0.184589877724648f,
N  0.964537262916565f, -0.184946224093437f, 0.964395284652710f,
N    -0.185302466154099f,
N  0.964253067970276f, -0.185658603906631f, 0.964110493659973f,
N    -0.186014622449875f,
N  0.963967680931091f, -0.186370536684990f, 0.963824629783630f,
N    -0.186726331710815f,
N  0.963681280612946f, -0.187082037329674f, 0.963537633419037f,
N    -0.187437608838081f,
N  0.963393747806549f, -0.187793090939522f, 0.963249564170837f,
N    -0.188148453831673f,
N  0.963105142116547f, -0.188503712415695f, 0.962960422039032f,
N    -0.188858851790428f,
N  0.962815403938293f, -0.189213871955872f, 0.962670147418976f,
N    -0.189568802714348f,
N  0.962524592876434f, -0.189923599362373f, 0.962378799915314f,
N    -0.190278306603432f,
N  0.962232708930969f, -0.190632879734039f, 0.962086379528046f,
N    -0.190987363457680f,
N  0.961939752101898f, -0.191341713070869f, 0.961792886257172f,
N    -0.191695958375931f,
N  0.961645722389221f, -0.192050099372864f, 0.961498260498047f,
N    -0.192404121160507f,
N  0.961350560188293f, -0.192758023738861f, 0.961202561855316f,
N    -0.193111822009087f,
N  0.961054325103760f, -0.193465501070023f, 0.960905790328979f,
N    -0.193819075822830f,
N  0.960757017135620f, -0.194172516465187f, 0.960607945919037f,
N    -0.194525867700577f,
N  0.960458636283875f, -0.194879084825516f, 0.960309028625488f,
N    -0.195232197642326f,
N  0.960159122943878f, -0.195585191249847f, 0.960008978843689f,
N    -0.195938065648079f,
N  0.959858596324921f, -0.196290835738182f, 0.959707856178284f,
N    -0.196643486618996f,
N  0.959556937217712f, -0.196996018290520f, 0.959405720233917f,
N    -0.197348430752754f,
N  0.959254205226898f, -0.197700738906860f, 0.959102451801300f,
N    -0.198052927851677f,
N  0.958950400352478f, -0.198404997587204f, 0.958798050880432f,
N    -0.198756948113441f,
N  0.958645522594452f, -0.199108779430389f, 0.958492636680603f,
N    -0.199460506439209f,
N  0.958339512348175f, -0.199812099337578f, 0.958186149597168f,
N    -0.200163587927818f,
N  0.958032488822937f, -0.200514942407608f, 0.957878530025482f,
N    -0.200866192579269f,
N  0.957724332809448f, -0.201217323541641f, 0.957569897174835f,
N    -0.201568335294724f,
N  0.957415163516998f, -0.201919227838516f, 0.957260131835938f,
N    -0.202270001173019f,
N  0.957104861736298f, -0.202620655298233f, 0.956949353218079f,
N    -0.202971190214157f,
N  0.956793546676636f, -0.203321605920792f, 0.956637442111969f,
N    -0.203671902418137f,
N  0.956481099128723f, -0.204022079706192f, 0.956324458122253f,
N    -0.204372137784958f,
N  0.956167578697205f, -0.204722076654434f, 0.956010460853577f,
N    -0.205071896314621f,
N  0.955853044986725f, -0.205421581864357f, 0.955695331096649f,
N    -0.205771163105965f,
N  0.955537378787994f, -0.206120610237122f, 0.955379128456116f,
N    -0.206469938158989f,
N  0.955220639705658f, -0.206819161772728f, 0.955061912536621f,
N    -0.207168251276016f,
N  0.954902827739716f, -0.207517206668854f, 0.954743564128876f,
N    -0.207866057753563f,
N  0.954584002494812f, -0.208214774727821f, 0.954424142837524f,
N    -0.208563387393951f,
N  0.954264044761658f, -0.208911851048470f, 0.954103708267212f,
N    -0.209260210394859f,
N  0.953943073749542f, -0.209608450531960f, 0.953782141208649f,
N    -0.209956556558609f,
N  0.953620970249176f, -0.210304543375969f, 0.953459560871124f,
N    -0.210652396082878f,
N  0.953297853469849f, -0.211000129580498f, 0.953135907649994f,
N    -0.211347743868828f,
N  0.952973663806915f, -0.211695238947868f, 0.952811121940613f,
N    -0.212042599916458f,
N  0.952648401260376f, -0.212389841675758f, 0.952485322952271f,
N    -0.212736949324608f,
N  0.952322065830231f, -0.213083937764168f, 0.952158451080322f,
N    -0.213430806994438f,
N  0.951994657516479f, -0.213777542114258f, 0.951830565929413f,
N    -0.214124158024788f,
N  0.951666176319122f, -0.214470639824867f, 0.951501548290253f,
N    -0.214817002415657f,
N  0.951336681842804f, -0.215163245797157f, 0.951171517372131f,
N    -0.215509355068207f,
N  0.951006054878235f, -0.215855330228806f, 0.950840353965759f,
N    -0.216201186180115f,
N  0.950674414634705f, -0.216546908020973f, 0.950508177280426f,
N    -0.216892510652542f,
N  0.950341701507568f, -0.217237979173660f, 0.950174987316132f,
N    -0.217583328485489f,
N  0.950007975101471f, -0.217928543686867f, 0.949840664863586f,
N    -0.218273624777794f,
N  0.949673116207123f, -0.218618586659431f, 0.949505329132080f,
N    -0.218963414430618f,
N  0.949337244033813f, -0.219308122992516f, 0.949168920516968f,
N    -0.219652697443962f,
N  0.949000298976898f, -0.219997137784958f, 0.948831439018250f,
N    -0.220341444015503f,
N  0.948662281036377f, -0.220685631036758f, 0.948492884635925f,
N    -0.221029683947563f,
N  0.948323249816895f, -0.221373617649078f, 0.948153316974640f,
N    -0.221717402338982f,
N  0.947983145713806f, -0.222061067819595f, 0.947812676429749f,
N    -0.222404599189758f,
N  0.947641968727112f, -0.222748011350632f, 0.947470963001251f,
N    -0.223091274499893f,
N  0.947299718856812f, -0.223434418439865f, 0.947128236293793f,
N    -0.223777428269386f,
N  0.946956455707550f, -0.224120303988457f, 0.946784436702728f,
N    -0.224463045597076f,
N  0.946612179279327f, -0.224805667996407f, 0.946439623832703f,
N    -0.225148141384125f,
N  0.946266770362854f, -0.225490495562553f, 0.946093678474426f,
N    -0.225832715630531f,
N  0.945920348167419f, -0.226174786686897f, 0.945746779441834f,
N    -0.226516738533974f,
N  0.945572853088379f, -0.226858556270599f, 0.945398747920990f,
N    -0.227200239896774f,
N  0.945224344730377f, -0.227541789412498f, 0.945049703121185f,
N    -0.227883204817772f,
N  0.944874763488770f, -0.228224486112595f, 0.944699645042419f,
N    -0.228565633296967f,
N  0.944524168968201f, -0.228906646370888f, 0.944348454475403f,
N    -0.229247525334358f,
N  0.944172501564026f, -0.229588270187378f, 0.943996310234070f,
N    -0.229928880929947f,
N  0.943819820880890f, -0.230269357562065f, 0.943643093109131f,
N    -0.230609700083733f,
N  0.943466067314148f, -0.230949893593788f, 0.943288803100586f,
N    -0.231289967894554f,
N  0.943111240863800f, -0.231629893183708f, 0.942933499813080f,
N    -0.231969684362412f,
N  0.942755401134491f, -0.232309341430664f, 0.942577123641968f,
N    -0.232648864388466f,
N  0.942398548126221f, -0.232988253235817f, 0.942219734191895f,
N    -0.233327493071556f,
N  0.942040622234344f, -0.233666598796844f, 0.941861271858215f,
N    -0.234005570411682f,
N  0.941681683063507f, -0.234344407916069f, 0.941501796245575f,
N    -0.234683111310005f,
N  0.941321671009064f, -0.235021665692329f, 0.941141307353973f,
N    -0.235360085964203f,
N  0.940960645675659f, -0.235698372125626f, 0.940779745578766f,
N    -0.236036509275436f,
N  0.940598547458649f, -0.236374512314796f, 0.940417110919952f,
N    -0.236712381243706f,
N  0.940235435962677f, -0.237050101161003f, 0.940053522586823f,
N    -0.237387686967850f,
N  0.939871311187744f, -0.237725138664246f, 0.939688861370087f,
N    -0.238062441349030f,
N  0.939506113529205f, -0.238399609923363f, 0.939323127269745f,
N    -0.238736644387245f,
N  0.939139902591705f, -0.239073529839516f, 0.938956379890442f,
N    -0.239410281181335f,
N  0.938772618770599f, -0.239746883511543f, 0.938588619232178f,
N    -0.240083336830139f,
N  0.938404381275177f, -0.240419670939446f, 0.938219845294952f,
N    -0.240755841135979f,
N  0.938035070896149f, -0.241091892123222f, 0.937849998474121f,
N    -0.241427779197693f,
N  0.937664687633514f, -0.241763532161713f, 0.937479138374329f,
N    -0.242099151015282f,
N  0.937293350696564f, -0.242434620857239f, 0.937107264995575f,
N    -0.242769956588745f,
N  0.936920940876007f, -0.243105143308640f, 0.936734318733215f,
N    -0.243440181016922f,
N  0.936547517776489f, -0.243775084614754f, 0.936360359191895f,
N    -0.244109839200974f,
N  0.936173021793365f, -0.244444444775581f, 0.935985386371613f,
N    -0.244778916239738f,
N  0.935797572135925f, -0.245113238692284f, 0.935609400272369f,
N    -0.245447427034378f,
N  0.935421049594879f, -0.245781451463699f, 0.935232400894165f,
N    -0.246115356683731f,
N  0.935043513774872f, -0.246449097990990f, 0.934854328632355f,
N    -0.246782705187798f,
N  0.934664964675903f, -0.247116148471832f, 0.934475243091583f,
N    -0.247449472546577f,
N  0.934285342693329f, -0.247782632708550f, 0.934095203876495f,
N    -0.248115643858910f,
N  0.933904767036438f, -0.248448520898819f, 0.933714091777802f,
N    -0.248781248927116f,
N  0.933523118495941f, -0.249113827943802f, 0.933331906795502f,
N    -0.249446272850037f,
N  0.933140456676483f, -0.249778553843498f, 0.932948768138886f,
N    -0.250110685825348f,
N  0.932756841182709f, -0.250442683696747f, 0.932564616203308f,
N    -0.250774532556534f,
N  0.932372152805328f, -0.251106232404709f, 0.932179391384125f,
N    -0.251437783241272f,
N  0.931986451148987f, -0.251769185066223f, 0.931793212890625f,
N    -0.252100437879562f,
N  0.931599736213684f, -0.252431541681290f, 0.931405961513519f,
N    -0.252762526273727f,
N  0.931211948394775f, -0.253093332052231f, 0.931017756462097f,
N    -0.253423988819122f,
N  0.930823206901550f, -0.253754496574402f, 0.930628478527069f,
N    -0.254084855318069f,
N  0.930433452129364f, -0.254415065050125f, 0.930238187313080f,
N    -0.254745125770569f,
N  0.930042684078217f, -0.255075037479401f, 0.929846942424774f,
N    -0.255404800176620f,
N  0.929650902748108f, -0.255734413862228f, 0.929454624652863f,
N    -0.256063878536224f,
N  0.929258108139038f, -0.256393194198608f, 0.929061353206635f,
N    -0.256722360849380f,
N  0.928864300251007f, -0.257051378488541f, 0.928667008876801f,
N    -0.257380217313766f,
N  0.928469479084015f, -0.257708936929703f, 0.928271710872650f,
N    -0.258037507534027f,
N  0.928073644638062f, -0.258365899324417f, 0.927875399589539f,
N    -0.258694142103195f,
N  0.927676856517792f, -0.259022265672684f, 0.927478015422821f,
N    -0.259350210428238f,
N  0.927278995513916f, -0.259678006172180f, 0.927079677581787f,
N    -0.260005623102188f,
N  0.926880121231079f, -0.260333120822906f, 0.926680326461792f,
N    -0.260660469532013f,
N  0.926480293273926f, -0.260987639427185f, 0.926280021667480f,
N    -0.261314690113068f,
N  0.926079452037811f, -0.261641561985016f, 0.925878643989563f,
N    -0.261968284845352f,
N  0.925677597522736f, -0.262294828891754f, 0.925476312637329f,
N    -0.262621253728867f,
N  0.925274729728699f, -0.262947499752045f, 0.925072908401489f,
N    -0.263273626565933f,
N  0.924870908260345f, -0.263599574565887f, 0.924668610095978f,
N    -0.263925373554230f,
N  0.924466013908386f, -0.264250993728638f, 0.924263238906860f,
N    -0.264576494693756f,
N  0.924060165882111f, -0.264901816844940f, 0.923856854438782f,
N    -0.265226989984512f,
N  0.923653304576874f, -0.265552014112473f, 0.923449516296387f,
N    -0.265876859426498f,
N  0.923245489597321f, -0.266201555728912f, 0.923041164875031f,
N    -0.266526103019714f,
N  0.922836601734161f, -0.266850501298904f, 0.922631800174713f,
N    -0.267174720764160f,
N  0.922426760196686f, -0.267498821020126f, 0.922221481800079f,
N    -0.267822742462158f,
N  0.922015964984894f, -0.268146485090256f, 0.921810150146484f,
N    -0.268470078706741f,
N  0.921604096889496f, -0.268793523311615f, 0.921397805213928f,
N    -0.269116818904877f,
N  0.921191275119781f, -0.269439965486526f, 0.920984506607056f,
N    -0.269762933254242f,
N  0.920777499675751f, -0.270085722208023f, 0.920570194721222f,
N    -0.270408391952515f,
N  0.920362710952759f, -0.270730882883072f, 0.920154929161072f,
N    -0.271053224802017f,
N  0.919946908950806f, -0.271375387907028f, 0.919738650321960f,
N    -0.271697402000427f,
N  0.919530093669891f, -0.272019267082214f, 0.919321358203888f,
N    -0.272340953350067f,
N  0.919112324714661f, -0.272662490606308f, 0.918903112411499f,
N    -0.272983878850937f,
N  0.918693602085114f, -0.273305088281631f, 0.918483853340149f,
N    -0.273626148700714f,
N  0.918273866176605f, -0.273947030305862f, 0.918063640594482f,
N    -0.274267762899399f,
N  0.917853116989136f, -0.274588316679001f, 0.917642414569855f,
N    -0.274908751249313f,
N  0.917431414127350f, -0.275228977203369f, 0.917220234870911f,
N    -0.275549083948135f,
N  0.917008757591248f, -0.275868982076645f, 0.916797041893005f,
N    -0.276188760995865f,
N  0.916585087776184f, -0.276508361101151f, 0.916372895240784f,
N    -0.276827782392502f,
N  0.916160404682159f, -0.277147054672241f, 0.915947735309601f,
N    -0.277466177940369f,
N  0.915734827518463f, -0.277785122394562f, 0.915521621704102f,
N    -0.278103888034821f,
N  0.915308177471161f, -0.278422504663467f, 0.915094554424286f,
N    -0.278740972280502f,
N  0.914880633354187f, -0.279059261083603f, 0.914666473865509f,
N    -0.279377400875092f,
N  0.914452075958252f, -0.279695361852646f, 0.914237439632416f,
N    -0.280013144016266f,
N  0.914022505283356f, -0.280330777168274f, 0.913807392120361f,
N    -0.280648261308670f,
N  0.913592040538788f, -0.280965566635132f, 0.913376390933990f,
N    -0.281282693147659f,
N  0.913160502910614f, -0.281599670648575f, 0.912944436073303f,
N    -0.281916469335556f,
N  0.912728071212769f, -0.282233119010925f, 0.912511467933655f,
N    -0.282549589872360f,
N  0.912294626235962f, -0.282865911722183f, 0.912077546119690f,
N    -0.283182054758072f,
N  0.911860227584839f, -0.283498018980026f, 0.911642670631409f,
N    -0.283813834190369f,
N  0.911424875259399f, -0.284129470586777f, 0.911206841468811f,
N    -0.284444957971573f,
N  0.910988569259644f, -0.284760266542435f, 0.910769999027252f,
N    -0.285075396299362f,
N  0.910551249980927f, -0.285390377044678f, 0.910332262516022f,
N    -0.285705178976059f,
N  0.910112977027893f, -0.286019802093506f, 0.909893512725830f,
N    -0.286334276199341f,
N  0.909673750400543f, -0.286648571491241f, 0.909453809261322f,
N    -0.286962717771530f,
N  0.909233570098877f, -0.287276685237885f, 0.909013092517853f,
N    -0.287590473890305f,
N  0.908792436122894f, -0.287904083728790f, 0.908571481704712f,
N    -0.288217544555664f,
N  0.908350288867950f, -0.288530826568604f, 0.908128857612610f,
N    -0.288843959569931f,
N  0.907907187938690f, -0.289156883955002f, 0.907685279846191f,
N    -0.289469659328461f,
N  0.907463192939758f, -0.289782285690308f, 0.907240808010101f,
N    -0.290094703435898f,
N  0.907018184661865f, -0.290406972169876f, 0.906795322895050f,
N    -0.290719062089920f,
N  0.906572222709656f, -0.291031002998352f, 0.906348884105682f,
N    -0.291342735290527f,
N  0.906125307083130f, -0.291654318571091f, 0.905901491641998f,
N    -0.291965723037720f,
N  0.905677437782288f, -0.292276978492737f, 0.905453145503998f,
N    -0.292588025331497f,
N  0.905228614807129f, -0.292898923158646f, 0.905003845691681f,
N    -0.293209642171860f,
N  0.904778838157654f, -0.293520182371140f, 0.904553592205048f,
N    -0.293830573558807f,
N  0.904328107833862f, -0.294140785932541f, 0.904102385044098f,
N    -0.294450789690018f,
N  0.903876423835754f, -0.294760644435883f, 0.903650224208832f,
N    -0.295070350170136f,
N  0.903423786163330f, -0.295379847288132f, 0.903197109699249f,
N    -0.295689195394516f,
N  0.902970194816589f, -0.295998334884644f, 0.902743041515350f,
N    -0.296307325363159f,
N  0.902515649795532f, -0.296616137027740f, 0.902288019657135f,
N    -0.296924799680710f,
N  0.902060210704803f, -0.297233253717422f, 0.901832103729248f,
N    -0.297541528940201f,
N  0.901603758335114f, -0.297849655151367f, 0.901375174522400f,
N    -0.298157602548599f,
N  0.901146411895752f, -0.298465341329575f, 0.900917351245880f,
N    -0.298772931098938f,
N  0.900688111782074f, -0.299080342054367f, 0.900458574295044f,
N    -0.299387603998184f,
N  0.900228857994080f, -0.299694657325745f, 0.899998843669891f,
N    -0.300001531839371f,
N  0.899768650531769f, -0.300308227539063f, 0.899538159370422f,
N    -0.300614774227142f,
N  0.899307489395142f, -0.300921112298965f, 0.899076581001282f,
N    -0.301227301359177f,
N  0.898845434188843f, -0.301533311605453f, 0.898614048957825f,
N    -0.301839113235474f,
N  0.898382425308228f, -0.302144765853882f, 0.898150563240051f,
N    -0.302450239658356f,
N  0.897918462753296f, -0.302755534648895f, 0.897686123847961f,
N    -0.303060621023178f,
N  0.897453546524048f, -0.303365558385849f, 0.897220790386200f,
N    -0.303670316934586f,
N  0.896987736225128f, -0.303974896669388f, 0.896754503250122f,
N    -0.304279297590256f,
N  0.896520972251892f, -0.304583519697189f, 0.896287262439728f,
N    -0.304887533187866f,
N  0.896053314208984f, -0.305191397666931f, 0.895819067955017f,
N    -0.305495083332062f,
N  0.895584642887115f, -0.305798590183258f, 0.895349979400635f,
N    -0.306101888418198f,
N  0.895115137100220f, -0.306405037641525f, 0.894879996776581f,
N    -0.306708008050919f,
N  0.894644618034363f, -0.307010769844055f, 0.894409060478210f,
N    -0.307313382625580f,
N  0.894173204898834f, -0.307615786790848f, 0.893937170505524f,
N    -0.307918041944504f,
N  0.893700897693634f, -0.308220088481903f, 0.893464326858521f,
N    -0.308521956205368f,
N  0.893227577209473f, -0.308823645114899f, 0.892990648746490f,
N    -0.309125155210495f,
N  0.892753422260284f, -0.309426486492157f, 0.892515957355499f,
N    -0.309727638959885f,
N  0.892278313636780f, -0.310028612613678f, 0.892040371894836f,
N    -0.310329377651215f,
N  0.891802251338959f, -0.310629993677139f, 0.891563892364502f,
N    -0.310930401086807f,
N  0.891325294971466f, -0.311230629682541f, 0.891086459159851f,
N    -0.311530679464340f,
N  0.890847444534302f, -0.311830550432205f, 0.890608131885529f,
N    -0.312130242586136f,
N  0.890368640422821f, -0.312429755926132f, 0.890128850936890f,
N    -0.312729060649872f,
N  0.889888882637024f, -0.313028186559677f, 0.889648675918579f,
N    -0.313327133655548f,
N  0.889408230781555f, -0.313625901937485f, 0.889167606830597f,
N    -0.313924491405487f,
N  0.888926684856415f, -0.314222872257233f, 0.888685584068298f,
N    -0.314521104097366f,
N  0.888444244861603f, -0.314819127321243f, 0.888202667236328f,
N    -0.315116971731186f,
N  0.887960851192474f, -0.315414607524872f, 0.887718796730042f,
N    -0.315712094306946f,
N  0.887476563453674f, -0.316009372472763f, 0.887234091758728f,
N    -0.316306471824646f,
N  0.886991322040558f, -0.316603392362595f, 0.886748373508453f,
N    -0.316900104284287f,
N  0.886505246162415f, -0.317196637392044f, 0.886261820793152f,
N    -0.317492991685867f,
N  0.886018216609955f, -0.317789167165756f, 0.885774314403534f,
N    -0.318085134029388f,
N  0.885530233383179f, -0.318380922079086f, 0.885285973548889f,
N    -0.318676531314850f,
N  0.885041415691376f, -0.318971961736679f, 0.884796679019928f,
N    -0.319267183542252f,
N  0.884551644325256f, -0.319562226533890f, 0.884306430816650f,
N    -0.319857090711594f,
N  0.884061038494110f, -0.320151746273041f, 0.883815348148346f,
N    -0.320446223020554f,
N  0.883569478988647f, -0.320740520954132f, 0.883323311805725f,
N    -0.321034610271454f,
N  0.883076965808868f, -0.321328520774841f, 0.882830440998077f,
N    -0.321622252464294f,
N  0.882583618164063f, -0.321915775537491f, 0.882336616516113f,
N    -0.322209119796753f,
N  0.882089376449585f, -0.322502255439758f, 0.881841897964478f,
N    -0.322795242071152f,
N  0.881594181060791f, -0.323088020086288f, 0.881346285343170f,
N    -0.323380589485168f,
N  0.881098151206970f, -0.323672980070114f, 0.880849778652191f,
N    -0.323965191841125f,
N  0.880601167678833f, -0.324257194995880f, 0.880352377891541f,
N    -0.324549019336700f,
N  0.880103349685669f, -0.324840664863586f, 0.879854083061218f,
N    -0.325132101774216f,
N  0.879604578018188f, -0.325423330068588f, 0.879354894161224f,
N    -0.325714409351349f,
N  0.879104971885681f, -0.326005280017853f, 0.878854811191559f,
N    -0.326295942068100f,
N  0.878604412078857f, -0.326586425304413f, 0.878353834152222f,
N    -0.326876699924469f,
N  0.878103017807007f, -0.327166795730591f, 0.877851963043213f,
N    -0.327456712722778f,
N  0.877600669860840f, -0.327746421098709f, 0.877349197864532f,
N    -0.328035950660706f,
N  0.877097487449646f, -0.328325271606445f, 0.876845538616180f,
N    -0.328614413738251f,
N  0.876593410968781f, -0.328903347253799f, 0.876341044902802f,
N    -0.329192101955414f,
N  0.876088440418243f, -0.329480648040771f, 0.875835597515106f,
N    -0.329769015312195f,
N  0.875582575798035f, -0.330057173967361f, 0.875329315662384f,
N    -0.330345153808594f,
N  0.875075817108154f, -0.330632925033569f, 0.874822139739990f,
N    -0.330920487642288f,
N  0.874568223953247f, -0.331207901239395f, 0.874314069747925f,
N    -0.331495076417923f,
N  0.874059677124023f, -0.331782072782516f, 0.873805105686188f,
N    -0.332068890333176f,
N  0.873550295829773f, -0.332355499267578f, 0.873295307159424f,
N    -0.332641899585724f,
N  0.873040020465851f, -0.332928121089935f, 0.872784554958344f,
N    -0.333214133977890f,
N  0.872528910636902f, -0.333499968051910f, 0.872272968292236f,
N    -0.333785593509674f,
N  0.872016847133636f, -0.334071010351181f, 0.871760547161102f,
N    -0.334356248378754f,
N  0.871503949165344f, -0.334641307592392f, 0.871247172355652f,
N    -0.334926128387451f,
N  0.870990216732025f, -0.335210770368576f, 0.870733022689819f,
N    -0.335495233535767f,
N  0.870475590229034f, -0.335779488086700f, 0.870217919349670f,
N    -0.336063534021378f,
N  0.869960069656372f, -0.336347371339798f, 0.869701981544495f,
N    -0.336631029844284f,
N  0.869443655014038f, -0.336914509534836f, 0.869185149669647f,
N    -0.337197750806808f,
N  0.868926405906677f, -0.337480813264847f, 0.868667483329773f,
N    -0.337763696908951f,
N  0.868408262729645f, -0.338046342134476f, 0.868148922920227f,
N    -0.338328808546066f,
N  0.867889285087585f, -0.338611096143723f, 0.867629468441010f,
N    -0.338893145322800f,
N  0.867369413375854f, -0.339175015687943f, 0.867109179496765f,
N    -0.339456677436829f,
N  0.866848707199097f, -0.339738160371780f, 0.866588056087494f,
N    -0.340019434690475f,
N  0.866327106952667f, -0.340300500392914f, 0.866066038608551f,
N    -0.340581357479095f,
N  0.865804672241211f, -0.340862035751343f, 0.865543127059937f,
N    -0.341142505407333f,
N  0.865281403064728f, -0.341422766447067f, 0.865019381046295f,
N    -0.341702848672867f,
N  0.864757239818573f, -0.341982692480087f, 0.864494800567627f,
N    -0.342262357473373f,
N  0.864232182502747f, -0.342541843652725f, 0.863969385623932f,
N    -0.342821091413498f,
N  0.863706290721893f, -0.343100160360336f, 0.863443076610565f,
N    -0.343379020690918f,
N  0.863179564476013f, -0.343657672405243f, 0.862915873527527f,
N    -0.343936115503311f,
N  0.862652003765106f, -0.344214379787445f, 0.862387895584106f,
N    -0.344492435455322f,
N  0.862123548984528f, -0.344770282506943f, 0.861859023571014f,
N    -0.345047920942307f,
N  0.861594259738922f, -0.345325350761414f, 0.861329257488251f,
N    -0.345602601766586f,
N  0.861064076423645f, -0.345879614353180f, 0.860798716545105f,
N    -0.346156448125839f,
N  0.860533118247986f, -0.346433073282242f, 0.860267281532288f,
N    -0.346709519624710f,
N  0.860001266002655f, -0.346985727548599f, 0.859735012054443f,
N    -0.347261756658554f,
N  0.859468579292297f, -0.347537547349930f, 0.859201908111572f,
N    -0.347813159227371f,
N  0.858934998512268f, -0.348088562488556f, 0.858667910099030f,
N    -0.348363757133484f,
N  0.858400642871857f, -0.348638743162155f, 0.858133137226105f,
N    -0.348913550376892f,
N  0.857865393161774f, -0.349188119173050f, 0.857597470283508f,
N    -0.349462509155273f,
N  0.857329368591309f, -0.349736660718918f, 0.857060968875885f,
N    -0.350010633468628f,
N  0.856792449951172f, -0.350284397602081f, 0.856523692607880f,
N    -0.350557953119278f,
N  0.856254696846008f, -0.350831300020218f, 0.855985522270203f,
N    -0.351104438304901f,
N  0.855716109275818f, -0.351377367973328f, 0.855446517467499f,
N    -0.351650089025497f,
N  0.855176687240601f, -0.351922631263733f, 0.854906618595123f,
N    -0.352194935083389f,
N  0.854636430740356f, -0.352467030286789f, 0.854365944862366f,
N    -0.352738946676254f,
N  0.854095339775085f, -0.353010624647141f, 0.853824436664581f,
N    -0.353282123804092f,
N  0.853553414344788f, -0.353553384542465f, 0.853282094001770f,
N    -0.353824466466904f,
N  0.853010654449463f, -0.354095309972763f, 0.852738916873932f,
N    -0.354365974664688f,
N  0.852467060089111f, -0.354636400938034f, 0.852194905281067f,
N    -0.354906648397446f,
N  0.851922631263733f, -0.355176687240601f, 0.851650118827820f,
N    -0.355446487665176f,
N  0.851377367973328f, -0.355716109275818f, 0.851104438304901f,
N    -0.355985492467880f,
N  0.850831270217896f, -0.356254696846008f, 0.850557923316956f,
N    -0.356523662805557f,
N  0.850284397602081f, -0.356792420148849f, 0.850010633468628f,
N    -0.357060998678207f,
N  0.849736690521240f, -0.357329338788986f, 0.849462509155273f,
N    -0.357597470283508f,
N  0.849188148975372f, -0.357865422964096f, 0.848913550376892f,
N    -0.358133137226105f,
N  0.848638772964478f, -0.358400642871857f, 0.848363757133484f,
N    -0.358667939901352f,
N  0.848088562488556f, -0.358935028314590f, 0.847813189029694f,
N    -0.359201908111572f,
N  0.847537577152252f, -0.359468549489975f, 0.847261726856232f,
N    -0.359735012054443f,
N  0.846985757350922f, -0.360001266002655f, 0.846709489822388f,
N    -0.360267281532288f,
N  0.846433103084564f, -0.360533088445663f, 0.846156477928162f,
N    -0.360798716545105f,
N  0.845879614353180f, -0.361064106225967f, 0.845602571964264f,
N    -0.361329287290573f,
N  0.845325350761414f, -0.361594229936600f, 0.845047891139984f,
N    -0.361858993768692f,
N  0.844770252704620f, -0.362123548984528f, 0.844492435455322f,
N    -0.362387865781784f,
N  0.844214379787445f, -0.362651973962784f, 0.843936145305634f,
N    -0.362915903329849f,
N  0.843657672405243f, -0.363179564476013f, 0.843379020690918f,
N    -0.363443046808243f,
N  0.843100130558014f, -0.363706320524216f, 0.842821121215820f,
N    -0.363969355821610f,
N  0.842541813850403f, -0.364232182502747f, 0.842262387275696f,
N    -0.364494800567627f,
N  0.841982722282410f, -0.364757210016251f, 0.841702818870544f,
N    -0.365019410848618f,
N  0.841422796249390f, -0.365281373262405f, 0.841142535209656f,
N    -0.365543156862259f,
N  0.840862035751343f, -0.365804702043533f, 0.840581357479095f,
N    -0.366066008806229f,
N  0.840300500392914f, -0.366327136754990f, 0.840019404888153f,
N    -0.366588026285172f,
N  0.839738130569458f, -0.366848707199097f, 0.839456677436829f,
N    -0.367109179496765f,
N  0.839175045490265f, -0.367369443178177f, 0.838893175125122f,
N    -0.367629468441010f,
N  0.838611066341400f, -0.367889285087585f, 0.838328838348389f,
N    -0.368148893117905f,
N  0.838046371936798f, -0.368408292531967f, 0.837763667106628f,
N    -0.368667453527451f,
N  0.837480843067169f, -0.368926405906677f, 0.837197780609131f,
N    -0.369185149669647f,
N  0.836914479732513f, -0.369443655014038f, 0.836631059646606f,
N    -0.369701951742172f,
N  0.836347401142120f, -0.369960039854050f, 0.836063504219055f,
N    -0.370217919349670f,
N  0.835779488086700f, -0.370475560426712f, 0.835495233535767f,
N    -0.370732992887497f,
N  0.835210800170898f, -0.370990216732025f, 0.834926128387451f,
N    -0.371247202157974f,
N  0.834641277790070f, -0.371503978967667f, 0.834356248378754f,
N    -0.371760547161102f,
N  0.834071040153503f, -0.372016876935959f, 0.833785593509674f,
N    -0.372272998094559f,
N  0.833499968051910f, -0.372528880834579f, 0.833214163780212f,
N    -0.372784584760666f,
N  0.832928121089935f, -0.373040050268173f, 0.832641899585724f,
N    -0.373295277357101f,
N  0.832355499267578f, -0.373550295829773f, 0.832068860530853f,
N    -0.373805105686188f,
N  0.831782102584839f, -0.374059677124023f, 0.831495106220245f,
N    -0.374314039945602f,
N  0.831207871437073f, -0.374568194150925f, 0.830920517444611f,
N    -0.374822109937668f,
N  0.830632925033569f, -0.375075817108154f, 0.830345153808594f,
N    -0.375329315662384f,
N  0.830057144165039f, -0.375582575798035f, 0.829769015312195f,
N    -0.375835597515106f,
N  0.829480648040771f, -0.376088410615921f, 0.829192101955414f,
N    -0.376341015100479f,
N  0.828903317451477f, -0.376593410968781f, 0.828614413738251f,
N    -0.376845568418503f,
N  0.828325271606445f, -0.377097487449646f, 0.828035950660706f,
N    -0.377349197864532f,
N  0.827746450901031f, -0.377600699663162f, 0.827456712722778f,
N    -0.377851963043213f,
N  0.827166795730591f, -0.378102988004684f, 0.826876699924469f,
N    -0.378353834152222f,
N  0.826586425304413f, -0.378604412078857f, 0.826295912265778f,
N    -0.378854811191559f,
N  0.826005280017853f, -0.379104942083359f, 0.825714409351349f,
N    -0.379354894161224f,
N  0.825423359870911f, -0.379604607820511f, 0.825132071971893f,
N    -0.379854083061218f,
N  0.824840664863586f, -0.380103349685669f, 0.824549019336700f,
N    -0.380352377891541f,
N  0.824257194995880f, -0.380601197481155f, 0.823965191841125f,
N    -0.380849778652191f,
N  0.823673009872437f, -0.381098151206970f, 0.823380589485168f,
N    -0.381346285343170f,
N  0.823087990283966f, -0.381594210863113f, 0.822795212268829f,
N    -0.381841897964478f,
N  0.822502255439758f, -0.382089376449585f, 0.822209119796753f,
N    -0.382336616516113f,
N  0.821915745735168f, -0.382583618164063f, 0.821622252464294f,
N    -0.382830440998077f,
N  0.821328520774841f, -0.383076995611191f, 0.821034610271454f,
N    -0.383323341608047f,
N  0.820740520954132f, -0.383569449186325f, 0.820446193218231f,
N    -0.383815348148346f,
N  0.820151746273041f, -0.384061008691788f, 0.819857060909271f,
N    -0.384306460618973f,
N  0.819562196731567f, -0.384551674127579f, 0.819267153739929f,
N    -0.384796649217606f,
N  0.818971931934357f, -0.385041415691376f, 0.818676531314850f,
N    -0.385285943746567f,
N  0.818380951881409f, -0.385530263185501f, 0.818085134029388f,
N    -0.385774344205856f,
N  0.817789137363434f, -0.386018186807632f, 0.817493021488190f,
N    -0.386261820793152f,
N  0.817196667194366f, -0.386505216360092f, 0.816900074481964f,
N    -0.386748403310776f,
N  0.816603362560272f, -0.386991351842880f, 0.816306471824646f,
N    -0.387234061956406f,
N  0.816009342670441f, -0.387476563453674f, 0.815712094306946f,
N    -0.387718826532364f,
N  0.815414607524872f, -0.387960851192474f, 0.815116941928864f,
N    -0.388202667236328f,
N  0.814819097518921f, -0.388444244861603f, 0.814521074295044f,
N    -0.388685584068298f,
N  0.814222872257233f, -0.388926714658737f, 0.813924491405487f,
N    -0.389167606830597f,
N  0.813625931739807f, -0.389408260583878f, 0.813327133655548f,
N    -0.389648675918579f,
N  0.813028216362000f, -0.389888882637024f, 0.812729060649872f,
N    -0.390128880739212f,
N  0.812429726123810f, -0.390368610620499f, 0.812130272388458f,
N    -0.390608131885529f,
N  0.811830580234528f, -0.390847414731979f, 0.811530709266663f,
N    -0.391086459159851f,
N  0.811230659484863f, -0.391325294971466f, 0.810930430889130f,
N    -0.391563892364502f,
N  0.810629963874817f, -0.391802251338959f, 0.810329377651215f,
N    -0.392040401697159f,
N  0.810028612613678f, -0.392278283834457f, 0.809727668762207f,
N    -0.392515957355499f,
N  0.809426486492157f, -0.392753422260284f, 0.809125185012817f,
N    -0.392990618944168f,
N  0.808823645114899f, -0.393227607011795f, 0.808521986007690f,
N    -0.393464356660843f,
N  0.808220088481903f, -0.393700867891312f, 0.807918012142181f,
N    -0.393937170505524f,
N  0.807615816593170f, -0.394173204898834f, 0.807313382625580f,
N    -0.394409030675888f,
N  0.807010769844055f, -0.394644618034363f, 0.806707978248596f,
N    -0.394879996776581f,
N  0.806405067443848f, -0.395115107297897f, 0.806101918220520f,
N    -0.395350009202957f,
N  0.805798590183258f, -0.395584672689438f, 0.805495083332062f,
N    -0.395819097757339f,
N  0.805191397666931f, -0.396053284406662f, 0.804887533187866f,
N    -0.396287262439728f,
N  0.804583489894867f, -0.396520972251892f, 0.804279267787933f,
N    -0.396754473447800f,
N  0.803974866867065f, -0.396987736225128f, 0.803670346736908f,
N    -0.397220760583878f,
N  0.803365588188171f, -0.397453576326370f, 0.803060650825500f,
N    -0.397686123847961f,
N  0.802755534648895f, -0.397918462753296f, 0.802450239658356f,
N    -0.398150533437729f,
N  0.802144765853882f, -0.398382395505905f, 0.801839113235474f,
N    -0.398614019155502f,
N  0.801533281803131f, -0.398845434188843f, 0.801227271556854f,
N    -0.399076581001282f,
N  0.800921142101288f, -0.399307489395142f, 0.800614774227142f,
N    -0.399538189172745f,
N  0.800308227539063f, -0.399768620729446f, 0.800001561641693f,
N    -0.399998843669891f,
N  0.799694657325745f, -0.400228828191757f, 0.799387574195862f,
N    -0.400458574295044f,
N  0.799080371856689f, -0.400688081979752f, 0.798772931098938f,
N    -0.400917351245880f,
N  0.798465371131897f, -0.401146411895752f, 0.798157572746277f,
N    -0.401375204324722f,
N  0.797849655151367f, -0.401603758335114f, 0.797541558742523f,
N    -0.401832103729248f,
N  0.797233223915100f, -0.402060180902481f, 0.796924769878387f,
N    -0.402288049459457f,
N  0.796616137027740f, -0.402515679597855f, 0.796307325363159f,
N    -0.402743041515350f,
N  0.795998334884644f, -0.402970194816589f, 0.795689165592194f,
N    -0.403197109699249f,
N  0.795379877090454f, -0.403423786163330f, 0.795070350170136f,
N    -0.403650224208832f,
N  0.794760644435883f, -0.403876423835754f, 0.794450819492340f,
N    -0.404102355241776f,
N  0.794140756130219f, -0.404328078031540f, 0.793830573558807f,
N    -0.404553562402725f,
N  0.793520212173462f, -0.404778808355331f, 0.793209671974182f,
N    -0.405003815889359f,
N  0.792898952960968f, -0.405228585004807f, 0.792588055133820f,
N    -0.405453115701675f,
N  0.792276978492737f, -0.405677437782288f, 0.791965723037720f,
N    -0.405901491641998f,
N  0.791654348373413f, -0.406125307083130f, 0.791342735290527f,
N    -0.406348884105682f,
N  0.791031002998352f, -0.406572192907333f, 0.790719091892242f,
N    -0.406795293092728f,
N  0.790407001972198f, -0.407018154859543f, 0.790094733238220f,
N    -0.407240778207779f,
N  0.789782285690308f, -0.407463163137436f, 0.789469659328461f,
N    -0.407685309648514f,
N  0.789156913757324f, -0.407907217741013f, 0.788843929767609f,
N    -0.408128857612610f,
N  0.788530826568604f, -0.408350288867950f, 0.788217544555664f,
N    -0.408571451902390f,
N  0.787904083728790f, -0.408792406320572f, 0.787590444087982f,
N    -0.409013092517853f,
N  0.787276685237885f, -0.409233570098877f, 0.786962687969208f,
N    -0.409453779459000f,
N  0.786648571491241f, -0.409673750400543f, 0.786334276199341f,
N    -0.409893482923508f,
N  0.786019802093506f, -0.410112977027893f, 0.785705149173737f,
N    -0.410332232713699f,
N  0.785390377044678f, -0.410551249980927f, 0.785075426101685f,
N    -0.410770028829575f,
N  0.784760236740112f, -0.410988569259644f, 0.784444928169250f,
N    -0.411206841468811f,
N  0.784129500389099f, -0.411424905061722f, 0.783813834190369f,
N    -0.411642700433731f,
N  0.783498048782349f, -0.411860257387161f, 0.783182024955750f,
N    -0.412077575922012f,
N  0.782865881919861f, -0.412294656038284f, 0.782549619674683f,
N    -0.412511497735977f,
N  0.782233119010925f, -0.412728071212769f, 0.781916499137878f,
N    -0.412944436073303f,
N  0.781599700450897f, -0.413160532712936f, 0.781282722949982f,
N    -0.413376390933990f,
N  0.780965566635132f, -0.413592010736465f, 0.780648231506348f,
N    -0.413807392120361f,
N  0.780330777168274f, -0.414022535085678f, 0.780013144016266f,
N    -0.414237409830093f,
N  0.779695332050323f, -0.414452046155930f, 0.779377400875092f,
N    -0.414666473865509f,
N  0.779059290885925f, -0.414880603551865f, 0.778741002082825f,
N    -0.415094524621964f,
N  0.778422534465790f, -0.415308207273483f, 0.778103888034821f,
N    -0.415521621704102f,
N  0.777785122394562f, -0.415734797716141f, 0.777466177940369f,
N    -0.415947735309601f,
N  0.777147054672241f, -0.416160434484482f, 0.776827812194824f,
N    -0.416372895240784f,
N  0.776508331298828f, -0.416585087776184f, 0.776188731193542f,
N    -0.416797041893005f,
N  0.775869011878967f, -0.417008757591248f, 0.775549054145813f,
N    -0.417220205068588f,
N  0.775228977203369f, -0.417431443929672f, 0.774908721446991f,
N    -0.417642414569855f,
N  0.774588346481323f, -0.417853146791458f, 0.774267733097076f,
N    -0.418063640594482f,
N  0.773947000503540f, -0.418273866176605f, 0.773626148700714f,
N    -0.418483853340149f,
N  0.773305058479309f, -0.418693602085114f, 0.772983849048615f,
N    -0.418903112411499f,
N  0.772662520408630f, -0.419112354516983f, 0.772340953350067f,
N    -0.419321358203888f,
N  0.772019267082214f, -0.419530123472214f, 0.771697402000427f,
N    -0.419738620519638f,
N  0.771375417709351f, -0.419946908950806f, 0.771053194999695f,
N    -0.420154929161072f,
N  0.770730912685394f, -0.420362681150436f, 0.770408391952515f,
N    -0.420570224523544f,
N  0.770085752010345f, -0.420777499675751f, 0.769762933254242f,
N    -0.420984506607056f,
N  0.769439935684204f, -0.421191304922104f, 0.769116818904877f,
N    -0.421397835016251f,
N  0.768793523311615f, -0.421604126691818f, 0.768470108509064f,
N    -0.421810150146484f,
N  0.768146514892578f, -0.422015935182571f, 0.767822742462158f,
N    -0.422221481800079f,
N  0.767498791217804f, -0.422426789999008f, 0.767174720764160f,
N    -0.422631829977036f,
N  0.766850471496582f, -0.422836631536484f, 0.766526103019714f,
N    -0.423041164875031f,
N  0.766201555728912f, -0.423245459794998f, 0.765876889228821f,
N    -0.423449516296387f,
N  0.765551984310150f, -0.423653304576874f, 0.765226960182190f,
N    -0.423856884241104f,
N  0.764901816844940f, -0.424060165882111f, 0.764576494693756f,
N    -0.424263238906860f,
N  0.764250993728638f, -0.424466013908386f, 0.763925373554230f,
N    -0.424668580293655f,
N  0.763599574565887f, -0.424870878458023f, 0.763273596763611f,
N    -0.425072938203812f,
N  0.762947499752045f, -0.425274729728699f, 0.762621283531189f,
N    -0.425476282835007f,
N  0.762294828891754f, -0.425677597522736f, 0.761968255043030f,
N    -0.425878643989563f,
N  0.761641561985016f, -0.426079452037811f, 0.761314690113068f,
N    -0.426279991865158f,
N  0.760987639427185f, -0.426480293273926f, 0.760660469532013f,
N    -0.426680356264114f,
N  0.760333120822906f, -0.426880151033401f, 0.760005652904511f,
N    -0.427079707384110f,
N  0.759678006172180f, -0.427278995513916f, 0.759350180625916f,
N    -0.427478045225143f,
N  0.759022235870361f, -0.427676826715469f, 0.758694171905518f,
N    -0.427875369787216f,
N  0.758365929126740f, -0.428073674440384f, 0.758037507534027f,
N    -0.428271710872650f,
N  0.757708966732025f, -0.428469479084015f, 0.757380247116089f,
N    -0.428667008876801f,
N  0.757051348686218f, -0.428864300251007f, 0.756722390651703f,
N    -0.429061323404312f,
N  0.756393194198608f, -0.429258108139038f, 0.756063878536224f,
N    -0.429454624652863f,
N  0.755734443664551f, -0.429650902748108f, 0.755404829978943f,
N    -0.429846942424774f,
N  0.755075037479401f, -0.430042684078217f, 0.754745125770569f,
N    -0.430238217115402f,
N  0.754415094852448f, -0.430433481931686f, 0.754084885120392f,
N    -0.430628478527069f,
N  0.753754496574402f, -0.430823236703873f, 0.753423988819122f,
N    -0.431017726659775f,
N  0.753093302249908f, -0.431211978197098f, 0.752762496471405f,
N    -0.431405961513519f,
N  0.752431571483612f, -0.431599706411362f, 0.752100467681885f,
N    -0.431793183088303f,
N  0.751769185066223f, -0.431986421346664f, 0.751437783241272f,
N    -0.432179391384125f,
N  0.751106262207031f, -0.432372123003006f, 0.750774562358856f,
N    -0.432564586400986f,
N  0.750442683696747f, -0.432756811380386f, 0.750110685825348f,
N    -0.432948768138886f,
N  0.749778568744659f, -0.433140486478806f, 0.749446272850037f,
N    -0.433331936597824f,
N  0.749113857746124f, -0.433523118495941f, 0.748781263828278f,
N    -0.433714061975479f,
N  0.748448550701141f, -0.433904737234116f, 0.748115658760071f,
N    -0.434095174074173f,
N  0.747782647609711f, -0.434285342693329f, 0.747449457645416f,
N    -0.434475272893906f,
N  0.747116148471832f, -0.434664934873581f, 0.746782720088959f,
N    -0.434854328632355f,
N  0.746449112892151f, -0.435043483972549f, 0.746115326881409f,
N    -0.435232400894165f,
N  0.745781481266022f, -0.435421019792557f, 0.745447397232056f,
N    -0.435609430074692f,
N  0.745113253593445f, -0.435797542333603f, 0.744778931140900f,
N    -0.435985416173935f,
N  0.744444429874420f, -0.436173021793365f, 0.744109809398651f,
N    -0.436360388994217f,
N  0.743775069713593f, -0.436547487974167f, 0.743440151214600f,
N    -0.436734348535538f,
N  0.743105113506317f, -0.436920911073685f, 0.742769956588745f,
N    -0.437107264995575f,
N  0.742434620857239f, -0.437293320894241f, 0.742099165916443f,
N    -0.437479138374329f,
N  0.741763532161713f, -0.437664687633514f, 0.741427779197693f,
N    -0.437849998474121f,
N  0.741091907024384f, -0.438035041093826f, 0.740755856037140f,
N    -0.438219845294952f,
N  0.740419685840607f, -0.438404351472855f, 0.740083336830139f,
N    -0.438588619232178f,
N  0.739746868610382f, -0.438772648572922f, 0.739410281181335f,
N    -0.438956409692764f,
N  0.739073514938354f, -0.439139902591705f, 0.738736629486084f,
N    -0.439323127269745f,
N  0.738399624824524f, -0.439506113529205f, 0.738062441349030f,
N    -0.439688831567764f,
N  0.737725138664246f, -0.439871311187744f, 0.737387716770172f,
N    -0.440053492784500f,
N  0.737050116062164f, -0.440235435962677f, 0.736712396144867f,
N    -0.440417140722275f,
N  0.736374497413635f, -0.440598547458649f, 0.736036539077759f,
N    -0.440779715776443f,
N  0.735698342323303f, -0.440960645675659f, 0.735360085964203f,
N    -0.441141277551651f,
N  0.735021650791168f, -0.441321671009064f, 0.734683096408844f,
N    -0.441501796245575f,
N  0.734344422817230f, -0.441681683063507f, 0.734005570411682f,
N    -0.441861271858215f,
N  0.733666598796844f, -0.442040622234344f, 0.733327507972717f,
N    -0.442219734191895f,
N  0.732988238334656f, -0.442398548126221f, 0.732648849487305f,
N    -0.442577123641968f,
N  0.732309341430664f, -0.442755430936813f, 0.731969714164734f,
N    -0.442933470010757f,
N  0.731629908084869f, -0.443111270666122f, 0.731289982795715f,
N    -0.443288803100586f,
N  0.730949878692627f, -0.443466067314148f, 0.730609714984894f,
N    -0.443643063306808f,
N  0.730269372463226f, -0.443819820880890f, 0.729928910732269f,
N    -0.443996280431747f,
N  0.729588270187378f, -0.444172531366348f, 0.729247510433197f,
N    -0.444348484277725f,
N  0.728906631469727f, -0.444524168968201f, 0.728565633296967f,
N    -0.444699615240097f,
N  0.728224515914917f, -0.444874793291092f, 0.727883219718933f,
N    -0.445049703121185f,
N  0.727541804313660f, -0.445224374532700f, 0.727200269699097f,
N    -0.445398747920990f,
N  0.726858556270599f, -0.445572882890701f, 0.726516723632813f,
N    -0.445746749639511f,
N  0.726174771785736f, -0.445920348167419f, 0.725832700729370f,
N    -0.446093708276749f,
N  0.725490510463715f, -0.446266770362854f, 0.725148141384125f,
N    -0.446439594030380f,
N  0.724805653095245f, -0.446612149477005f, 0.724463045597076f,
N    -0.446784436702728f,
N  0.724120318889618f, -0.446956485509872f, 0.723777413368225f,
N    -0.447128236293793f,
N  0.723434448242188f, -0.447299748659134f, 0.723091304302216f,
N    -0.447470992803574f,
N  0.722747981548309f, -0.447641968727112f, 0.722404599189758f,
N    -0.447812676429749f,
N  0.722061097621918f, -0.447983115911484f, 0.721717417240143f,
N    -0.448153316974640f,
N  0.721373617649078f, -0.448323249816895f, 0.721029698848724f,
N    -0.448492884635925f,
N  0.720685660839081f, -0.448662281036377f, 0.720341444015503f,
N    -0.448831409215927f,
N  0.719997107982636f, -0.449000298976898f, 0.719652712345123f,
N    -0.449168890714645f,
N  0.719308137893677f, -0.449337244033813f, 0.718963444232941f,
N    -0.449505299329758f,
N  0.718618571758270f, -0.449673116207123f, 0.718273639678955f,
N    -0.449840664863586f,
N  0.717928528785706f, -0.450007945299149f, 0.717583298683167f,
N    -0.450174957513809f,
N  0.717238008975983f, -0.450341701507568f, 0.716892480850220f,
N    -0.450508207082748f,
N  0.716546893119812f, -0.450674414634705f, 0.716201186180115f,
N    -0.450840383768082f,
N  0.715855300426483f, -0.451006084680557f, 0.715509355068207f,
N    -0.451171487569809f,
N  0.715163230895996f, -0.451336652040482f, 0.714816987514496f,
N    -0.451501548290253f,
N  0.714470624923706f, -0.451666176319122f, 0.714124143123627f,
N    -0.451830536127090f,
N  0.713777542114258f, -0.451994657516479f, 0.713430821895599f,
N    -0.452158480882645f,
N  0.713083922863007f, -0.452322036027908f, 0.712736964225769f,
N    -0.452485352754593f,
N  0.712389826774597f, -0.452648371458054f, 0.712042629718781f,
N    -0.452811151742935f,
N  0.711695253849030f, -0.452973634004593f, 0.711347758769989f,
N    -0.453135877847672f,
N  0.711000144481659f, -0.453297853469849f, 0.710652410984039f,
N    -0.453459560871124f,
N  0.710304558277130f, -0.453621000051498f, 0.709956526756287f,
N    -0.453782171010971f,
N  0.709608435630798f, -0.453943043947220f, 0.709260225296021f,
N    -0.454103678464890f,
N  0.708911836147308f, -0.454264044761658f, 0.708563387393951f,
N    -0.454424172639847f,
N  0.708214759826660f, -0.454584002494812f, 0.707866072654724f,
N    -0.454743564128876f,
N  0.707517206668854f, -0.454902857542038f, 0.707168221473694f,
N    -0.455061882734299f,
N  0.706819176673889f, -0.455220639705658f, 0.706469953060150f,
N    -0.455379128456116f,
N  0.706120610237122f, -0.455537378787994f, 0.705771148204803f,
N    -0.455695331096649f,
N  0.705421566963196f, -0.455853015184402f, 0.705071866512299f,
N    -0.456010431051254f,
N  0.704722046852112f, -0.456167578697205f, 0.704372167587280f,
N    -0.456324487924576f,
N  0.704022109508514f, -0.456481099128723f, 0.703671932220459f,
N    -0.456637442111969f,
N  0.703321635723114f, -0.456793516874313f, 0.702971220016479f,
N    -0.456949323415756f,
N  0.702620685100555f, -0.457104891538620f, 0.702270030975342f,
N    -0.457260161638260f,
N  0.701919257640839f, -0.457415163516998f, 0.701568365097046f,
N    -0.457569897174835f,
N  0.701217353343964f, -0.457724362611771f, 0.700866222381592f,
N    -0.457878559827805f,
N  0.700514972209930f, -0.458032488822937f, 0.700163602828979f,
N    -0.458186149597168f,
N  0.699812114238739f, -0.458339542150497f, 0.699460506439209f,
N    -0.458492636680603f,
N  0.699108779430389f, -0.458645492792130f, 0.698756933212280f,
N    -0.458798080682755f,
N  0.698404967784882f, -0.458950400352478f, 0.698052942752838f,
N    -0.459102421998978f,
N  0.697700738906860f, -0.459254205226898f, 0.697348415851593f,
N    -0.459405690431595f,
N  0.696996033191681f, -0.459556937217712f, 0.696643471717834f,
N    -0.459707885980606f,
N  0.696290850639343f, -0.459858566522598f, 0.695938050746918f,
N    -0.460008978843689f,
N  0.695585191249847f, -0.460159152746201f, 0.695232212543488f,
N    -0.460309028625488f,
N  0.694879114627838f, -0.460458606481552f, 0.694525837898254f,
N    -0.460607945919037f,
N  0.694172501564026f, -0.460757017135620f, 0.693819046020508f,
N    -0.460905820131302f,
N  0.693465530872345f, -0.461054325103760f, 0.693111836910248f,
N    -0.461202591657639f,
N  0.692758023738861f, -0.461350560188293f, 0.692404091358185f,
N    -0.461498260498047f,
N  0.692050099372864f, -0.461645722389221f, 0.691695988178253f,
N    -0.461792886257172f,
N  0.691341698169708f, -0.461939752101898f, 0.690987348556519f,
N    -0.462086379528046f,
N  0.690632879734039f, -0.462232738733292f, 0.690278291702271f,
N    -0.462378799915314f,
N  0.689923584461212f, -0.462524622678757f, 0.689568817615509f,
N    -0.462670147418976f,
N  0.689213871955872f, -0.462815403938293f, 0.688858866691589f,
N    -0.462960392236710f,
N  0.688503682613373f, -0.463105112314224f, 0.688148438930511f,
N    -0.463249564170837f,
N  0.687793076038361f, -0.463393747806549f, 0.687437593936920f,
N    -0.463537633419037f,
N  0.687082052230835f, -0.463681250810623f, 0.686726331710815f,
N    -0.463824629783630f,
N  0.686370551586151f, -0.463967710733414f, 0.686014592647552f,
N    -0.464110493659973f,
N  0.685658574104309f, -0.464253038167953f, 0.685302436351776f,
N    -0.464395314455032f,
N  0.684946238994598f, -0.464537292718887f, 0.684589862823486f,
N    -0.464679002761841f,
N  0.684233427047729f, -0.464820444583893f, 0.683876872062683f,
N    -0.464961618185043f,
N  0.683520197868347f, -0.465102523565292f, 0.683163404464722f,
N    -0.465243130922318f,
N  0.682806491851807f, -0.465383470058441f, 0.682449519634247f,
N    -0.465523540973663f,
N  0.682092368602753f, -0.465663343667984f, 0.681735157966614f,
N    -0.465802878141403f,
N  0.681377887725830f, -0.465942144393921f, 0.681020438671112f,
N    -0.466081112623215f,
N  0.680662930011749f, -0.466219812631607f, 0.680305242538452f,
N    -0.466358244419098f,
N  0.679947495460510f, -0.466496407985687f, 0.679589688777924f,
N    -0.466634273529053f,
N  0.679231703281403f, -0.466771900653839f, 0.678873658180237f,
N    -0.466909229755402f,
N  0.678515493869781f, -0.467046260833740f, 0.678157210350037f,
N    -0.467183053493500f,
N  0.677798807621002f, -0.467319577932358f, 0.677440345287323f,
N    -0.467455804347992f,
N  0.677081763744354f, -0.467591762542725f, 0.676723062992096f,
N    -0.467727422714233f,
N  0.676364302635193f, -0.467862844467163f, 0.676005363464355f,
N    -0.467997968196869f,
N  0.675646364688873f, -0.468132823705673f, 0.675287246704102f,
N    -0.468267410993576f,
N  0.674928069114685f, -0.468401730060577f, 0.674568772315979f,
N    -0.468535751104355f,
N  0.674209356307983f, -0.468669503927231f, 0.673849821090698f,
N    -0.468802988529205f,
N  0.673490226268768f, -0.468936175107956f, 0.673130512237549f,
N    -0.469069123268127f,
N  0.672770678997040f, -0.469201773405075f, 0.672410726547241f,
N    -0.469334155321121f,
N  0.672050714492798f, -0.469466239213943f, 0.671690583229065f,
N    -0.469598054885864f,
N  0.671330332756042f, -0.469729602336884f, 0.670970022678375f,
N    -0.469860881567001f,
N  0.670609593391418f, -0.469991862773895f, 0.670249044895172f,
N    -0.470122605562210f,
N  0.669888436794281f, -0.470253020524979f, 0.669527709484100f,
N    -0.470383197069168f,
N  0.669166862964630f, -0.470513075590134f, 0.668805956840515f,
N    -0.470642685890198f,
N  0.668444931507111f, -0.470772027969360f, 0.668083786964417f,
N    -0.470901101827621f,
N  0.667722582817078f, -0.471029877662659f, 0.667361259460449f,
N    -0.471158385276794f,
N  0.666999816894531f, -0.471286594867706f, 0.666638314723969f,
N    -0.471414536237717f,
N  0.666276693344116f, -0.471542209386826f, 0.665914952754974f,
N    -0.471669614315033f,
N  0.665553152561188f, -0.471796721220016f, 0.665191233158112f,
N    -0.471923559904099f,
N  0.664829254150391f, -0.472050130367279f, 0.664467096328735f,
N    -0.472176402807236f,
N  0.664104938507080f, -0.472302407026291f, 0.663742601871490f,
N    -0.472428143024445f,
N  0.663380205631256f, -0.472553610801697f, 0.663017749786377f,
N    -0.472678780555725f,
N  0.662655174732208f, -0.472803652286530f, 0.662292480468750f,
N    -0.472928285598755f,
N  0.661929666996002f, -0.473052620887756f, 0.661566793918610f,
N    -0.473176687955856f,
N  0.661203861236572f, -0.473300457000732f, 0.660840749740601f,
N    -0.473423957824707f,
N  0.660477638244629f, -0.473547190427780f, 0.660114347934723f,
N    -0.473670125007629f,
N  0.659750998020172f, -0.473792791366577f, 0.659387588500977f,
N    -0.473915189504623f,
N  0.659024059772491f, -0.474037289619446f, 0.658660411834717f,
N    -0.474159121513367f,
N  0.658296704292297f, -0.474280685186386f, 0.657932877540588f,
N    -0.474401950836182f,
N  0.657568991184235f, -0.474522948265076f, 0.657204985618591f,
N    -0.474643647670746f,
N  0.656840860843658f, -0.474764078855515f, 0.656476676464081f,
N    -0.474884241819382f,
N  0.656112432479858f, -0.475004136562347f, 0.655748009681702f,
N    -0.475123733282089f,
N  0.655383586883545f, -0.475243031978607f, 0.655019044876099f,
N    -0.475362062454224f,
N  0.654654383659363f, -0.475480824708939f, 0.654289662837982f,
N    -0.475599318742752f,
N  0.653924822807312f, -0.475717514753342f, 0.653559923171997f,
N    -0.475835442543030f,
N  0.653194904327393f, -0.475953072309494f, 0.652829825878143f,
N    -0.476070433855057f,
N  0.652464628219604f, -0.476187497377396f, 0.652099311351776f,
N    -0.476304292678833f,
N  0.651733994483948f, -0.476420819759369f, 0.651368498802185f,
N    -0.476537048816681f,
N  0.651003003120422f, -0.476653009653091f, 0.650637328624725f,
N    -0.476768702268600f,
N  0.650271594524384f, -0.476884096860886f, 0.649905800819397f,
N    -0.476999223232269f,
N  0.649539887905121f, -0.477114051580429f, 0.649173915386200f,
N    -0.477228611707687f,
N  0.648807883262634f, -0.477342873811722f, 0.648441672325134f,
N    -0.477456867694855f,
N  0.648075461387634f, -0.477570593357086f, 0.647709131240845f,
N    -0.477684020996094f,
N  0.647342681884766f, -0.477797180414200f, 0.646976172924042f,
N    -0.477910041809082f,
N  0.646609604358673f, -0.478022634983063f, 0.646242916584015f,
N    -0.478134930133820f,
N  0.645876109600067f, -0.478246957063675f, 0.645509302616119f,
N    -0.478358715772629f,
N  0.645142316818237f, -0.478470176458359f, 0.644775331020355f,
N    -0.478581339120865f,
N  0.644408226013184f, -0.478692263364792f, 0.644041001796722f,
N    -0.478802859783173f,
N  0.643673717975616f, -0.478913217782974f, 0.643306374549866f,
N    -0.479023247957230f,
N  0.642938911914825f, -0.479133039712906f, 0.642571389675140f,
N    -0.479242533445358f,
N  0.642203748226166f, -0.479351729154587f, 0.641836047172546f,
N    -0.479460656642914f,
N  0.641468286514282f, -0.479569315910339f, 0.641100406646729f,
N    -0.479677677154541f,
N  0.640732467174530f, -0.479785770177841f, 0.640364408493042f,
N    -0.479893565177917f,
N  0.639996349811554f, -0.480001062154770f, 0.639628112316132f,
N    -0.480108320713043f,
N  0.639259815216064f, -0.480215251445770f, 0.638891458511353f,
N    -0.480321943759918f,
N  0.638523042201996f, -0.480428308248520f, 0.638154506683350f,
N    -0.480534434318542f,
N  0.637785911560059f, -0.480640232563019f, 0.637417197227478f,
N    -0.480745792388916f,
N  0.637048482894897f, -0.480851024389267f, 0.636679589748383f,
N    -0.480956017971039f,
N  0.636310696601868f, -0.481060713529587f, 0.635941684246063f,
N    -0.481165111064911f,
N  0.635572552680969f, -0.481269240379334f, 0.635203421115875f,
N    -0.481373071670532f,
N  0.634834170341492f, -0.481476634740829f, 0.634464859962463f,
N    -0.481579899787903f,
N  0.634095430374146f, -0.481682896614075f, 0.633725941181183f,
N    -0.481785595417023f,
N  0.633356392383575f, -0.481888025999069f, 0.632986724376678f,
N    -0.481990188360214f,
N  0.632616996765137f, -0.482092022895813f, 0.632247209548950f,
N    -0.482193619012833f,
N  0.631877362728119f, -0.482294887304306f, 0.631507396697998f,
N    -0.482395917177200f,
N  0.631137371063232f, -0.482496619224548f, 0.630767226219177f,
N    -0.482597053050995f,
N  0.630397081375122f, -0.482697218656540f, 0.630026817321777f,
N    -0.482797086238861f,
N  0.629656434059143f, -0.482896685600281f, 0.629286050796509f,
N    -0.482995986938477f,
N  0.628915548324585f, -0.483094990253448f, 0.628544986248016f,
N    -0.483193725347519f,
N  0.628174364566803f, -0.483292192220688f, 0.627803623676300f,
N    -0.483390361070633f,
N  0.627432823181152f, -0.483488231897354f, 0.627061963081360f,
N    -0.483585834503174f,
N  0.626691043376923f, -0.483683139085770f, 0.626320004463196f,
N    -0.483780175447464f,
N  0.625948905944824f, -0.483876913785934f, 0.625577747821808f,
N    -0.483973383903503f,
N  0.625206530094147f, -0.484069555997849f, 0.624835193157196f,
N    -0.484165430068970f,
N  0.624463796615601f, -0.484261035919189f, 0.624092340469360f,
N    -0.484356373548508f,
N  0.623720824718475f, -0.484451413154602f, 0.623349189758301f,
N    -0.484546154737473f,
N  0.622977554798126f, -0.484640628099442f, 0.622605800628662f,
N    -0.484734803438187f,
N  0.622233927249908f, -0.484828680753708f, 0.621862053871155f,
N    -0.484922289848328f,
N  0.621490061283112f, -0.485015630722046f, 0.621118068695068f,
N    -0.485108673572540f,
N  0.620745956897736f, -0.485201418399811f, 0.620373785495758f,
N    -0.485293895006180f,
N  0.620001494884491f, -0.485386073589325f, 0.619629204273224f,
N    -0.485477954149246f,
N  0.619256794452667f, -0.485569566488266f, 0.618884325027466f,
N    -0.485660910606384f,
N  0.618511795997620f, -0.485751956701279f, 0.618139207363129f,
N    -0.485842704772949f,
N  0.617766559123993f, -0.485933154821396f, 0.617393791675568f,
N    -0.486023366451263f,
N  0.617020964622498f, -0.486113250255585f, 0.616648077964783f,
N    -0.486202865839005f,
N  0.616275131702423f, -0.486292183399200f, 0.615902125835419f,
N    -0.486381232738495f,
N  0.615529060363770f, -0.486469984054565f, 0.615155875682831f,
N    -0.486558437347412f,
N  0.614782691001892f, -0.486646622419357f, 0.614409387111664f,
N    -0.486734509468079f,
N  0.614036023616791f, -0.486822128295898f, 0.613662600517273f,
N    -0.486909449100494f,
N  0.613289117813110f, -0.486996471881866f, 0.612915575504303f,
N    -0.487083226442337f,
N  0.612541973590851f, -0.487169682979584f, 0.612168252468109f,
N    -0.487255871295929f,
N  0.611794531345367f, -0.487341761589050f, 0.611420691013336f,
N    -0.487427353858948f,
N  0.611046791076660f, -0.487512677907944f, 0.610672831535339f,
N    -0.487597703933716f,
N  0.610298871994019f, -0.487682431936264f, 0.609924793243408f,
N    -0.487766891717911f,
N  0.609550595283508f, -0.487851053476334f, 0.609176397323608f,
N    -0.487934947013855f,
N  0.608802139759064f, -0.488018542528152f, 0.608427822589874f,
N    -0.488101840019226f,
N  0.608053386211395f, -0.488184869289398f, 0.607678949832916f,
N    -0.488267600536346f,
N  0.607304394245148f, -0.488350033760071f, 0.606929838657379f,
N    -0.488432198762894f,
N  0.606555163860321f, -0.488514065742493f, 0.606180429458618f,
N    -0.488595664501190f,
N  0.605805635452271f, -0.488676935434341f, 0.605430841445923f,
N    -0.488757967948914f,
N  0.605055928230286f, -0.488838672637939f, 0.604680955410004f,
N    -0.488919109106064f,
N  0.604305922985077f, -0.488999247550964f, 0.603930830955505f,
N    -0.489079117774963f,
N  0.603555679321289f, -0.489158689975739f, 0.603180468082428f,
N    -0.489237964153290f,
N  0.602805197238922f, -0.489316970109940f, 0.602429866790771f,
N    -0.489395678043365f,
N  0.602054476737976f, -0.489474087953568f, 0.601679027080536f,
N    -0.489552229642868f,
N  0.601303517818451f, -0.489630073308945f, 0.600927948951721f,
N    -0.489707618951797f,
N  0.600552320480347f, -0.489784896373749f, 0.600176632404327f,
N    -0.489861875772476f,
N  0.599800884723663f, -0.489938557147980f, 0.599425077438354f,
N    -0.490014940500259f,
N  0.599049210548401f, -0.490091055631638f, 0.598673284053802f,
N    -0.490166902542114f,
N  0.598297297954559f, -0.490242421627045f, 0.597921252250671f,
N    -0.490317672491074f,
N  0.597545146942139f, -0.490392625331879f, 0.597168982028961f,
N    -0.490467309951782f,
N  0.596792817115784f, -0.490541696548462f, 0.596416532993317f,
N    -0.490615785121918f,
N  0.596040189266205f, -0.490689605474472f, 0.595663845539093f,
N    -0.490763127803802f,
N  0.595287382602692f, -0.490836352109909f, 0.594910860061646f,
N    -0.490909278392792f,
N  0.594534337520599f, -0.490981936454773f, 0.594157755374908f,
N    -0.491054296493530f,
N  0.593781054019928f, -0.491126358509064f, 0.593404352664948f,
N    -0.491198152303696f,
N  0.593027591705322f, -0.491269648075104f, 0.592650771141052f,
N    -0.491340845823288f,
N  0.592273890972137f, -0.491411775350571f, 0.591896951198578f,
N    -0.491482406854630f,
N  0.591519951820374f, -0.491552740335464f, 0.591142892837524f,
N    -0.491622805595398f,
N  0.590765833854675f, -0.491692543029785f, 0.590388655662537f,
N    -0.491762012243271f,
N  0.590011477470398f, -0.491831213235855f, 0.589634180068970f,
N    -0.491900116205215f,
N  0.589256882667542f, -0.491968721151352f, 0.588879525661469f,
N    -0.492037028074265f,
N  0.588502109050751f, -0.492105036973953f, 0.588124632835388f,
N    -0.492172777652740f,
N  0.587747097015381f, -0.492240220308304f, 0.587369561195374f,
N    -0.492307394742966f,
N  0.586991965770721f, -0.492374241352081f, 0.586614251136780f,
N    -0.492440819740295f,
N  0.586236536502838f, -0.492507129907608f, 0.585858762264252f,
N    -0.492573112249374f,
N  0.585480928421021f, -0.492638826370239f, 0.585103094577789f,
N    -0.492704242467880f,
N  0.584725141525269f, -0.492769360542297f, 0.584347188472748f,
N    -0.492834210395813f,
N  0.583969175815582f, -0.492898762226105f, 0.583591103553772f,
N    -0.492963016033173f,
N  0.583212971687317f, -0.493026971817017f, 0.582834780216217f,
N    -0.493090659379959f,
N  0.582456588745117f, -0.493154048919678f, 0.582078278064728f,
N    -0.493217140436172f,
N  0.581699967384338f, -0.493279963731766f, 0.581321597099304f,
N    -0.493342459201813f,
N  0.580943167209625f, -0.493404686450958f, 0.580564737319946f,
N    -0.493466645479202f,
N  0.580186247825623f, -0.493528276681900f, 0.579807698726654f,
N    -0.493589639663696f,
N  0.579429090023041f, -0.493650704622269f, 0.579050421714783f,
N    -0.493711471557617f,
N  0.578671753406525f, -0.493771970272064f, 0.578292965888977f,
N    -0.493832170963287f,
N  0.577914178371429f, -0.493892073631287f, 0.577535390853882f,
N    -0.493951678276062f,
N  0.577156484127045f, -0.494011014699936f, 0.576777577400208f,
N    -0.494070053100586f,
N  0.576398611068726f, -0.494128793478012f, 0.576019585132599f,
N    -0.494187235832214f,
N  0.575640499591827f, -0.494245409965515f, 0.575261414051056f,
N    -0.494303256273270f,
N  0.574882268905640f, -0.494360834360123f, 0.574503064155579f,
N    -0.494418144226074f,
N  0.574123859405518f, -0.494475126266479f, 0.573744535446167f,
N    -0.494531840085983f,
N  0.573365211486816f, -0.494588255882263f, 0.572985887527466f,
N    -0.494644373655319f,
N  0.572606444358826f, -0.494700223207474f, 0.572227001190186f,
N    -0.494755744934082f,
N  0.571847498416901f, -0.494810998439789f, 0.571467995643616f,
N    -0.494865983724594f,
N  0.571088373661041f, -0.494920641183853f, 0.570708811283112f,
N    -0.494975030422211f,
N  0.570329129695892f, -0.495029091835022f, 0.569949388504028f,
N    -0.495082914829254f,
N  0.569569647312164f, -0.495136409997940f, 0.569189906120300f,
N    -0.495189607143402f,
N  0.568810045719147f, -0.495242536067963f, 0.568430185317993f,
N    -0.495295166969299f,
N  0.568050265312195f, -0.495347499847412f, 0.567670345306396f,
N    -0.495399564504623f,
N  0.567290365695953f, -0.495451331138611f, 0.566910326480865f,
N    -0.495502769947052f,
N  0.566530287265778f, -0.495553970336914f, 0.566150128841400f,
N    -0.495604842901230f,
N  0.565770030021667f, -0.495655417442322f, 0.565389811992645f,
N    -0.495705723762512f,
N  0.565009593963623f, -0.495755732059479f, 0.564629375934601f,
N    -0.495805442333221f,
N  0.564249038696289f, -0.495854884386063f, 0.563868701457977f,
N    -0.495903998613358f,
N  0.563488364219666f, -0.495952844619751f, 0.563107967376709f,
N    -0.496001392602921f,
N  0.562727510929108f, -0.496049642562866f, 0.562346994876862f,
N    -0.496097624301910f,
N  0.561966478824615f, -0.496145308017731f, 0.561585903167725f,
N    -0.496192663908005f,
N  0.561205327510834f, -0.496239781379700f, 0.560824692249298f,
N    -0.496286571025848f,
N  0.560444056987762f, -0.496333062648773f, 0.560063362121582f,
N    -0.496379286050797f,
N  0.559682607650757f, -0.496425211429596f, 0.559301853179932f,
N    -0.496470838785172f,
N  0.558921039104462f, -0.496516168117523f, 0.558540165424347f,
N    -0.496561229228973f,
N  0.558159291744232f, -0.496605962514877f, 0.557778418064117f,
N    -0.496650427579880f,
N  0.557397484779358f, -0.496694594621658f, 0.557016491889954f,
N    -0.496738493442535f,
N  0.556635499000549f, -0.496782064437866f, 0.556254446506500f,
N    -0.496825367212296f,
N  0.555873334407806f, -0.496868371963501f, 0.555492222309113f,
N    -0.496911078691483f,
N  0.555111110210419f, -0.496953487396240f, 0.554729938507080f,
N    -0.496995598077774f,
N  0.554348707199097f, -0.497037440538406f, 0.553967475891113f,
N    -0.497078984975815f,
N  0.553586184978485f, -0.497120231389999f, 0.553204894065857f,
N    -0.497161179780960f,
N  0.552823603153229f, -0.497201830148697f, 0.552442193031311f,
N    -0.497242212295532f,
N  0.552060842514038f, -0.497282296419144f, 0.551679372787476f,
N    -0.497322082519531f,
N  0.551297962665558f, -0.497361570596695f, 0.550916433334351f,
N    -0.497400760650635f,
N  0.550534904003143f, -0.497439652681351f, 0.550153374671936f,
N    -0.497478276491165f,
N  0.549771785736084f, -0.497516602277756f, 0.549390196800232f,
N    -0.497554630041122f,
N  0.549008548259735f, -0.497592359781265f, 0.548626899719238f,
N    -0.497629791498184f,
N  0.548245191574097f, -0.497666954994202f, 0.547863483428955f,
N    -0.497703820466995f,
N  0.547481775283813f, -0.497740387916565f, 0.547099947929382f,
N    -0.497776657342911f,
N  0.546718180179596f, -0.497812628746033f, 0.546336352825165f,
N    -0.497848302125931f,
N  0.545954465866089f, -0.497883707284927f, 0.545572578907013f,
N    -0.497918814420700f,
N  0.545190691947937f, -0.497953623533249f, 0.544808745384216f,
N    -0.497988134622574f,
N  0.544426798820496f, -0.498022347688675f, 0.544044792652130f,
N    -0.498056292533875f,
N  0.543662786483765f, -0.498089909553528f, 0.543280720710754f,
N    -0.498123258352280f,
N  0.542898654937744f, -0.498156309127808f, 0.542516589164734f,
N    -0.498189061880112f,
N  0.542134463787079f, -0.498221516609192f, 0.541752278804779f,
N    -0.498253703117371f,
N  0.541370153427124f, -0.498285561800003f, 0.540987968444824f,
N    -0.498317152261734f,
N  0.540605723857880f, -0.498348444700241f, 0.540223479270935f,
N    -0.498379439115524f,
N  0.539841234683990f, -0.498410135507584f, 0.539458930492401f,
N    -0.498440563678741f,
N  0.539076626300812f, -0.498470664024353f, 0.538694262504578f,
N    -0.498500496149063f,
N  0.538311958312988f, -0.498530030250549f, 0.537929534912109f,
N    -0.498559266328812f,
N  0.537547171115875f, -0.498588204383850f, 0.537164747714996f,
N    -0.498616874217987f,
N  0.536782264709473f, -0.498645216226578f, 0.536399841308594f,
N    -0.498673290014267f,
N  0.536017298698425f, -0.498701065778732f, 0.535634815692902f,
N    -0.498728543519974f,
N  0.535252273082733f, -0.498755723237991f, 0.534869730472565f,
N    -0.498782604932785f,
N  0.534487187862396f, -0.498809218406677f, 0.534104585647583f,
N    -0.498835533857346f,
N  0.533721983432770f, -0.498861521482468f, 0.533339321613312f,
N    -0.498887240886688f,
N  0.532956659793854f, -0.498912662267685f, 0.532573997974396f,
N    -0.498937815427780f,
N  0.532191336154938f, -0.498962640762329f, 0.531808614730835f,
N    -0.498987197875977f,
N  0.531425893306732f, -0.499011427164078f, 0.531043112277985f,
N    -0.499035388231277f,
N  0.530660390853882f, -0.499059051275253f, 0.530277609825134f,
N    -0.499082416296005f,
N  0.529894769191742f, -0.499105513095856f, 0.529511988162994f,
N    -0.499128282070160f,
N  0.529129147529602f, -0.499150782823563f, 0.528746306896210f,
N    -0.499172955751419f,
N  0.528363406658173f, -0.499194860458374f, 0.527980506420136f,
N    -0.499216467142105f,
N  0.527597606182098f, -0.499237775802612f, 0.527214705944061f,
N    -0.499258816242218f,
N  0.526831746101379f, -0.499279528856277f, 0.526448845863342f,
N    -0.499299973249435f,
N  0.526065826416016f, -0.499320119619370f, 0.525682866573334f,
N    -0.499339967966080f,
N  0.525299847126007f, -0.499359518289566f, 0.524916887283325f,
N    -0.499378770589828f,
N  0.524533808231354f, -0.499397724866867f, 0.524150788784027f,
N    -0.499416410923004f,
N  0.523767769336700f, -0.499434769153595f, 0.523384690284729f,
N    -0.499452859163284f,
N  0.523001611232758f, -0.499470651149750f, 0.522618472576141f,
N    -0.499488145112991f,
N  0.522235393524170f, -0.499505341053009f, 0.521852254867554f,
N    -0.499522238969803f,
N  0.521469116210938f, -0.499538868665695f, 0.521085977554321f,
N    -0.499555170536041f,
N  0.520702838897705f, -0.499571204185486f, 0.520319640636444f,
N    -0.499586939811707f,
N  0.519936442375183f, -0.499602377414703f, 0.519553244113922f,
N    -0.499617516994476f,
N  0.519170045852661f, -0.499632388353348f, 0.518786847591400f,
N    -0.499646931886673f,
N  0.518403589725494f, -0.499661177396774f, 0.518020391464233f,
N    -0.499675154685974f,
N  0.517637133598328f, -0.499688833951950f, 0.517253875732422f,
N    -0.499702215194702f,
N  0.516870558261871f, -0.499715298414230f, 0.516487300395966f,
N    -0.499728083610535f,
N  0.516103982925415f, -0.499740600585938f, 0.515720725059509f,
N    -0.499752789735794f,
N  0.515337407588959f, -0.499764710664749f, 0.514954090118408f,
N    -0.499776333570480f,
N  0.514570772647858f, -0.499787658452988f, 0.514187395572662f,
N    -0.499798685312271f,
N  0.513804078102112f, -0.499809414148331f, 0.513420701026917f,
N    -0.499819844961166f,
N  0.513037383556366f, -0.499830007553101f, 0.512654006481171f,
N    -0.499839842319489f,
N  0.512270629405975f, -0.499849408864975f, 0.511887252330780f,
N    -0.499858677387238f,
N  0.511503815650940f, -0.499867647886276f, 0.511120438575745f,
N    -0.499876320362091f,
N  0.510737061500549f, -0.499884694814682f, 0.510353624820709f,
N    -0.499892801046371f,
N  0.509970188140869f, -0.499900579452515f, 0.509586811065674f,
N    -0.499908089637756f,
N  0.509203374385834f, -0.499915301799774f, 0.508819937705994f,
N    -0.499922215938568f,
N  0.508436501026154f, -0.499928832054138f, 0.508053064346313f,
N    -0.499935150146484f,
N  0.507669627666473f, -0.499941170215607f, 0.507286131381989f,
N    -0.499946922063828f,
N  0.506902694702148f, -0.499952346086502f, 0.506519258022308f,
N    -0.499957501888275f,
N  0.506135761737823f, -0.499962359666824f, 0.505752325057983f,
N    -0.499966919422150f,
N  0.505368828773499f, -0.499971181154251f, 0.504985332489014f,
N    -0.499975144863129f,
N  0.504601895809174f, -0.499978810548782f, 0.504218399524689f,
N    -0.499982208013535f,
N  0.503834903240204f, -0.499985307455063f, 0.503451406955719f,
N    -0.499988079071045f,
N  0.503067970275879f, -0.499990582466125f, 0.502684473991394f,
N    -0.499992787837982f,
N  0.502300977706909f, -0.499994695186615f, 0.501917481422424f,
N    -0.499996334314346f,
N  0.501533985137939f, -0.499997645616531f, 0.501150488853455f,
N    -0.499998688697815f,
N  0.500766992568970f, -0.499999403953552f, 0.500383496284485f,
N    -0.499999850988388f,
N};
N
N
N
N/**    
N* @brief  Initialization function for the floating-point RFFT/RIFFT.   
N* @deprecated Do not use this function.  It has been superceded by \ref arm_rfft_fast_init_f32 and will be removed
N* in the future.
N* @param[in,out] *S             points to an instance of the floating-point RFFT/RIFFT structure.   
N* @param[in,out] *S_CFFT        points to an instance of the floating-point CFFT/CIFFT structure.   
N* @param[in]     fftLenReal     length of the FFT.   
N* @param[in]     ifftFlagR      flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform.   
N* @param[in]     bitReverseFlag flag that enables (bitReverseFlag=1) or disables (bitReverseFlag=0) bit reversal of output.   
N* @return		The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_ARGUMENT_ERROR if <code>fftLenReal</code> is not a supported value.   
N*    
N* \par Description:   
N* \par   
N* The parameter <code>fftLenReal</code>	Specifies length of RFFT/RIFFT Process. Supported FFT Lengths are 128, 512, 2048.    
N* \par    
N* The parameter <code>ifftFlagR</code> controls whether a forward or inverse transform is computed.    
N* Set(=1) ifftFlagR to calculate RIFFT, otherwise RFFT is calculated.    
N* \par    
N* The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.    
N* Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.   
N* \par    
N* This function also initializes Twiddle factor table.     
N*/
N
Narm_status arm_rfft_init_f32(
N  arm_rfft_instance_f32 * S,
N  arm_cfft_radix4_instance_f32 * S_CFFT,
N  uint32_t fftLenReal,
N  uint32_t ifftFlagR,
N  uint32_t bitReverseFlag)
N{
N
N  /*  Initialise the default arm status */
N  arm_status status = ARM_MATH_SUCCESS;
N
N  /*  Initialize the Real FFT length */
N  S->fftLenReal = (uint16_t) fftLenReal;
N
N  /*  Initialize the Complex FFT length */
N  S->fftLenBy2 = (uint16_t) fftLenReal / 2u;
N
N  /*  Initialize the Twiddle coefficientA pointer */
N  S->pTwiddleAReal = (float32_t *) realCoefA;
N
N  /*  Initialize the Twiddle coefficientB pointer */
N  S->pTwiddleBReal = (float32_t *) realCoefB;
N
N  /*  Initialize the Flag for selection of RFFT or RIFFT */
N  S->ifftFlagR = (uint8_t) ifftFlagR;
N
N  /*  Initialize the Flag for calculation Bit reversal or not */
N  S->bitReverseFlagR = (uint8_t) bitReverseFlag;
N
N  /*  Initializations of structure parameters depending on the FFT length */
N  switch (S->fftLenReal)
N  {
N    /* Init table modifier value */
N  case 8192u:
N    S->twidCoefRModifier = 1u;
N    break;
N  case 2048u:
N    S->twidCoefRModifier = 4u;
N    break;
N  case 512u:
N    S->twidCoefRModifier = 16u;
N    break;
N  case 128u:
N    S->twidCoefRModifier = 64u;
N    break;
N  default:
N    /*  Reporting argument error if rfftSize is not valid value */
N    status = ARM_MATH_ARGUMENT_ERROR;
N    break;
N  }
N
N  /* Init Complex FFT Instance */
N  S->pCfft = S_CFFT;
N
N  if(S->ifftFlagR)
N  {
N    /* Initializes the CIFFT Module for fftLenreal/2 length */
N    arm_cfft_radix4_init_f32(S->pCfft, S->fftLenBy2, 1u, 0u);
N  }
N  else
N  {
N    /* Initializes the CFFT Module for fftLenreal/2 length */
N    arm_cfft_radix4_init_f32(S->pCfft, S->fftLenBy2, 0u, 0u);
N  }
N
N  /* return the status of RFFT Init function */
N  return (status);
N
N}
N
N  /**    
N   * @} end of RealFFT group    
N   */
