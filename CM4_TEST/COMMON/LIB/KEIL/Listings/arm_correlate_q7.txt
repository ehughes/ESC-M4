; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_correlate_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_correlate_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_correlate_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_correlate_q7.c]
                          THUMB

                          AREA ||i.arm_correlate_q7||, CODE, READONLY, ALIGN=1

                  arm_correlate_q7 PROC
;;;75     
;;;76     void arm_correlate_q7(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;77       q7_t * pSrcA,
;;;78       uint32_t srcALen,
;;;79       q7_t * pSrcB,
;;;80       uint32_t srcBLen,
;;;81       q7_t * pDst)
;;;82     {
000004  b08b              SUB      sp,sp,#0x2c
000006  9c14              LDR      r4,[sp,#0x50]
;;;83     
;;;84     
;;;85     #ifndef ARM_MATH_CM0_FAMILY
;;;86     
;;;87       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;88     
;;;89       q7_t *pIn1;                                    /* inputA pointer               */
;;;90       q7_t *pIn2;                                    /* inputB pointer               */
;;;91       q7_t *pOut = pDst;                             /* output pointer               */
;;;92       q7_t *px;                                      /* Intermediate inputA pointer  */
;;;93       q7_t *py;                                      /* Intermediate inputB pointer  */
;;;94       q7_t *pSrc1;                                   /* Intermediate pointers        */
;;;95       q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulators                  */
;;;96       q31_t input1, input2;                          /* temporary variables */
;;;97       q15_t in1, in2;                                /* temporary variables */
;;;98       q7_t x0, x1, x2, x3, c0, c1;                   /* temporary variables for holding input and coefficient values */
;;;99       uint32_t j, k = 0u, count, blkCnt, outBlockSize, blockSize1, blockSize2, blockSize3;  /* loop counter                 */
;;;100      int32_t inc = 1;
000008  2701              MOVS     r7,#1
;;;101    
;;;102    
;;;103      /* The algorithm implementation is based on the lengths of the inputs. */
;;;104      /* srcB is always made to slide across srcA. */
;;;105      /* So srcBLen is always considered as shorter or equal to srcALen */
;;;106      /* But CORR(x, y) is reverse of CORR(y, x) */
;;;107      /* So, when srcBLen > srcALen, output pointer is made to point to the end of the output buffer */
;;;108      /* and the destination pointer modifier, inc is set to -1 */
;;;109      /* If srcALen > srcBLen, zero pad has to be done to srcB to make the two inputs of same length */
;;;110      /* But to improve the performance,   
;;;111       * we include zeroes in the output instead of zero padding either of the the inputs*/
;;;112      /* If srcALen > srcBLen,   
;;;113       * (srcALen - srcBLen) zeroes has to included in the starting of the output buffer */
;;;114      /* If srcALen < srcBLen,   
;;;115       * (srcALen - srcBLen) zeroes has to included in the ending of the output buffer */
;;;116      if(srcALen >= srcBLen)
;;;117      {
;;;118        /* Initialization of inputA pointer */
;;;119        pIn1 = (pSrcA);
;;;120    
;;;121        /* Initialization of inputB pointer */
;;;122        pIn2 = (pSrcB);
;;;123    
;;;124        /* Number of output samples is calculated */
;;;125        outBlockSize = (2u * srcALen) - 1u;
00000a  1ebd              SUBS     r5,r7,#2
00000c  4299              CMP      r1,r3                 ;116
00000e  d308              BCC      |L1.34|
000010  9009              STR      r0,[sp,#0x24]         ;119
000012  9208              STR      r2,[sp,#0x20]         ;122
000014  eb050041          ADD      r0,r5,r1,LSL #1
;;;126    
;;;127        /* When srcALen > srcBLen, zero padding is done to srcB   
;;;128         * to make their lengths equal.   
;;;129         * Instead, (outBlockSize - (srcALen + srcBLen - 1))   
;;;130         * number of output samples are made zero */
;;;131        j = outBlockSize - (srcALen + (srcBLen - 1u));
000018  18ca              ADDS     r2,r1,r3
00001a  1a80              SUBS     r0,r0,r2
00001c  1c40              ADDS     r0,r0,#1
;;;132    
;;;133        /* Updating the pointer position to non zero value */
;;;134        pOut += j;
00001e  1822              ADDS     r2,r4,r0
000020  e008              B        |L1.52|
                  |L1.34|
;;;135    
;;;136      }
;;;137      else
;;;138      {
;;;139        /* Initialization of inputA pointer */
;;;140        pIn1 = (pSrcB);
000022  9209              STR      r2,[sp,#0x24]
;;;141    
;;;142        /* Initialization of inputB pointer */
;;;143        pIn2 = (pSrcA);
000024  9008              STR      r0,[sp,#0x20]
;;;144    
;;;145        /* srcBLen is always considered as shorter or equal to srcALen */
;;;146        j = srcBLen;
000026  4618              MOV      r0,r3
;;;147        srcBLen = srcALen;
000028  460b              MOV      r3,r1
;;;148        srcALen = j;
00002a  4601              MOV      r1,r0
;;;149    
;;;150        /* CORR(x, y) = Reverse order(CORR(y, x)) */
;;;151        /* Hence set the destination pointer to point to the last output sample */
;;;152        pOut = pDst + ((srcALen + srcBLen) - 2u);
00002c  18c8              ADDS     r0,r1,r3
00002e  1902              ADDS     r2,r0,r4
000030  1e92              SUBS     r2,r2,#2
;;;153    
;;;154        /* Destination address modifier is set to -1 */
;;;155        inc = -1;
000032  462f              MOV      r7,r5
                  |L1.52|
;;;156    
;;;157      }
;;;158    
;;;159      /* The function is internally   
;;;160       * divided into three parts according to the number of multiplications that has to be   
;;;161       * taken place between inputA samples and inputB samples. In the first part of the   
;;;162       * algorithm, the multiplications increase by one for every iteration.   
;;;163       * In the second part of the algorithm, srcBLen number of multiplications are done.   
;;;164       * In the third part of the algorithm, the multiplications decrease by one   
;;;165       * for every iteration.*/
;;;166      /* The algorithm is implemented in three stages.   
;;;167       * The loop counters of each stage is initiated here. */
;;;168      blockSize1 = srcBLen - 1u;
000034  f1a30c01          SUB      r12,r3,#1
;;;169      blockSize2 = srcALen - (srcBLen - 1u);
000038  1ac8              SUBS     r0,r1,r3
00003a  900a              STR      r0,[sp,#0x28]
00003c  1c40              ADDS     r0,r0,#1
00003e  9001              STR      r0,[sp,#4]
;;;170      blockSize3 = blockSize1;
000040  f8cdc000          STR      r12,[sp,#0]
;;;171    
;;;172      /* --------------------------   
;;;173       * Initializations of stage1   
;;;174       * -------------------------*/
;;;175    
;;;176      /* sum = x[0] * y[srcBlen - 1]   
;;;177       * sum = x[0] * y[srcBlen - 2] + x[1] * y[srcBlen - 1]   
;;;178       * ....   
;;;179       * sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen - 1] * y[srcBLen - 1]   
;;;180       */
;;;181    
;;;182      /* In this stage the MAC operations are increased by 1 for every iteration.   
;;;183         The count variable holds the number of MAC operations performed */
;;;184      count = 1u;
000044  2401              MOVS     r4,#1
;;;185    
;;;186      /* Working pointer of inputA */
;;;187      px = pIn1;
000046  9e09              LDR      r6,[sp,#0x24]
;;;188    
;;;189      /* Working pointer of inputB */
;;;190      pSrc1 = pIn2 + (srcBLen - 1u);
000048  9808              LDR      r0,[sp,#0x20]
00004a  eb000903          ADD      r9,r0,r3
00004e  f1a90901          SUB      r9,r9,#1
;;;191      py = pSrc1;
000052  4648              MOV      r0,r9
;;;192    
;;;193      /* ------------------------   
;;;194       * Stage1 process   
;;;195       * ----------------------*/
;;;196    
;;;197      /* The first stage starts here */
;;;198      while(blockSize1 > 0u)
000054  e038              B        |L1.200|
                  |L1.86|
;;;199      {
;;;200        /* Accumulator is made zero for every iteration */
;;;201        sum = 0;
000056  2100              MOVS     r1,#0
;;;202    
;;;203        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;204        k = count >> 2;
000058  08a5              LSRS     r5,r4,#2
;;;205    
;;;206        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;207         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;208        while(k > 0u)
00005a  e01d              B        |L1.152|
                  |L1.92|
;;;209        {
;;;210          /* x[0] , x[1] */
;;;211          in1 = (q15_t) * px++;
00005c  f9968000          LDRSB    r8,[r6,#0]
;;;212          in2 = (q15_t) * px++;
000060  f996a001          LDRSB    r10,[r6,#1]
;;;213          input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000064  f36a481f          BFI      r8,r10,#16,#16
;;;214    
;;;215          /* y[srcBLen - 4] , y[srcBLen - 3] */
;;;216          in1 = (q15_t) * py++;
000068  f910ab01          LDRSB    r10,[r0],#1
;;;217          in2 = (q15_t) * py++;
00006c  f910bb01          LDRSB    r11,[r0],#1
;;;218          input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000070  f36b4a1f          BFI      r10,r11,#16,#16
;;;219    
;;;220          /* x[0] * y[srcBLen - 4] */
;;;221          /* x[1] * y[srcBLen - 3] */
;;;222          sum = __SMLAD(input1, input2, sum);
000074  fb281a0a          SMLAD    r10,r8,r10,r1
;;;223    
;;;224          /* x[2] , x[3] */
;;;225          in1 = (q15_t) * px++;
000078  f9961002          LDRSB    r1,[r6,#2]
00007c  1cf6              ADDS     r6,r6,#3
;;;226          in2 = (q15_t) * px++;
00007e  f9168b01          LDRSB    r8,[r6],#1
;;;227          input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000082  f368411f          BFI      r1,r8,#16,#16
;;;228    
;;;229          /* y[srcBLen - 2] , y[srcBLen - 1] */
;;;230          in1 = (q15_t) * py++;
000086  f9108b01          LDRSB    r8,[r0],#1
;;;231          in2 = (q15_t) * py++;
00008a  f910bb01          LDRSB    r11,[r0],#1
;;;232          input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
00008e  f36b481f          BFI      r8,r11,#16,#16
;;;233    
;;;234          /* x[2] * y[srcBLen - 2] */
;;;235          /* x[3] * y[srcBLen - 1] */
;;;236          sum = __SMLAD(input1, input2, sum);
000092  fb21a108          SMLAD    r1,r1,r8,r10
;;;237    
;;;238    
;;;239          /* Decrement the loop counter */
;;;240          k--;
000096  1e6d              SUBS     r5,r5,#1
                  |L1.152|
000098  2d00              CMP      r5,#0                 ;208
00009a  d1df              BNE      |L1.92|
;;;241        }
;;;242    
;;;243        /* If the count is not a multiple of 4, compute any remaining MACs here.   
;;;244         ** No loop unrolling is used. */
;;;245        k = count % 0x4u;
00009c  f0040503          AND      r5,r4,#3
;;;246    
;;;247        while(k > 0u)
0000a0  e006              B        |L1.176|
                  |L1.162|
;;;248        {
;;;249          /* Perform the multiply-accumulates */
;;;250          /* x[0] * y[srcBLen - 1] */
;;;251          sum += (q31_t) ((q15_t) * px++ * *py++);
0000a2  f9168b01          LDRSB    r8,[r6],#1
0000a6  f910ab01          LDRSB    r10,[r0],#1
0000aa  fb18110a          SMLABB   r1,r8,r10,r1
;;;252    
;;;253          /* Decrement the loop counter */
;;;254          k--;
0000ae  1e6d              SUBS     r5,r5,#1
                  |L1.176|
0000b0  2d00              CMP      r5,#0                 ;247
0000b2  d1f6              BNE      |L1.162|
;;;255        }
;;;256    
;;;257        /* Store the result in the accumulator in the destination buffer. */
;;;258        *pOut = (q7_t) (__SSAT(sum >> 7, 8));
0000b4  f32110c7          SSAT     r0,#8,r1,ASR #7
0000b8  7010              STRB     r0,[r2,#0]
;;;259        /* Destination pointer is updated according to the address modifier, inc */
;;;260        pOut += inc;
0000ba  443a              ADD      r2,r2,r7
;;;261    
;;;262        /* Update the inputA and inputB pointers for next MAC calculation */
;;;263        py = pSrc1 - count;
0000bc  eba90004          SUB      r0,r9,r4
;;;264        px = pIn1;
0000c0  9e09              LDR      r6,[sp,#0x24]
;;;265    
;;;266        /* Increment the MAC count */
;;;267        count++;
0000c2  1c64              ADDS     r4,r4,#1
;;;268    
;;;269        /* Decrement the loop counter */
;;;270        blockSize1--;
0000c4  f1ac0c01          SUB      r12,r12,#1
                  |L1.200|
0000c8  f1bc0f00          CMP      r12,#0                ;198
0000cc  d1c3              BNE      |L1.86|
;;;271      }
;;;272    
;;;273      /* --------------------------   
;;;274       * Initializations of stage2   
;;;275       * ------------------------*/
;;;276    
;;;277      /* sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen-1] * y[srcBLen-1]   
;;;278       * sum = x[1] * y[0] + x[2] * y[1] +...+ x[srcBLen] * y[srcBLen-1]   
;;;279       * ....   
;;;280       * sum = x[srcALen-srcBLen-2] * y[0] + x[srcALen-srcBLen-1] * y[1] +...+ x[srcALen-1] * y[srcBLen-1]   
;;;281       */
;;;282    
;;;283      /* Working pointer of inputA */
;;;284      px = pIn1;
;;;285    
;;;286      /* Working pointer of inputB */
;;;287      py = pIn2;
0000ce  9808              LDR      r0,[sp,#0x20]
;;;288    
;;;289      /* count is index by which the pointer pIn1 to be incremented */
;;;290      count = 0u;
0000d0  2100              MOVS     r1,#0
;;;291    
;;;292      /* -------------------   
;;;293       * Stage2 process   
;;;294       * ------------------*/
;;;295    
;;;296      /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.   
;;;297       * So, to loop unroll over blockSize2,   
;;;298       * srcBLen should be greater than or equal to 4 */
;;;299      if(srcBLen >= 4u)
0000d2  2b04              CMP      r3,#4
0000d4  d37e              BCC      |L1.468|
;;;300      {
;;;301        /* Loop unroll over blockSize2, by 4 */
;;;302        blkCnt = blockSize2 >> 2u;
0000d6  9c01              LDR      r4,[sp,#4]
0000d8  08a4              LSRS     r4,r4,#2
0000da  9402              STR      r4,[sp,#8]
;;;303    
;;;304        while(blkCnt > 0u)
0000dc  e09c              B        |L1.536|
                  |L1.222|
;;;305        {
;;;306          /* Set all accumulators to zero */
;;;307          acc0 = 0;
0000de  f04f0c00          MOV      r12,#0
;;;308          acc1 = 0;
0000e2  46e0              MOV      r8,r12
;;;309          acc2 = 0;
0000e4  2400              MOVS     r4,#0
0000e6  9405              STR      r4,[sp,#0x14]
;;;310          acc3 = 0;
0000e8  46a1              MOV      r9,r4
;;;311    
;;;312          /* read x[0], x[1], x[2] samples */
;;;313          x0 = *px++;
0000ea  f996b000          LDRSB    r11,[r6,#0]
;;;314          x1 = *px++;
0000ee  f9964001          LDRSB    r4,[r6,#1]
;;;315          x2 = *px++;
0000f2  f9965002          LDRSB    r5,[r6,#2]
0000f6  1cf6              ADDS     r6,r6,#3
;;;316    
;;;317          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;318          k = srcBLen >> 2u;
0000f8  ea4f0a93          LSR      r10,r3,#2
0000fc  f8cda00c          STR      r10,[sp,#0xc]
                  |L1.256|
;;;319    
;;;320          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;321           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;322          do
;;;323          {
;;;324            /* Read y[0] sample */
;;;325            c0 = *py++;
000100  f910eb01          LDRSB    lr,[r0],#1
000104  4682              MOV      r10,r0
;;;326            /* Read y[1] sample */
;;;327            c1 = *py++;
000106  f99a0000          LDRSB    r0,[r10,#0]
00010a  9004              STR      r0,[sp,#0x10]
00010c  f10a0001          ADD      r0,r10,#1
000110  9007              STR      r0,[sp,#0x1c]
;;;328    
;;;329            /* Read x[3] sample */
;;;330            x3 = *px++;
000112  f996a000          LDRSB    r10,[r6,#0]
;;;331    
;;;332            /* x[0] and x[1] are packed */
;;;333            in1 = (q15_t) x0;
;;;334            in2 = (q15_t) x1;
;;;335    
;;;336            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000116  f3644b1f          BFI      r11,r4,#16,#16
;;;337    
;;;338            /* y[0] and y[1] are packed */
;;;339            in1 = (q15_t) c0;
;;;340            in2 = (q15_t) c1;
00011a  9804              LDR      r0,[sp,#0x10]
;;;341    
;;;342            input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
00011c  f3604e1f          BFI      lr,r0,#16,#16
;;;343    
;;;344            /* acc0 += x[0] * y[0] + x[1] * y[1]  */
;;;345            acc0 = __SMLAD(input1, input2, acc0);
000120  fb2bcc0e          SMLAD    r12,r11,lr,r12
000124  f8cdc018          STR      r12,[sp,#0x18]
;;;346    
;;;347            /* x[1] and x[2] are packed */
;;;348            in1 = (q15_t) x1;
;;;349            in2 = (q15_t) x2;
;;;350    
;;;351            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000128  f365441f          BFI      r4,r5,#16,#16
;;;352    
;;;353            /* acc1 += x[1] * y[0] + x[2] * y[1] */
;;;354            acc1 = __SMLAD(input1, input2, acc1);
00012c  fb24880e          SMLAD    r8,r4,lr,r8
;;;355    
;;;356            /* x[2] and x[3] are packed */
;;;357            in1 = (q15_t) x2;
000130  4628              MOV      r0,r5
;;;358            in2 = (q15_t) x3;
;;;359    
;;;360            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000132  f36a401f          BFI      r0,r10,#16,#16
;;;361    
;;;362            /* acc2 += x[2] * y[0] + x[3] * y[1]  */
;;;363            acc2 = __SMLAD(input1, input2, acc2);
000136  9c05              LDR      r4,[sp,#0x14]
000138  fb20400e          SMLAD    r0,r0,lr,r4
00013c  9005              STR      r0,[sp,#0x14]
;;;364    
;;;365            /* Read x[4] sample */
;;;366            x0 = *(px++);
00013e  f996b001          LDRSB    r11,[r6,#1]
;;;367    
;;;368            /* x[3] and x[4] are packed */
;;;369            in1 = (q15_t) x3;
;;;370            in2 = (q15_t) x0;
;;;371    
;;;372            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000142  4650              MOV      r0,r10
000144  f36b401f          BFI      r0,r11,#16,#16
;;;373    
;;;374            /* acc3 += x[3] * y[0] + x[4] * y[1]  */
;;;375            acc3 = __SMLAD(input1, input2, acc3);
000148  fb209e0e          SMLAD    lr,r0,lr,r9
;;;376    
;;;377            /* Read y[2] sample */
;;;378            c0 = *py++;
00014c  9807              LDR      r0,[sp,#0x1c]
00014e  f9109b01          LDRSB    r9,[r0],#1
;;;379            /* Read y[3] sample */
;;;380            c1 = *py++;
000152  f910cb01          LDRSB    r12,[r0],#1
;;;381    
;;;382            /* Read x[5] sample */
;;;383            x1 = *px++;
000156  f9964002          LDRSB    r4,[r6,#2]
;;;384    
;;;385            /* x[2] and x[3] are packed */
;;;386            in1 = (q15_t) x2;
;;;387            in2 = (q15_t) x3;
;;;388    
;;;389            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
00015a  f36a451f          BFI      r5,r10,#16,#16
;;;390    
;;;391            /* y[2] and y[3] are packed */
;;;392            in1 = (q15_t) c0;
;;;393            in2 = (q15_t) c1;
;;;394    
;;;395            input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
00015e  f36c491f          BFI      r9,r12,#16,#16
;;;396    
;;;397            /* acc0 += x[2] * y[2] + x[3] * y[3]  */
;;;398            acc0 = __SMLAD(input1, input2, acc0);
000162  f8ddc018          LDR      r12,[sp,#0x18]
000166  fb25cc09          SMLAD    r12,r5,r9,r12
;;;399    
;;;400            /* x[3] and x[4] are packed */
;;;401            in1 = (q15_t) x3;
;;;402            in2 = (q15_t) x0;
;;;403    
;;;404            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
00016a  f36b4a1f          BFI      r10,r11,#16,#16
;;;405    
;;;406            /* acc1 += x[3] * y[2] + x[4] * y[3]  */
;;;407            acc1 = __SMLAD(input1, input2, acc1);
00016e  fb2a8809          SMLAD    r8,r10,r9,r8
;;;408    
;;;409            /* x[4] and x[5] are packed */
;;;410            in1 = (q15_t) x0;
000172  46da              MOV      r10,r11
;;;411            in2 = (q15_t) x1;
;;;412    
;;;413            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000174  f3644a1f          BFI      r10,r4,#16,#16
;;;414    
;;;415            /* acc2 += x[4] * y[2] + x[5] * y[3]  */
;;;416            acc2 = __SMLAD(input1, input2, acc2);
000178  9d05              LDR      r5,[sp,#0x14]
00017a  fb2a5509          SMLAD    r5,r10,r9,r5
00017e  9505              STR      r5,[sp,#0x14]
;;;417    
;;;418            /* Read x[6] sample */
;;;419            x2 = *px++;
000180  f9965003          LDRSB    r5,[r6,#3]
000184  1d36              ADDS     r6,r6,#4
;;;420    
;;;421            /* x[5] and x[6] are packed */
;;;422            in1 = (q15_t) x1;
000186  46a2              MOV      r10,r4
;;;423            in2 = (q15_t) x2;
;;;424    
;;;425            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000188  f3654a1f          BFI      r10,r5,#16,#16
;;;426    
;;;427            /* acc3 += x[5] * y[2] + x[6] * y[3]  */
;;;428            acc3 = __SMLAD(input1, input2, acc3);
00018c  fb2ae909          SMLAD    r9,r10,r9,lr
;;;429    
;;;430          } while(--k);
000190  f8dda00c          LDR      r10,[sp,#0xc]
000194  f1ba0a01          SUBS     r10,r10,#1
000198  f8cda00c          STR      r10,[sp,#0xc]
00019c  d1b0              BNE      |L1.256|
;;;431    
;;;432          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.   
;;;433           ** No loop unrolling is used. */
;;;434          k = srcBLen % 0x4u;
00019e  f0030a03          AND      r10,r3,#3
0001a2  f8cda00c          STR      r10,[sp,#0xc]
;;;435    
;;;436          while(k > 0u)
0001a6  e01a              B        |L1.478|
                  |L1.424|
;;;437          {
;;;438            /* Read y[4] sample */
;;;439            c0 = *py++;
0001a8  f910ab01          LDRSB    r10,[r0],#1
;;;440    
;;;441            /* Read x[7] sample */
;;;442            x3 = *px++;
0001ac  f916eb01          LDRSB    lr,[r6],#1
;;;443    
;;;444            /* Perform the multiply-accumulates */
;;;445            /* acc0 +=  x[4] * y[4] */
;;;446            acc0 += ((q15_t) x0 * c0);
0001b0  fb0bcc0a          MLA      r12,r11,r10,r12
;;;447            /* acc1 +=  x[5] * y[4] */
;;;448            acc1 += ((q15_t) x1 * c0);
0001b4  fb04880a          MLA      r8,r4,r10,r8
;;;449            /* acc2 +=  x[6] * y[4] */
;;;450            acc2 += ((q15_t) x2 * c0);
0001b8  f8ddb014          LDR      r11,[sp,#0x14]
0001bc  fb05bb0a          MLA      r11,r5,r10,r11
0001c0  f8cdb014          STR      r11,[sp,#0x14]
;;;451            /* acc3 +=  x[7] * y[4] */
;;;452            acc3 += ((q15_t) x3 * c0);
0001c4  fb1e990a          SMLABB   r9,lr,r10,r9
;;;453    
;;;454            /* Reuse the present samples for the next MAC */
;;;455            x0 = x1;
0001c8  46a3              MOV      r11,r4
;;;456            x1 = x2;
0001ca  462c              MOV      r4,r5
;;;457            x2 = x3;
0001cc  4675              MOV      r5,lr
;;;458    
;;;459            /* Decrement the loop counter */
;;;460            k--;
0001ce  f8dda00c          LDR      r10,[sp,#0xc]
0001d2  e000              B        |L1.470|
                  |L1.468|
0001d4  e065              B        |L1.674|
                  |L1.470|
0001d6  f1aa0a01          SUB      r10,r10,#1
0001da  f8cda00c          STR      r10,[sp,#0xc]
                  |L1.478|
0001de  f8dda00c          LDR      r10,[sp,#0xc]         ;436
0001e2  f1ba0f00          CMP      r10,#0                ;436
0001e6  d1df              BNE      |L1.424|
;;;461          }
;;;462    
;;;463          /* Store the result in the accumulator in the destination buffer. */
;;;464          *pOut = (q7_t) (__SSAT(acc0 >> 7, 8));
0001e8  f32c10c7          SSAT     r0,#8,r12,ASR #7
0001ec  7010              STRB     r0,[r2,#0]
;;;465          /* Destination pointer is updated according to the address modifier, inc */
;;;466          pOut += inc;
0001ee  19d0              ADDS     r0,r2,r7
;;;467    
;;;468          *pOut = (q7_t) (__SSAT(acc1 >> 7, 8));
0001f0  f32812c7          SSAT     r2,#8,r8,ASR #7
0001f4  7002              STRB     r2,[r0,#0]
;;;469          pOut += inc;
0001f6  4438              ADD      r0,r0,r7
;;;470    
;;;471          *pOut = (q7_t) (__SSAT(acc2 >> 7, 8));
0001f8  9a05              LDR      r2,[sp,#0x14]
0001fa  f32212c7          SSAT     r2,#8,r2,ASR #7
0001fe  7002              STRB     r2,[r0,#0]
;;;472          pOut += inc;
000200  4438              ADD      r0,r0,r7
;;;473    
;;;474          *pOut = (q7_t) (__SSAT(acc3 >> 7, 8));
000202  f32912c7          SSAT     r2,#8,r9,ASR #7
000206  7002              STRB     r2,[r0,#0]
;;;475          pOut += inc;
000208  19c2              ADDS     r2,r0,r7
;;;476    
;;;477    	  count += 4u;
00020a  1d09              ADDS     r1,r1,#4
;;;478          /* Update the inputA and inputB pointers for next MAC calculation */
;;;479          px = pIn1 + count;
00020c  9809              LDR      r0,[sp,#0x24]
00020e  1846              ADDS     r6,r0,r1
;;;480          py = pIn2;
000210  9808              LDR      r0,[sp,#0x20]
;;;481    
;;;482          /* Decrement the loop counter */
;;;483          blkCnt--;
000212  9c02              LDR      r4,[sp,#8]
000214  1e64              SUBS     r4,r4,#1
000216  9402              STR      r4,[sp,#8]
                  |L1.536|
000218  9c02              LDR      r4,[sp,#8]            ;304
00021a  2c00              CMP      r4,#0                 ;304
00021c  f47faf5f          BNE      |L1.222|
;;;484        }
;;;485    
;;;486        /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.   
;;;487         ** No loop unrolling is used. */
;;;488        blkCnt = blockSize2 % 0x4u;
000220  9c01              LDR      r4,[sp,#4]
000222  f0040c03          AND      r12,r4,#3
;;;489    
;;;490        while(blkCnt > 0u)
000226  e038              B        |L1.666|
                  |L1.552|
;;;491        {
;;;492          /* Accumulator is made zero for every iteration */
;;;493          sum = 0;
000228  2400              MOVS     r4,#0
;;;494    
;;;495          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;496          k = srcBLen >> 2u;
00022a  089d              LSRS     r5,r3,#2
;;;497    
;;;498          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;499           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;500          while(k > 0u)
00022c  e01d              B        |L1.618|
                  |L1.558|
;;;501          {
;;;502            /* Reading two inputs of SrcA buffer and packing */
;;;503            in1 = (q15_t) * px++;
00022e  f9968000          LDRSB    r8,[r6,#0]
;;;504            in2 = (q15_t) * px++;
000232  f9969001          LDRSB    r9,[r6,#1]
;;;505            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000236  f369481f          BFI      r8,r9,#16,#16
;;;506    
;;;507            /* Reading two inputs of SrcB buffer and packing */
;;;508            in1 = (q15_t) * py++;
00023a  f9109b01          LDRSB    r9,[r0],#1
;;;509            in2 = (q15_t) * py++;
00023e  f910ab01          LDRSB    r10,[r0],#1
;;;510            input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000242  f36a491f          BFI      r9,r10,#16,#16
;;;511    
;;;512            /* Perform the multiply-accumulates */
;;;513            sum = __SMLAD(input1, input2, sum);
000246  fb284809          SMLAD    r8,r8,r9,r4
;;;514    
;;;515            /* Reading two inputs of SrcA buffer and packing */
;;;516            in1 = (q15_t) * px++;
00024a  f9964002          LDRSB    r4,[r6,#2]
00024e  1cf6              ADDS     r6,r6,#3
;;;517            in2 = (q15_t) * px++;
000250  f9169b01          LDRSB    r9,[r6],#1
;;;518            input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000254  f369441f          BFI      r4,r9,#16,#16
;;;519    
;;;520            /* Reading two inputs of SrcB buffer and packing */
;;;521            in1 = (q15_t) * py++;
000258  f9109b01          LDRSB    r9,[r0],#1
;;;522            in2 = (q15_t) * py++;
00025c  f910ab01          LDRSB    r10,[r0],#1
;;;523            input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000260  f36a491f          BFI      r9,r10,#16,#16
;;;524    
;;;525            /* Perform the multiply-accumulates */
;;;526            sum = __SMLAD(input1, input2, sum);
000264  fb248409          SMLAD    r4,r4,r9,r8
;;;527    
;;;528            /* Decrement the loop counter */
;;;529            k--;
000268  1e6d              SUBS     r5,r5,#1
                  |L1.618|
00026a  2d00              CMP      r5,#0                 ;500
00026c  d1df              BNE      |L1.558|
;;;530          }
;;;531    
;;;532          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.   
;;;533           ** No loop unrolling is used. */
;;;534          k = srcBLen % 0x4u;
00026e  f0030503          AND      r5,r3,#3
;;;535    
;;;536          while(k > 0u)
000272  e006              B        |L1.642|
                  |L1.628|
;;;537          {
;;;538            /* Perform the multiply-accumulates */
;;;539            sum += ((q15_t) * px++ * *py++);
000274  f9168b01          LDRSB    r8,[r6],#1
000278  f9109b01          LDRSB    r9,[r0],#1
00027c  fb184409          SMLABB   r4,r8,r9,r4
;;;540    
;;;541            /* Decrement the loop counter */
;;;542            k--;
000280  1e6d              SUBS     r5,r5,#1
                  |L1.642|
000282  2d00              CMP      r5,#0                 ;536
000284  d1f6              BNE      |L1.628|
;;;543          }
;;;544    
;;;545          /* Store the result in the accumulator in the destination buffer. */
;;;546          *pOut = (q7_t) (__SSAT(sum >> 7, 8));
000286  f32410c7          SSAT     r0,#8,r4,ASR #7
00028a  7010              STRB     r0,[r2,#0]
;;;547          /* Destination pointer is updated according to the address modifier, inc */
;;;548          pOut += inc;
00028c  443a              ADD      r2,r2,r7
;;;549    
;;;550          /* Increment the pointer pIn1 index, count by 1 */
;;;551    	  count++;
00028e  1c49              ADDS     r1,r1,#1
;;;552    
;;;553          /* Update the inputA and inputB pointers for next MAC calculation */
;;;554          px = pIn1 + count;
000290  9809              LDR      r0,[sp,#0x24]
000292  1846              ADDS     r6,r0,r1
;;;555          py = pIn2;
000294  9808              LDR      r0,[sp,#0x20]
;;;556    
;;;557          /* Decrement the loop counter */
;;;558          blkCnt--;
000296  f1ac0c01          SUB      r12,r12,#1
                  |L1.666|
00029a  f1bc0f00          CMP      r12,#0                ;490
00029e  d1c3              BNE      |L1.552|
0002a0  e01b              B        |L1.730|
                  |L1.674|
;;;559        }
;;;560      }
;;;561      else
;;;562      {
;;;563        /* If the srcBLen is not a multiple of 4,   
;;;564         * the blockSize2 loop cannot be unrolled by 4 */
;;;565        blkCnt = blockSize2;
0002a2  f8ddc004          LDR      r12,[sp,#4]
;;;566    
;;;567        while(blkCnt > 0u)
0002a6  e015              B        |L1.724|
                  |L1.680|
;;;568        {
;;;569          /* Accumulator is made zero for every iteration */
;;;570          sum = 0;
0002a8  2500              MOVS     r5,#0
;;;571    
;;;572          /* Loop over srcBLen */
;;;573          k = srcBLen;
0002aa  461c              MOV      r4,r3
;;;574    
;;;575          while(k > 0u)
0002ac  e006              B        |L1.700|
                  |L1.686|
;;;576          {
;;;577            /* Perform the multiply-accumulate */
;;;578            sum += ((q15_t) * px++ * *py++);
0002ae  f9168b01          LDRSB    r8,[r6],#1
0002b2  f9109b01          LDRSB    r9,[r0],#1
0002b6  fb185509          SMLABB   r5,r8,r9,r5
;;;579    
;;;580            /* Decrement the loop counter */
;;;581            k--;
0002ba  1e64              SUBS     r4,r4,#1
                  |L1.700|
0002bc  2c00              CMP      r4,#0                 ;575
0002be  d1f6              BNE      |L1.686|
;;;582          }
;;;583    
;;;584          /* Store the result in the accumulator in the destination buffer. */
;;;585          *pOut = (q7_t) (__SSAT(sum >> 7, 8));
0002c0  f32510c7          SSAT     r0,#8,r5,ASR #7
0002c4  7010              STRB     r0,[r2,#0]
;;;586          /* Destination pointer is updated according to the address modifier, inc */
;;;587          pOut += inc;
0002c6  443a              ADD      r2,r2,r7
;;;588    
;;;589          /* Increment the MAC count */
;;;590          count++;
0002c8  1c49              ADDS     r1,r1,#1
;;;591    
;;;592          /* Update the inputA and inputB pointers for next MAC calculation */
;;;593          px = pIn1 + count;
0002ca  9809              LDR      r0,[sp,#0x24]
0002cc  1846              ADDS     r6,r0,r1
;;;594          py = pIn2;
0002ce  9808              LDR      r0,[sp,#0x20]
;;;595    
;;;596    
;;;597          /* Decrement the loop counter */
;;;598          blkCnt--;
0002d0  f1ac0c01          SUB      r12,r12,#1
                  |L1.724|
0002d4  f1bc0f00          CMP      r12,#0                ;567
0002d8  d1e6              BNE      |L1.680|
                  |L1.730|
;;;599        }
;;;600      }
;;;601    
;;;602      /* --------------------------   
;;;603       * Initializations of stage3   
;;;604       * -------------------------*/
;;;605    
;;;606      /* sum += x[srcALen-srcBLen+1] * y[0] + x[srcALen-srcBLen+2] * y[1] +...+ x[srcALen-1] * y[srcBLen-1]   
;;;607       * sum += x[srcALen-srcBLen+2] * y[0] + x[srcALen-srcBLen+3] * y[1] +...+ x[srcALen-1] * y[srcBLen-1]   
;;;608       * ....   
;;;609       * sum +=  x[srcALen-2] * y[0] + x[srcALen-1] * y[1]   
;;;610       * sum +=  x[srcALen-1] * y[0]   
;;;611       */
;;;612    
;;;613      /* In this stage the MAC operations are decreased by 1 for every iteration.   
;;;614         The count variable holds the number of MAC operations performed */
;;;615      count = srcBLen - 1u;
0002da  1e5b              SUBS     r3,r3,#1
;;;616    
;;;617      /* Working pointer of inputA */
;;;618      pSrc1 = pIn1 + (srcALen - (srcBLen - 1u));
0002dc  e9dd4109          LDRD     r4,r1,[sp,#0x24]
0002e0  190e              ADDS     r6,r1,r4
0002e2  1c76              ADDS     r6,r6,#1
;;;619      px = pSrc1;
0002e4  4631              MOV      r1,r6
;;;620    
;;;621      /* Working pointer of inputB */
;;;622      py = pIn2;
;;;623    
;;;624      /* -------------------   
;;;625       * Stage3 process   
;;;626       * ------------------*/
;;;627    
;;;628      while(blockSize3 > 0u)
0002e6  e039              B        |L1.860|
                  |L1.744|
;;;629      {
;;;630        /* Accumulator is made zero for every iteration */
;;;631        sum = 0;
0002e8  2400              MOVS     r4,#0
;;;632    
;;;633        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;634        k = count >> 2u;
0002ea  089d              LSRS     r5,r3,#2
;;;635    
;;;636        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;637         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;638        while(k > 0u)
0002ec  e01d              B        |L1.810|
                  |L1.750|
;;;639        {
;;;640          /* x[srcALen - srcBLen + 1] , x[srcALen - srcBLen + 2]  */
;;;641          in1 = (q15_t) * px++;
0002ee  f991c000          LDRSB    r12,[r1,#0]
;;;642          in2 = (q15_t) * px++;
0002f2  f9918001          LDRSB    r8,[r1,#1]
;;;643          input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
0002f6  f3684c1f          BFI      r12,r8,#16,#16
;;;644    
;;;645          /* y[0] , y[1] */
;;;646          in1 = (q15_t) * py++;
0002fa  f9108b01          LDRSB    r8,[r0],#1
;;;647          in2 = (q15_t) * py++;
0002fe  f9109b01          LDRSB    r9,[r0],#1
;;;648          input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000302  f369481f          BFI      r8,r9,#16,#16
;;;649    
;;;650          /* sum += x[srcALen - srcBLen + 1] * y[0] */
;;;651          /* sum += x[srcALen - srcBLen + 2] * y[1] */
;;;652          sum = __SMLAD(input1, input2, sum);
000306  fb2c4c08          SMLAD    r12,r12,r8,r4
;;;653    
;;;654          /* x[srcALen - srcBLen + 3] , x[srcALen - srcBLen + 4] */
;;;655          in1 = (q15_t) * px++;
00030a  f9914002          LDRSB    r4,[r1,#2]
00030e  1cc9              ADDS     r1,r1,#3
;;;656          in2 = (q15_t) * px++;
000310  f9118b01          LDRSB    r8,[r1],#1
;;;657          input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000314  f368441f          BFI      r4,r8,#16,#16
;;;658    
;;;659          /* y[2] , y[3] */
;;;660          in1 = (q15_t) * py++;
000318  f9108b01          LDRSB    r8,[r0],#1
;;;661          in2 = (q15_t) * py++;
00031c  f9109b01          LDRSB    r9,[r0],#1
;;;662          input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
000320  f369481f          BFI      r8,r9,#16,#16
;;;663    
;;;664          /* sum += x[srcALen - srcBLen + 3] * y[2] */
;;;665          /* sum += x[srcALen - srcBLen + 4] * y[3] */
;;;666          sum = __SMLAD(input1, input2, sum);
000324  fb24c408          SMLAD    r4,r4,r8,r12
;;;667    
;;;668          /* Decrement the loop counter */
;;;669          k--;
000328  1e6d              SUBS     r5,r5,#1
                  |L1.810|
00032a  2d00              CMP      r5,#0                 ;638
00032c  d1df              BNE      |L1.750|
;;;670        }
;;;671    
;;;672        /* If the count is not a multiple of 4, compute any remaining MACs here.   
;;;673         ** No loop unrolling is used. */
;;;674        k = count % 0x4u;
00032e  f0030503          AND      r5,r3,#3
;;;675    
;;;676        while(k > 0u)
000332  e006              B        |L1.834|
                  |L1.820|
;;;677        {
;;;678          /* Perform the multiply-accumulates */
;;;679          sum += ((q15_t) * px++ * *py++);
000334  f911cb01          LDRSB    r12,[r1],#1
000338  f9108b01          LDRSB    r8,[r0],#1
00033c  fb1c4408          SMLABB   r4,r12,r8,r4
;;;680    
;;;681          /* Decrement the loop counter */
;;;682          k--;
000340  1e6d              SUBS     r5,r5,#1
                  |L1.834|
000342  2d00              CMP      r5,#0                 ;676
000344  d1f6              BNE      |L1.820|
;;;683        }
;;;684    
;;;685        /* Store the result in the accumulator in the destination buffer. */
;;;686        *pOut = (q7_t) (__SSAT(sum >> 7, 8));
000346  f32410c7          SSAT     r0,#8,r4,ASR #7
00034a  7010              STRB     r0,[r2,#0]
;;;687        /* Destination pointer is updated according to the address modifier, inc */
;;;688        pOut += inc;
00034c  443a              ADD      r2,r2,r7
;;;689    
;;;690        /* Update the inputA and inputB pointers for next MAC calculation */
;;;691        px = ++pSrc1;
00034e  1c71              ADDS     r1,r6,#1
000350  460e              MOV      r6,r1
;;;692        py = pIn2;
000352  9808              LDR      r0,[sp,#0x20]
;;;693    
;;;694        /* Decrement the MAC count */
;;;695        count--;
000354  1e5b              SUBS     r3,r3,#1
;;;696    
;;;697        /* Decrement the loop counter */
;;;698        blockSize3--;
000356  9c00              LDR      r4,[sp,#0]
000358  1e64              SUBS     r4,r4,#1
00035a  9400              STR      r4,[sp,#0]
                  |L1.860|
00035c  9c00              LDR      r4,[sp,#0]            ;628
00035e  2c00              CMP      r4,#0                 ;628
000360  d1c2              BNE      |L1.744|
;;;699      }
;;;700    
;;;701    #else
;;;702    
;;;703    /* Run the below code for Cortex-M0 */
;;;704    
;;;705      q7_t *pIn1 = pSrcA;                            /* inputA pointer */
;;;706      q7_t *pIn2 = pSrcB + (srcBLen - 1u);           /* inputB pointer */
;;;707      q31_t sum;                                     /* Accumulator */
;;;708      uint32_t i = 0u, j;                            /* loop counters */
;;;709      uint32_t inv = 0u;                             /* Reverse order flag */
;;;710      uint32_t tot = 0u;                             /* Length */
;;;711    
;;;712      /* The algorithm implementation is based on the lengths of the inputs. */
;;;713      /* srcB is always made to slide across srcA. */
;;;714      /* So srcBLen is always considered as shorter or equal to srcALen */
;;;715      /* But CORR(x, y) is reverse of CORR(y, x) */
;;;716      /* So, when srcBLen > srcALen, output pointer is made to point to the end of the output buffer */
;;;717      /* and a varaible, inv is set to 1 */
;;;718      /* If lengths are not equal then zero pad has to be done to  make the two   
;;;719       * inputs of same length. But to improve the performance, we include zeroes   
;;;720       * in the output instead of zero padding either of the the inputs*/
;;;721      /* If srcALen > srcBLen, (srcALen - srcBLen) zeroes has to included in the   
;;;722       * starting of the output buffer */
;;;723      /* If srcALen < srcBLen, (srcALen - srcBLen) zeroes has to included in the  
;;;724       * ending of the output buffer */
;;;725      /* Once the zero padding is done the remaining of the output is calcualted  
;;;726       * using convolution but with the shorter signal time shifted. */
;;;727    
;;;728      /* Calculate the length of the remaining sequence */
;;;729      tot = ((srcALen + srcBLen) - 2u);
;;;730    
;;;731      if(srcALen > srcBLen)
;;;732      {
;;;733        /* Calculating the number of zeros to be padded to the output */
;;;734        j = srcALen - srcBLen;
;;;735    
;;;736        /* Initialise the pointer after zero padding */
;;;737        pDst += j;
;;;738      }
;;;739    
;;;740      else if(srcALen < srcBLen)
;;;741      {
;;;742        /* Initialization to inputB pointer */
;;;743        pIn1 = pSrcB;
;;;744    
;;;745        /* Initialization to the end of inputA pointer */
;;;746        pIn2 = pSrcA + (srcALen - 1u);
;;;747    
;;;748        /* Initialisation of the pointer after zero padding */
;;;749        pDst = pDst + tot;
;;;750    
;;;751        /* Swapping the lengths */
;;;752        j = srcALen;
;;;753        srcALen = srcBLen;
;;;754        srcBLen = j;
;;;755    
;;;756        /* Setting the reverse flag */
;;;757        inv = 1;
;;;758    
;;;759      }
;;;760    
;;;761      /* Loop to calculate convolution for output length number of times */
;;;762      for (i = 0u; i <= tot; i++)
;;;763      {
;;;764        /* Initialize sum with zero to carry on MAC operations */
;;;765        sum = 0;
;;;766    
;;;767        /* Loop to perform MAC operations according to convolution equation */
;;;768        for (j = 0u; j <= i; j++)
;;;769        {
;;;770          /* Check the array limitations */
;;;771          if((((i - j) < srcBLen) && (j < srcALen)))
;;;772          {
;;;773            /* z[i] += x[i-j] * y[j] */
;;;774            sum += ((q15_t) pIn1[j] * pIn2[-((int32_t) i - j)]);
;;;775          }
;;;776        }
;;;777        /* Store the output in the destination buffer */
;;;778        if(inv == 1)
;;;779          *pDst-- = (q7_t) __SSAT((sum >> 7u), 8u);
;;;780        else
;;;781          *pDst++ = (q7_t) __SSAT((sum >> 7u), 8u);
;;;782      }
;;;783    
;;;784    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
;;;785    
;;;786    }
000362  b00b              ADD      sp,sp,#0x2c
000364  e8bd8ff0          POP      {r4-r11,pc}
;;;787    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_correlate_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_correlate_q7_c_8efad202____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_correlate_q7_c_8efad202____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_correlate_q7_c_8efad202____REVSH|
#line 144
|__asm___18_arm_correlate_q7_c_8efad202____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_correlate_q7_c_8efad202____RRX|
#line 300
|__asm___18_arm_correlate_q7_c_8efad202____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
