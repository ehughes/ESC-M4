; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_abs_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_abs_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_abs_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_abs_f32.c]
                          THUMB

                          AREA ||i.arm_abs_f32||, CODE, READONLY, ALIGN=1

                  arm_abs_f32 PROC
;;;74     
;;;75     void arm_abs_f32(
000000  0893              LSRS     r3,r2,#2
;;;76       float32_t * pSrc,
;;;77       float32_t * pDst,
;;;78       uint32_t blockSize)
;;;79     {
000002  e01a              B        |L1.58|
                  |L1.4|
;;;80       uint32_t blkCnt;                               /* loop counter */
;;;81     
;;;82     #ifndef ARM_MATH_CM0_FAMILY
;;;83     
;;;84       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;85       float32_t in1, in2, in3, in4;                  /* temporary variables */
;;;86     
;;;87       /*loop Unrolling */
;;;88       blkCnt = blockSize >> 2u;
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;91        ** a second loop below computes the remaining 1 to 3 samples. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94         /* C = |A| */
;;;95         /* Calculate absolute and then store the results in the destination buffer. */
;;;96         /* read sample from source */
;;;97         in1 = *pSrc;
000004  ed900a00          VLDR     s0,[r0,#0]
;;;98         in2 = *(pSrc + 1);
000008  edd01a01          VLDR     s3,[r0,#4]
;;;99         in3 = *(pSrc + 2);
00000c  edd00a02          VLDR     s1,[r0,#8]
;;;100    
;;;101        /* find absolute value */
;;;102        in1 = fabsf(in1);
000010  eeb00ac0          VABS.F32 s0,s0
;;;103    
;;;104        /* read sample from source */
;;;105        in4 = *(pSrc + 3);
000014  ed901a03          VLDR     s2,[r0,#0xc]
;;;106    
;;;107        /* find absolute value */
;;;108        in2 = fabsf(in2);
000018  eef01ae1          VABS.F32 s3,s3
;;;109    
;;;110        /* read sample from source */
;;;111        *pDst = in1;
00001c  ed810a00          VSTR     s0,[r1,#0]
;;;112    
;;;113        /* find absolute value */
;;;114        in3 = fabsf(in3);
000020  eeb00ae0          VABS.F32 s0,s1
;;;115    
;;;116        /* find absolute value */
;;;117        in4 = fabsf(in4);
000024  eef00ac1          VABS.F32 s1,s2
;;;118    
;;;119        /* store result to destination */
;;;120        *(pDst + 1) = in2;
000028  edc11a01          VSTR     s3,[r1,#4]
;;;121    
;;;122        /* store result to destination */
;;;123        *(pDst + 2) = in3;
00002c  ed810a02          VSTR     s0,[r1,#8]
;;;124    
;;;125        /* store result to destination */
;;;126        *(pDst + 3) = in4;
000030  edc10a03          VSTR     s1,[r1,#0xc]
;;;127    
;;;128    
;;;129        /* Update source pointer to process next sampels */
;;;130        pSrc += 4u;
000034  3010              ADDS     r0,r0,#0x10
;;;131    
;;;132        /* Update destination pointer to process next sampels */
;;;133        pDst += 4u;
000036  3110              ADDS     r1,r1,#0x10
;;;134    
;;;135        /* Decrement the loop counter */
;;;136        blkCnt--;
000038  1e5b              SUBS     r3,r3,#1
                  |L1.58|
00003a  2b00              CMP      r3,#0                 ;92
00003c  d1e2              BNE      |L1.4|
;;;137      }
;;;138    
;;;139      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;140       ** No loop unrolling is used. */
;;;141      blkCnt = blockSize % 0x4u;
00003e  f0020203          AND      r2,r2,#3
;;;142    
;;;143    #else
;;;144    
;;;145      /* Run the below code for Cortex-M0 */
;;;146    
;;;147      /* Initialize blkCnt with number of samples */
;;;148      blkCnt = blockSize;
;;;149    
;;;150    #endif /*   #ifndef ARM_MATH_CM0_FAMILY   */
;;;151    
;;;152      while(blkCnt > 0u)
000042  e006              B        |L1.82|
                  |L1.68|
;;;153      {
;;;154        /* C = |A| */
;;;155        /* Calculate absolute and then store the results in the destination buffer. */
;;;156        *pDst++ = fabsf(*pSrc++);
000044  ecb00a01          VLDM     r0!,{s0}
000048  eeb00ac0          VABS.F32 s0,s0
00004c  eca10a01          VSTM     r1!,{s0}
;;;157    
;;;158        /* Decrement the loop counter */
;;;159        blkCnt--;
000050  1e52              SUBS     r2,r2,#1
                  |L1.82|
000052  2a00              CMP      r2,#0                 ;152
000054  d1f6              BNE      |L1.68|
;;;160      }
;;;161    }
000056  4770              BX       lr
;;;162    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_abs_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_f32_c_1c4cc5e1____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_abs_f32_c_1c4cc5e1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_f32_c_1c4cc5e1____REVSH|
#line 144
|__asm___13_arm_abs_f32_c_1c4cc5e1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_f32_c_1c4cc5e1____RRX|
#line 300
|__asm___13_arm_abs_f32_c_1c4cc5e1____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
