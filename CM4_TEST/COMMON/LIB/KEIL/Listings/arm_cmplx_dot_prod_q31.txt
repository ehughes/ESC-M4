; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_dot_prod_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_dot_prod_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_dot_prod_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_dot_prod_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_dot_prod_q31||, CODE, READONLY, ALIGN=1

                  arm_cmplx_dot_prod_q31 PROC
;;;70     
;;;71     void arm_cmplx_dot_prod_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;72       q31_t * pSrcA,
;;;73       q31_t * pSrcB,
;;;74       uint32_t numSamples,
;;;75       q63_t * realResult,
;;;76       q63_t * imagResult)
;;;77     {
000004  b082              SUB      sp,sp,#8
000006  2500              MOVS     r5,#0
;;;78       q63_t real_sum = 0, imag_sum = 0;              /* Temporary result storage */
;;;79       q31_t a0,b0,c0,d0;
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;84       uint32_t blkCnt;                               /* loop counter */
;;;85     
;;;86     
;;;87       /*loop Unrolling */
;;;88       blkCnt = numSamples >> 2u;
000008  9c04              LDR      r4,[sp,#0x10]
00000a  462a              MOV      r2,r5                 ;77
00000c  462e              MOV      r6,r5                 ;77
00000e  462b              MOV      r3,r5                 ;77
000010  08a4              LSRS     r4,r4,#2
000012  e0c2              B        |L1.410|
                  |L1.20|
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;91        ** a second loop below computes the remaining 1 to 3 samples. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94           a0 = *pSrcA++;
;;;95           b0 = *pSrcA++;
;;;96           c0 = *pSrcB++;
000014  e9d0ba00          LDRD     r11,r10,[r0,#0]
;;;97           d0 = *pSrcB++;  
;;;98       
;;;99           real_sum += ((q63_t)a0 * c0) >> 14;
000018  e9d19e00          LDRD     r9,lr,[r1,#0]
00001c  fb8b7c09          SMULL    r7,r12,r11,r9
000020  0bbf              LSRS     r7,r7,#14
000022  ea47478c          ORR      r7,r7,r12,LSL #18
000026  197d              ADDS     r5,r7,r5
000028  eb423cac          ADC      r12,r2,r12,ASR #14
;;;100          imag_sum += ((q63_t)a0 * d0) >> 14;
00002c  fb8b720e          SMULL    r7,r2,r11,lr
000030  ea4f3797          LSR      r7,r7,#14
000034  ea474782          ORR      r7,r7,r2,LSL #18
000038  19be              ADDS     r6,r7,r6
00003a  eb4332a2          ADC      r2,r3,r2,ASR #14
;;;101          real_sum -= ((q63_t)b0 * d0) >> 14;
00003e  fb8a370e          SMULL    r3,r7,r10,lr
000042  ea4f3393          LSR      r3,r3,#14
000046  ea434387          ORR      r3,r3,r7,LSL #18
00004a  1aed              SUBS     r5,r5,r3
;;;102          imag_sum += ((q63_t)b0 * c0) >> 14;
00004c  9500              STR      r5,[sp,#0]
00004e  fb8a3509          SMULL    r3,r5,r10,r9
000052  ea4f3393          LSR      r3,r3,#14
000056  eb6c3ba7          SBC      r11,r12,r7,ASR #14    ;101
00005a  ea434385          ORR      r3,r3,r5,LSL #18
00005e  ea4f39a5          ASR      r9,r5,#14
000062  eb130e06          ADDS     lr,r3,r6
000066  e9d03502          LDRD     r3,r5,[r0,#8]
;;;103          
;;;104          a0 = *pSrcA++;
;;;105          b0 = *pSrcA++;
00006a  e9d16702          LDRD     r6,r7,[r1,#8]
00006e  eb490902          ADC      r9,r9,r2              ;102
000072  46aa              MOV      r10,r5
;;;106          c0 = *pSrcB++;
;;;107          d0 = *pSrcB++;  
;;;108      
;;;109          real_sum += ((q63_t)a0 * c0) >> 14;
000074  fb835206          SMULL    r5,r2,r3,r6
000078  ea4f3895          LSR      r8,r5,#14
00007c  9d00              LDR      r5,[sp,#0]
00007e  ea484882          ORR      r8,r8,r2,LSL #18
000082  eb180505          ADDS     r5,r8,r5
000086  eb4b32a2          ADC      r2,r11,r2,ASR #14
00008a  46ab              MOV      r11,r5
;;;110          imag_sum += ((q63_t)a0 * d0) >> 14;
00008c  fb835307          SMULL    r5,r3,r3,r7
000090  ea4f3c95          LSR      r12,r5,#14
;;;111          real_sum -= ((q63_t)b0 * d0) >> 14;
000094  fb8a7507          SMULL    r7,r5,r10,r7
000098  ea4c4c83          ORR      r12,r12,r3,LSL #18    ;110
00009c  eb1c080e          ADDS     r8,r12,lr             ;110
0000a0  ea4f3797          LSR      r7,r7,#14
0000a4  ea474785          ORR      r7,r7,r5,LSL #18
0000a8  ea4f3ca5          ASR      r12,r5,#14
;;;112          imag_sum += ((q63_t)b0 * c0) >> 14;
0000ac  fb8a5606          SMULL    r5,r6,r10,r6
0000b0  eb4933a3          ADC      r3,r9,r3,ASR #14      ;110
0000b4  ebbb0b07          SUBS     r11,r11,r7            ;111
0000b8  eb62020c          SBC      r2,r2,r12             ;111
0000bc  0bad              LSRS     r5,r5,#14
0000be  ea454586          ORR      r5,r5,r6,LSL #18
0000c2  eb150e08          ADDS     lr,r5,r8
0000c6  eb4339a6          ADC      r9,r3,r6,ASR #14
0000ca  e9d06504          LDRD     r6,r5,[r0,#0x10]
;;;113          
;;;114          a0 = *pSrcA++;
;;;115          b0 = *pSrcA++;
0000ce  e9d17c04          LDRD     r7,r12,[r1,#0x10]
;;;116          c0 = *pSrcB++;
;;;117          d0 = *pSrcB++;  
;;;118      
;;;119          real_sum += ((q63_t)a0 * c0) >> 14;
0000d2  fb868307          SMULL    r8,r3,r6,r7
0000d6  ea4f3898          LSR      r8,r8,#14
0000da  ea484883          ORR      r8,r8,r3,LSL #18
0000de  eb18080b          ADDS     r8,r8,r11
0000e2  46aa              MOV      r10,r5                ;115
0000e4  eb4233a3          ADC      r3,r2,r3,ASR #14
;;;120          imag_sum += ((q63_t)a0 * d0) >> 14;
0000e8  fb86520c          SMULL    r5,r2,r6,r12
0000ec  ea4f3695          LSR      r6,r5,#14
0000f0  ea464682          ORR      r6,r6,r2,LSL #18
0000f4  eb16050e          ADDS     r5,r6,lr
0000f8  eb4932a2          ADC      r2,r9,r2,ASR #14
0000fc  46a9              MOV      r9,r5
;;;121          real_sum -= ((q63_t)b0 * d0) >> 14;
0000fe  fb8a560c          SMULL    r5,r6,r10,r12
000102  ea4f3595          LSR      r5,r5,#14
000106  ea454586          ORR      r5,r5,r6,LSL #18
00010a  ebb80505          SUBS     r5,r8,r5
00010e  eb6333a6          SBC      r3,r3,r6,ASR #14
000112  e9cd5300          STRD     r5,r3,[sp,#0]
;;;122          imag_sum += ((q63_t)b0 * c0) >> 14;
000116  fb8a5307          SMULL    r5,r3,r10,r7
00011a  ea4f3695          LSR      r6,r5,#14
00011e  ea464683          ORR      r6,r6,r3,LSL #18
000122  eb160e09          ADDS     lr,r6,r9
000126  eb423ba3          ADC      r11,r2,r3,ASR #14
00012a  e9d06306          LDRD     r6,r3,[r0,#0x18]
;;;123          
;;;124          a0 = *pSrcA++;
;;;125          b0 = *pSrcA++;
;;;126          c0 = *pSrcB++;
00012e  f8517f18          LDR      r7,[r1,#0x18]!
000132  4699              MOV      r9,r3                 ;125
;;;127          d0 = *pSrcB++;  
;;;128      
;;;129          real_sum += ((q63_t)a0 * c0) >> 14;
000134  fb863207          SMULL    r3,r2,r6,r7
000138  ea4f3893          LSR      r8,r3,#14
00013c  e9dd5300          LDRD     r5,r3,[sp,#0]
000140  ea484882          ORR      r8,r8,r2,LSL #18
000144  f8d1c004          LDR      r12,[r1,#4]
000148  eb180505          ADDS     r5,r8,r5
00014c  eb433aa2          ADC      r10,r3,r2,ASR #14
;;;130          imag_sum += ((q63_t)a0 * d0) >> 14;
000150  fb86230c          SMULL    r2,r3,r6,r12
000154  ea4f3292          LSR      r2,r2,#14
000158  ea424283          ORR      r2,r2,r3,LSL #18
00015c  eb12060e          ADDS     r6,r2,lr
000160  eb4b38a3          ADC      r8,r11,r3,ASR #14
;;;131          real_sum -= ((q63_t)b0 * d0) >> 14;
000164  fb89320c          SMULL    r3,r2,r9,r12
000168  ea4f3393          LSR      r3,r3,#14
00016c  9500              STR      r5,[sp,#0]            ;130
00016e  ea434382          ORR      r3,r3,r2,LSL #18
000172  1aed              SUBS     r5,r5,r3
000174  46b3              MOV      r11,r6                ;130
;;;132          imag_sum += ((q63_t)b0 * c0) >> 14;
000176  fb896307          SMULL    r6,r3,r9,r7
00017a  ea4f3796          LSR      r7,r6,#14
00017e  eb6a32a2          SBC      r2,r10,r2,ASR #14     ;131
000182  ea474783          ORR      r7,r7,r3,LSL #18
000186  eb17060b          ADDS     r6,r7,r11
00018a  f1000020          ADD      r0,r0,#0x20           ;129
00018e  f1010108          ADD      r1,r1,#8              ;129
000192  eb4833a3          ADC      r3,r8,r3,ASR #14
000196  f1a40401          SUB      r4,r4,#1
                  |L1.410|
00019a  2c00              CMP      r4,#0                 ;92
00019c  f47faf3a          BNE      |L1.20|
;;;133    
;;;134          /* Decrement the loop counter */
;;;135          blkCnt--;
;;;136      }
;;;137    
;;;138      /* If the numSamples  is not a multiple of 4, compute any remaining output samples here.    
;;;139       ** No loop unrolling is used. */
;;;140      blkCnt = numSamples % 0x4u;
0001a0  9c04              LDR      r4,[sp,#0x10]
0001a2  f0040c03          AND      r12,r4,#3
;;;141    
;;;142      while(blkCnt > 0u)
0001a6  e02c              B        |L1.514|
                  |L1.424|
;;;143      {
;;;144          a0 = *pSrcA++;
0001a8  f850ab04          LDR      r10,[r0],#4
;;;145          b0 = *pSrcA++;
;;;146          c0 = *pSrcB++;
0001ac  f851eb04          LDR      lr,[r1],#4
0001b0  f8509b04          LDR      r9,[r0],#4            ;145
;;;147          d0 = *pSrcB++;  
;;;148      
;;;149          real_sum += ((q63_t)a0 * c0) >> 14;
0001b4  fb8a740e          SMULL    r7,r4,r10,lr
0001b8  0bbf              LSRS     r7,r7,#14
0001ba  ea474784          ORR      r7,r7,r4,LSL #18
0001be  f851bb04          LDR      r11,[r1],#4           ;147
0001c2  197d              ADDS     r5,r7,r5
0001c4  eb4234a4          ADC      r4,r2,r4,ASR #14
;;;150          imag_sum += ((q63_t)a0 * d0) >> 14;
0001c8  fb8a270b          SMULL    r2,r7,r10,r11
0001cc  ea4f3292          LSR      r2,r2,#14
0001d0  ea424287          ORR      r2,r2,r7,LSL #18
0001d4  1996              ADDS     r6,r2,r6
0001d6  eb4337a7          ADC      r7,r3,r7,ASR #14
;;;151          real_sum -= ((q63_t)b0 * d0) >> 14;
0001da  fb89320b          SMULL    r3,r2,r9,r11
0001de  ea4f3393          LSR      r3,r3,#14
0001e2  ea434382          ORR      r3,r3,r2,LSL #18
0001e6  1aed              SUBS     r5,r5,r3
0001e8  eb6432a2          SBC      r2,r4,r2,ASR #14
;;;152          imag_sum += ((q63_t)b0 * c0) >> 14;
0001ec  fb89430e          SMULL    r4,r3,r9,lr
0001f0  ea4f3494          LSR      r4,r4,#14
0001f4  ea444483          ORR      r4,r4,r3,LSL #18
0001f8  19a6              ADDS     r6,r4,r6
0001fa  eb4733a3          ADC      r3,r7,r3,ASR #14
0001fe  f1ac0c01          SUB      r12,r12,#1
                  |L1.514|
000202  f1bc0f00          CMP      r12,#0                ;142
000206  d1cf              BNE      |L1.424|
;;;153    
;;;154          /* Decrement the loop counter */
;;;155          blkCnt--;
;;;156      }
;;;157    
;;;158    #else
;;;159    
;;;160      /* Run the below code for Cortex-M0 */
;;;161    
;;;162      while(numSamples > 0u)
;;;163      {
;;;164          a0 = *pSrcA++;
;;;165          b0 = *pSrcA++;
;;;166          c0 = *pSrcB++;
;;;167          d0 = *pSrcB++;  
;;;168      
;;;169          real_sum += ((q63_t)a0 * c0) >> 14;
;;;170          imag_sum += ((q63_t)a0 * d0) >> 14;
;;;171          real_sum -= ((q63_t)b0 * d0) >> 14;
;;;172          imag_sum += ((q63_t)b0 * c0) >> 14;
;;;173    
;;;174          /* Decrement the loop counter */
;;;175          numSamples--;
;;;176      }
;;;177    
;;;178    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;179    
;;;180      /* Store the real and imaginary results in 16.48 format  */
;;;181      *realResult = real_sum;
000208  9805              LDR      r0,[sp,#0x14]
00020a  e9c05200          STRD     r5,r2,[r0,#0]
;;;182      *imagResult = imag_sum;
00020e  980f              LDR      r0,[sp,#0x3c]
000210  e9c06300          STRD     r6,r3,[r0,#0]
;;;183    }
000214  b006              ADD      sp,sp,#0x18
000216  e8bd8ff0          POP      {r4-r11,pc}
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_dot_prod_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REVSH|
#line 144
|__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____RRX|
#line 300
|__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
