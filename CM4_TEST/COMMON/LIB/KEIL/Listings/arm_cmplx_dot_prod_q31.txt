; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_dot_prod_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_dot_prod_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_dot_prod_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_dot_prod_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_dot_prod_q31||, CODE, READONLY, ALIGN=1

                  arm_cmplx_dot_prod_q31 PROC
;;;70     
;;;71     void arm_cmplx_dot_prod_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;72       q31_t * pSrcA,
;;;73       q31_t * pSrcB,
;;;74       uint32_t numSamples,
;;;75       q63_t * realResult,
;;;76       q63_t * imagResult)
;;;77     {
;;;78       q63_t real_sum = 0, imag_sum = 0;              /* Temporary result storage */
000004  2200              MOVS     r2,#0
000006  4613              MOV      r3,r2
000008  2400              MOVS     r4,#0
00000a  4625              MOV      r5,r4
;;;79       q31_t a0,b0,c0,d0;
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;84       uint32_t blkCnt;                               /* loop counter */
;;;85     
;;;86     
;;;87       /*loop Unrolling */
;;;88       blkCnt = numSamples >> 2u;
00000c  9e02              LDR      r6,[sp,#8]
00000e  08b6              LSRS     r6,r6,#2
000010  e0bf              B        |L1.402|
                  |L1.18|
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;91        ** a second loop below computes the remaining 1 to 3 samples. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94           a0 = *pSrcA++;
000012  6807              LDR      r7,[r0,#0]
;;;95           b0 = *pSrcA++;
000014  f8d0c004          LDR      r12,[r0,#4]
;;;96           c0 = *pSrcB++;
000018  f8518b04          LDR      r8,[r1],#4
;;;97           d0 = *pSrcB++;  
00001c  f8519b04          LDR      r9,[r1],#4
;;;98       
;;;99           real_sum += ((q63_t)a0 * c0) >> 14;
000020  fb87ba08          SMULL    r11,r10,r7,r8
000024  ea4f3b9b          LSR      r11,r11,#14
000028  ea4b4b8a          ORR      r11,r11,r10,LSL #18
00002c  eb1b0202          ADDS     r2,r11,r2
000030  eb4333aa          ADC      r3,r3,r10,ASR #14
;;;100          imag_sum += ((q63_t)a0 * d0) >> 14;
000034  fb87a709          SMULL    r10,r7,r7,r9
000038  ea4f3a9a          LSR      r10,r10,#14
00003c  ea4a4a87          ORR      r10,r10,r7,LSL #18
000040  eb1a0404          ADDS     r4,r10,r4
000044  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;101          real_sum -= ((q63_t)b0 * d0) >> 14;
000048  fb8c9709          SMULL    r9,r7,r12,r9
00004c  ea4f3999          LSR      r9,r9,#14
000050  ea494987          ORR      r9,r9,r7,LSL #18
000054  ebb20209          SUBS     r2,r2,r9
000058  eb6333a7          SBC      r3,r3,r7,ASR #14
;;;102          imag_sum += ((q63_t)b0 * c0) >> 14;
00005c  fb8cc708          SMULL    r12,r7,r12,r8
000060  ea4f3c9c          LSR      r12,r12,#14
000064  ea4c4c87          ORR      r12,r12,r7,LSL #18
000068  eb1c0404          ADDS     r4,r12,r4
00006c  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;103          
;;;104          a0 = *pSrcA++;
000070  6887              LDR      r7,[r0,#8]
;;;105          b0 = *pSrcA++;
000072  f8d0c00c          LDR      r12,[r0,#0xc]
;;;106          c0 = *pSrcB++;
000076  f8518b04          LDR      r8,[r1],#4
;;;107          d0 = *pSrcB++;  
00007a  f8519b04          LDR      r9,[r1],#4
;;;108      
;;;109          real_sum += ((q63_t)a0 * c0) >> 14;
00007e  fb87ba08          SMULL    r11,r10,r7,r8
000082  ea4f3b9b          LSR      r11,r11,#14
000086  ea4b4b8a          ORR      r11,r11,r10,LSL #18
00008a  eb1b0202          ADDS     r2,r11,r2
00008e  eb4333aa          ADC      r3,r3,r10,ASR #14
;;;110          imag_sum += ((q63_t)a0 * d0) >> 14;
000092  fb87a709          SMULL    r10,r7,r7,r9
000096  ea4f3a9a          LSR      r10,r10,#14
00009a  ea4a4a87          ORR      r10,r10,r7,LSL #18
00009e  eb1a0404          ADDS     r4,r10,r4
0000a2  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;111          real_sum -= ((q63_t)b0 * d0) >> 14;
0000a6  fb8c9709          SMULL    r9,r7,r12,r9
0000aa  ea4f3999          LSR      r9,r9,#14
0000ae  ea494987          ORR      r9,r9,r7,LSL #18
0000b2  ebb20209          SUBS     r2,r2,r9
0000b6  eb6333a7          SBC      r3,r3,r7,ASR #14
;;;112          imag_sum += ((q63_t)b0 * c0) >> 14;
0000ba  fb8cc708          SMULL    r12,r7,r12,r8
0000be  ea4f3c9c          LSR      r12,r12,#14
0000c2  ea4c4c87          ORR      r12,r12,r7,LSL #18
0000c6  eb1c0404          ADDS     r4,r12,r4
0000ca  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;113          
;;;114          a0 = *pSrcA++;
0000ce  6907              LDR      r7,[r0,#0x10]
;;;115          b0 = *pSrcA++;
0000d0  f8d0c014          LDR      r12,[r0,#0x14]
;;;116          c0 = *pSrcB++;
0000d4  f8518b04          LDR      r8,[r1],#4
;;;117          d0 = *pSrcB++;  
0000d8  f8519b04          LDR      r9,[r1],#4
;;;118      
;;;119          real_sum += ((q63_t)a0 * c0) >> 14;
0000dc  fb87ba08          SMULL    r11,r10,r7,r8
0000e0  ea4f3b9b          LSR      r11,r11,#14
0000e4  ea4b4b8a          ORR      r11,r11,r10,LSL #18
0000e8  eb1b0202          ADDS     r2,r11,r2
0000ec  eb4333aa          ADC      r3,r3,r10,ASR #14
;;;120          imag_sum += ((q63_t)a0 * d0) >> 14;
0000f0  fb87a709          SMULL    r10,r7,r7,r9
0000f4  ea4f3a9a          LSR      r10,r10,#14
0000f8  ea4a4a87          ORR      r10,r10,r7,LSL #18
0000fc  eb1a0404          ADDS     r4,r10,r4
000100  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;121          real_sum -= ((q63_t)b0 * d0) >> 14;
000104  fb8c9709          SMULL    r9,r7,r12,r9
000108  ea4f3999          LSR      r9,r9,#14
00010c  ea494987          ORR      r9,r9,r7,LSL #18
000110  ebb20209          SUBS     r2,r2,r9
000114  eb6333a7          SBC      r3,r3,r7,ASR #14
;;;122          imag_sum += ((q63_t)b0 * c0) >> 14;
000118  fb8cc708          SMULL    r12,r7,r12,r8
00011c  ea4f3c9c          LSR      r12,r12,#14
000120  ea4c4c87          ORR      r12,r12,r7,LSL #18
000124  eb1c0404          ADDS     r4,r12,r4
000128  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;123          
;;;124          a0 = *pSrcA++;
00012c  6987              LDR      r7,[r0,#0x18]
00012e  f100001c          ADD      r0,r0,#0x1c
;;;125          b0 = *pSrcA++;
000132  f850cb04          LDR      r12,[r0],#4
;;;126          c0 = *pSrcB++;
000136  f8518b04          LDR      r8,[r1],#4
;;;127          d0 = *pSrcB++;  
00013a  f8519b04          LDR      r9,[r1],#4
;;;128      
;;;129          real_sum += ((q63_t)a0 * c0) >> 14;
00013e  fb87ba08          SMULL    r11,r10,r7,r8
000142  ea4f3b9b          LSR      r11,r11,#14
000146  ea4b4b8a          ORR      r11,r11,r10,LSL #18
00014a  eb1b0202          ADDS     r2,r11,r2
00014e  eb4333aa          ADC      r3,r3,r10,ASR #14
;;;130          imag_sum += ((q63_t)a0 * d0) >> 14;
000152  fb87a709          SMULL    r10,r7,r7,r9
000156  ea4f3a9a          LSR      r10,r10,#14
00015a  ea4a4a87          ORR      r10,r10,r7,LSL #18
00015e  eb1a0404          ADDS     r4,r10,r4
000162  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;131          real_sum -= ((q63_t)b0 * d0) >> 14;
000166  fb8c9709          SMULL    r9,r7,r12,r9
00016a  ea4f3999          LSR      r9,r9,#14
00016e  ea494987          ORR      r9,r9,r7,LSL #18
000172  ebb20209          SUBS     r2,r2,r9
000176  eb6333a7          SBC      r3,r3,r7,ASR #14
;;;132          imag_sum += ((q63_t)b0 * c0) >> 14;
00017a  fb8cc708          SMULL    r12,r7,r12,r8
00017e  ea4f3c9c          LSR      r12,r12,#14
000182  ea4c4c87          ORR      r12,r12,r7,LSL #18
000186  eb1c0404          ADDS     r4,r12,r4
00018a  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;133    
;;;134          /* Decrement the loop counter */
;;;135          blkCnt--;
00018e  f1a60601          SUB      r6,r6,#1
                  |L1.402|
000192  2e00              CMP      r6,#0                 ;92
000194  f47faf3d          BNE      |L1.18|
;;;136      }
;;;137    
;;;138      /* If the numSamples  is not a multiple of 4, compute any remaining output samples here.    
;;;139       ** No loop unrolling is used. */
;;;140      blkCnt = numSamples % 0x4u;
000198  9e02              LDR      r6,[sp,#8]
00019a  f0060603          AND      r6,r6,#3
;;;141    
;;;142      while(blkCnt > 0u)
00019e  e030              B        |L1.514|
                  |L1.416|
;;;143      {
;;;144          a0 = *pSrcA++;
0001a0  c880              LDM      r0!,{r7}
;;;145          b0 = *pSrcA++;
0001a2  f850cb04          LDR      r12,[r0],#4
;;;146          c0 = *pSrcB++;
0001a6  f8518b04          LDR      r8,[r1],#4
;;;147          d0 = *pSrcB++;  
0001aa  f8519b04          LDR      r9,[r1],#4
;;;148      
;;;149          real_sum += ((q63_t)a0 * c0) >> 14;
0001ae  fb87ba08          SMULL    r11,r10,r7,r8
0001b2  ea4f3b9b          LSR      r11,r11,#14
0001b6  ea4b4b8a          ORR      r11,r11,r10,LSL #18
0001ba  eb1b0202          ADDS     r2,r11,r2
0001be  eb4333aa          ADC      r3,r3,r10,ASR #14
;;;150          imag_sum += ((q63_t)a0 * d0) >> 14;
0001c2  fb87a709          SMULL    r10,r7,r7,r9
0001c6  ea4f3a9a          LSR      r10,r10,#14
0001ca  ea4a4a87          ORR      r10,r10,r7,LSL #18
0001ce  eb1a0404          ADDS     r4,r10,r4
0001d2  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;151          real_sum -= ((q63_t)b0 * d0) >> 14;
0001d6  fb8c9709          SMULL    r9,r7,r12,r9
0001da  ea4f3999          LSR      r9,r9,#14
0001de  ea494987          ORR      r9,r9,r7,LSL #18
0001e2  ebb20209          SUBS     r2,r2,r9
0001e6  eb6333a7          SBC      r3,r3,r7,ASR #14
;;;152          imag_sum += ((q63_t)b0 * c0) >> 14;
0001ea  fb8cc708          SMULL    r12,r7,r12,r8
0001ee  ea4f3c9c          LSR      r12,r12,#14
0001f2  ea4c4c87          ORR      r12,r12,r7,LSL #18
0001f6  eb1c0404          ADDS     r4,r12,r4
0001fa  eb4535a7          ADC      r5,r5,r7,ASR #14
;;;153    
;;;154          /* Decrement the loop counter */
;;;155          blkCnt--;
0001fe  f1a60601          SUB      r6,r6,#1
                  |L1.514|
000202  2e00              CMP      r6,#0                 ;142
000204  d1cc              BNE      |L1.416|
;;;156      }
;;;157    
;;;158    #else
;;;159    
;;;160      /* Run the below code for Cortex-M0 */
;;;161    
;;;162      while(numSamples > 0u)
;;;163      {
;;;164          a0 = *pSrcA++;
;;;165          b0 = *pSrcA++;
;;;166          c0 = *pSrcB++;
;;;167          d0 = *pSrcB++;  
;;;168      
;;;169          real_sum += ((q63_t)a0 * c0) >> 14;
;;;170          imag_sum += ((q63_t)a0 * d0) >> 14;
;;;171          real_sum -= ((q63_t)b0 * d0) >> 14;
;;;172          imag_sum += ((q63_t)b0 * c0) >> 14;
;;;173    
;;;174          /* Decrement the loop counter */
;;;175          numSamples--;
;;;176      }
;;;177    
;;;178    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;179    
;;;180      /* Store the real and imaginary results in 16.48 format  */
;;;181      *realResult = real_sum;
000206  9803              LDR      r0,[sp,#0xc]
000208  c00c              STM      r0!,{r2,r3}
;;;182      *imagResult = imag_sum;
00020a  980d              LDR      r0,[sp,#0x34]
00020c  c030              STM      r0!,{r4,r5}
;;;183    }
00020e  e8bd8fff          POP      {r0-r11,pc}
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_dot_prod_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REVSH|
#line 144
|__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____RRX|
#line 300
|__asm___24_arm_cmplx_dot_prod_q31_c_6d408302____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
