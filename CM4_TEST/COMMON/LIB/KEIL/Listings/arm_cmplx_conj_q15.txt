; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_conj_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_conj_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_conj_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_conj_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_conj_q15||, CODE, READONLY, ALIGN=1

                  arm_cmplx_conj_q15 PROC
;;;64     
;;;65     void arm_cmplx_conj_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;66       q15_t * pSrc,
;;;67       q15_t * pDst,
;;;68       uint32_t numSamples)
;;;69     {
;;;70     
;;;71     #ifndef ARM_MATH_CM0_FAMILY
;;;72     
;;;73       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;74       uint32_t blkCnt;                               /* loop counter */
;;;75       q31_t in1, in2, in3, in4;
;;;76       q31_t zero = 0;
000002  2300              MOVS     r3,#0
;;;77     
;;;78       /*loop Unrolling */
;;;79       blkCnt = numSamples >> 2u;
000004  0894              LSRS     r4,r2,#2
000006  e020              B        |L1.74|
                  |L1.8|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;86         /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;87         in1 = *__SIMD32(pSrc)++;
000008  f8505b04          LDR      r5,[r0],#4
;;;88         in2 = *__SIMD32(pSrc)++;
00000c  f850cb04          LDR      r12,[r0],#4
;;;89         in3 = *__SIMD32(pSrc)++;
000010  f8506b08          LDR      r6,[r0],#8
;;;90         in4 = *__SIMD32(pSrc)++;
000014  f8507c04          LDR      r7,[r0,#-4]
;;;91     
;;;92     #ifndef ARM_MATH_BIG_ENDIAN
;;;93     
;;;94         in1 = __QASX(zero, in1);
000018  faa3f515          QASX     r5,r3,r5
;;;95         in2 = __QASX(zero, in2);
00001c  faa3fc1c          QASX     r12,r3,r12
;;;96         in3 = __QASX(zero, in3);
000020  faa3f616          QASX     r6,r3,r6
;;;97         in4 = __QASX(zero, in4);
000024  faa3f717          QASX     r7,r3,r7
;;;98     
;;;99     #else
;;;100    
;;;101        in1 = __QSAX(zero, in1);
;;;102        in2 = __QSAX(zero, in2);
;;;103        in3 = __QSAX(zero, in3);
;;;104        in4 = __QSAX(zero, in4);
;;;105    
;;;106    #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
;;;107    
;;;108        in1 = ((uint32_t) in1 >> 16) | ((uint32_t) in1 << 16);
000028  ea4f4535          ROR      r5,r5,#16
;;;109        in2 = ((uint32_t) in2 >> 16) | ((uint32_t) in2 << 16);
;;;110        in3 = ((uint32_t) in3 >> 16) | ((uint32_t) in3 << 16);
;;;111        in4 = ((uint32_t) in4 >> 16) | ((uint32_t) in4 << 16);
;;;112    
;;;113        *__SIMD32(pDst)++ = in1;
00002c  f8415b04          STR      r5,[r1],#4
000030  ea4f4c3c          ROR      r12,r12,#16           ;109
;;;114        *__SIMD32(pDst)++ = in2;
000034  f841cb04          STR      r12,[r1],#4
000038  ea4f4636          ROR      r6,r6,#16             ;110
;;;115        *__SIMD32(pDst)++ = in3;
00003c  f8416b08          STR      r6,[r1],#8
000040  ea4f4737          ROR      r7,r7,#16             ;111
;;;116        *__SIMD32(pDst)++ = in4;
000044  f8417c04          STR      r7,[r1,#-4]
000048  1e64              SUBS     r4,r4,#1
                  |L1.74|
00004a  2c00              CMP      r4,#0                 ;83
00004c  d1dc              BNE      |L1.8|
;;;117    
;;;118        /* Decrement the loop counter */
;;;119        blkCnt--;
;;;120      }
;;;121    
;;;122      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;123       ** No loop unrolling is used. */
;;;124      blkCnt = numSamples % 0x4u;
00004e  f0020203          AND      r2,r2,#3
;;;125    
;;;126      while(blkCnt > 0u)
000052  e00b              B        |L1.108|
                  |L1.84|
;;;127      {
;;;128        /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;129        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;130        *pDst++ = *pSrc++;
000054  f8303b02          LDRH     r3,[r0],#2
000058  f8213b02          STRH     r3,[r1],#2
;;;131        *pDst++ = __SSAT(-*pSrc++, 16);
00005c  f9303b02          LDRSH    r3,[r0],#2
000060  425b              RSBS     r3,r3,#0
000062  f303030f          SSAT     r3,#16,r3
000066  f8213b02          STRH     r3,[r1],#2
00006a  1e52              SUBS     r2,r2,#1
                  |L1.108|
00006c  2a00              CMP      r2,#0                 ;126
00006e  d1f1              BNE      |L1.84|
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
;;;135      }
;;;136    
;;;137    #else
;;;138    
;;;139      q15_t in;
;;;140    
;;;141      /* Run the below code for Cortex-M0 */
;;;142    
;;;143      while(numSamples > 0u)
;;;144      {
;;;145        /* realOut + j (imagOut) = realIn+ j (-1) imagIn */
;;;146        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;147        *pDst++ = *pSrc++;
;;;148        in = *pSrc++;
;;;149        *pDst++ = (in == (q15_t) 0x8000) ? 0x7fff : -in;
;;;150    
;;;151        /* Decrement the loop counter */
;;;152        numSamples--;
;;;153      }
;;;154    
;;;155    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;156    
;;;157    }
000070  bdf0              POP      {r4-r7,pc}
;;;158    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_conj_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REVSH|
#line 144
|__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____RRX|
#line 300
|__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
