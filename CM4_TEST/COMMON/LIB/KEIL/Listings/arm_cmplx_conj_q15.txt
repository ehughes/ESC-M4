; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_conj_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_conj_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_conj_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_conj_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_conj_q15||, CODE, READONLY, ALIGN=1

                  arm_cmplx_conj_q15 PROC
;;;64     
;;;65     void arm_cmplx_conj_q15(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;66       q15_t * pSrc,
;;;67       q15_t * pDst,
;;;68       uint32_t numSamples)
;;;69     {
;;;70     
;;;71     #ifndef ARM_MATH_CM0_FAMILY
;;;72     
;;;73       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;74       uint32_t blkCnt;                               /* loop counter */
;;;75       q31_t in1, in2, in3, in4;
;;;76       q31_t zero = 0;
000004  2300              MOVS     r3,#0
;;;77     
;;;78       /*loop Unrolling */
;;;79       blkCnt = numSamples >> 2u;
000006  0894              LSRS     r4,r2,#2
000008  e01c              B        |L1.68|
                  |L1.10|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;86         /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;87         in1 = *__SIMD32(pSrc)++;
00000a  6806              LDR      r6,[r0,#0]
;;;88         in2 = *__SIMD32(pSrc)++;
00000c  6845              LDR      r5,[r0,#4]
;;;89         in3 = *__SIMD32(pSrc)++;
00000e  6887              LDR      r7,[r0,#8]
000010  300c              ADDS     r0,r0,#0xc
;;;90         in4 = *__SIMD32(pSrc)++;
000012  f850cb04          LDR      r12,[r0],#4
;;;91     
;;;92     #ifndef ARM_MATH_BIG_ENDIAN
;;;93     
;;;94         in1 = __QASX(zero, in1);
000016  faa3f616          QASX     r6,r3,r6
;;;95         in2 = __QASX(zero, in2);
00001a  faa3f815          QASX     r8,r3,r5
;;;96         in3 = __QASX(zero, in3);
00001e  faa3f917          QASX     r9,r3,r7
;;;97         in4 = __QASX(zero, in4);
000022  faa3f51c          QASX     r5,r3,r12
;;;98     
;;;99     #else
;;;100    
;;;101        in1 = __QSAX(zero, in1);
;;;102        in2 = __QSAX(zero, in2);
;;;103        in3 = __QSAX(zero, in3);
;;;104        in4 = __QSAX(zero, in4);
;;;105    
;;;106    #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
;;;107    
;;;108        in1 = ((uint32_t) in1 >> 16) | ((uint32_t) in1 << 16);
000026  ea4f4c36          ROR      r12,r6,#16
;;;109        in2 = ((uint32_t) in2 >> 16) | ((uint32_t) in2 << 16);
00002a  ea4f4738          ROR      r7,r8,#16
;;;110        in3 = ((uint32_t) in3 >> 16) | ((uint32_t) in3 << 16);
00002e  ea4f4639          ROR      r6,r9,#16
;;;111        in4 = ((uint32_t) in4 >> 16) | ((uint32_t) in4 << 16);
000032  ea4f4535          ROR      r5,r5,#16
;;;112    
;;;113        *__SIMD32(pDst)++ = in1;
000036  f8c1c000          STR      r12,[r1,#0]
;;;114        *__SIMD32(pDst)++ = in2;
00003a  604f              STR      r7,[r1,#4]
;;;115        *__SIMD32(pDst)++ = in3;
00003c  608e              STR      r6,[r1,#8]
;;;116        *__SIMD32(pDst)++ = in4;
00003e  60cd              STR      r5,[r1,#0xc]
000040  3110              ADDS     r1,r1,#0x10
;;;117    
;;;118        /* Decrement the loop counter */
;;;119        blkCnt--;
000042  1e64              SUBS     r4,r4,#1
                  |L1.68|
000044  2c00              CMP      r4,#0                 ;83
000046  d1e0              BNE      |L1.10|
;;;120      }
;;;121    
;;;122      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;123       ** No loop unrolling is used. */
;;;124      blkCnt = numSamples % 0x4u;
000048  f0020203          AND      r2,r2,#3
;;;125    
;;;126      while(blkCnt > 0u)
00004c  e00a              B        |L1.100|
                  |L1.78|
;;;127      {
;;;128        /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;129        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;130        *pDst++ = *pSrc++;
00004e  8803              LDRH     r3,[r0,#0]
000050  800b              STRH     r3,[r1,#0]
;;;131        *pDst++ = __SSAT(-*pSrc++, 16);
000052  f9b03002          LDRSH    r3,[r0,#2]
000056  1d00              ADDS     r0,r0,#4
000058  425b              RSBS     r3,r3,#0
00005a  f303030f          SSAT     r3,#16,r3
00005e  804b              STRH     r3,[r1,#2]
000060  1d09              ADDS     r1,r1,#4
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
000062  1e52              SUBS     r2,r2,#1
                  |L1.100|
000064  2a00              CMP      r2,#0                 ;126
000066  d1f2              BNE      |L1.78|
;;;135      }
;;;136    
;;;137    #else
;;;138    
;;;139      q15_t in;
;;;140    
;;;141      /* Run the below code for Cortex-M0 */
;;;142    
;;;143      while(numSamples > 0u)
;;;144      {
;;;145        /* realOut + j (imagOut) = realIn+ j (-1) imagIn */
;;;146        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;147        *pDst++ = *pSrc++;
;;;148        in = *pSrc++;
;;;149        *pDst++ = (in == (q15_t) 0x8000) ? 0x7fff : -in;
;;;150    
;;;151        /* Decrement the loop counter */
;;;152        numSamples--;
;;;153      }
;;;154    
;;;155    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;156    
;;;157    }
000068  e8bd83f0          POP      {r4-r9,pc}
;;;158    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_conj_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REVSH|
#line 144
|__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____RRX|
#line 300
|__asm___20_arm_cmplx_conj_q15_c_2ed79dbb____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
