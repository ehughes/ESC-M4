; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_q31_to_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_q31_to_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_q31_to_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_q31_to_q15.c]
                          THUMB

                          AREA ||i.arm_q31_to_q15||, CODE, READONLY, ALIGN=1

                  arm_q31_to_q15 PROC
;;;69     
;;;70     void arm_q31_to_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;71       q31_t * pSrc,
;;;72       q15_t * pDst,
;;;73       uint32_t blockSize)
;;;74     {
;;;75       q31_t *pIn = pSrc;                             /* Src pointer */
;;;76       uint32_t blkCnt;                               /* loop counter */
;;;77     
;;;78     #ifndef ARM_MATH_CM0_FAMILY
;;;79     
;;;80       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;81       q31_t in1, in2, in3, in4;
;;;82       q31_t out1, out2;
;;;83     
;;;84       /*loop Unrolling */
;;;85       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e00b              B        |L1.30|
                  |L1.6|
000006  c8f0              LDM      r0!,{r4-r7}           ;74
;;;86     
;;;87       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;88        ** a second loop below computes the remaining 1 to 3 samples. */
;;;89       while(blkCnt > 0u)
;;;90       {
;;;91         /* C = (q15_t) A >> 16 */
;;;92         /* convert from q31 to q15 and then store the results in the destination buffer */
;;;93         in1 = *pIn++;
;;;94         in2 = *pIn++;
;;;95         in3 = *pIn++;
;;;96         in4 = *pIn++;
;;;97     
;;;98         /* pack two higher 16-bit values from two 32-bit values */
;;;99     #ifndef ARM_MATH_BIG_ENDIAN
;;;100    
;;;101        out1 = __PKHTB(in2, in1, 16);
000008  0c24              LSRS     r4,r4,#16
00000a  eac40405          PKHBT    r4,r4,r5
;;;102        out2 = __PKHTB(in4, in3, 16);
00000e  0c35              LSRS     r5,r6,#16
000010  eac50507          PKHBT    r5,r5,r7
;;;103    
;;;104    #else
;;;105    
;;;106        out1 = __PKHTB(in1, in2, 16);
;;;107        out2 = __PKHTB(in3, in4, 16);
;;;108    
;;;109    #endif //      #ifdef ARM_MATH_BIG_ENDIAN
;;;110    
;;;111        *__SIMD32(pDst)++ = out1;
000014  f8414b04          STR      r4,[r1],#4
;;;112        *__SIMD32(pDst)++ = out2;
000018  1e5b              SUBS     r3,r3,#1
00001a  f8415b04          STR      r5,[r1],#4
                  |L1.30|
00001e  2b00              CMP      r3,#0                 ;89
000020  d1f1              BNE      |L1.6|
;;;113    
;;;114        /* Decrement the loop counter */
;;;115        blkCnt--;
;;;116      }
;;;117    
;;;118      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;119       ** No loop unrolling is used. */
;;;120      blkCnt = blockSize % 0x4u;
000022  f0020203          AND      r2,r2,#3
;;;121    
;;;122    #else
;;;123    
;;;124      /* Run the below code for Cortex-M0 */
;;;125    
;;;126      /* Loop over blockSize number of values */
;;;127      blkCnt = blockSize;
;;;128    
;;;129    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;130    
;;;131      while(blkCnt > 0u)
000026  e004              B        |L1.50|
                  |L1.40|
;;;132      {
;;;133        /* C = (q15_t) A >> 16 */
;;;134        /* convert from q31 to q15 and then store the results in the destination buffer */
;;;135        *pDst++ = (q15_t) (*pIn++ >> 16);
000028  c808              LDM      r0!,{r3}
00002a  141b              ASRS     r3,r3,#16
00002c  f8213b02          STRH     r3,[r1],#2
000030  1e52              SUBS     r2,r2,#1
                  |L1.50|
000032  2a00              CMP      r2,#0                 ;131
000034  d1f8              BNE      |L1.40|
;;;136    
;;;137        /* Decrement the loop counter */
;;;138        blkCnt--;
;;;139      }
;;;140    
;;;141    }
000036  bdf0              POP      {r4-r7,pc}
;;;142    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_q31_to_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_q31_to_q15_c_08d53316____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_q31_to_q15_c_08d53316____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_q31_to_q15_c_08d53316____REVSH|
#line 144
|__asm___16_arm_q31_to_q15_c_08d53316____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_q31_to_q15_c_08d53316____RRX|
#line 300
|__asm___16_arm_q31_to_q15_c_08d53316____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
