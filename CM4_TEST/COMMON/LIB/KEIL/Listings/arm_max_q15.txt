; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_max_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_max_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_max_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_max_q15.c]
                          THUMB

                          AREA ||i.arm_max_q15||, CODE, READONLY, ALIGN=1

                  arm_max_q15 PROC
;;;61     
;;;62     void arm_max_q15(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;63       q15_t * pSrc,
;;;64       uint32_t blockSize,
;;;65       q15_t * pResult,
;;;66       uint32_t * pIndex)
;;;67     {
;;;68     #ifndef ARM_MATH_CM0_FAMILY
;;;69     
;;;70       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;71       q15_t maxVal1, maxVal2, out;                   /* Temporary variables to store the output value. */
;;;72       uint32_t blkCnt, outIndex, count;              /* loop counter */
;;;73     
;;;74       /* Initialise the count value. */
;;;75       count = 0u;
000004  2500              MOVS     r5,#0
;;;76       /* Initialise the index value to zero. */
;;;77       outIndex = 0u;
000006  2600              MOVS     r6,#0
;;;78       /* Load first input value that act as reference value for comparision */
;;;79       out = *pSrc++;
000008  f9304b02          LDRSH    r4,[r0],#2
;;;80     
;;;81       /* Loop unrolling */
;;;82       blkCnt = (blockSize - 1u) >> 2u;
00000c  f1a10901          SUB      r9,r1,#1
000010  ea4f0799          LSR      r7,r9,#2
000014  e019              B        |L1.74|
                  |L1.22|
;;;83     
;;;84       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;85       while(blkCnt > 0u)
;;;86       {
;;;87         /* Initialize maxVal to the next consecutive values one by one */
;;;88         maxVal1 = *pSrc++;
000016  f930cb02          LDRSH    r12,[r0],#2
;;;89     
;;;90         maxVal2 = *pSrc++;
00001a  f9308b02          LDRSH    r8,[r0],#2
;;;91     
;;;92         /* compare for the maximum value */
;;;93         if(out < maxVal1)
00001e  4564              CMP      r4,r12
000020  da01              BGE      |L1.38|
;;;94         {
;;;95           /* Update the maximum value and its index */
;;;96           out = maxVal1;
000022  4664              MOV      r4,r12
;;;97           outIndex = count + 1u;
000024  1c6e              ADDS     r6,r5,#1
                  |L1.38|
;;;98         }
;;;99     
;;;100        maxVal1 = *pSrc++;
000026  f930cb02          LDRSH    r12,[r0],#2
;;;101    
;;;102        /* compare for the maximum value */
;;;103        if(out < maxVal2)
00002a  4544              CMP      r4,r8
00002c  da01              BGE      |L1.50|
;;;104        {
;;;105          /* Update the maximum value and its index */
;;;106          out = maxVal2;
00002e  4644              MOV      r4,r8
;;;107          outIndex = count + 2u;
000030  1cae              ADDS     r6,r5,#2
                  |L1.50|
;;;108        }
;;;109    
;;;110        maxVal2 = *pSrc++;
000032  f9308b02          LDRSH    r8,[r0],#2
;;;111    
;;;112        /* compare for the maximum value */
;;;113        if(out < maxVal1)
000036  4564              CMP      r4,r12
000038  da01              BGE      |L1.62|
;;;114        {
;;;115          /* Update the maximum value and its index */
;;;116          out = maxVal1;
00003a  4664              MOV      r4,r12
;;;117          outIndex = count + 3u;
00003c  1cee              ADDS     r6,r5,#3
                  |L1.62|
;;;118        }
;;;119    
;;;120        /* compare for the maximum value */
;;;121        if(out < maxVal2)
00003e  4544              CMP      r4,r8
000040  da01              BGE      |L1.70|
;;;122        {
;;;123          /* Update the maximum value and its index */
;;;124          out = maxVal2;
000042  4644              MOV      r4,r8
;;;125          outIndex = count + 4u;
000044  1d2e              ADDS     r6,r5,#4
                  |L1.70|
;;;126        }
;;;127    
;;;128        count += 4u;
000046  1d2d              ADDS     r5,r5,#4
;;;129    
;;;130        /* Decrement the loop counter */
;;;131        blkCnt--;
000048  1e7f              SUBS     r7,r7,#1
                  |L1.74|
00004a  2f00              CMP      r7,#0                 ;85
00004c  d1e3              BNE      |L1.22|
;;;132      }
;;;133    
;;;134      /* if (blockSize - 1u) is not multiple of 4 */
;;;135      blkCnt = (blockSize - 1u) % 4u;
00004e  f0090503          AND      r5,r9,#3
;;;136    
;;;137    #else
;;;138    
;;;139      /* Run the below code for Cortex-M0 */
;;;140      q15_t maxVal1, out;                            /* Temporary variables to store the output value. */
;;;141      uint32_t blkCnt, outIndex;                     /* loop counter */
;;;142    
;;;143      blkCnt = (blockSize - 1u);
;;;144    
;;;145      /* Initialise the index value to zero. */
;;;146      outIndex = 0u;
;;;147      /* Load first input value that act as reference value for comparision */
;;;148      out = *pSrc++;
;;;149    
;;;150    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;151    
;;;152      while(blkCnt > 0u)
000052  e006              B        |L1.98|
                  |L1.84|
;;;153      {
;;;154        /* Initialize maxVal to the next consecutive values one by one */
;;;155        maxVal1 = *pSrc++;
000054  f9307b02          LDRSH    r7,[r0],#2
;;;156    
;;;157        /* compare for the maximum value */
;;;158        if(out < maxVal1)
000058  42bc              CMP      r4,r7
00005a  da01              BGE      |L1.96|
;;;159        {
;;;160          /* Update the maximum value and it's index */
;;;161          out = maxVal1;
00005c  463c              MOV      r4,r7
;;;162          outIndex = blockSize - blkCnt;
00005e  1b4e              SUBS     r6,r1,r5
                  |L1.96|
;;;163        }
;;;164        /* Decrement the loop counter */
;;;165        blkCnt--;
000060  1e6d              SUBS     r5,r5,#1
                  |L1.98|
000062  2d00              CMP      r5,#0                 ;152
000064  d1f6              BNE      |L1.84|
;;;166    
;;;167      }
;;;168    
;;;169      /* Store the maximum value and its index into destination pointers */
;;;170      *pResult = out;
000066  8014              STRH     r4,[r2,#0]
;;;171      *pIndex = outIndex;
000068  601e              STR      r6,[r3,#0]
;;;172    }
00006a  e8bd83f0          POP      {r4-r9,pc}
;;;173    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_max_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_max_q15_c_9f93aefe____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_max_q15_c_9f93aefe____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_max_q15_c_9f93aefe____REVSH|
#line 144
|__asm___13_arm_max_q15_c_9f93aefe____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_max_q15_c_9f93aefe____RRX|
#line 300
|__asm___13_arm_max_q15_c_9f93aefe____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
