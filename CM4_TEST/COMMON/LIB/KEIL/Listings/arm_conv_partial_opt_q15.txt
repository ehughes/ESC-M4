; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_partial_opt_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_partial_opt_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_partial_opt_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_partial_opt_q15.c]
                          THUMB

                          AREA ||i.arm_conv_partial_opt_q15||, CODE, READONLY, ALIGN=2

                  arm_conv_partial_opt_q15 PROC
;;;75     
;;;76     arm_status arm_conv_partial_opt_q15(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;77       q15_t * pSrcA,
;;;78       uint32_t srcALen,
;;;79       q15_t * pSrcB,
;;;80       uint32_t srcBLen,
;;;81       q15_t * pDst,
;;;82       uint32_t firstIndex,
;;;83       uint32_t numPoints,
;;;84       q15_t * pScratch1,
;;;85       q15_t * pScratch2)
;;;86     {
000004  b097              SUB      sp,sp,#0x5c
000006  461c              MOV      r4,r3
000008  460e              MOV      r6,r1
00000a  e9dda720          LDRD     r10,r7,[sp,#0x80]
;;;87     
;;;88       q15_t *pOut = pDst;                            /* output pointer */
;;;89       q15_t *pScr1 = pScratch1;                      /* Temporary pointer for scratch1 */
;;;90       q15_t *pScr2 = pScratch2;                      /* Temporary pointer for scratch1 */
;;;91       q63_t acc0, acc1, acc2, acc3;                  /* Accumulator */
;;;92       q31_t x1, x2, x3;                              /* Temporary variables to hold state and coefficient values */
;;;93       q31_t y1, y2;                                  /* State variables */
;;;94       q15_t *pIn1;                                   /* inputA pointer */
;;;95       q15_t *pIn2;                                   /* inputB pointer */
;;;96       q15_t *px;                                     /* Intermediate inputA pointer  */
;;;97       q15_t *py;                                     /* Intermediate inputB pointer  */
;;;98       uint32_t j, k, blkCnt;                         /* loop counter */
;;;99       arm_status status;                             /* Status variable */
;;;100      uint32_t tapCnt;                               /* loop count */
;;;101    
;;;102      /* Check for range of output samples to be calculated */
;;;103      if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
00000e  9b22              LDR      r3,[sp,#0x88]
000010  e9dd9123          LDRD     r9,r1,[sp,#0x8c]      ;86
000014  18fd              ADDS     r5,r7,r3
000016  1933              ADDS     r3,r6,r4
000018  1e5b              SUBS     r3,r3,#1
00001a  429d              CMP      r5,r3
00001c  d904              BLS      |L1.40|
;;;104      {
;;;105        /* Set status as ARM_MATH_ARGUMENT_ERROR */
;;;106        status = ARM_MATH_ARGUMENT_ERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.34|
;;;107      }
;;;108      else
;;;109      {
;;;110    
;;;111        /* The algorithm implementation is based on the lengths of the inputs. */
;;;112        /* srcB is always made to slide across srcA. */
;;;113        /* So srcBLen is always considered as shorter or equal to srcALen */
;;;114        if(srcALen >= srcBLen)
;;;115        {
;;;116          /* Initialization of inputA pointer */
;;;117          pIn1 = pSrcA;
;;;118    
;;;119          /* Initialization of inputB pointer */
;;;120          pIn2 = pSrcB;
;;;121        }
;;;122        else
;;;123        {
;;;124          /* Initialization of inputA pointer */
;;;125          pIn1 = pSrcB;
;;;126    
;;;127          /* Initialization of inputB pointer */
;;;128          pIn2 = pSrcA;
;;;129    
;;;130          /* srcBLen is always considered as shorter or equal to srcALen */
;;;131          j = srcBLen;
;;;132          srcBLen = srcALen;
;;;133          srcALen = j;
;;;134        }
;;;135    
;;;136        /* Temporary pointer for scratch2 */
;;;137        py = pScratch2;
;;;138    
;;;139        /* pointer to take end of scratch2 buffer */
;;;140        pScr2 = pScratch2 + srcBLen - 1;
;;;141    
;;;142        /* points to smaller length sequence */
;;;143        px = pIn2;
;;;144    
;;;145        /* Apply loop unrolling and do 4 Copies simultaneously. */
;;;146        k = srcBLen >> 2u;
;;;147    
;;;148        /* First part of the processing with loop unrolling copies 4 data points at a time.       
;;;149         ** a second loop below copies for the remaining 1 to 3 samples. */
;;;150        while(k > 0u)
;;;151        {
;;;152          /* copy second buffer in reversal manner */
;;;153          *pScr2-- = *px++;
;;;154          *pScr2-- = *px++;
;;;155          *pScr2-- = *px++;
;;;156          *pScr2-- = *px++;
;;;157    
;;;158          /* Decrement the loop counter */
;;;159          k--;
;;;160        }
;;;161    
;;;162        /* If the count is not a multiple of 4, copy remaining samples here.       
;;;163         ** No loop unrolling is used. */
;;;164        k = srcBLen % 0x4u;
;;;165    
;;;166        while(k > 0u)
;;;167        {
;;;168          /* copy second buffer in reversal manner for remaining samples */
;;;169          *pScr2-- = *px++;
;;;170    
;;;171          /* Decrement the loop counter */
;;;172          k--;
;;;173        }
;;;174    
;;;175        /* Initialze temporary scratch pointer */
;;;176        pScr1 = pScratch1;
;;;177    
;;;178        /* Fill (srcBLen - 1u) zeros in scratch buffer */
;;;179        arm_fill_q15(0, pScr1, (srcBLen - 1u));
;;;180    
;;;181        /* Update temporary scratch pointer */
;;;182        pScr1 += (srcBLen - 1u);
;;;183    
;;;184        /* Copy bigger length sequence(srcALen) samples in scratch1 buffer */
;;;185    
;;;186        /* Copy (srcALen) samples in scratch buffer */
;;;187        arm_copy_q15(pIn1, pScr1, srcALen);
;;;188    
;;;189        /* Update pointers */
;;;190        pScr1 += srcALen;
;;;191    
;;;192        /* Fill (srcBLen - 1u) zeros at end of scratch buffer */
;;;193        arm_fill_q15(0, pScr1, (srcBLen - 1u));
;;;194    
;;;195        /* Update pointer */
;;;196        pScr1 += (srcBLen - 1u);
;;;197    
;;;198        /* Initialization of pIn2 pointer */
;;;199        pIn2 = py;
;;;200    
;;;201        pScratch1 += firstIndex;
;;;202    
;;;203        pOut = pDst + firstIndex;
;;;204    
;;;205        /* Actual convolution process starts here */
;;;206        blkCnt = (numPoints) >> 2;
;;;207    
;;;208        while(blkCnt > 0)
;;;209        {
;;;210          /* Initialze temporary scratch pointer as scratch1 */
;;;211          pScr1 = pScratch1;
;;;212    
;;;213          /* Clear Accumlators */
;;;214          acc0 = 0;
;;;215          acc1 = 0;
;;;216          acc2 = 0;
;;;217          acc3 = 0;
;;;218    
;;;219          /* Read two samples from scratch1 buffer */
;;;220          x1 = *__SIMD32(pScr1)++;
;;;221    
;;;222          /* Read next two samples from scratch1 buffer */
;;;223          x2 = *__SIMD32(pScr1)++;
;;;224    
;;;225          tapCnt = (srcBLen) >> 2u;
;;;226    
;;;227          while(tapCnt > 0u)
;;;228          {
;;;229    
;;;230            /* Read four samples from smaller buffer */
;;;231            y1 = _SIMD32_OFFSET(pIn2);
;;;232            y2 = _SIMD32_OFFSET(pIn2 + 2u);
;;;233    
;;;234            /* multiply and accumlate */
;;;235            acc0 = __SMLALD(x1, y1, acc0);
;;;236            acc2 = __SMLALD(x2, y1, acc2);
;;;237    
;;;238            /* pack input data */
;;;239    #ifndef ARM_MATH_BIG_ENDIAN
;;;240            x3 = __PKHBT(x2, x1, 0);
;;;241    #else
;;;242            x3 = __PKHBT(x1, x2, 0);
;;;243    #endif
;;;244    
;;;245            /* multiply and accumlate */
;;;246            acc1 = __SMLALDX(x3, y1, acc1);
;;;247    
;;;248            /* Read next two samples from scratch1 buffer */
;;;249            x1 = _SIMD32_OFFSET(pScr1);
;;;250    
;;;251            /* multiply and accumlate */
;;;252            acc0 = __SMLALD(x2, y2, acc0);
;;;253            acc2 = __SMLALD(x1, y2, acc2);
;;;254    
;;;255            /* pack input data */
;;;256    #ifndef ARM_MATH_BIG_ENDIAN
;;;257            x3 = __PKHBT(x1, x2, 0);
;;;258    #else
;;;259            x3 = __PKHBT(x2, x1, 0);
;;;260    #endif
;;;261    
;;;262            acc3 = __SMLALDX(x3, y1, acc3);
;;;263            acc1 = __SMLALDX(x3, y2, acc1);
;;;264    
;;;265            x2 = _SIMD32_OFFSET(pScr1 + 2u);
;;;266    
;;;267    #ifndef ARM_MATH_BIG_ENDIAN
;;;268            x3 = __PKHBT(x2, x1, 0);
;;;269    #else
;;;270            x3 = __PKHBT(x1, x2, 0);
;;;271    #endif
;;;272    
;;;273            acc3 = __SMLALDX(x3, y2, acc3);
;;;274    
;;;275            /* update scratch pointers */
;;;276            pIn2 += 4u;
;;;277            pScr1 += 4u;
;;;278    
;;;279    
;;;280            /* Decrement the loop counter */
;;;281            tapCnt--;
;;;282          }
;;;283    
;;;284          /* Update scratch pointer for remaining samples of smaller length sequence */
;;;285          pScr1 -= 4u;
;;;286    
;;;287          /* apply same above for remaining samples of smaller length sequence */
;;;288          tapCnt = (srcBLen) & 3u;
;;;289    
;;;290          while(tapCnt > 0u)
;;;291          {
;;;292            /* accumlate the results */
;;;293            acc0 += (*pScr1++ * *pIn2);
;;;294            acc1 += (*pScr1++ * *pIn2);
;;;295            acc2 += (*pScr1++ * *pIn2);
;;;296            acc3 += (*pScr1++ * *pIn2++);
;;;297    
;;;298            pScr1 -= 3u;
;;;299    
;;;300            /* Decrement the loop counter */
;;;301            tapCnt--;
;;;302          }
;;;303    
;;;304          blkCnt--;
;;;305    
;;;306    
;;;307          /* Store the results in the accumulators in the destination buffer. */
;;;308    
;;;309    #ifndef  ARM_MATH_BIG_ENDIAN
;;;310    
;;;311          *__SIMD32(pOut)++ =
;;;312            __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
;;;313          *__SIMD32(pOut)++ =
;;;314            __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
;;;315    
;;;316    #else
;;;317    
;;;318          *__SIMD32(pOut)++ =
;;;319            __PKHBT(__SSAT((acc1 >> 15), 16), __SSAT((acc0 >> 15), 16), 16);
;;;320          *__SIMD32(pOut)++ =
;;;321            __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);
;;;322    
;;;323    #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;324    
;;;325          /* Initialization of inputB pointer */
;;;326          pIn2 = py;
;;;327    
;;;328          pScratch1 += 4u;
;;;329    
;;;330        }
;;;331    
;;;332    
;;;333        blkCnt = numPoints & 0x3;
;;;334    
;;;335        /* Calculate convolution for remaining samples of Bigger length sequence */
;;;336        while(blkCnt > 0)
;;;337        {
;;;338          /* Initialze temporary scratch pointer as scratch1 */
;;;339          pScr1 = pScratch1;
;;;340    
;;;341          /* Clear Accumlators */
;;;342          acc0 = 0;
;;;343    
;;;344          tapCnt = (srcBLen) >> 1u;
;;;345    
;;;346          while(tapCnt > 0u)
;;;347          {
;;;348    
;;;349            /* Read next two samples from scratch1 buffer */
;;;350            x1 = *__SIMD32(pScr1)++;
;;;351    
;;;352            /* Read two samples from smaller buffer */
;;;353            y1 = *__SIMD32(pIn2)++;
;;;354    
;;;355            acc0 = __SMLALD(x1, y1, acc0);
;;;356    
;;;357            /* Decrement the loop counter */
;;;358            tapCnt--;
;;;359          }
;;;360    
;;;361          tapCnt = (srcBLen) & 1u;
;;;362    
;;;363          /* apply same above for remaining samples of smaller length sequence */
;;;364          while(tapCnt > 0u)
;;;365          {
;;;366    
;;;367            /* accumlate the results */
;;;368            acc0 += (*pScr1++ * *pIn2++);
;;;369    
;;;370            /* Decrement the loop counter */
;;;371            tapCnt--;
;;;372          }
;;;373    
;;;374          blkCnt--;
;;;375    
;;;376          /* Store the result in the accumulator in the destination buffer. */
;;;377          *pOut++ = (q15_t) (__SSAT((acc0 >> 15), 16));
;;;378    
;;;379          /* Initialization of inputB pointer */
;;;380          pIn2 = py;
;;;381    
;;;382          pScratch1 += 1u;
;;;383    
;;;384        }
;;;385    
;;;386        /* set status as ARM_MATH_SUCCESS */
;;;387        status = ARM_MATH_SUCCESS;
;;;388    
;;;389      }
;;;390    
;;;391      /* Return to application */
;;;392      return (status);
;;;393    }
000022  b017              ADD      sp,sp,#0x5c
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.40|
000028  42a6              CMP      r6,r4                 ;114
00002a  d302              BCC      |L1.50|
00002c  4605              MOV      r5,r0                 ;117
00002e  4610              MOV      r0,r2                 ;120
000030  e003              B        |L1.58|
                  |L1.50|
000032  4615              MOV      r5,r2                 ;125
000034  4622              MOV      r2,r4                 ;131
000036  4634              MOV      r4,r6                 ;132
000038  4616              MOV      r6,r2                 ;133
                  |L1.58|
00003a  9115              STR      r1,[sp,#0x54]         ;140
00003c  08a2              LSRS     r2,r4,#2              ;146
00003e  eb010144          ADD      r1,r1,r4,LSL #1       ;140
000042  1e89              SUBS     r1,r1,#2              ;146
000044  9208              STR      r2,[sp,#0x20]         ;150
000046  e010              B        |L1.106|
                  |L1.72|
000048  f8303b02          LDRH     r3,[r0],#2            ;153
00004c  800b              STRH     r3,[r1,#0]            ;153
00004e  f830cb02          LDRH     r12,[r0],#2           ;154
000052  f821cc02          STRH     r12,[r1,#-2]          ;154
000056  f830cb02          LDRH     r12,[r0],#2           ;155
00005a  f821cc04          STRH     r12,[r1,#-4]          ;155
00005e  f830cb02          LDRH     r12,[r0],#2           ;156
000062  f821cc06          STRH     r12,[r1,#-6]          ;156
000066  3908              SUBS     r1,r1,#8              ;156
000068  1e52              SUBS     r2,r2,#1              ;156
                  |L1.106|
00006a  2a00              CMP      r2,#0                 ;150
00006c  d1ec              BNE      |L1.72|
00006e  f0040203          AND      r2,r4,#3              ;164
000072  920b              STR      r2,[sp,#0x2c]         ;166
000074  e005              B        |L1.130|
000076  bf00              NOP                            ;169
                  |L1.120|
000078  f8303b02          LDRH     r3,[r0],#2            ;169
00007c  f8213902          STRH     r3,[r1],#-2           ;169
000080  1e52              SUBS     r2,r2,#1              ;169
                  |L1.130|
000082  2a00              CMP      r2,#0                 ;166
000084  d1f8              BNE      |L1.120|
000086  46c8              MOV      r8,r9                 ;176
000088  1e62              SUBS     r2,r4,#1              ;179
00008a  4649              MOV      r1,r9                 ;179
00008c  2000              MOVS     r0,#0                 ;179
00008e  f7fffffe          BL       arm_fill_q15
000092  eb080044          ADD      r0,r8,r4,LSL #1       ;182
000096  1e80              SUBS     r0,r0,#2              ;182
000098  4680              MOV      r8,r0                 ;182
00009a  4601              MOV      r1,r0                 ;187
00009c  4632              MOV      r2,r6                 ;187
00009e  4628              MOV      r0,r5                 ;187
0000a0  f7fffffe          BL       arm_copy_q15
0000a4  eb080146          ADD      r1,r8,r6,LSL #1       ;190
0000a8  1e62              SUBS     r2,r4,#1              ;193
0000aa  2000              MOVS     r0,#0                 ;193
0000ac  f7fffffe          BL       arm_fill_q15
0000b0  eb090047          ADD      r0,r9,r7,LSL #1       ;201
0000b4  9023              STR      r0,[sp,#0x8c]         ;203
0000b6  eb0a0047          ADD      r0,r10,r7,LSL #1      ;203
0000ba  9014              STR      r0,[sp,#0x50]         ;206
0000bc  9822              LDR      r0,[sp,#0x88]         ;206
0000be  9915              LDR      r1,[sp,#0x54]         ;201
0000c0  0880              LSRS     r0,r0,#2              ;206
0000c2  9016              STR      r0,[sp,#0x58]         ;208
0000c4  e0a8              B        |L1.536|
                  |L1.198|
0000c6  2300              MOVS     r3,#0                 ;211
0000c8  9823              LDR      r0,[sp,#0x8c]         ;216
0000ca  9312              STR      r3,[sp,#0x48]         ;216
0000cc  930d              STR      r3,[sp,#0x34]         ;217
0000ce  9310              STR      r3,[sp,#0x40]         ;217
0000d0  9309              STR      r3,[sp,#0x24]         ;220
0000d2  f8506b04          LDR      r6,[r0],#4            ;220
0000d6  469b              MOV      r11,r3                ;214
0000d8  469e              MOV      lr,r3                 ;214
0000da  469a              MOV      r10,r3                ;215
0000dc  4699              MOV      r9,r3                 ;215
0000de  f8505b04          LDR      r5,[r0],#4            ;223
0000e2  9a08              LDR      r2,[sp,#0x20]         ;227
0000e4  e041              B        |L1.362|
0000e6  bf00              NOP                            ;231
                  |L1.232|
0000e8  f851cb04          LDR      r12,[r1],#4           ;231
0000ec  465a              MOV      r2,r11                ;235
0000ee  f8517b04          LDR      r7,[r1],#4            ;232
0000f2  4673              MOV      r3,lr                 ;235
0000f4  fbc623cc          SMLALD   r2,r3,r6,r12          ;235
0000f8  4693              MOV      r11,r2                ;235
0000fa  f8dd8048          LDR      r8,[sp,#0x48]         ;236
0000fe  9a0d              LDR      r2,[sp,#0x34]         ;236
000100  469e              MOV      lr,r3                 ;235
000102  fbc582cc          SMLALD   r8,r2,r5,r12          ;236
000106  eac50606          PKHBT    r6,r5,r6              ;240
00010a  920d              STR      r2,[sp,#0x34]         ;246
00010c  4652              MOV      r2,r10                ;246
00010e  464b              MOV      r3,r9                 ;246
000110  fbc623dc          SMLALDX  r2,r3,r6,r12          ;246
000114  4691              MOV      r9,r2                 ;246
000116  469a              MOV      r10,r3                ;246
000118  f8506b04          LDR      r6,[r0],#4            ;249
00011c  465a              MOV      r2,r11                ;252
00011e  4673              MOV      r3,lr                 ;252
000120  fbc523c7          SMLALD   r2,r3,r5,r7           ;252
000124  4693              MOV      r11,r2                ;252
000126  9a0d              LDR      r2,[sp,#0x34]         ;253
000128  469e              MOV      lr,r3                 ;252
00012a  9611              STR      r6,[sp,#0x44]         ;253
00012c  fbc682c7          SMLALD   r8,r2,r6,r7           ;253
000130  eac60505          PKHBT    r5,r6,r5              ;257
000134  f8cd8048          STR      r8,[sp,#0x48]         ;262
000138  920d              STR      r2,[sp,#0x34]         ;262
00013a  f8dd8024          LDR      r8,[sp,#0x24]         ;262
00013e  9a10              LDR      r2,[sp,#0x40]         ;262
000140  fbc528dc          SMLALDX  r2,r8,r5,r12          ;262
000144  4694              MOV      r12,r2                ;262
000146  464a              MOV      r2,r9                 ;263
000148  4653              MOV      r3,r10                ;263
00014a  fbc523d7          SMLALDX  r2,r3,r5,r7           ;263
00014e  f8505b04          LDR      r5,[r0],#4            ;265
000152  4692              MOV      r10,r2                ;263
000154  4699              MOV      r9,r3                 ;263
000156  eac50306          PKHBT    r3,r5,r6              ;268
00015a  4662              MOV      r2,r12                ;273
00015c  fbc328d7          SMLALDX  r2,r8,r3,r7           ;273
000160  f8cd8024          STR      r8,[sp,#0x24]         ;281
000164  9210              STR      r2,[sp,#0x40]         ;281
000166  9a13              LDR      r2,[sp,#0x4c]         ;281
000168  1e52              SUBS     r2,r2,#1              ;281
                  |L1.362|
00016a  9213              STR      r2,[sp,#0x4c]         ;225
00016c  2a00              CMP      r2,#0                 ;225
00016e  d1bb              BNE      |L1.232|
000170  3808              SUBS     r0,r0,#8              ;225
000172  9e0b              LDR      r6,[sp,#0x2c]         ;290
000174  e022              B        |L1.444|
                  |L1.374|
000176  f9307b02          LDRSH    r7,[r0],#2            ;293
00017a  f9312b02          LDRSH    r2,[r1],#2            ;293
00017e  465b              MOV      r3,r11                ;293
000180  4675              MOV      r5,lr                 ;293
000182  fbc73582          SMLALBB  r3,r5,r7,r2           ;293
000186  469b              MOV      r11,r3                ;293
000188  46ae              MOV      lr,r5                 ;293
00018a  f9b07000          LDRSH    r7,[r0,#0]            ;294
00018e  4653              MOV      r3,r10                ;294
000190  464d              MOV      r5,r9                 ;294
000192  fbc73582          SMLALBB  r3,r5,r7,r2           ;294
000196  469a              MOV      r10,r3                ;294
000198  46a9              MOV      r9,r5                 ;294
00019a  f9b07002          LDRSH    r7,[r0,#2]            ;295
00019e  9d0d              LDR      r5,[sp,#0x34]         ;295
0001a0  9b12              LDR      r3,[sp,#0x48]         ;295
0001a2  fbc73582          SMLALBB  r3,r5,r7,r2           ;295
0001a6  950d              STR      r5,[sp,#0x34]         ;296
0001a8  9312              STR      r3,[sp,#0x48]         ;296
0001aa  f9b07004          LDRSH    r7,[r0,#4]            ;296
0001ae  9d10              LDR      r5,[sp,#0x40]         ;296
0001b0  9b09              LDR      r3,[sp,#0x24]         ;296
0001b2  fbc75382          SMLALBB  r5,r3,r7,r2           ;296
0001b6  1e76              SUBS     r6,r6,#1              ;296
0001b8  9510              STR      r5,[sp,#0x40]         ;296
0001ba  9309              STR      r3,[sp,#0x24]         ;296
                  |L1.444|
0001bc  2e00              CMP      r6,#0                 ;290
0001be  d1da              BNE      |L1.374|
0001c0  9816              LDR      r0,[sp,#0x58]         ;304
0001c2  1e40              SUBS     r0,r0,#1              ;304
0001c4  9016              STR      r0,[sp,#0x58]         ;311
0001c6  ea4f30db          LSR      r0,r11,#15            ;311
0001ca  ea40404e          ORR      r0,r0,lr,LSL #17      ;311
0001ce  f300020f          SSAT     r2,#16,r0             ;311
0001d2  ea4f30da          LSR      r0,r10,#15            ;311
0001d6  ea404049          ORR      r0,r0,r9,LSL #17      ;311
0001da  f300000f          SSAT     r0,#16,r0             ;311
0001de  eac24100          PKHBT    r1,r2,r0,LSL #16      ;311
0001e2  9814              LDR      r0,[sp,#0x50]         ;311
0001e4  6001              STR      r1,[r0,#0]            ;311
0001e6  9912              LDR      r1,[sp,#0x48]         ;313
0001e8  9a0d              LDR      r2,[sp,#0x34]         ;313
0001ea  0bc9              LSRS     r1,r1,#15             ;313
0001ec  ea414142          ORR      r1,r1,r2,LSL #17      ;313
0001f0  f301030f          SSAT     r3,#16,r1             ;313
0001f4  9910              LDR      r1,[sp,#0x40]         ;313
0001f6  9a09              LDR      r2,[sp,#0x24]         ;313
0001f8  0bc9              LSRS     r1,r1,#15             ;313
0001fa  ea414142          ORR      r1,r1,r2,LSL #17      ;313
0001fe  f301010f          SSAT     r1,#16,r1             ;313
000202  eac34101          PKHBT    r1,r3,r1,LSL #16      ;313
000206  9814              LDR      r0,[sp,#0x50]         ;313
000208  6041              STR      r1,[r0,#4]            ;313
00020a  3008              ADDS     r0,r0,#8              ;313
00020c  9014              STR      r0,[sp,#0x50]         ;326
00020e  9823              LDR      r0,[sp,#0x8c]         ;328
000210  9915              LDR      r1,[sp,#0x54]         ;328
000212  3008              ADDS     r0,r0,#8              ;328
000214  9023              STR      r0,[sp,#0x8c]         ;208
000216  9816              LDR      r0,[sp,#0x58]         ;208
                  |L1.536|
000218  2800              CMP      r0,#0                 ;208
00021a  f47faf54          BNE      |L1.198|
00021e  9822              LDR      r0,[sp,#0x88]         ;333
000220  f0000603          AND      r6,r0,#3              ;333
000224  e028              B        |L1.632|
                  |L1.550|
000226  2000              MOVS     r0,#0                 ;339
000228  4602              MOV      r2,r0                 ;339
00022a  0865              LSRS     r5,r4,#1              ;344
00022c  9b23              LDR      r3,[sp,#0x8c]         ;346
00022e  e006              B        |L1.574|
                  |L1.560|
000230  f853cb04          LDR      r12,[r3],#4           ;350
000234  f8517b04          LDR      r7,[r1],#4            ;353
000238  fbcc02c7          SMLALD   r0,r2,r12,r7          ;355
00023c  1e6d              SUBS     r5,r5,#1              ;355
                  |L1.574|
00023e  2d00              CMP      r5,#0                 ;346
000240  d1f6              BNE      |L1.560|
000242  f0040501          AND      r5,r4,#1              ;361
000246  e006              B        |L1.598|
                  |L1.584|
000248  f933cb02          LDRSH    r12,[r3],#2           ;368
00024c  f9317b02          LDRSH    r7,[r1],#2            ;368
000250  fbcc0287          SMLALBB  r0,r2,r12,r7          ;368
000254  1e6d              SUBS     r5,r5,#1              ;368
                  |L1.598|
000256  2d00              CMP      r5,#0                 ;364
000258  d1f6              BNE      |L1.584|
00025a  0bc0              LSRS     r0,r0,#15             ;377
00025c  ea404042          ORR      r0,r0,r2,LSL #17      ;377
000260  f300010f          SSAT     r1,#16,r0             ;377
000264  9814              LDR      r0,[sp,#0x50]         ;377
000266  8001              STRH     r1,[r0,#0]            ;377
000268  9814              LDR      r0,[sp,#0x50]         ;377
00026a  9915              LDR      r1,[sp,#0x54]         ;382
00026c  1c80              ADDS     r0,r0,#2              ;377
00026e  9014              STR      r0,[sp,#0x50]         ;380
000270  9823              LDR      r0,[sp,#0x8c]         ;382
000272  1c80              ADDS     r0,r0,#2              ;382
000274  1e76              SUBS     r6,r6,#1              ;382
000276  9023              STR      r0,[sp,#0x8c]         ;382
                  |L1.632|
000278  2e00              CMP      r6,#0                 ;336
00027a  d1d4              BNE      |L1.550|
00027c  2000              MOVS     r0,#0                 ;387
00027e  e6d0              B        |L1.34|
;;;394    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_partial_opt_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_conv_partial_opt_q15_c_64ffdcb5____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___26_arm_conv_partial_opt_q15_c_64ffdcb5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_conv_partial_opt_q15_c_64ffdcb5____REVSH|
#line 144
|__asm___26_arm_conv_partial_opt_q15_c_64ffdcb5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_conv_partial_opt_q15_c_64ffdcb5____RRX|
#line 300
|__asm___26_arm_conv_partial_opt_q15_c_64ffdcb5____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
