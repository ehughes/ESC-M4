; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_fast_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_fast_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_fast_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_fast_q31.c]
                          THUMB

                          AREA ||i.arm_conv_fast_q31||, CODE, READONLY, ALIGN=2

                  arm_conv_fast_q31 PROC
;;;78     
;;;79     void arm_conv_fast_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;80       q31_t * pSrcA,
;;;81       uint32_t srcALen,
;;;82       q31_t * pSrcB,
;;;83       uint32_t srcBLen,
;;;84       q31_t * pDst)
;;;85     {
000004  b094              SUB      sp,sp,#0x50
;;;86       q31_t *pIn1;                                   /* inputA pointer */
;;;87       q31_t *pIn2;                                   /* inputB pointer */
;;;88       q31_t *pOut = pDst;                            /* output pointer */
000006  9921              LDR      r1,[sp,#0x84]
;;;89       q31_t *px;                                     /* Intermediate inputA pointer  */
;;;90       q31_t *py;                                     /* Intermediate inputB pointer  */
;;;91       q31_t *pSrc1, *pSrc2;                          /* Intermediate pointers */
;;;92       q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulator */
;;;93       q31_t x0, x1, x2, x3, c0;                      /* Temporary variables to hold state and coefficient values */
;;;94       uint32_t j, k, count, blkCnt, blockSize1, blockSize2, blockSize3;     /* loop counter */
;;;95     
;;;96       /* The algorithm implementation is based on the lengths of the inputs. */
;;;97       /* srcB is always made to slide across srcA. */
;;;98       /* So srcBLen is always considered as shorter or equal to srcALen */
;;;99       if(srcALen >= srcBLen)
000008  910e              STR      r1,[sp,#0x38]
00000a  9915              LDR      r1,[sp,#0x54]
00000c  4299              CMP      r1,r3
00000e  d302              BCC      |L1.22|
;;;100      {
;;;101        /* Initialization of inputA pointer */
;;;102        pIn1 = pSrcA;
;;;103    
;;;104        /* Initialization of inputB pointer */
;;;105        pIn2 = pSrcB;
000010  4690              MOV      r8,r2
000012  900c              STR      r0,[sp,#0x30]
000014  e004              B        |L1.32|
                  |L1.22|
;;;106      }
;;;107      else
;;;108      {
;;;109        /* Initialization of inputA pointer */
;;;110        pIn1 = pSrcB;
;;;111    
;;;112        /* Initialization of inputB pointer */
;;;113        pIn2 = pSrcA;
000016  4680              MOV      r8,r0
;;;114    
;;;115        /* srcBLen is always considered as shorter or equal to srcALen */
;;;116        j = srcBLen;
000018  4618              MOV      r0,r3
;;;117        srcBLen = srcALen;
00001a  460b              MOV      r3,r1
;;;118        srcALen = j;
00001c  920c              STR      r2,[sp,#0x30]
00001e  9015              STR      r0,[sp,#0x54]
                  |L1.32|
;;;119      }
;;;120    
;;;121      /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;122      /* The function is internally    
;;;123       * divided into three stages according to the number of multiplications that has to be    
;;;124       * taken place between inputA samples and inputB samples. In the first stage of the    
;;;125       * algorithm, the multiplications increase by one for every iteration.    
;;;126       * In the second stage of the algorithm, srcBLen number of multiplications are done.    
;;;127       * In the third stage of the algorithm, the multiplications decrease by one    
;;;128       * for every iteration. */
;;;129    
;;;130      /* The algorithm is implemented in three stages.    
;;;131         The loop counters of each stage is initiated here. */
;;;132      blockSize1 = srcBLen - 1u;
;;;133      blockSize2 = srcALen - (srcBLen - 1u);
000020  9815              LDR      r0,[sp,#0x54]
000022  1e5a              SUBS     r2,r3,#1              ;132
000024  1ac0              SUBS     r0,r0,r3
000026  1c40              ADDS     r0,r0,#1
000028  e9cd2011          STRD     r2,r0,[sp,#0x44]
;;;134      blockSize3 = blockSize1;
;;;135    
;;;136      /* --------------------------    
;;;137       * Initializations of stage1    
;;;138       * -------------------------*/
;;;139    
;;;140      /* sum = x[0] * y[0]    
;;;141       * sum = x[0] * y[1] + x[1] * y[0]    
;;;142       * ....    
;;;143       * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]    
;;;144       */
;;;145    
;;;146      /* In this stage the MAC operations are increased by 1 for every iteration.    
;;;147         The count variable holds the number of MAC operations performed */
;;;148      count = 1u;
00002c  f04f0901          MOV      r9,#1
;;;149    
;;;150      /* Working pointer of inputA */
;;;151      px = pIn1;
;;;152    
;;;153      /* Working pointer of inputB */
;;;154      py = pIn2;
000030  4641              MOV      r1,r8
;;;155    
;;;156    
;;;157      /* ------------------------    
;;;158       * Stage1 process    
;;;159       * ----------------------*/
;;;160    
;;;161      /* The first stage starts here */
;;;162      while(blockSize1 > 0u)
000032  980c              LDR      r0,[sp,#0x30]
000034  e035              B        |L1.162|
                  |L1.54|
;;;163      {
;;;164        /* Accumulator is made zero for every iteration */
;;;165        sum = 0;
000036  2600              MOVS     r6,#0
;;;166    
;;;167        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;168        k = count >> 2u;
000038  ea4f0499          LSR      r4,r9,#2
;;;169    
;;;170        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;171         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;172        while(k > 0u)
00003c  e018              B        |L1.112|
                  |L1.62|
;;;173        {
;;;174          /* x[0] * y[srcBLen - 1] */
;;;175          sum = (q31_t) ((((q63_t) sum << 32) +
00003e  c880              LDM      r0!,{r7}
000040  f8d1c000          LDR      r12,[r1,#0]
000044  fb57660c          SMMLA    r6,r7,r12,r6
;;;176                          ((q63_t) * px++ * (*py--))) >> 32);
;;;177    
;;;178          /* x[1] * y[srcBLen - 2] */
;;;179          sum = (q31_t) ((((q63_t) sum << 32) +
000048  c880              LDM      r0!,{r7}
00004a  f851cc04          LDR      r12,[r1,#-4]
00004e  fb57660c          SMMLA    r6,r7,r12,r6
;;;180                          ((q63_t) * px++ * (*py--))) >> 32);
;;;181    
;;;182          /* x[2] * y[srcBLen - 3] */
;;;183          sum = (q31_t) ((((q63_t) sum << 32) +
000052  f8507b08          LDR      r7,[r0],#8
000056  f851cc08          LDR      r12,[r1,#-8]
;;;184                          ((q63_t) * px++ * (*py--))) >> 32);
;;;185    
;;;186          /* x[3] * y[srcBLen - 4] */
;;;187          sum = (q31_t) ((((q63_t) sum << 32) +
;;;188                          ((q63_t) * px++ * (*py--))) >> 32);
;;;189    
;;;190          /* Decrement the loop counter */
;;;191          k--;
;;;192        }
;;;193    
;;;194        /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;195         ** No loop unrolling is used. */
;;;196        k = count % 0x4u;
;;;197    
;;;198        while(k > 0u)
;;;199        {
;;;200          /* Perform the multiply-accumulate */
;;;201          sum = (q31_t) ((((q63_t) sum << 32) +
;;;202                          ((q63_t) * px++ * (*py--))) >> 32);
;;;203    
;;;204          /* Decrement the loop counter */
;;;205          k--;
;;;206        }
;;;207    
;;;208        /* Store the result in the accumulator in the destination buffer. */
;;;209        *pOut++ = sum << 1;
;;;210    
;;;211        /* Update the inputA and inputB pointers for next MAC calculation */
;;;212        py = pIn2 + count;
;;;213        px = pIn1;
;;;214    
;;;215        /* Increment the MAC count */
;;;216        count++;
;;;217    
;;;218        /* Decrement the loop counter */
;;;219        blockSize1--;
;;;220      }
;;;221    
;;;222      /* --------------------------    
;;;223       * Initializations of stage2    
;;;224       * ------------------------*/
;;;225    
;;;226      /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]    
;;;227       * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]    
;;;228       * ....    
;;;229       * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]    
;;;230       */
;;;231    
;;;232      /* Working pointer of inputA */
;;;233      px = pIn1;
;;;234    
;;;235      /* Working pointer of inputB */
;;;236      pSrc2 = pIn2 + (srcBLen - 1u);
;;;237      py = pSrc2;
;;;238    
;;;239      /* count is index by which the pointer pIn1 to be incremented */
;;;240      count = 0u;
;;;241    
;;;242      /* -------------------    
;;;243       * Stage2 process    
;;;244       * ------------------*/
;;;245    
;;;246      /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.    
;;;247       * So, to loop unroll over blockSize2,    
;;;248       * srcBLen should be greater than or equal to 4 */
;;;249      if(srcBLen >= 4u)
;;;250      {
;;;251        /* Loop unroll over blockSize2, by 4 */
;;;252        blkCnt = blockSize2 >> 2u;
;;;253    
;;;254        while(blkCnt > 0u)
;;;255        {
;;;256          /* Set all accumulators to zero */
;;;257          acc0 = 0;
;;;258          acc1 = 0;
;;;259          acc2 = 0;
;;;260          acc3 = 0;
;;;261    
;;;262          /* read x[0], x[1], x[2] samples */
;;;263          x0 = *(px++);
;;;264          x1 = *(px++);
;;;265          x2 = *(px++);
;;;266    
;;;267          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;268          k = srcBLen >> 2u;
;;;269    
;;;270          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;271           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;272          do
;;;273          {
;;;274            /* Read y[srcBLen - 1] sample */
;;;275            c0 = *(py--);
;;;276    
;;;277            /* Read x[3] sample */
;;;278            x3 = *(px++);
;;;279    
;;;280            /* Perform the multiply-accumulates */
;;;281            /* acc0 +=  x[0] * y[srcBLen - 1] */
;;;282            acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;283    
;;;284            /* acc1 +=  x[1] * y[srcBLen - 1] */
;;;285            acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;286    
;;;287            /* acc2 +=  x[2] * y[srcBLen - 1] */
;;;288            acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;289    
;;;290            /* acc3 +=  x[3] * y[srcBLen - 1] */
;;;291            acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;292    
;;;293            /* Read y[srcBLen - 2] sample */
;;;294            c0 = *(py--);
;;;295    
;;;296            /* Read x[4] sample */
;;;297            x0 = *(px++);
;;;298    
;;;299            /* Perform the multiply-accumulate */
;;;300            /* acc0 +=  x[1] * y[srcBLen - 2] */
;;;301            acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;302            /* acc1 +=  x[2] * y[srcBLen - 2] */
;;;303            acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;304            /* acc2 +=  x[3] * y[srcBLen - 2] */
;;;305            acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;306            /* acc3 +=  x[4] * y[srcBLen - 2] */
;;;307            acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;308    
;;;309            /* Read y[srcBLen - 3] sample */
;;;310            c0 = *(py--);
;;;311    
;;;312            /* Read x[5] sample */
;;;313            x1 = *(px++);
;;;314    
;;;315            /* Perform the multiply-accumulates */
;;;316            /* acc0 +=  x[2] * y[srcBLen - 3] */
;;;317            acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;318            /* acc1 +=  x[3] * y[srcBLen - 3] */
;;;319            acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;320            /* acc2 +=  x[4] * y[srcBLen - 3] */
;;;321            acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;322            /* acc3 +=  x[5] * y[srcBLen - 3] */
;;;323            acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;324    
;;;325            /* Read y[srcBLen - 4] sample */
;;;326            c0 = *(py--);
;;;327    
;;;328            /* Read x[6] sample */
;;;329            x2 = *(px++);
;;;330    
;;;331            /* Perform the multiply-accumulates */
;;;332            /* acc0 +=  x[3] * y[srcBLen - 4] */
;;;333            acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;334            /* acc1 +=  x[4] * y[srcBLen - 4] */
;;;335            acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;336            /* acc2 +=  x[5] * y[srcBLen - 4] */
;;;337            acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;338            /* acc3 +=  x[6] * y[srcBLen - 4] */
;;;339            acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;340    
;;;341    
;;;342          } while(--k);
;;;343    
;;;344          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;345           ** No loop unrolling is used. */
;;;346          k = srcBLen % 0x4u;
;;;347    
;;;348          while(k > 0u)
;;;349          {
;;;350            /* Read y[srcBLen - 5] sample */
;;;351            c0 = *(py--);
;;;352    
;;;353            /* Read x[7] sample */
;;;354            x3 = *(px++);
;;;355    
;;;356            /* Perform the multiply-accumulates */
;;;357            /* acc0 +=  x[4] * y[srcBLen - 5] */
;;;358            acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;359            /* acc1 +=  x[5] * y[srcBLen - 5] */
;;;360            acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;361            /* acc2 +=  x[6] * y[srcBLen - 5] */
;;;362            acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;363            /* acc3 +=  x[7] * y[srcBLen - 5] */
;;;364            acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;365    
;;;366            /* Reuse the present samples for the next MAC */
;;;367            x0 = x1;
;;;368            x1 = x2;
;;;369            x2 = x3;
;;;370    
;;;371            /* Decrement the loop counter */
;;;372            k--;
;;;373          }
;;;374    
;;;375          /* Store the results in the accumulators in the destination buffer. */
;;;376          *pOut++ = (q31_t) (acc0 << 1);
;;;377          *pOut++ = (q31_t) (acc1 << 1);
;;;378          *pOut++ = (q31_t) (acc2 << 1);
;;;379          *pOut++ = (q31_t) (acc3 << 1);
;;;380    
;;;381          /* Increment the pointer pIn1 index, count by 4 */
;;;382          count += 4u;
;;;383    
;;;384          /* Update the inputA and inputB pointers for next MAC calculation */
;;;385          px = pIn1 + count;
;;;386          py = pSrc2;
;;;387    
;;;388          /* Decrement the loop counter */
;;;389          blkCnt--;
;;;390        }
;;;391    
;;;392        /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.    
;;;393         ** No loop unrolling is used. */
;;;394        blkCnt = blockSize2 % 0x4u;
;;;395    
;;;396        while(blkCnt > 0u)
;;;397        {
;;;398          /* Accumulator is made zero for every iteration */
;;;399          sum = 0;
;;;400    
;;;401          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;402          k = srcBLen >> 2u;
;;;403    
;;;404          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;405           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;406          while(k > 0u)
;;;407          {
;;;408            /* Perform the multiply-accumulates */
;;;409            sum = (q31_t) ((((q63_t) sum << 32) +
;;;410                            ((q63_t) * px++ * (*py--))) >> 32);
;;;411            sum = (q31_t) ((((q63_t) sum << 32) +
;;;412                            ((q63_t) * px++ * (*py--))) >> 32);
;;;413            sum = (q31_t) ((((q63_t) sum << 32) +
;;;414                            ((q63_t) * px++ * (*py--))) >> 32);
;;;415            sum = (q31_t) ((((q63_t) sum << 32) +
;;;416                            ((q63_t) * px++ * (*py--))) >> 32);
;;;417    
;;;418            /* Decrement the loop counter */
;;;419            k--;
;;;420          }
;;;421    
;;;422          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;423           ** No loop unrolling is used. */
;;;424          k = srcBLen % 0x4u;
;;;425    
;;;426          while(k > 0u)
;;;427          {
;;;428            /* Perform the multiply-accumulate */
;;;429            sum = (q31_t) ((((q63_t) sum << 32) +
;;;430                            ((q63_t) * px++ * (*py--))) >> 32);
;;;431    
;;;432            /* Decrement the loop counter */
;;;433            k--;
;;;434          }
;;;435    
;;;436          /* Store the result in the accumulator in the destination buffer. */
;;;437          *pOut++ = sum << 1;
;;;438    
;;;439          /* Increment the MAC count */
;;;440          count++;
;;;441    
;;;442          /* Update the inputA and inputB pointers for next MAC calculation */
;;;443          px = pIn1 + count;
;;;444          py = pSrc2;
;;;445    
;;;446          /* Decrement the loop counter */
;;;447          blkCnt--;
;;;448        }
;;;449      }
;;;450      else
;;;451      {
;;;452        /* If the srcBLen is not a multiple of 4,    
;;;453         * the blockSize2 loop cannot be unrolled by 4 */
;;;454        blkCnt = blockSize2;
;;;455    
;;;456        while(blkCnt > 0u)
;;;457        {
;;;458          /* Accumulator is made zero for every iteration */
;;;459          sum = 0;
;;;460    
;;;461          /* srcBLen number of MACS should be performed */
;;;462          k = srcBLen;
;;;463    
;;;464          while(k > 0u)
;;;465          {
;;;466            /* Perform the multiply-accumulate */
;;;467            sum = (q31_t) ((((q63_t) sum << 32) +
;;;468                            ((q63_t) * px++ * (*py--))) >> 32);
;;;469    
;;;470            /* Decrement the loop counter */
;;;471            k--;
;;;472          }
;;;473    
;;;474          /* Store the result in the accumulator in the destination buffer. */
;;;475          *pOut++ = sum << 1;
;;;476    
;;;477          /* Increment the MAC count */
;;;478          count++;
;;;479    
;;;480          /* Update the inputA and inputB pointers for next MAC calculation */
;;;481          px = pIn1 + count;
;;;482          py = pSrc2;
;;;483    
;;;484          /* Decrement the loop counter */
;;;485          blkCnt--;
;;;486        }
;;;487      }
;;;488    
;;;489    
;;;490      /* --------------------------    
;;;491       * Initializations of stage3    
;;;492       * -------------------------*/
;;;493    
;;;494      /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]    
;;;495       * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]    
;;;496       * ....    
;;;497       * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]    
;;;498       * sum +=  x[srcALen-1] * y[srcBLen-1]    
;;;499       */
;;;500    
;;;501      /* In this stage the MAC operations are decreased by 1 for every iteration.    
;;;502         The blockSize3 variable holds the number of MAC operations performed */
;;;503    
;;;504      /* Working pointer of inputA */
;;;505      pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
;;;506      px = pSrc1;
;;;507    
;;;508      /* Working pointer of inputB */
;;;509      pSrc2 = pIn2 + (srcBLen - 1u);
;;;510      py = pSrc2;
;;;511    
;;;512      /* -------------------    
;;;513       * Stage3 process    
;;;514       * ------------------*/
;;;515    
;;;516      while(blockSize3 > 0u)
;;;517      {
;;;518        /* Accumulator is made zero for every iteration */
;;;519        sum = 0;
;;;520    
;;;521        /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;522        k = blockSize3 >> 2u;
;;;523    
;;;524        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;525         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;526        while(k > 0u)
;;;527        {
;;;528          /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
;;;529          sum = (q31_t) ((((q63_t) sum << 32) +
;;;530                          ((q63_t) * px++ * (*py--))) >> 32);
;;;531    
;;;532          /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
;;;533          sum = (q31_t) ((((q63_t) sum << 32) +
;;;534                          ((q63_t) * px++ * (*py--))) >> 32);
;;;535    
;;;536          /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
;;;537          sum = (q31_t) ((((q63_t) sum << 32) +
;;;538                          ((q63_t) * px++ * (*py--))) >> 32);
;;;539    
;;;540          /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
;;;541          sum = (q31_t) ((((q63_t) sum << 32) +
;;;542                          ((q63_t) * px++ * (*py--))) >> 32);
;;;543    
;;;544          /* Decrement the loop counter */
;;;545          k--;
;;;546        }
;;;547    
;;;548        /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.    
;;;549         ** No loop unrolling is used. */
;;;550        k = blockSize3 % 0x4u;
;;;551    
;;;552        while(k > 0u)
;;;553        {
;;;554          /* Perform the multiply-accumulate */
;;;555          sum = (q31_t) ((((q63_t) sum << 32) +
;;;556                          ((q63_t) * px++ * (*py--))) >> 32);
;;;557    
;;;558          /* Decrement the loop counter */
;;;559          k--;
;;;560        }
;;;561    
;;;562        /* Store the result in the accumulator in the destination buffer. */
;;;563        *pOut++ = sum << 1;
;;;564    
;;;565        /* Update the inputA and inputB pointers for next MAC calculation */
;;;566        px = ++pSrc1;
;;;567        py = pSrc2;
;;;568    
;;;569        /* Decrement the loop counter */
;;;570        blockSize3--;
;;;571      }
;;;572    
;;;573    }
00005a  f1a1050c          SUB      r5,r1,#0xc
00005e  fb57660c          SMMLA    r6,r7,r12,r6          ;183
000062  f8507c04          LDR      r7,[r0,#-4]           ;187
000066  682d              LDR      r5,[r5,#0]            ;187
000068  fb576605          SMMLA    r6,r7,r5,r6           ;187
00006c  3910              SUBS     r1,r1,#0x10           ;187
00006e  1e64              SUBS     r4,r4,#1              ;187
                  |L1.112|
000070  2c00              CMP      r4,#0                 ;172
000072  d1e4              BNE      |L1.62|
000074  f0090403          AND      r4,r9,#3              ;196
000078  e005              B        |L1.134|
                  |L1.122|
00007a  c820              LDM      r0!,{r5}              ;201
00007c  f8517904          LDR      r7,[r1],#-4           ;201
000080  fb556607          SMMLA    r6,r5,r7,r6           ;201
000084  1e64              SUBS     r4,r4,#1              ;201
                  |L1.134|
000086  2c00              CMP      r4,#0                 ;198
000088  d1f7              BNE      |L1.122|
00008a  980e              LDR      r0,[sp,#0x38]         ;209
00008c  0071              LSLS     r1,r6,#1              ;209
00008e  6001              STR      r1,[r0,#0]            ;209
000090  980e              LDR      r0,[sp,#0x38]         ;209
000092  eb080189          ADD      r1,r8,r9,LSL #2       ;212
000096  1d00              ADDS     r0,r0,#4              ;209
000098  900e              STR      r0,[sp,#0x38]         ;213
00009a  980c              LDR      r0,[sp,#0x30]         ;216
00009c  f1090901          ADD      r9,r9,#1              ;216
0000a0  1e52              SUBS     r2,r2,#1              ;216
                  |L1.162|
0000a2  2a00              CMP      r2,#0                 ;162
0000a4  d1c7              BNE      |L1.54|
0000a6  eb080183          ADD      r1,r8,r3,LSL #2       ;236
0000aa  9113              STR      r1,[sp,#0x4c]         ;236
0000ac  1f09              SUBS     r1,r1,#4              ;236
0000ae  9202              STR      r2,[sp,#8]            ;249
0000b0  910f              STR      r1,[sp,#0x3c]         ;249
0000b2  2b04              CMP      r3,#4                 ;249
0000b4  d37e              BCC      |L1.436|
0000b6  9a12              LDR      r2,[sp,#0x48]         ;252
0000b8  0892              LSRS     r2,r2,#2              ;252
0000ba  e091              B        |L1.480|
                  |L1.188|
0000bc  c820              LDM      r0!,{r5}              ;263
0000be  2600              MOVS     r6,#0                 ;257
0000c0  e8f02402          LDRD     r2,r4,[r0],#8         ;263
0000c4  ea4f0c93          LSR      r12,r3,#2             ;268
0000c8  46b2              MOV      r10,r6                ;258
0000ca  46b3              MOV      r11,r6                ;259
0000cc  4637              MOV      r7,r6                 ;260
0000ce  f8cdc034          STR      r12,[sp,#0x34]        ;268
0000d2  bf00              NOP                            ;275
                  |L1.212|
0000d4  f1a10904          SUB      r9,r1,#4              ;275
0000d8  f8d1c000          LDR      r12,[r1,#0]           ;275
0000dc  f8cd902c          STR      r9,[sp,#0x2c]         ;278
0000e0  f8508b04          LDR      r8,[r0],#4            ;278
0000e4  fb55690c          SMMLA    r9,r5,r12,r6          ;282
0000e8  f8cd9010          STR      r9,[sp,#0x10]         ;285
0000ec  fb52a90c          SMMLA    r9,r2,r12,r10         ;285
0000f0  f8cd901c          STR      r9,[sp,#0x1c]         ;288
0000f4  fb54b90c          SMMLA    r9,r4,r12,r11         ;288
0000f8  fb587b0c          SMMLA    r11,r8,r12,r7         ;291
0000fc  f8cd9018          STR      r9,[sp,#0x18]         ;294
000100  f8dd902c          LDR      r9,[sp,#0x2c]         ;294
000104  c820              LDM      r0!,{r5}              ;297
000106  f8d96000          LDR      r6,[r9,#0]            ;301
00010a  f8dd9010          LDR      r9,[sp,#0x10]         ;301
00010e  fb529706          SMMLA    r7,r2,r6,r9           ;301
000112  f8dd901c          LDR      r9,[sp,#0x1c]         ;303
000116  fb549e06          SMMLA    lr,r4,r6,r9           ;303
00011a  f8dd9018          LDR      r9,[sp,#0x18]         ;305
00011e  fb589c06          SMMLA    r12,r8,r6,r9          ;305
000122  fb55bb06          SMMLA    r11,r5,r6,r11         ;307
000126  f8cdc018          STR      r12,[sp,#0x18]        ;310
00012a  c804              LDM      r0!,{r2}              ;313
00012c  f8516c08          LDR      r6,[r1,#-8]           ;310
000130  fb547a06          SMMLA    r10,r4,r6,r7          ;317
000134  fb58ec06          SMMLA    r12,r8,r6,lr          ;319
000138  f8cdc01c          STR      r12,[sp,#0x1c]        ;321
00013c  f8ddc018          LDR      r12,[sp,#0x18]        ;321
000140  fb55cc06          SMMLA    r12,r5,r6,r12         ;321
000144  fb52be06          SMMLA    lr,r2,r6,r11          ;323
000148  f8cdc018          STR      r12,[sp,#0x18]        ;326
00014c  c810              LDM      r0!,{r4}              ;329
00014e  f8517c0c          LDR      r7,[r1,#-0xc]         ;326
000152  fb58a607          SMMLA    r6,r8,r7,r10          ;333
000156  f8ddc01c          LDR      r12,[sp,#0x1c]        ;335
00015a  fb55ca07          SMMLA    r10,r5,r7,r12         ;335
00015e  f8ddc018          LDR      r12,[sp,#0x18]        ;337
000162  fb52cb07          SMMLA    r11,r2,r7,r12         ;337
000166  fb54e707          SMMLA    r7,r4,r7,lr           ;339
00016a  f8ddc034          LDR      r12,[sp,#0x34]        ;342
00016e  f1a10110          SUB      r1,r1,#0x10           ;342
000172  f1bc0c01          SUBS     r12,r12,#1            ;342
000176  f8cdc034          STR      r12,[sp,#0x34]        ;342
00017a  d1ab              BNE      |L1.212|
00017c  f0030c03          AND      r12,r3,#3             ;346
000180  e011              B        |L1.422|
000182  bf00              NOP                            ;351
                  |L1.388|
000184  f851c904          LDR      r12,[r1],#-4          ;351
000188  f8508b04          LDR      r8,[r0],#4            ;354
00018c  fb55660c          SMMLA    r6,r5,r12,r6          ;358
000190  fb52aa0c          SMMLA    r10,r2,r12,r10        ;360
000194  fb54bb0c          SMMLA    r11,r4,r12,r11        ;362
000198  fb58770c          SMMLA    r7,r8,r12,r7          ;364
00019c  4615              MOV      r5,r2                 ;367
00019e  4622              MOV      r2,r4                 ;368
0001a0  4644              MOV      r4,r8                 ;369
0001a2  f1a90c01          SUB      r12,r9,#1             ;372
                  |L1.422|
0001a6  ea5f090c          MOVS     r9,r12                ;346
0001aa  d1eb              BNE      |L1.388|
0001ac  980e              LDR      r0,[sp,#0x38]         ;376
0001ae  0071              LSLS     r1,r6,#1              ;376
0001b0  6001              STR      r1,[r0,#0]            ;376
0001b2  e000              B        |L1.438|
                  |L1.436|
0001b4  e057              B        |L1.614|
                  |L1.438|
0001b6  980e              LDR      r0,[sp,#0x38]         ;377
0001b8  ea4f014a          LSL      r1,r10,#1             ;377
0001bc  6041              STR      r1,[r0,#4]            ;378
0001be  ea4f014b          LSL      r1,r11,#1             ;378
0001c2  6081              STR      r1,[r0,#8]            ;379
0001c4  0079              LSLS     r1,r7,#1              ;379
0001c6  60c1              STR      r1,[r0,#0xc]          ;379
0001c8  3010              ADDS     r0,r0,#0x10           ;379
0001ca  900e              STR      r0,[sp,#0x38]         ;382
0001cc  9802              LDR      r0,[sp,#8]            ;382
0001ce  1d00              ADDS     r0,r0,#4              ;382
0001d0  9002              STR      r0,[sp,#8]            ;385
0001d2  9902              LDR      r1,[sp,#8]            ;385
0001d4  980c              LDR      r0,[sp,#0x30]         ;385
0001d6  eb000081          ADD      r0,r0,r1,LSL #2       ;385
0001da  e9dd120f          LDRD     r1,r2,[sp,#0x3c]      ;385
0001de  1e52              SUBS     r2,r2,#1              ;385
                  |L1.480|
0001e0  9210              STR      r2,[sp,#0x40]         ;252
0001e2  2a00              CMP      r2,#0                 ;252
0001e4  f47faf6a          BNE      |L1.188|
0001e8  9a12              LDR      r2,[sp,#0x48]         ;394
0001ea  f0020503          AND      r5,r2,#3              ;394
0001ee  e037              B        |L1.608|
                  |L1.496|
0001f0  2200              MOVS     r2,#0                 ;399
0001f2  089c              LSRS     r4,r3,#2              ;402
0001f4  e018              B        |L1.552|
                  |L1.502|
0001f6  c840              LDM      r0!,{r6}              ;409
0001f8  f8d1c000          LDR      r12,[r1,#0]           ;409
0001fc  fb56220c          SMMLA    r2,r6,r12,r2          ;409
000200  c840              LDM      r0!,{r6}              ;411
000202  f851cc04          LDR      r12,[r1,#-4]          ;411
000206  fb56220c          SMMLA    r2,r6,r12,r2          ;411
00020a  f8506b08          LDR      r6,[r0],#8            ;413
00020e  f851cc08          LDR      r12,[r1,#-8]          ;413
000212  f1a1070c          SUB      r7,r1,#0xc
000216  fb56220c          SMMLA    r2,r6,r12,r2          ;413
00021a  f8506c04          LDR      r6,[r0,#-4]           ;415
00021e  683f              LDR      r7,[r7,#0]            ;415
000220  fb562207          SMMLA    r2,r6,r7,r2           ;415
000224  3910              SUBS     r1,r1,#0x10           ;415
000226  1e64              SUBS     r4,r4,#1              ;415
                  |L1.552|
000228  2c00              CMP      r4,#0                 ;406
00022a  d1e4              BNE      |L1.502|
00022c  f0030403          AND      r4,r3,#3              ;424
000230  e005              B        |L1.574|
                  |L1.562|
000232  c840              LDM      r0!,{r6}              ;429
000234  f8517904          LDR      r7,[r1],#-4           ;429
000238  fb562207          SMMLA    r2,r6,r7,r2           ;429
00023c  1e64              SUBS     r4,r4,#1              ;429
                  |L1.574|
00023e  2c00              CMP      r4,#0                 ;426
000240  d1f7              BNE      |L1.562|
000242  980e              LDR      r0,[sp,#0x38]         ;437
000244  0051              LSLS     r1,r2,#1              ;437
000246  6001              STR      r1,[r0,#0]            ;437
000248  980e              LDR      r0,[sp,#0x38]         ;437
00024a  1d00              ADDS     r0,r0,#4              ;437
00024c  900e              STR      r0,[sp,#0x38]         ;440
00024e  9802              LDR      r0,[sp,#8]            ;440
000250  1c40              ADDS     r0,r0,#1              ;440
000252  9002              STR      r0,[sp,#8]            ;443
000254  9902              LDR      r1,[sp,#8]            ;443
000256  980c              LDR      r0,[sp,#0x30]         ;443
000258  1e6d              SUBS     r5,r5,#1              ;444
00025a  eb000081          ADD      r0,r0,r1,LSL #2       ;443
00025e  990f              LDR      r1,[sp,#0x3c]         ;444
                  |L1.608|
000260  2d00              CMP      r5,#0                 ;396
000262  d1c5              BNE      |L1.496|
000264  e01d              B        |L1.674|
                  |L1.614|
000266  9c12              LDR      r4,[sp,#0x48]         ;456
000268  e019              B        |L1.670|
                  |L1.618|
00026a  2500              MOVS     r5,#0                 ;459
00026c  461a              MOV      r2,r3                 ;462
00026e  e005              B        |L1.636|
                  |L1.624|
000270  c840              LDM      r0!,{r6}              ;467
000272  f8517904          LDR      r7,[r1],#-4           ;467
000276  fb565507          SMMLA    r5,r6,r7,r5           ;467
00027a  1e52              SUBS     r2,r2,#1              ;467
                  |L1.636|
00027c  2a00              CMP      r2,#0                 ;464
00027e  d1f7              BNE      |L1.624|
000280  980e              LDR      r0,[sp,#0x38]         ;475
000282  0069              LSLS     r1,r5,#1              ;475
000284  6001              STR      r1,[r0,#0]            ;475
000286  980e              LDR      r0,[sp,#0x38]         ;475
000288  1d00              ADDS     r0,r0,#4              ;475
00028a  900e              STR      r0,[sp,#0x38]         ;478
00028c  9802              LDR      r0,[sp,#8]            ;478
00028e  1c40              ADDS     r0,r0,#1              ;478
000290  9002              STR      r0,[sp,#8]            ;481
000292  9902              LDR      r1,[sp,#8]            ;481
000294  980c              LDR      r0,[sp,#0x30]         ;481
000296  1e64              SUBS     r4,r4,#1              ;482
000298  eb000081          ADD      r0,r0,r1,LSL #2       ;481
00029c  990f              LDR      r1,[sp,#0x3c]         ;482
                  |L1.670|
00029e  2c00              CMP      r4,#0                 ;456
0002a0  d1e3              BNE      |L1.618|
                  |L1.674|
0002a2  9915              LDR      r1,[sp,#0x54]         ;505
0002a4  980c              LDR      r0,[sp,#0x30]         ;505
0002a6  9c11              LDR      r4,[sp,#0x44]         ;516
0002a8  eb000081          ADD      r0,r0,r1,LSL #2       ;505
0002ac  eba00183          SUB      r1,r0,r3,LSL #2       ;505
0002b0  1d09              ADDS     r1,r1,#4              ;505
0002b2  9b13              LDR      r3,[sp,#0x4c]         ;506
0002b4  4608              MOV      r0,r1                 ;506
0002b6  1f1b              SUBS     r3,r3,#4              ;506
0002b8  461a              MOV      r2,r3                 ;510
0002ba  e035              B        |L1.808|
                  |L1.700|
0002bc  2600              MOVS     r6,#0                 ;519
0002be  08a4              LSRS     r4,r4,#2              ;522
0002c0  e018              B        |L1.756|
                  |L1.706|
0002c2  c880              LDM      r0!,{r7}              ;529
0002c4  f8d2c000          LDR      r12,[r2,#0]           ;529
0002c8  fb57660c          SMMLA    r6,r7,r12,r6          ;529
0002cc  c880              LDM      r0!,{r7}              ;533
0002ce  f852cc04          LDR      r12,[r2,#-4]          ;533
0002d2  fb57660c          SMMLA    r6,r7,r12,r6          ;533
0002d6  f8507b08          LDR      r7,[r0],#8            ;537
0002da  f852cc08          LDR      r12,[r2,#-8]          ;537
0002de  f1a2050c          SUB      r5,r2,#0xc
0002e2  fb57660c          SMMLA    r6,r7,r12,r6          ;537
0002e6  f8507c04          LDR      r7,[r0,#-4]           ;541
0002ea  682d              LDR      r5,[r5,#0]            ;541
0002ec  fb576605          SMMLA    r6,r7,r5,r6           ;541
0002f0  3a10              SUBS     r2,r2,#0x10           ;541
0002f2  1e64              SUBS     r4,r4,#1              ;541
                  |L1.756|
0002f4  2c00              CMP      r4,#0                 ;526
0002f6  d1e4              BNE      |L1.706|
0002f8  9c11              LDR      r4,[sp,#0x44]         ;550
0002fa  f0040403          AND      r4,r4,#3              ;550
0002fe  e005              B        |L1.780|
                  |L1.768|
000300  c820              LDM      r0!,{r5}              ;555
000302  f8527904          LDR      r7,[r2],#-4           ;555
000306  fb556607          SMMLA    r6,r5,r7,r6           ;555
00030a  1e64              SUBS     r4,r4,#1              ;555
                  |L1.780|
00030c  2c00              CMP      r4,#0                 ;552
00030e  d1f7              BNE      |L1.768|
000310  980e              LDR      r0,[sp,#0x38]         ;563
000312  0072              LSLS     r2,r6,#1              ;563
000314  6002              STR      r2,[r0,#0]            ;563
000316  980e              LDR      r0,[sp,#0x38]         ;563
000318  9c11              LDR      r4,[sp,#0x44]         ;570
00031a  1d00              ADDS     r0,r0,#4              ;563
00031c  900e              STR      r0,[sp,#0x38]         ;566
00031e  1d08              ADDS     r0,r1,#4              ;566
000320  1e64              SUBS     r4,r4,#1              ;570
000322  4601              MOV      r1,r0                 ;566
000324  461a              MOV      r2,r3                 ;567
000326  9411              STR      r4,[sp,#0x44]         ;570
                  |L1.808|
000328  2c00              CMP      r4,#0                 ;516
00032a  d1c7              BNE      |L1.700|
00032c  b018              ADD      sp,sp,#0x60
00032e  e8bd8ff0          POP      {r4-r11,pc}
;;;574    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_fast_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_conv_fast_q31_c_ce6d9f35____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_conv_fast_q31_c_ce6d9f35____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_conv_fast_q31_c_ce6d9f35____REVSH|
#line 144
|__asm___19_arm_conv_fast_q31_c_ce6d9f35____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_conv_fast_q31_c_ce6d9f35____RRX|
#line 300
|__asm___19_arm_conv_fast_q31_c_ce6d9f35____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
