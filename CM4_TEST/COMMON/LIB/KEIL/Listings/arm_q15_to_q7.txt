; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_q15_to_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_q15_to_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_q15_to_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_q15_to_q7.c]
                          THUMB

                          AREA ||i.arm_q15_to_q7||, CODE, READONLY, ALIGN=1

                  arm_q15_to_q7 PROC
;;;70     
;;;71     void arm_q15_to_q7(
000000  b570              PUSH     {r4-r6,lr}
;;;72       q15_t * pSrc,
;;;73       q7_t * pDst,
;;;74       uint32_t blockSize)
;;;75     {
;;;76       q15_t *pIn = pSrc;                             /* Src pointer */
;;;77       uint32_t blkCnt;                               /* loop counter */
;;;78     
;;;79     #ifndef ARM_MATH_CM0_FAMILY
;;;80     
;;;81       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;82       q31_t in1, in2;
;;;83       q31_t out1, out2;
;;;84     
;;;85       /*loop Unrolling */
;;;86       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e011              B        |L1.42|
                  |L1.6|
;;;87     
;;;88       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;89        ** a second loop below computes the remaining 1 to 3 samples. */
;;;90       while(blkCnt > 0u)
;;;91       {
;;;92         /* C = (q7_t) A >> 8 */
;;;93         /* convert from q15 to q7 and then store the results in the destination buffer */
;;;94         in1 = *__SIMD32(pIn)++;
000006  6804              LDR      r4,[r0,#0]
;;;95         in2 = *__SIMD32(pIn)++;
000008  6845              LDR      r5,[r0,#4]
00000a  3008              ADDS     r0,r0,#8
;;;96     
;;;97     #ifndef ARM_MATH_BIG_ENDIAN
;;;98     
;;;99         out1 = __PKHTB(in2, in1, 16);
00000c  0c26              LSRS     r6,r4,#16
00000e  eac60605          PKHBT    r6,r6,r5
;;;100        out2 = __PKHBT(in2, in1, 16);
000012  eac54404          PKHBT    r4,r5,r4,LSL #16
;;;101    
;;;102    #else
;;;103    
;;;104        out1 = __PKHTB(in1, in2, 16);
;;;105        out2 = __PKHBT(in1, in2, 16);
;;;106    
;;;107    #endif //      #ifndef ARM_MATH_BIG_ENDIAN
;;;108    
;;;109        /* rotate packed value by 24 */
;;;110        out2 = ((uint32_t) out2 << 8) | ((uint32_t) out2 >> 24);
000016  ea4f6534          ROR      r5,r4,#24
;;;111    
;;;112        /* anding with 0xff00ff00 to get two 8 bit values */
;;;113        out1 = out1 & 0xFF00FF00;
00001a  f00624ff          AND      r4,r6,#0xff00ff00
;;;114        /* anding with 0x00ff00ff to get two 8 bit values */
;;;115        out2 = out2 & 0x00FF00FF;
00001e  f00515ff          AND      r5,r5,#0xff00ff
;;;116    
;;;117        /* oring two values(contains two 8 bit values) to get four packed 8 bit values */
;;;118        out1 = out1 | out2;
000022  432c              ORRS     r4,r4,r5
;;;119    
;;;120        /* store 4 samples at a time to destiantion buffer */
;;;121        *__SIMD32(pDst)++ = out1;
000024  f8414b04          STR      r4,[r1],#4
;;;122    
;;;123        /* Decrement the loop counter */
;;;124        blkCnt--;
000028  1e5b              SUBS     r3,r3,#1
                  |L1.42|
00002a  2b00              CMP      r3,#0                 ;90
00002c  d1eb              BNE      |L1.6|
;;;125      }
;;;126    
;;;127      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;128       ** No loop unrolling is used. */
;;;129      blkCnt = blockSize % 0x4u;
00002e  f0020203          AND      r2,r2,#3
;;;130    
;;;131    #else
;;;132    
;;;133      /* Run the below code for Cortex-M0 */
;;;134    
;;;135      /* Loop over blockSize number of values */
;;;136      blkCnt = blockSize;
;;;137    
;;;138    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;139    
;;;140      while(blkCnt > 0u)
000032  e005              B        |L1.64|
                  |L1.52|
;;;141      {
;;;142        /* C = (q7_t) A >> 8 */
;;;143        /* convert from q15 to q7 and then store the results in the destination buffer */
;;;144        *pDst++ = (q7_t) (*pIn++ >> 8);
000034  f8303b02          LDRH     r3,[r0],#2
000038  121b              ASRS     r3,r3,#8
00003a  f8013b01          STRB     r3,[r1],#1
;;;145    
;;;146        /* Decrement the loop counter */
;;;147        blkCnt--;
00003e  1e52              SUBS     r2,r2,#1
                  |L1.64|
000040  2a00              CMP      r2,#0                 ;140
000042  d1f7              BNE      |L1.52|
;;;148      }
;;;149    
;;;150    }
000044  bd70              POP      {r4-r6,pc}
;;;151    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_q15_to_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q15_to_q7_c_e86dcd05____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_q15_to_q7_c_e86dcd05____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q15_to_q7_c_e86dcd05____REVSH|
#line 144
|__asm___15_arm_q15_to_q7_c_e86dcd05____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q15_to_q7_c_e86dcd05____RRX|
#line 300
|__asm___15_arm_q15_to_q7_c_e86dcd05____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
