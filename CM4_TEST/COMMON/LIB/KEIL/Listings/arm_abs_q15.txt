; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_abs_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_abs_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_abs_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_abs_q15.c]
                          THUMB

                          AREA ||i.arm_abs_q15||, CODE, READONLY, ALIGN=1

                  arm_abs_q15 PROC
;;;64     
;;;65     void arm_abs_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;66       q15_t * pSrc,
;;;67       q15_t * pDst,
;;;68       uint32_t blockSize)
;;;69     {
;;;70       uint32_t blkCnt;                               /* loop counter */
;;;71     
;;;72     #ifndef ARM_MATH_CM0_FAMILY
;;;73       __SIMD32_TYPE *simd;
;;;74     
;;;75     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;76     
;;;77       q15_t in1;                                     /* Input value1 */
;;;78       q15_t in2;                                     /* Input value2 */
;;;79     
;;;80     
;;;81       /*loop Unrolling */
;;;82       blkCnt = blockSize >> 2u;
000002  0895              LSRS     r5,r2,#2
000004  2400              MOVS     r4,#0
000006  e024              B        |L1.82|
                  |L1.8|
;;;83     
;;;84       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;85        ** a second loop below computes the remaining 1 to 3 samples. */
;;;86       simd = __SIMD32_CONST(pDst);
;;;87       while(blkCnt > 0u)
;;;88       {
;;;89         /* C = |A| */
;;;90         /* Read two inputs */
;;;91         in1 = *pSrc++;
000008  f9303b02          LDRSH    r3,[r0],#2
;;;92         in2 = *pSrc++;
00000c  f9306b02          LDRSH    r6,[r0],#2
;;;93     
;;;94     
;;;95         /* Store the Absolute result in the destination buffer by packing the two values, in a single cycle */
;;;96     #ifndef  ARM_MATH_BIG_ENDIAN
;;;97         *simd++ =
000010  2b00              CMP      r3,#0
000012  dc02              BGT      |L1.26|
;;;98           __PKHBT(((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)),
000014  fad4f313          QSUB16   r3,r4,r3
000018  b21b              SXTH     r3,r3
                  |L1.26|
00001a  2e00              CMP      r6,#0
00001c  dc02              BGT      |L1.36|
00001e  fad4f616          QSUB16   r6,r4,r6
000022  b236              SXTH     r6,r6
                  |L1.36|
000024  eac34306          PKHBT    r3,r3,r6,LSL #16
000028  f8413b04          STR      r3,[r1],#4
;;;99                   ((in2 > 0) ? in2 : (q15_t)__QSUB16(0, in2)), 16);
;;;100    
;;;101    #else
;;;102    
;;;103    
;;;104        *simd++ =
;;;105          __PKHBT(((in2 > 0) ? in2 : (q15_t)__QSUB16(0, in2)),
;;;106                  ((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)), 16);
;;;107    
;;;108    #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;109    
;;;110        in1 = *pSrc++;
00002c  f9306b02          LDRSH    r6,[r0],#2
;;;111        in2 = *pSrc++;
000030  f9303b02          LDRSH    r3,[r0],#2
;;;112    
;;;113    
;;;114    #ifndef  ARM_MATH_BIG_ENDIAN
;;;115    
;;;116        *simd++ =
000034  2e00              CMP      r6,#0
000036  dc02              BGT      |L1.62|
;;;117          __PKHBT(((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)),
000038  fad4f616          QSUB16   r6,r4,r6
00003c  b236              SXTH     r6,r6
                  |L1.62|
00003e  2b00              CMP      r3,#0
000040  dc02              BGT      |L1.72|
000042  fad4f313          QSUB16   r3,r4,r3
000046  b21b              SXTH     r3,r3
                  |L1.72|
000048  eac64303          PKHBT    r3,r6,r3,LSL #16
00004c  f8413b04          STR      r3,[r1],#4
000050  1e6d              SUBS     r5,r5,#1
                  |L1.82|
000052  2d00              CMP      r5,#0                 ;87
000054  d1d8              BNE      |L1.8|
;;;118                  ((in2 > 0) ? in2 : (q15_t)__QSUB16(0, in2)), 16);
;;;119    
;;;120    #else
;;;121    
;;;122    
;;;123        *simd++ =
;;;124          __PKHBT(((in2 > 0) ? in2 : (q15_t)__QSUB16(0, in2)),
;;;125                  ((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)), 16);
;;;126    
;;;127    #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;128    
;;;129        /* Decrement the loop counter */
;;;130        blkCnt--;
;;;131      }
;;;132      pDst = (q15_t *)simd;
;;;133    	
;;;134      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;135       ** No loop unrolling is used. */
;;;136      blkCnt = blockSize % 0x4u;
000056  f0020303          AND      r3,r2,#3
;;;137    
;;;138      while(blkCnt > 0u)
00005a  e009              B        |L1.112|
                  |L1.92|
;;;139      {
;;;140        /* C = |A| */
;;;141        /* Read the input */
;;;142        in1 = *pSrc++;
00005c  f9302b02          LDRSH    r2,[r0],#2
;;;143    
;;;144        /* Calculate absolute value of input and then store the result in the destination buffer. */
;;;145        *pDst++ = (in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1);
000060  2a00              CMP      r2,#0
000062  dc02              BGT      |L1.106|
000064  fad4f212          QSUB16   r2,r4,r2
000068  b212              SXTH     r2,r2
                  |L1.106|
00006a  f8212b02          STRH     r2,[r1],#2
00006e  1e5b              SUBS     r3,r3,#1
                  |L1.112|
000070  2b00              CMP      r3,#0                 ;138
000072  d1f3              BNE      |L1.92|
;;;146    
;;;147        /* Decrement the loop counter */
;;;148        blkCnt--;
;;;149      }
;;;150    
;;;151    #else
;;;152    
;;;153      /* Run the below code for Cortex-M0 */
;;;154    
;;;155      q15_t in;                                      /* Temporary input variable */
;;;156    
;;;157      /* Initialize blkCnt with number of samples */
;;;158      blkCnt = blockSize;
;;;159    
;;;160      while(blkCnt > 0u)
;;;161      {
;;;162        /* C = |A| */
;;;163        /* Read the input */
;;;164        in = *pSrc++;
;;;165    
;;;166        /* Calculate absolute value of input and then store the result in the destination buffer. */
;;;167        *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
;;;168    
;;;169        /* Decrement the loop counter */
;;;170        blkCnt--;
;;;171      }
;;;172    
;;;173    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;174    
;;;175    }
000074  bd70              POP      {r4-r6,pc}
;;;176    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_abs_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_q15_c_a9778735____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_abs_q15_c_a9778735____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_q15_c_a9778735____REVSH|
#line 144
|__asm___13_arm_abs_q15_c_a9778735____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_abs_q15_c_a9778735____RRX|
#line 300
|__asm___13_arm_abs_q15_c_a9778735____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
