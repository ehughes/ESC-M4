; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_var_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_var_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_var_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_var_q15.c]
                          THUMB

                          AREA ||i.arm_var_q15||, CODE, READONLY, ALIGN=2

                  arm_var_q15 PROC
;;;74     
;;;75     void arm_var_q15(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;76       q15_t * pSrc,
;;;77       uint32_t blockSize,
;;;78       q15_t * pResult)
;;;79     {
;;;80     
;;;81       q31_t sum = 0;                                 /* Accumulator */
000004  2500              MOVS     r5,#0
000006  4690              MOV      r8,r2                 ;79
000008  460c              MOV      r4,r1                 ;79
00000a  4602              MOV      r2,r0                 ;79
00000c  4628              MOV      r0,r5
00000e  4629              MOV      r1,r5
000010  462b              MOV      r3,r5
;;;82       q31_t meanOfSquares, squareOfMean;             /* square of mean and mean of square */
;;;83       uint32_t blkCnt;                               /* loop counter */
;;;84       q63_t sumOfSquares = 0;                        /* Accumulator */
;;;85        
;;;86     #ifndef ARM_MATH_CM0_FAMILY
;;;87     
;;;88       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;89     
;;;90       q31_t in;                                      /* input value */
;;;91       q15_t in1;                                     /* input value */
;;;92     
;;;93     	if(blockSize == 1)
000012  2c01              CMP      r4,#1
000014  d001              BEQ      |L1.26|
;;;94     	{
;;;95     		*pResult = 0;
;;;96     		return;
;;;97     	}
;;;98     
;;;99       /*loop Unrolling */
;;;100      blkCnt = blockSize >> 2u;
000016  08a6              LSRS     r6,r4,#2
;;;101    
;;;102      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;103       ** a second loop below computes the remaining 1 to 3 samples. */
;;;104      while(blkCnt > 0u)
000018  e015              B        |L1.70|
                  |L1.26|
00001a  f8a83000          STRH     r3,[r8,#0]            ;95
                  |L1.30|
;;;105      {
;;;106        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;107        /* Compute Sum of squares of the input samples    
;;;108         * and then store the result in a temporary variable, sum. */
;;;109        in = *__SIMD32(pSrc)++;
;;;110        sum += ((in << 16) >> 16);
;;;111        sum += (in >> 16);
;;;112        sumOfSquares = __SMLALD(in, in, sumOfSquares);
;;;113        in = *__SIMD32(pSrc)++;
;;;114        sum += ((in << 16) >> 16);
;;;115        sum += (in >> 16);
;;;116        sumOfSquares = __SMLALD(in, in, sumOfSquares);
;;;117    
;;;118        /* Decrement the loop counter */
;;;119        blkCnt--;
;;;120      }
;;;121    
;;;122      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;123       ** No loop unrolling is used. */
;;;124      blkCnt = blockSize % 0x4u;
;;;125    
;;;126      while(blkCnt > 0u)
;;;127      {
;;;128        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;129        /* Compute Sum of squares of the input samples    
;;;130         * and then store the result in a temporary variable, sum. */
;;;131        in1 = *pSrc++;
;;;132        sumOfSquares = __SMLALD(in1, in1, sumOfSquares);
;;;133        sum += in1;
;;;134    
;;;135        /* Decrement the loop counter */
;;;136        blkCnt--;
;;;137      }
;;;138    
;;;139      /* Compute Mean of squares of the input samples    
;;;140       * and then store the result in a temporary variable, meanOfSquares. */
;;;141      meanOfSquares = (q31_t) (sumOfSquares / (q63_t)(blockSize - 1));
;;;142    
;;;143      /* Compute square of mean */
;;;144      squareOfMean = (q31_t)((q63_t)sum * sum / (q63_t)(blockSize * (blockSize - 1)));
;;;145    
;;;146      /* mean of the squares minus the square of the mean. */
;;;147      *pResult = (meanOfSquares - squareOfMean) >> 15;
;;;148    
;;;149    #else
;;;150    
;;;151      /* Run the below code for Cortex-M0 */
;;;152      q15_t in;                                      /* input value */
;;;153    
;;;154    	if(blockSize == 1)
;;;155    	{
;;;156    		*pResult = 0;
;;;157    		return;
;;;158    	}
;;;159    
;;;160      /* Loop over blockSize number of values */
;;;161      blkCnt = blockSize;
;;;162    
;;;163      while(blkCnt > 0u)
;;;164      {
;;;165        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;166        /* Compute Sum of squares of the input samples     
;;;167         * and then store the result in a temporary variable, sumOfSquares. */
;;;168        in = *pSrc++;
;;;169        sumOfSquares += (in * in);
;;;170    
;;;171        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;172        /* Compute sum of all input values and then store the result in a temporary variable, sum. */
;;;173        sum += in;
;;;174    
;;;175        /* Decrement the loop counter */
;;;176        blkCnt--;
;;;177      }
;;;178    
;;;179      /* Compute Mean of squares of the input samples     
;;;180       * and then store the result in a temporary variable, meanOfSquares. */
;;;181      meanOfSquares = (q31_t) (sumOfSquares / (q63_t)(blockSize - 1));
;;;182    
;;;183      /* Compute square of mean */
;;;184      squareOfMean = (q31_t)((q63_t)sum * sum / (q63_t)(blockSize * (blockSize - 1)));
;;;185    
;;;186      /* mean of the squares minus the square of the mean. */
;;;187      *pResult = (meanOfSquares - squareOfMean) >> 15;
;;;188    
;;;189    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;190    
;;;191    }
00001e  e8bd81f0          POP      {r4-r8,pc}
000022  bf00              NOP                            ;109
                  |L1.36|
000024  f8523b04          LDR      r3,[r2],#4            ;109
000028  fa05f583          SXTAH    r5,r5,r3              ;110
00002c  eb054523          ADD      r5,r5,r3,ASR #16      ;111
000030  fbc301c3          SMLALD   r0,r1,r3,r3           ;112
000034  f8523b04          LDR      r3,[r2],#4            ;113
000038  fa05f583          SXTAH    r5,r5,r3              ;114
00003c  eb054523          ADD      r5,r5,r3,ASR #16      ;115
000040  fbc301c3          SMLALD   r0,r1,r3,r3           ;116
000044  1e76              SUBS     r6,r6,#1              ;116
                  |L1.70|
000046  2e00              CMP      r6,#0                 ;104
000048  d1ec              BNE      |L1.36|
00004a  f0040603          AND      r6,r4,#3              ;124
00004e  e005              B        |L1.92|
                  |L1.80|
000050  f9323b02          LDRSH    r3,[r2],#2            ;131
000054  fbc301c3          SMLALD   r0,r1,r3,r3           ;132
000058  441d              ADD      r5,r5,r3              ;133
00005a  1e76              SUBS     r6,r6,#1              ;133
                  |L1.92|
00005c  2e00              CMP      r6,#0                 ;126
00005e  d1f7              BNE      |L1.80|
000060  1e66              SUBS     r6,r4,#1              ;141
000062  4632              MOV      r2,r6                 ;141
000064  2300              MOVS     r3,#0                 ;141
000066  f7fffffe          BL       __aeabi_ldivmod
00006a  4607              MOV      r7,r0                 ;141
00006c  fb850105          SMULL    r0,r1,r5,r5           ;144
000070  fb04f206          MUL      r2,r4,r6              ;144
000074  2300              MOVS     r3,#0                 ;144
000076  f7fffffe          BL       __aeabi_ldivmod
00007a  1a38              SUBS     r0,r7,r0              ;147
00007c  13c1              ASRS     r1,r0,#15             ;147
00007e  f8a81000          STRH     r1,[r8,#0]            ;147
000082  e7cc              B        |L1.30|
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_var_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_var_q15_c_b0fa7e6b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_var_q15_c_b0fa7e6b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_var_q15_c_b0fa7e6b____REVSH|
#line 144
|__asm___13_arm_var_q15_c_b0fa7e6b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_var_q15_c_b0fa7e6b____RRX|
#line 300
|__asm___13_arm_var_q15_c_b0fa7e6b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
