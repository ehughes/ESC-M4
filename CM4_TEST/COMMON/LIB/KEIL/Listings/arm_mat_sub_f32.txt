; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_sub_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_sub_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mat_sub_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_sub_f32.c]
                          THUMB

                          AREA ||i.arm_mat_sub_f32||, CODE, READONLY, ALIGN=1

                  arm_mat_sub_f32 PROC
;;;71     
;;;72     arm_status arm_mat_sub_f32(
000000  b510              PUSH     {r4,lr}
;;;73       const arm_matrix_instance_f32 * pSrcA,
;;;74       const arm_matrix_instance_f32 * pSrcB,
;;;75       arm_matrix_instance_f32 * pDst)
;;;76     {
;;;77       float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
000002  6843              LDR      r3,[r0,#4]
;;;78       float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
000004  6849              LDR      r1,[r1,#4]
;;;79       float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
000006  6852              LDR      r2,[r2,#4]
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       float32_t inA1, inA2, inB1, inB2, out1, out2;  /* temporary variables */
;;;84     
;;;85     #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;86     
;;;87       uint32_t numSamples;                           /* total number of elements in the matrix  */
;;;88       uint32_t blkCnt;                               /* loop counters */
;;;89       arm_status status;                             /* status of matrix subtraction */
;;;90     
;;;91     #ifdef ARM_MATH_MATRIX_CHECK
;;;92       /* Check for matrix mismatch condition */
;;;93       if((pSrcA->numRows != pSrcB->numRows) ||
;;;94          (pSrcA->numCols != pSrcB->numCols) ||
;;;95          (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
;;;96       {
;;;97         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;98         status = ARM_MATH_SIZE_MISMATCH;
;;;99       }
;;;100      else
;;;101    #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
;;;102      {
;;;103        /* Total number of samples in the input matrix */
;;;104        numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
000008  8804              LDRH     r4,[r0,#0]
00000a  8840              LDRH     r0,[r0,#2]
00000c  4344              MULS     r4,r0,r4
;;;105    
;;;106    #ifndef ARM_MATH_CM0_FAMILY
;;;107    
;;;108        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;109    
;;;110        /* Loop Unrolling */
;;;111        blkCnt = numSamples >> 2u;
00000e  08a0              LSRS     r0,r4,#2
000010  e023              B        |L1.90|
                  |L1.18|
;;;112    
;;;113        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;114         ** a second loop below computes the remaining 1 to 3 samples. */
;;;115        while(blkCnt > 0u)
;;;116        {
;;;117          /* C(m,n) = A(m,n) - B(m,n) */
;;;118          /* Subtract and then store the results in the destination buffer. */
;;;119          /* Read values from source A */
;;;120          inA1 = pIn1[0];
000012  ed930a00          VLDR     s0,[r3,#0]
;;;121    
;;;122          /* Read values from source B */
;;;123          inB1 = pIn2[0];
000016  edd10a00          VLDR     s1,[r1,#0]
;;;124    
;;;125          /* Read values from source A */
;;;126          inA2 = pIn1[1];
00001a  ed931a01          VLDR     s2,[r3,#4]
;;;127    
;;;128          /* out = sourceA - sourceB */
;;;129          out1 = inA1 - inB1;
00001e  ee700a60          VSUB.F32 s1,s0,s1
;;;130    
;;;131          /* Read values from source B */
;;;132          inB2 = pIn2[1];
000022  edd11a01          VLDR     s3,[r1,#4]
;;;133    
;;;134          /* Read values from source A */
;;;135          inA1 = pIn1[2];
000026  ed930a02          VLDR     s0,[r3,#8]
;;;136    
;;;137          /* out = sourceA - sourceB */
;;;138          out2 = inA2 - inB2;
00002a  ee711a61          VSUB.F32 s3,s2,s3
;;;139    
;;;140          /* Read values from source B */
;;;141          inB1 = pIn2[2];
00002e  ed911a02          VLDR     s2,[r1,#8]
;;;142    
;;;143          /* Store result in destination */
;;;144          pOut[0] = out1;
000032  edc20a00          VSTR     s1,[r2,#0]
;;;145          pOut[1] = out2;
000036  edc21a01          VSTR     s3,[r2,#4]
;;;146    
;;;147          /* Read values from source A */
;;;148          inA2 = pIn1[3];
00003a  edd30a03          VLDR     s1,[r3,#0xc]
;;;149    
;;;150          /* Read values from source B */
;;;151          inB2 = pIn2[3];
00003e  edd11a03          VLDR     s3,[r1,#0xc]
;;;152    
;;;153          /* out = sourceA - sourceB */
;;;154          out1 = inA1 - inB1;
000042  ee300a41          VSUB.F32 s0,s0,s2
;;;155    
;;;156    
;;;157          /* out = sourceA - sourceB */
;;;158          out2 = inA2 - inB2;
000046  ee700ae1          VSUB.F32 s1,s1,s3
;;;159    
;;;160          /* Store result in destination */
;;;161          pOut[2] = out1;
00004a  ed820a02          VSTR     s0,[r2,#8]
;;;162    
;;;163          /* Store result in destination */
;;;164          pOut[3] = out2;
00004e  edc20a03          VSTR     s1,[r2,#0xc]
;;;165    
;;;166    
;;;167          /* update pointers to process next sampels */
;;;168          pIn1 += 4u;
000052  3310              ADDS     r3,r3,#0x10
;;;169          pIn2 += 4u;
000054  3110              ADDS     r1,r1,#0x10
;;;170          pOut += 4u;
000056  3210              ADDS     r2,r2,#0x10
;;;171    
;;;172          /* Decrement the loop counter */
;;;173          blkCnt--;
000058  1e40              SUBS     r0,r0,#1
                  |L1.90|
00005a  2800              CMP      r0,#0                 ;115
00005c  d1d9              BNE      |L1.18|
;;;174        }
;;;175    
;;;176        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;177         ** No loop unrolling is used. */
;;;178        blkCnt = numSamples % 0x4u;
00005e  f0040003          AND      r0,r4,#3
;;;179    
;;;180    #else
;;;181    
;;;182        /* Run the below code for Cortex-M0 */
;;;183    
;;;184        /* Initialize blkCnt with number of samples */
;;;185        blkCnt = numSamples;
;;;186    
;;;187    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;188    
;;;189        while(blkCnt > 0u)
000062  e008              B        |L1.118|
                  |L1.100|
;;;190        {
;;;191          /* C(m,n) = A(m,n) - B(m,n) */
;;;192          /* Subtract and then store the results in the destination buffer. */
;;;193          *pOut++ = (*pIn1++) - (*pIn2++);
000064  ecb30a01          VLDM     r3!,{s0}
000068  ecf10a01          VLDM     r1!,{s1}
00006c  ee300a60          VSUB.F32 s0,s0,s1
000070  eca20a01          VSTM     r2!,{s0}
;;;194    
;;;195          /* Decrement the loop counter */
;;;196          blkCnt--;
000074  1e40              SUBS     r0,r0,#1
                  |L1.118|
000076  2800              CMP      r0,#0                 ;189
000078  d1f4              BNE      |L1.100|
;;;197        }
;;;198    
;;;199        /* Set status as ARM_MATH_SUCCESS */
;;;200        status = ARM_MATH_SUCCESS;
;;;201      }
;;;202    
;;;203      /* Return to application */
;;;204      return (status);
;;;205    }
00007a  bd10              POP      {r4,pc}
;;;206    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_sub_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_sub_f32_c_221ebca4____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_mat_sub_f32_c_221ebca4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_sub_f32_c_221ebca4____REVSH|
#line 144
|__asm___17_arm_mat_sub_f32_c_221ebca4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_sub_f32_c_221ebca4____RRX|
#line 300
|__asm___17_arm_mat_sub_f32_c_221ebca4____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
