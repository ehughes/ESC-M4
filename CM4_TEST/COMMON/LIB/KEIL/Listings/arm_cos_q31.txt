; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cos_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cos_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cos_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FastMathFunctions\arm_cos_q31.c]
                          THUMB

                          AREA ||i.arm_cos_q31||, CODE, READONLY, ALIGN=2

                  arm_cos_q31 PROC
;;;61     
;;;62     q31_t arm_cos_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;63       q31_t x)
;;;64     {
;;;65       q31_t cosVal;                                  /* Temporary variables for input, output */
;;;66       int32_t index;                                 /* Index variables */
;;;67       q31_t a, b;                                    /* Four nearest output values */
;;;68       q31_t fract;                                   /* Temporary values for fractional values */
;;;69     
;;;70       /* add 0.25 (pi/2) to read sine table */
;;;71       x = (uint32_t)x + 0x20000000;
000002  f1005000          ADD      r0,r0,#0x20000000
;;;72       if(x < 0)
000006  2800              CMP      r0,#0
000008  da01              BGE      |L1.14|
;;;73       {   /* convert negative numbers to corresponding positive ones */
;;;74           x = (uint32_t)x + 0x80000000;
00000a  f1004000          ADD      r0,r0,#0x80000000
                  |L1.14|
;;;75       }
;;;76     
;;;77       /* Calculate the nearest index */
;;;78       index = (uint32_t)x >> FAST_MATH_Q31_SHIFT;
00000e  0d81              LSRS     r1,r0,#22
;;;79     
;;;80       /* Calculation of fractional value */
;;;81       fract = (x - (index << FAST_MATH_Q31_SHIFT)) << 9;
000010  eba05081          SUB      r0,r0,r1,LSL #22
000014  0240              LSLS     r0,r0,#9
;;;82     
;;;83       /* Read two nearest values of input value from the sin table */
;;;84       a = sinTable_q31[index];
000016  4b0a              LDR      r3,|L1.64|
000018  f8532021          LDR      r2,[r3,r1,LSL #2]
;;;85       b = sinTable_q31[index+1];
00001c  1c49              ADDS     r1,r1,#1
00001e  f8533021          LDR      r3,[r3,r1,LSL #2]
;;;86     
;;;87       /* Linear interpolation process */
;;;88       cosVal = (q63_t)(0x80000000-fract)*a >> 32;
000022  f1c04100          RSB      r1,r0,#0x80000000
000026  fba17602          UMULL    r7,r6,r1,r2
00002a  2400              MOVS     r4,#0
00002c  17d5              ASRS     r5,r2,#31
00002e  fb046202          MLA      r2,r4,r2,r6
000032  fb012105          MLA      r1,r1,r5,r2
;;;89       cosVal = (q31_t)((((q63_t)cosVal << 32) + ((q63_t)fract*b)) >> 32);
000036  fb501003          SMMLA    r0,r0,r3,r1
;;;90     
;;;91       return cosVal << 1;
00003a  0040              LSLS     r0,r0,#1
;;;92     }
00003c  bdf0              POP      {r4-r7,pc}
;;;93     
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      sinTable_q31

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FastMathFunctions\\arm_cos_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_cos_q31_c_b72d2359____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_cos_q31_c_b72d2359____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_cos_q31_c_b72d2359____REVSH|
#line 144
|__asm___13_arm_cos_q31_c_b72d2359____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_cos_q31_c_b72d2359____RRX|
#line 300
|__asm___13_arm_cos_q31_c_b72d2359____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
