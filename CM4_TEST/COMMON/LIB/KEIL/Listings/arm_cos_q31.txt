; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cos_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cos_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cos_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FastMathFunctions\arm_cos_q31.c]
                          THUMB

                          AREA ||i.arm_cos_q31||, CODE, READONLY, ALIGN=2

                  arm_cos_q31 PROC
;;;61     
;;;62     q31_t arm_cos_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;63       q31_t x)
;;;64     {
000002  f1105000          ADDS     r0,r0,#0x20000000
000006  d501              BPL      |L1.12|
000008  f1004000          ADD      r0,r0,#0x80000000
                  |L1.12|
;;;65       q31_t cosVal;                                  /* Temporary variables for input, output */
;;;66       int32_t index;                                 /* Index variables */
;;;67       q31_t a, b;                                    /* Four nearest output values */
;;;68       q31_t fract;                                   /* Temporary values for fractional values */
;;;69     
;;;70       /* add 0.25 (pi/2) to read sine table */
;;;71       x = (uint32_t)x + 0x20000000;
;;;72       if(x < 0)
;;;73       {   /* convert negative numbers to corresponding positive ones */
;;;74           x = (uint32_t)x + 0x80000000;
;;;75       }
;;;76     
;;;77       /* Calculate the nearest index */
;;;78       index = (uint32_t)x >> FAST_MATH_Q31_SHIFT;
00000c  0d81              LSRS     r1,r0,#22
;;;79     
;;;80       /* Calculation of fractional value */
;;;81       fract = (x - (index << FAST_MATH_Q31_SHIFT)) << 9;
;;;82     
;;;83       /* Read two nearest values of input value from the sin table */
;;;84       a = sinTable_q31[index];
00000e  4b0b              LDR      r3,|L1.60|
000010  eba05081          SUB      r0,r0,r1,LSL #22      ;81
000014  0242              LSLS     r2,r0,#9              ;81
000016  f8530021          LDR      r0,[r3,r1,LSL #2]
;;;85       b = sinTable_q31[index+1];
00001a  eb030181          ADD      r1,r3,r1,LSL #2
;;;86     
;;;87       /* Linear interpolation process */
;;;88       cosVal = (q63_t)(0x80000000-fract)*a >> 32;
00001e  f1c24300          RSB      r3,r2,#0x80000000
000022  fba37600          UMULL    r7,r6,r3,r0
000026  2400              MOVS     r4,#0
000028  17c5              ASRS     r5,r0,#31
00002a  fb046000          MLA      r0,r4,r0,r6
00002e  6849              LDR      r1,[r1,#4]            ;85
000030  fb030005          MLA      r0,r3,r5,r0
;;;89       cosVal = (q31_t)((((q63_t)cosVal << 32) + ((q63_t)fract*b)) >> 32);
000034  fb520001          SMMLA    r0,r2,r1,r0
;;;90     
;;;91       return cosVal << 1;
000038  0040              LSLS     r0,r0,#1
;;;92     }
00003a  bdf0              POP      {r4-r7,pc}
;;;93     
                          ENDP

                  |L1.60|
                          DCD      sinTable_q31

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FastMathFunctions\\arm_cos_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_cos_q31_c_b72d2359____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_cos_q31_c_b72d2359____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_cos_q31_c_b72d2359____REVSH|
#line 144
|__asm___13_arm_cos_q31_c_b72d2359____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_cos_q31_c_b72d2359____RRX|
#line 300
|__asm___13_arm_cos_q31_c_b72d2359____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
