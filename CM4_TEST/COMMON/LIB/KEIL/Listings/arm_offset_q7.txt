; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_offset_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_offset_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_offset_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_offset_q7.c]
                          THUMB

                          AREA ||i.arm_offset_q7||, CODE, READONLY, ALIGN=2

                  arm_offset_q7 PROC
;;;65     
;;;66     void arm_offset_q7(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q7_t * pSrc,
;;;68       q7_t offset,
;;;69       q7_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q31_t offset_packed;                           /* Offset packed to 32 bit */
;;;78     
;;;79     
;;;80       /*loop Unrolling */
;;;81       blkCnt = blockSize >> 2u;
;;;82     
;;;83       /* Offset is packed to 32 bit in order to use SIMD32 for addition */
;;;84       offset_packed = __PACKq7(offset, offset, offset, offset);
000002  f64f76ff          MOV      r6,#0xffff
000006  089c              LSRS     r4,r3,#2              ;81
000008  b2cd              UXTB     r5,r1
00000a  ea062601          AND      r6,r6,r1,LSL #8
00000e  432e              ORRS     r6,r6,r5
000010  ea464505          ORR      r5,r6,r5,LSL #16
000014  ea456501          ORR      r5,r5,r1,LSL #24
000018  e007              B        |L1.42|
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C = A + offset */
;;;91         /* Add offset and then store the results in the destination bufferfor 4 samples at a time. */
;;;92         *__SIMD32(pDst)++ = __QADD8(*__SIMD32(pSrc)++, offset_packed);
00001a  bf00              NOP      
                  |L1.28|
00001c  f8506b04          LDR      r6,[r0],#4
000020  fa86f615          QADD8    r6,r6,r5
000024  f8426b04          STR      r6,[r2],#4
000028  1e64              SUBS     r4,r4,#1
                  |L1.42|
00002a  2c00              CMP      r4,#0                 ;88
00002c  d1f6              BNE      |L1.28|
;;;93     
;;;94         /* Decrement the loop counter */
;;;95         blkCnt--;
;;;96       }
;;;97     
;;;98       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;99        ** No loop unrolling is used. */
;;;100      blkCnt = blockSize % 0x4u;
00002e  f0030303          AND      r3,r3,#3
;;;101    
;;;102      while(blkCnt > 0u)
000032  e007              B        |L1.68|
                  |L1.52|
;;;103      {
;;;104        /* C = A + offset */
;;;105        /* Add offset and then store the result in the destination buffer. */
;;;106        *pDst++ = (q7_t) __SSAT(*pSrc++ + offset, 8);
000034  f9104b01          LDRSB    r4,[r0],#1
000038  1e5b              SUBS     r3,r3,#1
00003a  440c              ADD      r4,r4,r1
00003c  f3040407          SSAT     r4,#8,r4
000040  f8024b01          STRB     r4,[r2],#1
                  |L1.68|
000044  2b00              CMP      r3,#0                 ;102
000046  d1f5              BNE      |L1.52|
;;;107    
;;;108        /* Decrement the loop counter */
;;;109        blkCnt--;
;;;110      }
;;;111    
;;;112    #else
;;;113    
;;;114      /* Run the below code for Cortex-M0 */
;;;115    
;;;116      /* Initialize blkCnt with number of samples */
;;;117      blkCnt = blockSize;
;;;118    
;;;119      while(blkCnt > 0u)
;;;120      {
;;;121        /* C = A + offset */
;;;122        /* Add offset and then store the result in the destination buffer. */
;;;123        *pDst++ = (q7_t) __SSAT((q15_t) * pSrc++ + offset, 8);
;;;124    
;;;125        /* Decrement the loop counter */
;;;126        blkCnt--;
;;;127      }
;;;128    
;;;129    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;130    
;;;131    }
000048  bd70              POP      {r4-r6,pc}
;;;132    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_offset_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_offset_q7_c_6b47f6f2____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_offset_q7_c_6b47f6f2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_offset_q7_c_6b47f6f2____REVSH|
#line 144
|__asm___15_arm_offset_q7_c_6b47f6f2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_offset_q7_c_6b47f6f2____RRX|
#line 300
|__asm___15_arm_offset_q7_c_6b47f6f2____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
