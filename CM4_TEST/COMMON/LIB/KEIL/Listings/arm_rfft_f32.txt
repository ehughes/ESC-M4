; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_rfft_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rfft_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_rfft_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_rfft_f32.c]
                          THUMB

                          AREA ||i.arm_rfft_f32||, CODE, READONLY, ALIGN=1

                  arm_rfft_f32 PROC
;;;99     
;;;100    void arm_rfft_f32(
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;101      const arm_rfft_instance_f32 * S,
;;;102      float32_t * pSrc,
;;;103      float32_t * pDst)
;;;104    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;105      const arm_cfft_radix4_instance_f32 *S_CFFT = S->pCfft;
00000a  696c              LDR      r4,[r5,#0x14]
;;;106    
;;;107    
;;;108      /* Calculation of Real IFFT of input */
;;;109      if(S->ifftFlagR == 1u)
00000c  79a8              LDRB     r0,[r5,#6]
00000e  2801              CMP      r0,#1
000010  d009              BEQ      |L1.38|
;;;110      {
;;;111        /*  Real IFFT core process */
;;;112        arm_split_rifft_f32(pSrc, S->fftLenBy2, S->pTwiddleAReal,
;;;113                            S->pTwiddleBReal, pDst, S->twidCoefRModifier);
;;;114    
;;;115    
;;;116        /* Complex radix-4 IFFT process */
;;;117        arm_radix4_butterfly_inverse_f32(pDst, S_CFFT->fftLen,
;;;118                                         S_CFFT->pTwiddle,
;;;119                                         S_CFFT->twidCoefModifier,
;;;120                                         S_CFFT->onebyfftLen);
;;;121    
;;;122        /* Bit reversal process */
;;;123        if(S->bitReverseFlagR == 1u)
;;;124        {
;;;125          arm_bitreversal_f32(pDst, S_CFFT->fftLen,
;;;126                              S_CFFT->bitRevFactor, S_CFFT->pBitRevTable);
;;;127        }
;;;128      }
;;;129      else
;;;130      {
;;;131    
;;;132        /* Calculation of RFFT of input */
;;;133    
;;;134        /* Complex radix-4 FFT process */
;;;135        arm_radix4_butterfly_f32(pSrc, S_CFFT->fftLen,
000012  89a3              LDRH     r3,[r4,#0xc]
000014  8821              LDRH     r1,[r4,#0]
000016  4638              MOV      r0,r7
000018  6862              LDR      r2,[r4,#4]
00001a  f7fffffe          BL       arm_radix4_butterfly_f32
;;;136                                 S_CFFT->pTwiddle, S_CFFT->twidCoefModifier);
;;;137    
;;;138        /* Bit reversal process */
;;;139        if(S->bitReverseFlagR == 1u)
00001e  79e8              LDRB     r0,[r5,#7]
000020  2801              CMP      r0,#1
000022  d01d              BEQ      |L1.96|
000024  e022              B        |L1.108|
                  |L1.38|
000026  68a8              LDR      r0,[r5,#8]            ;112
000028  e9cd6000          STRD     r6,r0,[sp,#0]         ;112
00002c  88a9              LDRH     r1,[r5,#4]            ;112
00002e  e9d52303          LDRD     r2,r3,[r5,#0xc]       ;112
000032  4638              MOV      r0,r7                 ;112
000034  f7fffffe          BL       arm_split_rifft_f32
000038  ed940a04          VLDR     s0,[r4,#0x10]         ;117
00003c  89a3              LDRH     r3,[r4,#0xc]          ;117
00003e  8821              LDRH     r1,[r4,#0]            ;117
000040  4630              MOV      r0,r6                 ;117
000042  6862              LDR      r2,[r4,#4]            ;117
000044  f7fffffe          BL       arm_radix4_butterfly_inverse_f32
000048  79e8              LDRB     r0,[r5,#7]            ;123
00004a  2801              CMP      r0,#1                 ;123
00004c  d117              BNE      |L1.126|
00004e  89e2              LDRH     r2,[r4,#0xe]          ;125
000050  8821              LDRH     r1,[r4,#0]            ;125
000052  68a3              LDR      r3,[r4,#8]            ;125
000054  b002              ADD      sp,sp,#8              ;125
000056  4630              MOV      r0,r6                 ;125
000058  e8bd41f0          POP      {r4-r8,lr}            ;125
00005c  f7ffbffe          B.W      arm_bitreversal_f32
                  |L1.96|
;;;140        {
;;;141          arm_bitreversal_f32(pSrc, S_CFFT->fftLen,
000060  89e2              LDRH     r2,[r4,#0xe]
000062  8821              LDRH     r1,[r4,#0]
000064  4638              MOV      r0,r7
000066  68a3              LDR      r3,[r4,#8]
000068  f7fffffe          BL       arm_bitreversal_f32
                  |L1.108|
;;;142                              S_CFFT->bitRevFactor, S_CFFT->pBitRevTable);
;;;143        }
;;;144    
;;;145    
;;;146        /*  Real FFT core process */
;;;147        arm_split_rfft_f32(pSrc, S->fftLenBy2, S->pTwiddleAReal,
00006c  68a8              LDR      r0,[r5,#8]
00006e  e9cd6000          STRD     r6,r0,[sp,#0]
000072  88a9              LDRH     r1,[r5,#4]
000074  e9d52303          LDRD     r2,r3,[r5,#0xc]
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       arm_split_rfft_f32
                  |L1.126|
;;;148                           S->pTwiddleBReal, pDst, S->twidCoefRModifier);
;;;149      }
;;;150    
;;;151    }
00007e  e8bd81fc          POP      {r2-r8,pc}
;;;152    
                          ENDP


                          AREA ||i.arm_split_rfft_f32||, CODE, READONLY, ALIGN=2

                  arm_split_rfft_f32 PROC
;;;167    
;;;168    void arm_split_rfft_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;169      float32_t * pSrc,
;;;170      uint32_t fftLen,
;;;171      float32_t * pATable,
;;;172      float32_t * pBTable,
;;;173      float32_t * pDst,
;;;174      uint32_t modifier)
;;;175    {
000004  e9dd8909          LDRD     r8,r9,[sp,#0x24]
;;;176      uint32_t i;                                    /* Loop Counter */
;;;177      float32_t outR, outI;                          /* Temporary variables for output */
;;;178      float32_t *pCoefA, *pCoefB;                    /* Temporary pointers for twiddle factors */
;;;179      float32_t CoefA1, CoefA2, CoefB1;              /* Temporary variables for twiddle coefficients */
;;;180      float32_t *pDst1 = &pDst[2], *pDst2 = &pDst[(4u * fftLen) - 1u];      /* temp pointers for output buffer */
000008  f1080508          ADD      r5,r8,#8
00000c  f04f3aff          MOV      r10,#0xffffffff
000010  eb0a0481          ADD      r4,r10,r1,LSL #2
000014  eb080784          ADD      r7,r8,r4,LSL #2
;;;181      float32_t *pSrc1 = &pSrc[2], *pSrc2 = &pSrc[(2u * fftLen) - 1u];      /* temp pointers for input buffer */
000018  f1000408          ADD      r4,r0,#8
00001c  eb0a0641          ADD      r6,r10,r1,LSL #1
000020  eb000c86          ADD      r12,r0,r6,LSL #2
;;;182    
;;;183      /* Init coefficient pointers */
;;;184      pCoefA = &pATable[modifier * 2u];
000024  eb0202c9          ADD      r2,r2,r9,LSL #3
;;;185      pCoefB = &pBTable[modifier * 2u];
000028  eb0303c9          ADD      r3,r3,r9,LSL #3
;;;186    
;;;187      i = fftLen - 1u;
00002c  1e4e              SUBS     r6,r1,#1
00002e  e036              B        |L2.158|
                  |L2.48|
;;;188    
;;;189      while(i > 0u)
;;;190      {
;;;191        /*    
;;;192           outR = (pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1]    
;;;193           + pSrc[2 * n - 2 * i] * pBTable[2 * i] +    
;;;194           pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]);    
;;;195         */
;;;196    
;;;197        /* outI = (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] +    
;;;198           pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
;;;199           pIn[2 * n - 2 * i + 1] * pBTable[2 * i]); */
;;;200    
;;;201        /* read pATable[2 * i] */
;;;202        CoefA1 = *pCoefA++;
000030  ecf21a01          VLDM     r2!,{s3}
;;;203        /* pATable[2 * i + 1] */
;;;204        CoefA2 = *pCoefA;
000034  ed920a00          VLDR     s0,[r2,#0]
;;;205    
;;;206        /* pSrc[2 * i] * pATable[2 * i] */
;;;207        outR = *pSrc1 * CoefA1;
000038  edd40a00          VLDR     s1,[r4,#0]
00003c  ee201aa1          VMUL.F32 s2,s1,s3
;;;208        /* pSrc[2 * i] * CoefA2 */
;;;209        outI = *pSrc1++ * CoefA2;
000040  ee600a80          VMUL.F32 s1,s1,s0
000044  1d24              ADDS     r4,r4,#4
;;;210    
;;;211        /* (pSrc[2 * i + 1] + pSrc[2 * fftLen - 2 * i + 1]) * CoefA2 */
;;;212        outR -= (*pSrc1 + *pSrc2) * CoefA2;
000046  ed9c2a00          VLDR     s4,[r12,#0]
00004a  edd42a00          VLDR     s5,[r4,#0]
00004e  ee323a82          VADD.F32 s6,s5,s4
000052  ee031a40          VMLS.F32 s2,s6,s0
;;;213        /* pSrc[2 * i + 1] * CoefA1 */
;;;214        outI += *pSrc1++ * CoefA1;
000056  ee420aa1          VMLA.F32 s1,s5,s3
00005a  1d24              ADDS     r4,r4,#4
;;;215    
;;;216        CoefB1 = *pCoefB;
00005c  edd31a00          VLDR     s3,[r3,#0]
;;;217    
;;;218        /* pSrc[2 * fftLen - 2 * i + 1] * CoefB1 */
;;;219        outI -= *pSrc2-- * CoefB1;
000060  f1ac0c04          SUB      r12,r12,#4
000064  ee420a61          VMLS.F32 s1,s4,s3
;;;220        /* pSrc[2 * fftLen - 2 * i] * CoefA2 */
;;;221        outI -= *pSrc2 * CoefA2;
000068  ed9c2a00          VLDR     s4,[r12,#0]
00006c  ee420a40          VMLS.F32 s1,s4,s0
;;;222    
;;;223        /* pSrc[2 * fftLen - 2 * i] * CoefB1 */
;;;224        outR += *pSrc2-- * CoefB1;
000070  ee021a21          VMLA.F32 s2,s4,s3
000074  f1ac0c04          SUB      r12,r12,#4
;;;225    
;;;226        /* write output */
;;;227        *pDst1++ = outR;
000078  eca51a01          VSTM     r5!,{s2}
;;;228        *pDst1++ = outI;
00007c  ece50a01          VSTM     r5!,{s1}
;;;229    
;;;230        /* write complex conjugate output */
;;;231        *pDst2-- = -outI;
000080  eeb10a60          VNEG.F32 s0,s1
000084  ed870a00          VSTR     s0,[r7,#0]
000088  1f3f              SUBS     r7,r7,#4
;;;232        *pDst2-- = outR;
00008a  ed871a00          VSTR     s2,[r7,#0]
00008e  1f3f              SUBS     r7,r7,#4
;;;233    
;;;234        /* update coefficient pointer */
;;;235        pCoefB = pCoefB + (modifier * 2u);
000090  eb0303c9          ADD      r3,r3,r9,LSL #3
;;;236        pCoefA = pCoefA + ((modifier * 2u) - 1u);
000094  eb0a0b49          ADD      r11,r10,r9,LSL #1
000098  eb02028b          ADD      r2,r2,r11,LSL #2
;;;237    
;;;238        i--;
00009c  1e76              SUBS     r6,r6,#1
                  |L2.158|
00009e  2e00              CMP      r6,#0                 ;189
0000a0  d1c6              BNE      |L2.48|
;;;239    
;;;240      }
;;;241    
;;;242      pDst[2u * fftLen] = pSrc[0] - pSrc[1];
0000a2  ed900a00          VLDR     s0,[r0,#0]
0000a6  edd00a01          VLDR     s1,[r0,#4]
0000aa  eb0802c1          ADD      r2,r8,r1,LSL #3
0000ae  ee300a60          VSUB.F32 s0,s0,s1
0000b2  ed820a00          VSTR     s0,[r2,#0]
;;;243      pDst[(2u * fftLen) + 1u] = 0.0f;
0000b6  2201              MOVS     r2,#1
0000b8  eb020141          ADD      r1,r2,r1,LSL #1
0000bc  ed9f0a08          VLDR     s0,|L2.224|
0000c0  eb080181          ADD      r1,r8,r1,LSL #2
0000c4  ed810a00          VSTR     s0,[r1,#0]
;;;244    
;;;245      pDst[0] = pSrc[0] + pSrc[1];
0000c8  edd00a00          VLDR     s1,[r0,#0]
0000cc  ed901a01          VLDR     s2,[r0,#4]
0000d0  ee700a81          VADD.F32 s1,s1,s2
0000d4  edc80a00          VSTR     s1,[r8,#0]
;;;246      pDst[1] = 0.0f;
0000d8  ed880a01          VSTR     s0,[r8,#4]
;;;247    
;;;248    }
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;249    
                          ENDP

                  |L2.224|
0000e0  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.arm_split_rifft_f32||, CODE, READONLY, ALIGN=1

                  arm_split_rifft_f32 PROC
;;;261    
;;;262    void arm_split_rifft_f32(
000000  b5f0              PUSH     {r4-r7,lr}
;;;263      float32_t * pSrc,
;;;264      uint32_t fftLen,
;;;265      float32_t * pATable,
;;;266      float32_t * pBTable,
;;;267      float32_t * pDst,
;;;268      uint32_t modifier)
;;;269    {
000002  e9dd5605          LDRD     r5,r6,[sp,#0x14]
;;;270      float32_t outR, outI;                          /* Temporary variables for output */
;;;271      float32_t *pCoefA, *pCoefB;                    /* Temporary pointers for twiddle factors */
;;;272      float32_t CoefA1, CoefA2, CoefB1;              /* Temporary variables for twiddle coefficients */
;;;273      float32_t *pSrc1 = &pSrc[0], *pSrc2 = &pSrc[(2u * fftLen) + 1u];
000006  2401              MOVS     r4,#1
000008  eb040441          ADD      r4,r4,r1,LSL #1
00000c  eb000484          ADD      r4,r0,r4,LSL #2
000010  e030              B        |L3.116|
                  |L3.18|
;;;274    
;;;275      pCoefA = &pATable[0];
;;;276      pCoefB = &pBTable[0];
;;;277    
;;;278      while(fftLen > 0u)
;;;279      {
;;;280        /*    
;;;281           outR = (pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] +    
;;;282           pIn[2 * n - 2 * i] * pBTable[2 * i] -    
;;;283           pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]);    
;;;284    
;;;285           outI = (pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] -    
;;;286           pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
;;;287           pIn[2 * n - 2 * i + 1] * pBTable[2 * i]);    
;;;288    
;;;289         */
;;;290    
;;;291        CoefA1 = *pCoefA++;
000012  ecf20a01          VLDM     r2!,{s1}
;;;292        CoefA2 = *pCoefA;
000016  ed920a00          VLDR     s0,[r2,#0]
;;;293    
;;;294        /* outR = (pSrc[2 * i] * CoefA1 */
;;;295        outR = *pSrc1 * CoefA1;
00001a  ed901a00          VLDR     s2,[r0,#0]
00001e  ee612a20          VMUL.F32 s5,s2,s1
;;;296    
;;;297        /* - pSrc[2 * i] * CoefA2 */
;;;298        outI = -(*pSrc1++) * CoefA2;
000022  eeb11a41          VNEG.F32 s2,s2
000026  1d00              ADDS     r0,r0,#4
000028  ee212a00          VMUL.F32 s4,s2,s0
;;;299    
;;;300        /* (pSrc[2 * i + 1] + pSrc[2 * fftLen - 2 * i + 1]) * CoefA2 */
;;;301        outR += (*pSrc1 + *pSrc2) * CoefA2;
00002c  edd01a00          VLDR     s3,[r0,#0]
000030  ed941a00          VLDR     s2,[r4,#0]
000034  ee313a81          VADD.F32 s6,s3,s2
000038  ee432a00          VMLA.F32 s5,s6,s0
;;;302    
;;;303        /* pSrc[2 * i + 1] * CoefA1 */
;;;304        outI += (*pSrc1++) * CoefA1;
00003c  ee012aa0          VMLA.F32 s4,s3,s1
000040  1d00              ADDS     r0,r0,#4
;;;305    
;;;306        CoefB1 = *pCoefB;
000042  edd30a00          VLDR     s1,[r3,#0]
;;;307    
;;;308        /* - pSrc[2 * fftLen - 2 * i + 1] * CoefB1 */
;;;309        outI -= *pSrc2-- * CoefB1;
000046  1f24              SUBS     r4,r4,#4
000048  ee012a60          VMLS.F32 s4,s2,s1
;;;310    
;;;311        /* pSrc[2 * fftLen - 2 * i] * CoefB1 */
;;;312        outR += *pSrc2 * CoefB1;
00004c  ed941a00          VLDR     s2,[r4,#0]
000050  ee412a20          VMLA.F32 s5,s2,s1
;;;313    
;;;314        /* pSrc[2 * fftLen - 2 * i] * CoefA2 */
;;;315        outI += *pSrc2-- * CoefA2;
000054  1f24              SUBS     r4,r4,#4
000056  ee012a00          VMLA.F32 s4,s2,s0
;;;316    
;;;317        /* write output */
;;;318        *pDst++ = outR;
00005a  ece52a01          VSTM     r5!,{s5}
;;;319        *pDst++ = outI;
00005e  eca52a01          VSTM     r5!,{s4}
;;;320    
;;;321        /* update coefficient pointer */
;;;322        pCoefB = pCoefB + (modifier * 2u);
000062  eb0303c6          ADD      r3,r3,r6,LSL #3
;;;323        pCoefA = pCoefA + ((modifier * 2u) - 1u);
000066  f04f37ff          MOV      r7,#0xffffffff
00006a  eb070746          ADD      r7,r7,r6,LSL #1
00006e  eb020287          ADD      r2,r2,r7,LSL #2
;;;324    
;;;325        /* Decrement loop count */
;;;326        fftLen--;
000072  1e49              SUBS     r1,r1,#1
                  |L3.116|
000074  2900              CMP      r1,#0                 ;278
000076  d1cc              BNE      |L3.18|
;;;327      }
;;;328    
;;;329    }
000078  bdf0              POP      {r4-r7,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_rfft_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_f32_c_d0fad5f1____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_rfft_f32_c_d0fad5f1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_f32_c_d0fad5f1____REVSH|
#line 144
|__asm___14_arm_rfft_f32_c_d0fad5f1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_f32_c_d0fad5f1____RRX|
#line 300
|__asm___14_arm_rfft_f32_c_d0fad5f1____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
