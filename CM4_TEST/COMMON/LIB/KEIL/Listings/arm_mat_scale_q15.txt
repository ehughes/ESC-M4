; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_scale_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_scale_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_mat_scale_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_scale_q15.c]
                          THUMB

                          AREA ||i.arm_mat_scale_q15||, CODE, READONLY, ALIGN=2

                  arm_mat_scale_q15 PROC
;;;67     
;;;68     arm_status arm_mat_scale_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;69       const arm_matrix_instance_q15 * pSrc,
;;;70       q15_t scaleFract,
;;;71       int32_t shift,
;;;72       arm_matrix_instance_q15 * pDst)
;;;73     {
;;;74       q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
;;;75       q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
000002  6844              LDR      r4,[r0,#4]
;;;76       uint32_t numSamples;                           /* total number of elements in the matrix */
;;;77       int32_t totShift = 15 - shift;                 /* total shift to apply after scaling */
;;;78       uint32_t blkCnt;                               /* loop counters */
;;;79       arm_status status;                             /* status of matrix scaling     */
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       q15_t in1, in2, in3, in4;
;;;84       q31_t out1, out2, out3, out4;
;;;85       q31_t inA1, inA2;
;;;86     
;;;87     #endif //     #ifndef ARM_MATH_CM0_FAMILY
;;;88     
;;;89     #ifdef ARM_MATH_MATRIX_CHECK
;;;90       /* Check for matrix mismatch */
;;;91       if((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
;;;92       {
;;;93         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;94         status = ARM_MATH_SIZE_MISMATCH;
;;;95       }
;;;96       else
;;;97     #endif //    #ifdef ARM_MATH_MATRIX_CHECK
;;;98       {
;;;99         /* Total number of samples in the input matrix */
;;;100        numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
000004  f8b0c000          LDRH     r12,[r0,#0]
000008  8840              LDRH     r0,[r0,#2]
00000a  685b              LDR      r3,[r3,#4]            ;75
00000c  fb0cfc00          MUL      r12,r12,r0
000010  f1c2020f          RSB      r2,r2,#0xf            ;77
;;;101    
;;;102    #ifndef ARM_MATH_CM0_FAMILY
;;;103    
;;;104        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;105        /* Loop Unrolling */
;;;106        blkCnt = numSamples >> 2;
000014  ea4f0e9c          LSR      lr,r12,#2
000018  e022              B        |L1.96|
;;;107    
;;;108        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;109         ** a second loop below computes the remaining 1 to 3 samples. */
;;;110        while(blkCnt > 0u)
;;;111        {
;;;112          /* C(m,n) = A(m,n) * k */
;;;113          /* Scale, saturate and then store the results in the destination buffer. */
;;;114          /* Reading 2 inputs from memory */
;;;115          inA1 = _SIMD32_OFFSET(pIn);
00001a  bf00              NOP      
                  |L1.28|
00001c  f8545b04          LDR      r5,[r4],#4
;;;116          inA2 = _SIMD32_OFFSET(pIn + 2);
000020  f8547b04          LDR      r7,[r4],#4
;;;117    
;;;118          /* C = A * scale */
;;;119          /* Scale the inputs and then store the 2 results in the destination buffer        
;;;120           * in single cycle by packing the outputs */
;;;121          out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
000024  fb15f021          SMULTB   r0,r5,r1
;;;122          out2 = (q31_t) ((q15_t) inA1 * scaleFract);
000028  fb15f501          SMULBB   r5,r5,r1
;;;123          out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
00002c  fb17f621          SMULTB   r6,r7,r1
;;;124          out4 = (q31_t) ((q15_t) inA2 * scaleFract);
000030  fb17f701          SMULBB   r7,r7,r1
;;;125    
;;;126          out1 = out1 >> totShift;
000034  4110              ASRS     r0,r0,r2
;;;127          inA1 = _SIMD32_OFFSET(pIn + 4);
;;;128          out2 = out2 >> totShift;
000036  4115              ASRS     r5,r5,r2
;;;129          inA2 = _SIMD32_OFFSET(pIn + 6);
;;;130          out3 = out3 >> totShift;
000038  4116              ASRS     r6,r6,r2
;;;131          out4 = out4 >> totShift;
00003a  4117              ASRS     r7,r7,r2
;;;132    
;;;133          in1 = (q15_t) (__SSAT(out1, 16));
00003c  f300000f          SSAT     r0,#16,r0
;;;134          in2 = (q15_t) (__SSAT(out2, 16));
000040  f305050f          SSAT     r5,#16,r5
;;;135          in3 = (q15_t) (__SSAT(out3, 16));
000044  f306060f          SSAT     r6,#16,r6
;;;136          in4 = (q15_t) (__SSAT(out4, 16));
000048  f307070f          SSAT     r7,#16,r7
;;;137    
;;;138          _SIMD32_OFFSET(pOut) = __PKHBT(in2, in1, 16);
00004c  eac54000          PKHBT    r0,r5,r0,LSL #16
000050  f8430b04          STR      r0,[r3],#4
;;;139          _SIMD32_OFFSET(pOut + 2) = __PKHBT(in4, in3, 16);
000054  eac74006          PKHBT    r0,r7,r6,LSL #16
000058  f8430b04          STR      r0,[r3],#4
00005c  f1ae0e01          SUB      lr,lr,#1
                  |L1.96|
000060  f1be0f00          CMP      lr,#0                 ;110
000064  d1da              BNE      |L1.28|
;;;140    
;;;141          /* update pointers to process next sampels */
;;;142          pIn += 4u;
;;;143          pOut += 4u;
;;;144    
;;;145    
;;;146          /* Decrement the numSamples loop counter */
;;;147          blkCnt--;
;;;148        }
;;;149    
;;;150        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
;;;151         ** No loop unrolling is used. */
;;;152        blkCnt = numSamples % 0x4u;
000066  f00c0003          AND      r0,r12,#3
;;;153    
;;;154    #else
;;;155    
;;;156        /* Run the below code for Cortex-M0 */
;;;157    
;;;158        /* Initialize blkCnt with number of samples */
;;;159        blkCnt = numSamples;
;;;160    
;;;161    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;162    
;;;163        while(blkCnt > 0u)
00006a  e009              B        |L1.128|
                  |L1.108|
;;;164        {
;;;165          /* C(m,n) = A(m,n) * k */
;;;166          /* Scale, saturate and then store the results in the destination buffer. */
;;;167          *pOut++ =
00006c  f8345b02          LDRH     r5,[r4],#2
000070  fb15f501          SMULBB   r5,r5,r1
000074  4115              ASRS     r5,r5,r2
000076  f305050f          SSAT     r5,#16,r5
00007a  f8235b02          STRH     r5,[r3],#2
00007e  1e40              SUBS     r0,r0,#1
                  |L1.128|
000080  2800              CMP      r0,#0                 ;163
000082  d1f3              BNE      |L1.108|
;;;168            (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
;;;169    
;;;170          /* Decrement the numSamples loop counter */
;;;171          blkCnt--;
;;;172        }
;;;173        /* Set status as ARM_MATH_SUCCESS */
;;;174        status = ARM_MATH_SUCCESS;
;;;175      }
;;;176    
;;;177      /* Return to application */
;;;178      return (status);
;;;179    }
000084  bdf0              POP      {r4-r7,pc}
;;;180    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_scale_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_q15_c_94d523fa____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_mat_scale_q15_c_94d523fa____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_q15_c_94d523fa____REVSH|
#line 144
|__asm___19_arm_mat_scale_q15_c_94d523fa____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_q15_c_94d523fa____RRX|
#line 300
|__asm___19_arm_mat_scale_q15_c_94d523fa____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
