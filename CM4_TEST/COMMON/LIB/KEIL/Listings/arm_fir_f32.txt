; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_fir_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_f32.c]
                          THUMB

                          AREA ||i.arm_fir_f32||, CODE, READONLY, ALIGN=2

                  arm_fir_f32 PROC
;;;564    
;;;565    void arm_fir_f32(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;566    const arm_fir_instance_f32 * S,
;;;567    float32_t * pSrc,
;;;568    float32_t * pDst,
;;;569    uint32_t blockSize)
;;;570    {
000004  469a              MOV      r10,r3
000006  ed2d8b0c          VPUSH    {d8-d13}
;;;571       float32_t *pState = S->pState;                 /* State pointer */
;;;572       float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
;;;573       float32_t *pStateCurnt;                        /* Points to the current sample of the state */
;;;574       float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
;;;575       float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
;;;576       float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
;;;577       uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
;;;578       uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
;;;579       float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */
;;;580    
;;;581       /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
;;;582       /* pStateCurnt points to the location where the new input data should be written */
;;;583       pStateCurnt = &(S->pState[(numTaps - 1u)]);
;;;584    
;;;585       /* Apply loop unrolling and compute 8 output values simultaneously.  
;;;586        * The variables acc0 ... acc7 hold output values that are being computed:  
;;;587        *  
;;;588        *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
;;;589        *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
;;;590        *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
;;;591        *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
;;;592        */
;;;593       blkCnt = blockSize >> 3;
00000a  ea4f08da          LSR      r8,r10,#3
00000e  e9d04301          LDRD     r4,r3,[r0,#4]         ;570
000012  4699              MOV      r9,r3                 ;572
000014  8807              LDRH     r7,[r0,#0]            ;577
000016  f06f0303          MVN      r3,#3                 ;583
00001a  eb030387          ADD      r3,r3,r7,LSL #2       ;583
00001e  18e6              ADDS     r6,r4,r3              ;583
;;;594    
;;;595       /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
;;;596       ** a second loop below computes the remaining 1 to 7 samples. */
;;;597       while(blkCnt > 0u)
;;;598       {
;;;599          /* Copy four new input samples into the state buffer */
;;;600          *pStateCurnt++ = *pSrc++;
;;;601          *pStateCurnt++ = *pSrc++;
;;;602          *pStateCurnt++ = *pSrc++;
;;;603          *pStateCurnt++ = *pSrc++;
;;;604    
;;;605          /* Set all accumulators to zero */
;;;606          acc0 = 0.0f;
000020  ed9f9afe          VLDR     s18,|L1.1052|
000024  e1bf              B        |L1.934|
000026  bf00              NOP                            ;600
                  |L1.40|
000028  ed910a00          VLDR     s0,[r1,#0]            ;600
00002c  eef00a49          VMOV.F32 s1,s18
000030  ed860a00          VSTR     s0,[r6,#0]            ;600
000034  ed910a01          VLDR     s0,[r1,#4]            ;601
;;;607          acc1 = 0.0f;
000038  eeb01a60          VMOV.F32 s2,s1
00003c  ed860a01          VSTR     s0,[r6,#4]            ;601
000040  ed910a02          VLDR     s0,[r1,#8]            ;602
;;;608          acc2 = 0.0f;
000044  eef01a60          VMOV.F32 s3,s1
000048  ed860a02          VSTR     s0,[r6,#8]            ;602
00004c  ed910a03          VLDR     s0,[r1,#0xc]          ;603
;;;609          acc3 = 0.0f;
000050  eeb02a60          VMOV.F32 s4,s1
000054  ed860a03          VSTR     s0,[r6,#0xc]          ;603
;;;610          acc4 = 0.0f;
;;;611          acc5 = 0.0f;
;;;612          acc6 = 0.0f;
;;;613          acc7 = 0.0f;		
;;;614    
;;;615          /* Initialize state pointer */
;;;616          px = pState;
;;;617    
;;;618          /* Initialize coeff pointer */
;;;619          pb = (pCoeffs);		
;;;620       
;;;621          /* This is separated from the others to avoid 
;;;622           * a call to __aeabi_memmove which would be slower
;;;623           */
;;;624          *pStateCurnt++ = *pSrc++;
000058  ed910a04          VLDR     s0,[r1,#0x10]
00005c  eef03a60          VMOV.F32 s7,s1                 ;610
000060  ed860a04          VSTR     s0,[r6,#0x10]
;;;625          *pStateCurnt++ = *pSrc++;
000064  ed910a05          VLDR     s0,[r1,#0x14]
000068  eeb04a60          VMOV.F32 s8,s1                 ;611
00006c  ed860a05          VSTR     s0,[r6,#0x14]
;;;626          *pStateCurnt++ = *pSrc++;
000070  ed910a06          VLDR     s0,[r1,#0x18]
000074  eef04a60          VMOV.F32 s9,s1                 ;612
000078  ed860a06          VSTR     s0,[r6,#0x18]
;;;627          *pStateCurnt++ = *pSrc++;
00007c  ed910a07          VLDR     s0,[r1,#0x1c]
;;;628    
;;;629          /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
;;;630          x0 = *px++;
;;;631          x1 = *px++;
;;;632          x2 = *px++;
;;;633          x3 = *px++;
;;;634          x4 = *px++;
;;;635          x5 = *px++;
;;;636          x6 = *px++;
;;;637    
;;;638          /* Loop unrolling.  Process 8 taps at a time. */
;;;639          tapCnt = numTaps >> 3u;
000080  3120              ADDS     r1,r1,#0x20
000082  ed860a07          VSTR     s0,[r6,#0x1c]         ;627
000086  eeb05a60          VMOV.F32 s10,s1                ;613
00008a  464d              MOV      r5,r9                 ;619
00008c  ed947a00          VLDR     s14,[r4,#0]           ;630
000090  edd46a01          VLDR     s13,[r4,#4]           ;631
000094  ed940a02          VLDR     s0,[r4,#8]            ;632
000098  ed946a03          VLDR     s12,[r4,#0xc]         ;633
00009c  edd45a04          VLDR     s11,[r4,#0x10]        ;634
0000a0  ed943a05          VLDR     s6,[r4,#0x14]         ;635
0000a4  edd42a06          VLDR     s5,[r4,#0x18]         ;636
0000a8  ea4f0cd7          LSR      r12,r7,#3
0000ac  f104031c          ADD      r3,r4,#0x1c
0000b0  3620              ADDS     r6,r6,#0x20
;;;640          
;;;641          /* Loop over the number of taps.  Unroll by a factor of 8.  
;;;642           ** Repeat until we've computed numTaps-8 coefficients. */
;;;643          while(tapCnt > 0u)
0000b2  e123              B        |L1.764|
                  |L1.180|
;;;644          {
;;;645             /* Read the b[numTaps-1] coefficient */
;;;646             c0 = *(pb++);
0000b4  ed958a00          VLDR     s16,[r5,#0]
;;;647    
;;;648             /* Read x[n-numTaps-3] sample */
;;;649             x7 = *(px++);
0000b8  edd37a00          VLDR     s15,[r3,#0]
;;;650    
;;;651             /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
;;;652             p0 = x0 * c0;
0000bc  ee67aa08          VMUL.F32 s21,s14,s16
;;;653    
;;;654             /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
;;;655             p1 = x1 * c0;
0000c0  ee66ca88          VMUL.F32 s25,s13,s16
;;;656    
;;;657             /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
;;;658             p2 = x2 * c0;
0000c4  ee20ca08          VMUL.F32 s24,s0,s16
;;;659    
;;;660             /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
;;;661             p3 = x3 * c0;
0000c8  ee26ba08          VMUL.F32 s22,s12,s16
;;;662    
;;;663             /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
;;;664             p4 = x4 * c0;
0000cc  ee658a88          VMUL.F32 s17,s11,s16
;;;665    
;;;666             /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
;;;667             p5 = x5 * c0;
0000d0  ee639a08          VMUL.F32 s19,s6,s16
;;;668    
;;;669             /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
;;;670             p6 = x6 * c0;
0000d4  ee22aa88          VMUL.F32 s20,s5,s16
;;;671    
;;;672             /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
;;;673             p7 = x7 * c0;
0000d8  ee67ba88          VMUL.F32 s23,s15,s16
;;;674             
;;;675             /* Read the b[numTaps-2] coefficient */
;;;676             c0 = *(pb++);
0000dc  ed958a01          VLDR     s16,[r5,#4]
;;;677    
;;;678             /* Read x[n-numTaps-4] sample */
;;;679             x0 = *(px++);
;;;680             
;;;681             acc0 += p0;
0000e0  ee70aaaa          VADD.F32 s21,s1,s21
;;;682             acc1 += p1;
;;;683             acc2 += p2;
;;;684             acc3 += p3;
;;;685             acc4 += p4;
;;;686             acc5 += p5;
;;;687             acc6 += p6;
;;;688             acc7 += p7;
;;;689    
;;;690    
;;;691             /* Perform the multiply-accumulate */
;;;692             p0 = x1 * c0;
;;;693             p1 = x2 * c0;   
;;;694             p2 = x3 * c0;   
;;;695             p3 = x4 * c0;   
;;;696             p4 = x5 * c0;   
;;;697             p5 = x6 * c0;   
;;;698             p6 = x7 * c0;   
;;;699             p7 = x0 * c0;   
;;;700             
;;;701             /* Read the b[numTaps-3] coefficient */
;;;702             c0 = *(pb++);
0000e4  edd50a02          VLDR     s1,[r5,#8]
0000e8  ed937a01          VLDR     s14,[r3,#4]           ;679
0000ec  ee711a8c          VADD.F32 s3,s3,s24             ;683
0000f0  ee344a29          VADD.F32 s8,s8,s19             ;686
0000f4  ee322a0b          VADD.F32 s4,s4,s22             ;684
0000f8  ee744a8a          VADD.F32 s9,s9,s20             ;687
0000fc  ee355a2b          VADD.F32 s10,s10,s23           ;688
000100  ee733aa8          VADD.F32 s7,s7,s17             ;685
000104  ee26da88          VMUL.F32 s26,s13,s16           ;692
000108  ee311a2c          VADD.F32 s2,s2,s25             ;682
00010c  ee60ca08          VMUL.F32 s25,s0,s16            ;693
000110  ee66ba08          VMUL.F32 s23,s12,s16           ;694
000114  ee22aa88          VMUL.F32 s20,s5,s16            ;697
000118  ee658a88          VMUL.F32 s17,s11,s16           ;695
00011c  ee639a08          VMUL.F32 s19,s6,s16            ;696
000120  ee27ba88          VMUL.F32 s22,s15,s16           ;698
000124  ee27ca08          VMUL.F32 s24,s14,s16           ;699
;;;703    
;;;704             /* Read x[n-numTaps-5] sample */
;;;705             x1 = *(px++);
000128  edd36a02          VLDR     s13,[r3,#8]
;;;706             
;;;707             acc0 += p0;
00012c  ee3a8a8d          VADD.F32 s16,s21,s26
;;;708             acc1 += p1;
000130  ee311a2c          VADD.F32 s2,s2,s25
;;;709             acc2 += p2;
000134  ee711aab          VADD.F32 s3,s3,s23
;;;710             acc3 += p3;
;;;711             acc4 += p4;
;;;712             acc5 += p5;
000138  ee344a0a          VADD.F32 s8,s8,s20
00013c  ee322a28          VADD.F32 s4,s4,s17             ;710
000140  ee733aa9          VADD.F32 s7,s7,s19             ;711
;;;713             acc6 += p6;
000144  ee744a8b          VADD.F32 s9,s9,s22
;;;714             acc7 += p7;
000148  ee355a0c          VADD.F32 s10,s10,s24
;;;715    
;;;716             /* Perform the multiply-accumulates */      
;;;717             p0 = x2 * c0;
00014c  ee60ca20          VMUL.F32 s25,s0,s1
;;;718             p1 = x3 * c0;   
000150  ee66ba20          VMUL.F32 s23,s12,s1
;;;719             p2 = x4 * c0;   
000154  ee25aaa0          VMUL.F32 s20,s11,s1
;;;720             p3 = x5 * c0;   
000158  ee638a20          VMUL.F32 s17,s6,s1
;;;721             p4 = x6 * c0;   
00015c  ee629aa0          VMUL.F32 s19,s5,s1
;;;722             p5 = x7 * c0;   
000160  ee67aaa0          VMUL.F32 s21,s15,s1
;;;723             p6 = x0 * c0;   
000164  ee27ba20          VMUL.F32 s22,s14,s1
;;;724             p7 = x1 * c0;   
000168  ee26caa0          VMUL.F32 s24,s13,s1
;;;725    
;;;726             /* Read the b[numTaps-4] coefficient */
;;;727             c0 = *(pb++);
00016c  edd50a03          VLDR     s1,[r5,#0xc]
;;;728    
;;;729             /* Read x[n-numTaps-6] sample */
;;;730             x2 = *(px++);
000170  ed930a03          VLDR     s0,[r3,#0xc]
;;;731             
;;;732             acc0 += p0;
;;;733             acc1 += p1;
000174  ee311a2b          VADD.F32 s2,s2,s23
;;;734             acc2 += p2;
000178  ee711a8a          VADD.F32 s3,s3,s20
;;;735             acc3 += p3;
;;;736             acc4 += p4;
;;;737             acc5 += p5;
00017c  ee344a2a          VADD.F32 s8,s8,s21
;;;738             acc6 += p6;
000180  ee744a8b          VADD.F32 s9,s9,s22
;;;739             acc7 += p7;
000184  ee355a0c          VADD.F32 s10,s10,s24
000188  ee388a2c          VADD.F32 s16,s16,s25           ;732
00018c  ee322a28          VADD.F32 s4,s4,s17             ;735
000190  ee733aa9          VADD.F32 s7,s7,s19             ;736
;;;740    
;;;741             /* Perform the multiply-accumulates */      
;;;742             p0 = x3 * c0;
000194  ee66ca20          VMUL.F32 s25,s12,s1
;;;743             p1 = x4 * c0;   
000198  ee25caa0          VMUL.F32 s24,s11,s1
;;;744             p2 = x5 * c0;   
00019c  ee23ba20          VMUL.F32 s22,s6,s1
;;;745             p3 = x6 * c0;   
0001a0  ee628aa0          VMUL.F32 s17,s5,s1
;;;746             p4 = x7 * c0;   
0001a4  ee679aa0          VMUL.F32 s19,s15,s1
;;;747             p5 = x0 * c0;   
0001a8  ee27aa20          VMUL.F32 s20,s14,s1
;;;748             p6 = x1 * c0;   
0001ac  ee66aaa0          VMUL.F32 s21,s13,s1
;;;749             p7 = x2 * c0;   
0001b0  ee60ba20          VMUL.F32 s23,s0,s1
;;;750    
;;;751             /* Read the b[numTaps-4] coefficient */
;;;752             c0 = *(pb++);
0001b4  edd50a04          VLDR     s1,[r5,#0x10]
;;;753    
;;;754             /* Read x[n-numTaps-6] sample */
;;;755             x3 = *(px++);
;;;756             
;;;757             acc0 += p0;
0001b8  ee388a2c          VADD.F32 s16,s16,s25
;;;758             acc1 += p1;
0001bc  ee311a0c          VADD.F32 s2,s2,s24
;;;759             acc2 += p2;
0001c0  ee711a8b          VADD.F32 s3,s3,s22
;;;760             acc3 += p3;
0001c4  ee322a28          VADD.F32 s4,s4,s17
;;;761             acc4 += p4;
0001c8  ee733aa9          VADD.F32 s7,s7,s19
;;;762             acc5 += p5;
0001cc  ee344a0a          VADD.F32 s8,s8,s20
;;;763             acc6 += p6;
0001d0  ee744aaa          VADD.F32 s9,s9,s21
;;;764             acc7 += p7;
0001d4  ee355a2b          VADD.F32 s10,s10,s23
;;;765    
;;;766             /* Perform the multiply-accumulates */      
;;;767             p0 = x4 * c0;
0001d8  ee65caa0          VMUL.F32 s25,s11,s1
0001dc  ed936a04          VLDR     s12,[r3,#0x10]        ;755
;;;768             p1 = x5 * c0;   
0001e0  ee23ca20          VMUL.F32 s24,s6,s1
;;;769             p2 = x6 * c0;   
0001e4  ee22baa0          VMUL.F32 s22,s5,s1
;;;770             p3 = x7 * c0;   
0001e8  ee678aa0          VMUL.F32 s17,s15,s1
;;;771             p4 = x0 * c0;   
0001ec  ee679a20          VMUL.F32 s19,s14,s1
;;;772             p5 = x1 * c0;   
0001f0  ee26aaa0          VMUL.F32 s20,s13,s1
;;;773             p6 = x2 * c0;   
;;;774             p7 = x3 * c0;   
0001f4  ee66ba20          VMUL.F32 s23,s12,s1
0001f8  ee60aa20          VMUL.F32 s21,s0,s1             ;773
;;;775    
;;;776             /* Read the b[numTaps-4] coefficient */
;;;777             c0 = *(pb++);
0001fc  edd50a05          VLDR     s1,[r5,#0x14]
;;;778    
;;;779             /* Read x[n-numTaps-6] sample */
;;;780             x4 = *(px++);
;;;781             
;;;782             acc0 += p0;
;;;783             acc1 += p1;
;;;784             acc2 += p2;
;;;785             acc3 += p3;
000200  ee322a28          VADD.F32 s4,s4,s17
;;;786             acc4 += p4;
;;;787             acc5 += p5;
;;;788             acc6 += p6;
;;;789             acc7 += p7;
000204  ee758a2b          VADD.F32 s17,s10,s23
000208  edd35a05          VLDR     s11,[r3,#0x14]        ;780
00020c  ee733aa9          VADD.F32 s7,s7,s19             ;786
000210  ee311a0c          VADD.F32 s2,s2,s24             ;783
000214  ee711a8b          VADD.F32 s3,s3,s22             ;784
000218  ee344a0a          VADD.F32 s8,s8,s20             ;787
00021c  ee744aaa          VADD.F32 s9,s9,s21             ;788
;;;790    
;;;791             /* Perform the multiply-accumulates */      
;;;792             p0 = x5 * c0;
;;;793             p1 = x6 * c0;   
;;;794             p2 = x7 * c0;   
;;;795             p3 = x0 * c0;   
;;;796             p4 = x1 * c0;   
000220  ee26aaa0          VMUL.F32 s20,s13,s1
000224  ee388a2c          VADD.F32 s16,s16,s25           ;782
000228  ee22baa0          VMUL.F32 s22,s5,s1             ;793
00022c  ee67baa0          VMUL.F32 s23,s15,s1            ;794
000230  ee679a20          VMUL.F32 s19,s14,s1            ;795
;;;797             p5 = x2 * c0;   
;;;798             p6 = x3 * c0;   
000234  ee265a20          VMUL.F32 s10,s12,s1
;;;799             p7 = x4 * c0;   
000238  ee25caa0          VMUL.F32 s24,s11,s1
00023c  ee63ca20          VMUL.F32 s25,s6,s1             ;792
000240  ee60aa20          VMUL.F32 s21,s0,s1             ;797
;;;800    
;;;801             /* Read the b[numTaps-4] coefficient */
;;;802             c0 = *(pb++);
000244  edd50a06          VLDR     s1,[r5,#0x18]
;;;803    
;;;804             /* Read x[n-numTaps-6] sample */
;;;805             x5 = *(px++);
;;;806             
;;;807             acc0 += p0;
;;;808             acc1 += p1;
;;;809             acc2 += p2;
;;;810             acc3 += p3;
;;;811             acc4 += p4;
000248  ee733a8a          VADD.F32 s7,s7,s20
00024c  ee729a29          VADD.F32 s19,s4,s19            ;810
;;;812             acc5 += p5;
000250  ee342a2a          VADD.F32 s4,s8,s21
;;;813             acc6 += p6;
;;;814             acc7 += p7;
000254  ee38aa8c          VADD.F32 s20,s17,s24
000258  ed933a06          VLDR     s6,[r3,#0x18]         ;805
00025c  ee345a85          VADD.F32 s10,s9,s10            ;813
000260  ee311a0b          VADD.F32 s2,s2,s22             ;808
000264  ee711aab          VADD.F32 s3,s3,s23             ;809
000268  ee388a2c          VADD.F32 s16,s16,s25           ;807
;;;815    
;;;816             /* Perform the multiply-accumulates */      
;;;817             p0 = x6 * c0;
;;;818             p1 = x7 * c0;   
;;;819             p2 = x0 * c0;   
;;;820             p3 = x1 * c0;   
;;;821             p4 = x2 * c0;   
;;;822             p5 = x3 * c0;   
;;;823             p6 = x4 * c0;   
00026c  ee658aa0          VMUL.F32 s17,s11,s1
000270  ee62caa0          VMUL.F32 s25,s5,s1             ;817
000274  ee27caa0          VMUL.F32 s24,s15,s1            ;818
000278  ee27ba20          VMUL.F32 s22,s14,s1            ;819
00027c  ee264aa0          VMUL.F32 s8,s13,s1             ;820
000280  ee60aa20          VMUL.F32 s21,s0,s1             ;821
000284  ee664a20          VMUL.F32 s9,s12,s1             ;822
;;;824             p7 = x5 * c0;   
000288  ee63ba20          VMUL.F32 s23,s6,s1
;;;825    
;;;826             /* Read the b[numTaps-4] coefficient */
;;;827             c0 = *(pb++);
00028c  edd50a07          VLDR     s1,[r5,#0x1c]
;;;828    
;;;829             /* Read x[n-numTaps-6] sample */
;;;830             x6 = *(px++);
;;;831             
;;;832             acc0 += p0;
;;;833             acc1 += p1;
;;;834             acc2 += p2;
;;;835             acc3 += p3;
;;;836             acc4 += p4;
;;;837             acc5 += p5;
;;;838             acc6 += p6;
000290  ee355a28          VADD.F32 s10,s10,s17
000294  ee724a24          VADD.F32 s9,s4,s9              ;837
;;;839             acc7 += p7;
000298  ee7a8a2b          VADD.F32 s17,s20,s23
00029c  edd32a07          VLDR     s5,[r3,#0x1c]         ;830
0002a0  ee394a84          VADD.F32 s8,s19,s8             ;835
;;;840    
;;;841             /* Perform the multiply-accumulates */      
;;;842             p0 = x7 * c0;
0002a4  ee67baa0          VMUL.F32 s23,s15,s1
;;;843             p1 = x0 * c0;   
;;;844             p2 = x1 * c0;   
;;;845             p3 = x2 * c0;   
0002a8  ee202a20          VMUL.F32 s4,s0,s1
;;;846             p4 = x3 * c0;   
;;;847             p5 = x4 * c0;   
0002ac  ee25aaa0          VMUL.F32 s20,s11,s1
0002b0  ee311a0c          VADD.F32 s2,s2,s24             ;833
0002b4  ee711a8b          VADD.F32 s3,s3,s22             ;834
0002b8  ee733aaa          VADD.F32 s7,s7,s21             ;836
;;;848             p6 = x5 * c0;   
0002bc  ee637a20          VMUL.F32 s15,s6,s1
0002c0  ee388a2c          VADD.F32 s16,s16,s25           ;832
0002c4  ee27ca20          VMUL.F32 s24,s14,s1            ;843
0002c8  ee26baa0          VMUL.F32 s22,s13,s1            ;844
0002cc  ee66aa20          VMUL.F32 s21,s12,s1            ;846
;;;849             p7 = x6 * c0;   
0002d0  ee629aa0          VMUL.F32 s19,s5,s1
;;;850    
;;;851             tapCnt--;
;;;852             
;;;853             acc0 += p0;
;;;854             acc1 += p1;
;;;855             acc2 += p2;
;;;856             acc3 += p3;
0002d4  ee342a02          VADD.F32 s4,s8,s4
;;;857             acc4 += p4;
;;;858             acc5 += p5;
0002d8  ee344a8a          VADD.F32 s8,s9,s20
;;;859             acc6 += p6;
0002dc  ee754a27          VADD.F32 s9,s10,s15
0002e0  ee780a2b          VADD.F32 s1,s16,s23            ;853
0002e4  ee311a0c          VADD.F32 s2,s2,s24             ;854
0002e8  ee711a8b          VADD.F32 s3,s3,s22             ;855
0002ec  ee733aaa          VADD.F32 s7,s7,s21             ;857
;;;860             acc7 += p7;
0002f0  ee385aa9          VADD.F32 s10,s17,s19
0002f4  3320              ADDS     r3,r3,#0x20
0002f6  3520              ADDS     r5,r5,#0x20
0002f8  f1ac0c01          SUB      r12,r12,#1
                  |L1.764|
0002fc  f1bc0f00          CMP      r12,#0                ;643
000300  f47faed8          BNE      |L1.180|
;;;861          }
;;;862    
;;;863          /* If the filter length is not a multiple of 8, compute the remaining filter taps */
;;;864          tapCnt = numTaps % 0x8u;
000304  f0070c07          AND      r12,r7,#7
;;;865    
;;;866          while(tapCnt > 0u)
000308  e036              B        |L1.888|
;;;867          {
;;;868             /* Read coefficients */
;;;869             c0 = *(pb++);
00030a  bf00              NOP      
                  |L1.780|
00030c  edd57a00          VLDR     s15,[r5,#0]
;;;870    
;;;871             /* Fetch 1 state variable */
;;;872             x7 = *(px++);
000310  ed938a00          VLDR     s16,[r3,#0]
;;;873    
;;;874             /* Perform the multiply-accumulates */      
;;;875             p0 = x0 * c0;
;;;876             p1 = x1 * c0;   
;;;877             p2 = x2 * c0;   
;;;878             p3 = x3 * c0;   
;;;879             p4 = x4 * c0;   
;;;880             p5 = x5 * c0;   
;;;881             p6 = x6 * c0;   
;;;882             p7 = x7 * c0;   
;;;883    
;;;884             /* Reuse the present sample states for next sample */
;;;885             x0 = x1;
;;;886             x1 = x2;
;;;887             x2 = x3;
;;;888             x3 = x4;
;;;889             x4 = x5;
;;;890             x5 = x6;
;;;891             x6 = x7;
;;;892             
;;;893             acc0 += p0;
;;;894             acc1 += p1;
;;;895             acc2 += p2;
;;;896             acc3 += p3;
;;;897             acc4 += p4;
;;;898             acc5 += p5;
;;;899             acc6 += p6;
;;;900             acc7 += p7;
000314  1d1b              ADDS     r3,r3,#4
000316  ee67aa27          VMUL.F32 s21,s14,s15           ;875
00031a  ee26baa7          VMUL.F32 s22,s13,s15           ;876
00031e  ee20aa27          VMUL.F32 s20,s0,s15            ;877
000322  ee66ba27          VMUL.F32 s23,s12,s15           ;878
000326  ee25caa7          VMUL.F32 s24,s11,s15           ;879
00032a  ee638a27          VMUL.F32 s17,s6,s15            ;880
00032e  ee629aa7          VMUL.F32 s19,s5,s15            ;881
000332  ee687a27          VMUL.F32 s15,s16,s15           ;882
000336  eeb07a66          VMOV.F32 s14,s13               ;885
00033a  eef06a40          VMOV.F32 s13,s0                ;886
00033e  eeb00a46          VMOV.F32 s0,s12                ;887
000342  eeb06a65          VMOV.F32 s12,s11               ;888
000346  eef05a43          VMOV.F32 s11,s6                ;889
00034a  ee700aaa          VADD.F32 s1,s1,s21             ;893
00034e  ee311a0b          VADD.F32 s2,s2,s22             ;894
000352  ee711a8a          VADD.F32 s3,s3,s20             ;895
000356  ee322a2b          VADD.F32 s4,s4,s23             ;896
00035a  ee733a8c          VADD.F32 s7,s7,s24             ;897
00035e  ee344a28          VADD.F32 s8,s8,s17             ;898
000362  ee744aa9          VADD.F32 s9,s9,s19             ;899
000366  ee355a27          VADD.F32 s10,s10,s15
00036a  eeb03a62          VMOV.F32 s6,s5                 ;890
00036e  eef02a48          VMOV.F32 s5,s16                ;891
000372  1d2d              ADDS     r5,r5,#4
000374  f1ac0c01          SUB      r12,r12,#1
                  |L1.888|
000378  f1bc0f00          CMP      r12,#0                ;866
00037c  d1c6              BNE      |L1.780|
;;;901    
;;;902             /* Decrement the loop counter */
;;;903             tapCnt--;
;;;904          }
;;;905    
;;;906          /* Advance the state pointer by 8 to process the next group of 8 samples */
;;;907          pState = pState + 8;
;;;908    
;;;909          /* The results in the 8 accumulators, store in the destination buffer. */
;;;910          *pDst++ = acc0;
00037e  edc20a00          VSTR     s1,[r2,#0]
;;;911          *pDst++ = acc1;
000382  ed821a01          VSTR     s2,[r2,#4]
;;;912          *pDst++ = acc2;
000386  edc21a02          VSTR     s3,[r2,#8]
;;;913          *pDst++ = acc3;
00038a  ed822a03          VSTR     s4,[r2,#0xc]
;;;914          *pDst++ = acc4;
00038e  edc23a04          VSTR     s7,[r2,#0x10]
;;;915          *pDst++ = acc5;
000392  ed824a05          VSTR     s8,[r2,#0x14]
;;;916          *pDst++ = acc6;
000396  edc24a06          VSTR     s9,[r2,#0x18]
;;;917          *pDst++ = acc7;
00039a  ed825a07          VSTR     s10,[r2,#0x1c]
00039e  3220              ADDS     r2,r2,#0x20
0003a0  3420              ADDS     r4,r4,#0x20
0003a2  f1a80801          SUB      r8,r8,#1
                  |L1.934|
0003a6  f1b80f00          CMP      r8,#0                 ;597
0003aa  f47fae3d          BNE      |L1.40|
;;;918    
;;;919          blkCnt--;
;;;920       }
;;;921    
;;;922       /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
;;;923       ** No loop unrolling is used. */
;;;924       blkCnt = blockSize % 0x8u;
0003ae  f00a0807          AND      r8,r10,#7
;;;925    
;;;926       while(blkCnt > 0u)
0003b2  e016              B        |L1.994|
                  |L1.948|
;;;927       {
;;;928          /* Copy one sample at a time into state buffer */
;;;929          *pStateCurnt++ = *pSrc++;
0003b4  ecb10a01          VLDM     r1!,{s0}
;;;930    
;;;931          /* Set the accumulator to zero */
;;;932          acc0 = 0.0f;
0003b8  eef08a49          VMOV.F32 s17,s18
;;;933    
;;;934          /* Initialize state pointer */
;;;935          px = pState;
0003bc  4625              MOV      r5,r4
;;;936    
;;;937          /* Initialize Coefficient pointer */
;;;938          pb = (pCoeffs);
0003be  46cc              MOV      r12,r9
0003c0  eca60a01          VSTM     r6!,{s0}              ;929
;;;939    
;;;940          i = numTaps;
0003c4  ea4f0307          MOV.W    r3,r7
                  |L1.968|
;;;941    
;;;942          /* Perform the multiply-accumulates */
;;;943          do
;;;944          {
;;;945             acc0 += *px++ * *pb++;
0003c8  ecb50a01          VLDM     r5!,{s0}
0003cc  1e5b              SUBS     r3,r3,#1
0003ce  ecfc0a01          VLDM     r12!,{s1}
0003d2  ee408a20          VMLA.F32 s17,s0,s1
;;;946             i--;
;;;947    
;;;948          } while(i > 0u);
0003d6  d1f7              BNE      |L1.968|
;;;949    
;;;950          /* The result is store in the destination buffer. */
;;;951          *pDst++ = acc0;
0003d8  1d24              ADDS     r4,r4,#4
0003da  ece28a01          VSTM     r2!,{s17}
0003de  f1a80801          SUB      r8,r8,#1
                  |L1.994|
0003e2  f1b80f00          CMP      r8,#0                 ;926
0003e6  d1e5              BNE      |L1.948|
;;;952    
;;;953          /* Advance state pointer by 1 for the next sample */
;;;954          pState = pState + 1;
;;;955    
;;;956          blkCnt--;
;;;957       }
;;;958    
;;;959       /* Processing is complete.  
;;;960       ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
;;;961       ** This prepares the state buffer for the next function call. */
;;;962    
;;;963       /* Points to the start of the state buffer */
;;;964       pStateCurnt = S->pState;
0003e8  1e7f              SUBS     r7,r7,#1
0003ea  6840              LDR      r0,[r0,#4]
;;;965    
;;;966       tapCnt = (numTaps - 1u) >> 2u;
0003ec  08b9              LSRS     r1,r7,#2
;;;967    
;;;968       /* copy data */
;;;969       while(tapCnt > 0u)
0003ee  e012              B        |L1.1046|
                  |L1.1008|
;;;970       {
;;;971          *pStateCurnt++ = *pState++;
0003f0  ed940a00          VLDR     s0,[r4,#0]
;;;972          *pStateCurnt++ = *pState++;
;;;973          *pStateCurnt++ = *pState++;
;;;974          *pStateCurnt++ = *pState++;
0003f4  1e49              SUBS     r1,r1,#1
0003f6  ed800a00          VSTR     s0,[r0,#0]            ;971
0003fa  ed940a01          VLDR     s0,[r4,#4]            ;972
0003fe  ed800a01          VSTR     s0,[r0,#4]            ;972
000402  ed940a02          VLDR     s0,[r4,#8]            ;973
000406  ed800a02          VSTR     s0,[r0,#8]            ;973
00040a  ed940a03          VLDR     s0,[r4,#0xc]
00040e  ed800a03          VSTR     s0,[r0,#0xc]
000412  3010              ADDS     r0,r0,#0x10
000414  3410              ADDS     r4,r4,#0x10
                  |L1.1046|
000416  2900              CMP      r1,#0                 ;969
000418  d1ea              BNE      |L1.1008|
;;;975    
;;;976          /* Decrement the loop counter */
;;;977          tapCnt--;
;;;978       }
;;;979    
;;;980       /* Calculate remaining number of copies */
;;;981       tapCnt = (numTaps - 1u) % 0x4u;
00041a  e001              B        |L1.1056|
                  |L1.1052|
00041c  00000000          DCFS     0x00000000 ; 0
                  |L1.1056|
000420  f0070103          AND      r1,r7,#3
;;;982    
;;;983       /* Copy the remaining q31_t data */
;;;984       while(tapCnt > 0u)
000424  e005              B        |L1.1074|
;;;985       {
;;;986          *pStateCurnt++ = *pState++;
000426  bf00              NOP      
                  |L1.1064|
000428  ecb40a01          VLDM     r4!,{s0}
00042c  1e49              SUBS     r1,r1,#1
00042e  eca00a01          VSTM     r0!,{s0}
                  |L1.1074|
000432  2900              CMP      r1,#0                 ;984
000434  d1f8              BNE      |L1.1064|
;;;987    
;;;988          /* Decrement the loop counter */
;;;989          tapCnt--;
;;;990       }
;;;991    }
000436  ecbd8b0c          VPOP     {d8-d13}
00043a  e8bd87f0          POP      {r4-r10,pc}
;;;992    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_fir_f32_c_8e4c221c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_fir_f32_c_8e4c221c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_fir_f32_c_8e4c221c____REVSH|
#line 144
|__asm___13_arm_fir_f32_c_8e4c221c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_fir_f32_c_8e4c221c____RRX|
#line 300
|__asm___13_arm_fir_f32_c_8e4c221c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
