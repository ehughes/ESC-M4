; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mult_cmplx_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mult_cmplx_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mult_cmplx_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mult_cmplx_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_mult_cmplx_q15||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mult_cmplx_q15 PROC
;;;64     
;;;65     void arm_cmplx_mult_cmplx_q15(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;66       q15_t * pSrcA,
;;;67       q15_t * pSrcB,
;;;68       q15_t * pDst,
;;;69       uint32_t numSamples)
;;;70     {
000004  4699              MOV      r9,r3
;;;71       q15_t a, b, c, d;                              /* Temporary variables to store real and imaginary values */
;;;72     
;;;73     #ifndef ARM_MATH_CM0_FAMILY
;;;74     
;;;75       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;76       uint32_t blkCnt;                               /* loop counters */
;;;77     
;;;78       /* loop Unrolling */
;;;79       blkCnt = numSamples >> 2u;
000006  089b              LSRS     r3,r3,#2
000008  e06d              B        |L1.230|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
;;;86         /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
;;;87         a = *pSrcA++;
00000a  bf00              NOP      
                  |L1.12|
00000c  f8305b02          LDRH     r5,[r0],#2
;;;88         b = *pSrcA++;
;;;89         c = *pSrcB++;
000010  f8316b02          LDRH     r6,[r1],#2
000014  f8304b02          LDRH     r4,[r0],#2            ;88
;;;90         d = *pSrcB++;
000018  f8317b02          LDRH     r7,[r1],#2
;;;91     
;;;92         /* store the result in 3.13 format in the destination buffer. */
;;;93         *pDst++ =
00001c  fb15fc06          SMULBB   r12,r5,r6
000020  ea4f4c6c          ASR      r12,r12,#17
000024  fb14f807          SMULBB   r8,r4,r7
000028  ebac4c68          SUB      r12,r12,r8,ASR #17
00002c  f822cb02          STRH     r12,[r2],#2
;;;94           (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;95         /* store the result in 3.13 format in the destination buffer. */
;;;96         *pDst++ =
000030  fb15f507          SMULBB   r5,r5,r7
000034  146d              ASRS     r5,r5,#17
000036  fb14f406          SMULBB   r4,r4,r6
00003a  eb054464          ADD      r4,r5,r4,ASR #17
00003e  f8224b02          STRH     r4,[r2],#2
;;;97           (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;98     
;;;99         a = *pSrcA++;
000042  f8304b04          LDRH     r4,[r0],#4
;;;100        b = *pSrcA++;
;;;101        c = *pSrcB++;
000046  f8317b04          LDRH     r7,[r1],#4
00004a  f8305c02          LDRH     r5,[r0,#-2]           ;100
;;;102        d = *pSrcB++;
00004e  f8316c02          LDRH     r6,[r1,#-2]
;;;103    
;;;104        /* store the result in 3.13 format in the destination buffer. */
;;;105        *pDst++ =
000052  fb14fc07          SMULBB   r12,r4,r7
000056  ea4f4c6c          ASR      r12,r12,#17
00005a  fb15f806          SMULBB   r8,r5,r6
00005e  ebac4c68          SUB      r12,r12,r8,ASR #17
000062  f822cb04          STRH     r12,[r2],#4
;;;106          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;107        /* store the result in 3.13 format in the destination buffer. */
;;;108        *pDst++ =
000066  fb14f406          SMULBB   r4,r4,r6
00006a  1464              ASRS     r4,r4,#17
00006c  fb15f507          SMULBB   r5,r5,r7
000070  eb044465          ADD      r4,r4,r5,ASR #17
000074  f8224c02          STRH     r4,[r2,#-2]
;;;109          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;110    
;;;111        a = *pSrcA++;
000078  f8304b08          LDRH     r4,[r0],#8
;;;112        b = *pSrcA++;
;;;113        c = *pSrcB++;
00007c  f8316b08          LDRH     r6,[r1],#8
000080  f8305c06          LDRH     r5,[r0,#-6]           ;112
;;;114        d = *pSrcB++;
000084  f8317c06          LDRH     r7,[r1,#-6]
;;;115    
;;;116        /* store the result in 3.13 format in the destination buffer. */
;;;117        *pDst++ =
000088  fb14fc06          SMULBB   r12,r4,r6
00008c  ea4f4c6c          ASR      r12,r12,#17
000090  fb15f807          SMULBB   r8,r5,r7
000094  ebac4c68          SUB      r12,r12,r8,ASR #17
000098  f822cb08          STRH     r12,[r2],#8
;;;118          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;119        /* store the result in 3.13 format in the destination buffer. */
;;;120        *pDst++ =
00009c  fb14f407          SMULBB   r4,r4,r7
0000a0  1464              ASRS     r4,r4,#17
0000a2  fb15f506          SMULBB   r5,r5,r6
0000a6  eb044465          ADD      r4,r4,r5,ASR #17
0000aa  f8224c06          STRH     r4,[r2,#-6]
;;;121          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;122    
;;;123        a = *pSrcA++;
0000ae  f8304c04          LDRH     r4,[r0,#-4]
;;;124        b = *pSrcA++;
0000b2  f8305c02          LDRH     r5,[r0,#-2]
;;;125        c = *pSrcB++;
0000b6  f8316c04          LDRH     r6,[r1,#-4]
;;;126        d = *pSrcB++;
0000ba  f8317c02          LDRH     r7,[r1,#-2]
;;;127    
;;;128        /* store the result in 3.13 format in the destination buffer. */
;;;129        *pDst++ =
0000be  fb14fc06          SMULBB   r12,r4,r6
0000c2  ea4f4c6c          ASR      r12,r12,#17
0000c6  fb15f807          SMULBB   r8,r5,r7
0000ca  ebac4c68          SUB      r12,r12,r8,ASR #17
0000ce  f822cc04          STRH     r12,[r2,#-4]
;;;130          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;131        /* store the result in 3.13 format in the destination buffer. */
;;;132        *pDst++ =
0000d2  fb14f407          SMULBB   r4,r4,r7
0000d6  1464              ASRS     r4,r4,#17
0000d8  fb15f506          SMULBB   r5,r5,r6
0000dc  eb044465          ADD      r4,r4,r5,ASR #17
0000e0  f8224c02          STRH     r4,[r2,#-2]
0000e4  1e5b              SUBS     r3,r3,#1
                  |L1.230|
0000e6  2b00              CMP      r3,#0                 ;83
0000e8  d190              BNE      |L1.12|
;;;133          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;134    
;;;135        /* Decrement the blockSize loop counter */
;;;136        blkCnt--;
;;;137      }
;;;138    
;;;139      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;140       ** No loop unrolling is used. */
;;;141      blkCnt = numSamples % 0x4u;
0000ea  f0090303          AND      r3,r9,#3
;;;142    
;;;143      while(blkCnt > 0u)
0000ee  e01b              B        |L1.296|
                  |L1.240|
;;;144      {
;;;145        /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
;;;146        /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
;;;147        a = *pSrcA++;
0000f0  f8304b02          LDRH     r4,[r0],#2
;;;148        b = *pSrcA++;
;;;149        c = *pSrcB++;
0000f4  f8317b02          LDRH     r7,[r1],#2
0000f8  f8305b02          LDRH     r5,[r0],#2            ;148
;;;150        d = *pSrcB++;
0000fc  f8316b02          LDRH     r6,[r1],#2
;;;151    
;;;152        /* store the result in 3.13 format in the destination buffer. */
;;;153        *pDst++ =
000100  fb14fc07          SMULBB   r12,r4,r7
000104  ea4f4c6c          ASR      r12,r12,#17
000108  fb15f806          SMULBB   r8,r5,r6
00010c  ebac4c68          SUB      r12,r12,r8,ASR #17
000110  f822cb02          STRH     r12,[r2],#2
;;;154          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;155        /* store the result in 3.13 format in the destination buffer. */
;;;156        *pDst++ =
000114  fb14f406          SMULBB   r4,r4,r6
000118  1464              ASRS     r4,r4,#17
00011a  fb15f507          SMULBB   r5,r5,r7
00011e  eb044465          ADD      r4,r4,r5,ASR #17
000122  f8224b02          STRH     r4,[r2],#2
000126  1e5b              SUBS     r3,r3,#1
                  |L1.296|
000128  2b00              CMP      r3,#0                 ;143
00012a  d1e1              BNE      |L1.240|
;;;157          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;158    
;;;159        /* Decrement the blockSize loop counter */
;;;160        blkCnt--;
;;;161      }
;;;162    
;;;163    #else
;;;164    
;;;165      /* Run the below code for Cortex-M0 */
;;;166    
;;;167      while(numSamples > 0u)
;;;168      {
;;;169        /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
;;;170        /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
;;;171        a = *pSrcA++;
;;;172        b = *pSrcA++;
;;;173        c = *pSrcB++;
;;;174        d = *pSrcB++;
;;;175    
;;;176        /* store the result in 3.13 format in the destination buffer. */
;;;177        *pDst++ =
;;;178          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;179        /* store the result in 3.13 format in the destination buffer. */
;;;180        *pDst++ =
;;;181          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;182    
;;;183        /* Decrement the blockSize loop counter */
;;;184        numSamples--;
;;;185      }
;;;186    
;;;187    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;188    
;;;189    }
00012c  e8bd83f0          POP      {r4-r9,pc}
;;;190    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mult_cmplx_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REVSH|
#line 144
|__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____RRX|
#line 300
|__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
