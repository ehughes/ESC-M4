; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mult_cmplx_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mult_cmplx_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_mult_cmplx_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mult_cmplx_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_mult_cmplx_q15||, CODE, READONLY, ALIGN=1

                  arm_cmplx_mult_cmplx_q15 PROC
;;;64     
;;;65     void arm_cmplx_mult_cmplx_q15(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;66       q15_t * pSrcA,
;;;67       q15_t * pSrcB,
;;;68       q15_t * pDst,
;;;69       uint32_t numSamples)
;;;70     {
;;;71       q15_t a, b, c, d;                              /* Temporary variables to store real and imaginary values */
;;;72     
;;;73     #ifndef ARM_MATH_CM0_FAMILY
;;;74     
;;;75       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;76       uint32_t blkCnt;                               /* loop counters */
;;;77     
;;;78       /* loop Unrolling */
;;;79       blkCnt = numSamples >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e05f              B        |L1.200|
                  |L1.8|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
;;;86         /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
;;;87         a = *pSrcA++;
000008  8805              LDRH     r5,[r0,#0]
;;;88         b = *pSrcA++;
00000a  8846              LDRH     r6,[r0,#2]
;;;89         c = *pSrcB++;
00000c  880f              LDRH     r7,[r1,#0]
;;;90         d = *pSrcB++;
00000e  f8b1c002          LDRH     r12,[r1,#2]
;;;91     
;;;92         /* store the result in 3.13 format in the destination buffer. */
;;;93         *pDst++ =
000012  fb15f807          SMULBB   r8,r5,r7
000016  ea4f4868          ASR      r8,r8,#17
00001a  fb16f90c          SMULBB   r9,r6,r12
00001e  eba84869          SUB      r8,r8,r9,ASR #17
000022  f8a28000          STRH     r8,[r2,#0]
;;;94           (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;95         /* store the result in 3.13 format in the destination buffer. */
;;;96         *pDst++ =
000026  fb15f50c          SMULBB   r5,r5,r12
00002a  146d              ASRS     r5,r5,#17
00002c  fb16f607          SMULBB   r6,r6,r7
000030  eb054566          ADD      r5,r5,r6,ASR #17
000034  8055              STRH     r5,[r2,#2]
;;;97           (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;98     
;;;99         a = *pSrcA++;
000036  8885              LDRH     r5,[r0,#4]
;;;100        b = *pSrcA++;
000038  88c6              LDRH     r6,[r0,#6]
;;;101        c = *pSrcB++;
00003a  888f              LDRH     r7,[r1,#4]
;;;102        d = *pSrcB++;
00003c  f8b1c006          LDRH     r12,[r1,#6]
;;;103    
;;;104        /* store the result in 3.13 format in the destination buffer. */
;;;105        *pDst++ =
000040  fb15f807          SMULBB   r8,r5,r7
000044  ea4f4868          ASR      r8,r8,#17
000048  fb16f90c          SMULBB   r9,r6,r12
00004c  eba84869          SUB      r8,r8,r9,ASR #17
000050  f8a28004          STRH     r8,[r2,#4]
;;;106          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;107        /* store the result in 3.13 format in the destination buffer. */
;;;108        *pDst++ =
000054  fb15f50c          SMULBB   r5,r5,r12
000058  146d              ASRS     r5,r5,#17
00005a  fb16f607          SMULBB   r6,r6,r7
00005e  eb054566          ADD      r5,r5,r6,ASR #17
000062  80d5              STRH     r5,[r2,#6]
;;;109          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;110    
;;;111        a = *pSrcA++;
000064  8905              LDRH     r5,[r0,#8]
;;;112        b = *pSrcA++;
000066  8946              LDRH     r6,[r0,#0xa]
;;;113        c = *pSrcB++;
000068  890f              LDRH     r7,[r1,#8]
;;;114        d = *pSrcB++;
00006a  f8b1c00a          LDRH     r12,[r1,#0xa]
;;;115    
;;;116        /* store the result in 3.13 format in the destination buffer. */
;;;117        *pDst++ =
00006e  fb15f807          SMULBB   r8,r5,r7
000072  ea4f4868          ASR      r8,r8,#17
000076  fb16f90c          SMULBB   r9,r6,r12
00007a  eba84869          SUB      r8,r8,r9,ASR #17
00007e  f8a28008          STRH     r8,[r2,#8]
;;;118          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;119        /* store the result in 3.13 format in the destination buffer. */
;;;120        *pDst++ =
000082  fb15f50c          SMULBB   r5,r5,r12
000086  146d              ASRS     r5,r5,#17
000088  fb16f607          SMULBB   r6,r6,r7
00008c  eb054566          ADD      r5,r5,r6,ASR #17
000090  8155              STRH     r5,[r2,#0xa]
;;;121          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;122    
;;;123        a = *pSrcA++;
000092  8985              LDRH     r5,[r0,#0xc]
;;;124        b = *pSrcA++;
000094  89c6              LDRH     r6,[r0,#0xe]
000096  3010              ADDS     r0,r0,#0x10
;;;125        c = *pSrcB++;
000098  898f              LDRH     r7,[r1,#0xc]
00009a  310e              ADDS     r1,r1,#0xe
;;;126        d = *pSrcB++;
00009c  f831cb02          LDRH     r12,[r1],#2
;;;127    
;;;128        /* store the result in 3.13 format in the destination buffer. */
;;;129        *pDst++ =
0000a0  fb15f807          SMULBB   r8,r5,r7
0000a4  ea4f4868          ASR      r8,r8,#17
0000a8  fb16f90c          SMULBB   r9,r6,r12
0000ac  eba84869          SUB      r8,r8,r9,ASR #17
0000b0  f8a2800c          STRH     r8,[r2,#0xc]
;;;130          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;131        /* store the result in 3.13 format in the destination buffer. */
;;;132        *pDst++ =
0000b4  fb15f50c          SMULBB   r5,r5,r12
0000b8  146d              ASRS     r5,r5,#17
0000ba  fb16f607          SMULBB   r6,r6,r7
0000be  eb054566          ADD      r5,r5,r6,ASR #17
0000c2  81d5              STRH     r5,[r2,#0xe]
0000c4  3210              ADDS     r2,r2,#0x10
;;;133          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;134    
;;;135        /* Decrement the blockSize loop counter */
;;;136        blkCnt--;
0000c6  1e64              SUBS     r4,r4,#1
                  |L1.200|
0000c8  2c00              CMP      r4,#0                 ;83
0000ca  d19d              BNE      |L1.8|
;;;137      }
;;;138    
;;;139      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;140       ** No loop unrolling is used. */
;;;141      blkCnt = numSamples % 0x4u;
0000cc  f0030303          AND      r3,r3,#3
;;;142    
;;;143      while(blkCnt > 0u)
0000d0  e019              B        |L1.262|
                  |L1.210|
;;;144      {
;;;145        /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
;;;146        /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
;;;147        a = *pSrcA++;
0000d2  8804              LDRH     r4,[r0,#0]
;;;148        b = *pSrcA++;
0000d4  8845              LDRH     r5,[r0,#2]
0000d6  1d00              ADDS     r0,r0,#4
;;;149        c = *pSrcB++;
0000d8  880e              LDRH     r6,[r1,#0]
;;;150        d = *pSrcB++;
0000da  884f              LDRH     r7,[r1,#2]
0000dc  1d09              ADDS     r1,r1,#4
;;;151    
;;;152        /* store the result in 3.13 format in the destination buffer. */
;;;153        *pDst++ =
0000de  fb14fc06          SMULBB   r12,r4,r6
0000e2  ea4f4c6c          ASR      r12,r12,#17
0000e6  fb15f807          SMULBB   r8,r5,r7
0000ea  ebac4c68          SUB      r12,r12,r8,ASR #17
0000ee  f8a2c000          STRH     r12,[r2,#0]
;;;154          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;155        /* store the result in 3.13 format in the destination buffer. */
;;;156        *pDst++ =
0000f2  fb14f407          SMULBB   r4,r4,r7
0000f6  1464              ASRS     r4,r4,#17
0000f8  fb15f506          SMULBB   r5,r5,r6
0000fc  eb044465          ADD      r4,r4,r5,ASR #17
000100  8054              STRH     r4,[r2,#2]
000102  1d12              ADDS     r2,r2,#4
;;;157          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;158    
;;;159        /* Decrement the blockSize loop counter */
;;;160        blkCnt--;
000104  1e5b              SUBS     r3,r3,#1
                  |L1.262|
000106  2b00              CMP      r3,#0                 ;143
000108  d1e3              BNE      |L1.210|
;;;161      }
;;;162    
;;;163    #else
;;;164    
;;;165      /* Run the below code for Cortex-M0 */
;;;166    
;;;167      while(numSamples > 0u)
;;;168      {
;;;169        /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
;;;170        /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
;;;171        a = *pSrcA++;
;;;172        b = *pSrcA++;
;;;173        c = *pSrcB++;
;;;174        d = *pSrcB++;
;;;175    
;;;176        /* store the result in 3.13 format in the destination buffer. */
;;;177        *pDst++ =
;;;178          (q15_t) (q31_t) (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17);
;;;179        /* store the result in 3.13 format in the destination buffer. */
;;;180        *pDst++ =
;;;181          (q15_t) (q31_t) (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17);
;;;182    
;;;183        /* Decrement the blockSize loop counter */
;;;184        numSamples--;
;;;185      }
;;;186    
;;;187    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;188    
;;;189    }
00010a  e8bd83f0          POP      {r4-r9,pc}
;;;190    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mult_cmplx_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REVSH|
#line 144
|__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____RRX|
#line 300
|__asm___26_arm_cmplx_mult_cmplx_q15_c_42dac3dd____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
