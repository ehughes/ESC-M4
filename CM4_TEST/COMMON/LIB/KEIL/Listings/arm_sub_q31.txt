; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_sub_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sub_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_sub_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_sub_q31.c]
                          THUMB

                          AREA ||i.arm_sub_q31||, CODE, READONLY, ALIGN=1

                  arm_sub_q31 PROC
;;;65     
;;;66     void arm_sub_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;67       q31_t * pSrcA,
;;;68       q31_t * pSrcB,
;;;69       q31_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       q31_t inA1, inA2, inA3, inA4;
;;;79       q31_t inB1, inB2, inB3, inB4;
;;;80     
;;;81       /*loop Unrolling */
;;;82       blkCnt = blockSize >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e01b              B        |L1.64|
                  |L1.8|
;;;83     
;;;84       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;85        ** a second loop below computes the remaining 1 to 3 samples. */
;;;86       while(blkCnt > 0u)
;;;87       {
;;;88         /* C = A - B */
;;;89         /* Subtract and then store the results in the destination buffer. */
;;;90         inA1 = *pSrcA++;
000008  6805              LDR      r5,[r0,#0]
;;;91         inA2 = *pSrcA++;
00000a  6846              LDR      r6,[r0,#4]
;;;92         inB1 = *pSrcB++;
00000c  f8518b04          LDR      r8,[r1],#4
;;;93         inB2 = *pSrcB++;
000010  f8519b04          LDR      r9,[r1],#4
;;;94     
;;;95         inA3 = *pSrcA++;
000014  6887              LDR      r7,[r0,#8]
000016  300c              ADDS     r0,r0,#0xc
;;;96         inA4 = *pSrcA++;
000018  f850cb04          LDR      r12,[r0],#4
;;;97         inB3 = *pSrcB++;
00001c  f851ab04          LDR      r10,[r1],#4
;;;98         inB4 = *pSrcB++;
000020  f851bb04          LDR      r11,[r1],#4
;;;99     
;;;100        *pDst++ = __QSUB(inA1, inB1);
000024  fa88f5a5          QSUB     r5,r5,r8
000028  6015              STR      r5,[r2,#0]
;;;101        *pDst++ = __QSUB(inA2, inB2);
00002a  fa89f5a6          QSUB     r5,r6,r9
00002e  6055              STR      r5,[r2,#4]
;;;102        *pDst++ = __QSUB(inA3, inB3);
000030  fa8af5a7          QSUB     r5,r7,r10
000034  6095              STR      r5,[r2,#8]
;;;103        *pDst++ = __QSUB(inA4, inB4);
000036  fa8bf5ac          QSUB     r5,r12,r11
00003a  60d5              STR      r5,[r2,#0xc]
00003c  3210              ADDS     r2,r2,#0x10
;;;104    
;;;105        /* Decrement the loop counter */
;;;106        blkCnt--;
00003e  1e64              SUBS     r4,r4,#1
                  |L1.64|
000040  2c00              CMP      r4,#0                 ;86
000042  d1e1              BNE      |L1.8|
;;;107      }
;;;108    
;;;109      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;110       ** No loop unrolling is used. */
;;;111      blkCnt = blockSize % 0x4u;
000044  f0030303          AND      r3,r3,#3
;;;112    
;;;113      while(blkCnt > 0u)
000048  e005              B        |L1.86|
                  |L1.74|
;;;114      {
;;;115        /* C = A - B */
;;;116        /* Subtract and then store the result in the destination buffer. */
;;;117        *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
00004a  c810              LDM      r0!,{r4}
00004c  c920              LDM      r1!,{r5}
00004e  fa85f4a4          QSUB     r4,r4,r5
000052  c210              STM      r2!,{r4}
;;;118    
;;;119        /* Decrement the loop counter */
;;;120        blkCnt--;
000054  1e5b              SUBS     r3,r3,#1
                  |L1.86|
000056  2b00              CMP      r3,#0                 ;113
000058  d1f7              BNE      |L1.74|
;;;121      }
;;;122    
;;;123    #else
;;;124    
;;;125      /* Run the below code for Cortex-M0 */
;;;126    
;;;127      /* Initialize blkCnt with number of samples */
;;;128      blkCnt = blockSize;
;;;129    
;;;130      while(blkCnt > 0u)
;;;131      {
;;;132        /* C = A - B */
;;;133        /* Subtract and then store the result in the destination buffer. */
;;;134        *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrcA++ - *pSrcB++);
;;;135    
;;;136        /* Decrement the loop counter */
;;;137        blkCnt--;
;;;138      }
;;;139    
;;;140    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;141    
;;;142    }
00005a  e8bd8ff0          POP      {r4-r11,pc}
;;;143    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_sub_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q31_c_2f3e2058____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_sub_q31_c_2f3e2058____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q31_c_2f3e2058____REVSH|
#line 144
|__asm___13_arm_sub_q31_c_2f3e2058____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q31_c_2f3e2058____RRX|
#line 300
|__asm___13_arm_sub_q31_c_2f3e2058____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
