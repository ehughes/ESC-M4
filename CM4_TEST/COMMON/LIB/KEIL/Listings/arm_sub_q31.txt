; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_sub_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sub_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_sub_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_sub_q31.c]
                          THUMB

                          AREA ||i.arm_sub_q31||, CODE, READONLY, ALIGN=1

                  arm_sub_q31 PROC
;;;65     
;;;66     void arm_sub_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;67       q31_t * pSrcA,
;;;68       q31_t * pSrcB,
;;;69       q31_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       q31_t inA1, inA2, inA3, inA4;
;;;79       q31_t inB1, inB2, inB3, inB4;
;;;80     
;;;81       /*loop Unrolling */
;;;82       blkCnt = blockSize >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e019              B        |L1.60|
                  |L1.8|
000008  e8f0c802          LDRD     r12,r8,[r0],#8        ;71
;;;83     
;;;84       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;85        ** a second loop below computes the remaining 1 to 3 samples. */
;;;86       while(blkCnt > 0u)
;;;87       {
;;;88         /* C = A - B */
;;;89         /* Subtract and then store the results in the destination buffer. */
;;;90         inA1 = *pSrcA++;
;;;91         inA2 = *pSrcA++;
;;;92         inB1 = *pSrcB++;
00000c  f851ab04          LDR      r10,[r1],#4
;;;93         inB2 = *pSrcB++;
000010  e8f06502          LDRD     r6,r5,[r0],#8
000014  c980              LDM      r1!,{r7}
;;;94     
;;;95         inA3 = *pSrcA++;
;;;96         inA4 = *pSrcA++;
000016  46ab              MOV      r11,r5
;;;97         inB3 = *pSrcB++;
000018  f8515b08          LDR      r5,[r1],#8
;;;98         inB4 = *pSrcB++;
00001c  f8519c04          LDR      r9,[r1,#-4]
;;;99     
;;;100        *pDst++ = __QSUB(inA1, inB1);
000020  fa8afcac          QSUB     r12,r12,r10
000024  f842cb04          STR      r12,[r2],#4
;;;101        *pDst++ = __QSUB(inA2, inB2);
000028  fa87f7a8          QSUB     r7,r8,r7
;;;102        *pDst++ = __QSUB(inA3, inB3);
00002c  fa85f5a6          QSUB     r5,r6,r5
000030  e8e27502          STRD     r7,r5,[r2],#8
;;;103        *pDst++ = __QSUB(inA4, inB4);
000034  fa89f5ab          QSUB     r5,r11,r9
000038  c220              STM      r2!,{r5}
00003a  1e64              SUBS     r4,r4,#1
                  |L1.60|
00003c  2c00              CMP      r4,#0                 ;86
00003e  d1e3              BNE      |L1.8|
;;;104    
;;;105        /* Decrement the loop counter */
;;;106        blkCnt--;
;;;107      }
;;;108    
;;;109      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;110       ** No loop unrolling is used. */
;;;111      blkCnt = blockSize % 0x4u;
000040  f0030303          AND      r3,r3,#3
;;;112    
;;;113      while(blkCnt > 0u)
000044  e005              B        |L1.82|
                  |L1.70|
;;;114      {
;;;115        /* C = A - B */
;;;116        /* Subtract and then store the result in the destination buffer. */
;;;117        *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
000046  c810              LDM      r0!,{r4}
000048  c920              LDM      r1!,{r5}
00004a  fa85f4a4          QSUB     r4,r4,r5
00004e  c210              STM      r2!,{r4}
000050  1e5b              SUBS     r3,r3,#1
                  |L1.82|
000052  2b00              CMP      r3,#0                 ;113
000054  d1f7              BNE      |L1.70|
;;;118    
;;;119        /* Decrement the loop counter */
;;;120        blkCnt--;
;;;121      }
;;;122    
;;;123    #else
;;;124    
;;;125      /* Run the below code for Cortex-M0 */
;;;126    
;;;127      /* Initialize blkCnt with number of samples */
;;;128      blkCnt = blockSize;
;;;129    
;;;130      while(blkCnt > 0u)
;;;131      {
;;;132        /* C = A - B */
;;;133        /* Subtract and then store the result in the destination buffer. */
;;;134        *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrcA++ - *pSrcB++);
;;;135    
;;;136        /* Decrement the loop counter */
;;;137        blkCnt--;
;;;138      }
;;;139    
;;;140    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;141    
;;;142    }
000056  e8bd8ff0          POP      {r4-r11,pc}
;;;143    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_sub_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q31_c_2f3e2058____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_sub_q31_c_2f3e2058____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q31_c_2f3e2058____REVSH|
#line 144
|__asm___13_arm_sub_q31_c_2f3e2058____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_sub_q31_c_2f3e2058____RRX|
#line 300
|__asm___13_arm_sub_q31_c_2f3e2058____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
