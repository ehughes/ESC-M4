; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_min_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_min_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_min_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_min_q31.c]
                          THUMB

                          AREA ||i.arm_min_q31||, CODE, READONLY, ALIGN=1

                  arm_min_q31 PROC
;;;63     
;;;64     void arm_min_q31(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;65       q31_t * pSrc,
;;;66       uint32_t blockSize,
;;;67       q31_t * pResult,
;;;68       uint32_t * pIndex)
;;;69     {
000004  4699              MOV      r9,r3
;;;70     #ifndef ARM_MATH_CM0_FAMILY
;;;71     
;;;72       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;73       q31_t minVal1, minVal2, out;                   /* Temporary variables to store the output value. */
;;;74       uint32_t blkCnt, outIndex, count;              /* loop counter */
;;;75     
;;;76       /* Initialise the count value. */
;;;77       count = 0u;
000006  2400              MOVS     r4,#0
;;;78       /* Initialise the index value to zero. */
;;;79       outIndex = 0u;
;;;80       /* Load first input value that act as reference value for comparision */
;;;81       out = *pSrc++;
000008  c808              LDM      r0!,{r3}
;;;82     
;;;83     
;;;84       /* Loop unrolling */
;;;85       blkCnt = (blockSize - 1u) >> 2u;
00000a  f1a10c01          SUB      r12,r1,#1
00000e  4625              MOV      r5,r4                 ;79
000010  ea4f069c          LSR      r6,r12,#2
000014  e017              B        |L1.70|
                  |L1.22|
;;;86     
;;;87       while(blkCnt > 0)
;;;88       {
;;;89         /* Initialize minVal to the next consecutive values one by one */
;;;90         minVal1 = *pSrc++;
000016  c880              LDM      r0!,{r7}
;;;91         minVal2 = *pSrc++;
000018  f8508b04          LDR      r8,[r0],#4
;;;92     
;;;93         /* compare for the minimum value */
;;;94         if(out > minVal1)
00001c  42bb              CMP      r3,r7
00001e  dd01              BLE      |L1.36|
;;;95         {
;;;96           /* Update the minimum value and its index */
;;;97           out = minVal1;
000020  463b              MOV      r3,r7
;;;98           outIndex = count + 1u;
000022  1c65              ADDS     r5,r4,#1
                  |L1.36|
;;;99         }
;;;100    
;;;101        minVal1 = *pSrc++;
000024  c880              LDM      r0!,{r7}
;;;102    
;;;103        /* compare for the minimum value */
;;;104        if(out > minVal2)
000026  4543              CMP      r3,r8
000028  dd01              BLE      |L1.46|
;;;105        {
;;;106          /* Update the minimum value and its index */
;;;107          out = minVal2;
00002a  4643              MOV      r3,r8
;;;108          outIndex = count + 2u;
00002c  1ca5              ADDS     r5,r4,#2
                  |L1.46|
;;;109        }
;;;110    
;;;111        minVal2 = *pSrc++;
00002e  f8508b04          LDR      r8,[r0],#4
;;;112    
;;;113        /* compare for the minimum value */
;;;114        if(out > minVal1)
000032  42bb              CMP      r3,r7
000034  dd01              BLE      |L1.58|
;;;115        {
;;;116          /* Update the minimum value and its index */
;;;117          out = minVal1;
000036  463b              MOV      r3,r7
;;;118          outIndex = count + 3u;
000038  1ce5              ADDS     r5,r4,#3
                  |L1.58|
;;;119        }
;;;120    
;;;121        /* compare for the minimum value */
;;;122        if(out > minVal2)
00003a  4543              CMP      r3,r8
00003c  dd01              BLE      |L1.66|
;;;123        {
;;;124          /* Update the minimum value and its index */
;;;125          out = minVal2;
00003e  4643              MOV      r3,r8
;;;126          outIndex = count + 4u;
000040  1d25              ADDS     r5,r4,#4
                  |L1.66|
000042  1d24              ADDS     r4,r4,#4
000044  1e76              SUBS     r6,r6,#1
                  |L1.70|
000046  2e00              CMP      r6,#0                 ;87
000048  d1e5              BNE      |L1.22|
;;;127        }
;;;128    
;;;129        count += 4u;
;;;130    
;;;131        blkCnt--;
;;;132      }
;;;133    
;;;134      /* if (blockSize - 1u ) is not multiple of 4 */
;;;135      blkCnt = (blockSize - 1u) % 4u;
00004a  f00c0403          AND      r4,r12,#3
;;;136    
;;;137    #else
;;;138    
;;;139      /* Run the below code for Cortex-M0 */
;;;140      q31_t minVal1, out;                            /* Temporary variables to store the output value. */
;;;141      uint32_t blkCnt, outIndex;                     /* loop counter */
;;;142    
;;;143      blkCnt = (blockSize - 1u);
;;;144    
;;;145      /* Initialise the index value to zero. */
;;;146      outIndex = 0u;
;;;147      /* Load first input value that act as reference value for comparision */
;;;148      out = *pSrc++;
;;;149    
;;;150    #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;151    
;;;152      while(blkCnt > 0)
00004e  e005              B        |L1.92|
                  |L1.80|
;;;153      {
;;;154        /* Initialize minVal to the next consecutive values one by one */
;;;155        minVal1 = *pSrc++;
000050  c840              LDM      r0!,{r6}
;;;156    
;;;157        /* compare for the minimum value */
;;;158        if(out > minVal1)
000052  42b3              CMP      r3,r6
000054  dd01              BLE      |L1.90|
;;;159        {
;;;160          /* Update the minimum value and it's index */
;;;161          out = minVal1;
000056  4633              MOV      r3,r6
;;;162          outIndex = blockSize - blkCnt;
000058  1b0d              SUBS     r5,r1,r4
                  |L1.90|
00005a  1e64              SUBS     r4,r4,#1
                  |L1.92|
00005c  2c00              CMP      r4,#0                 ;152
00005e  d1f7              BNE      |L1.80|
;;;163        }
;;;164    
;;;165        blkCnt--;
;;;166    
;;;167      }
;;;168    
;;;169      /* Store the minimum value and its index into destination pointers */
;;;170      *pResult = out;
;;;171      *pIndex = outIndex;
000060  6013              STR      r3,[r2,#0]
000062  f8c95000          STR      r5,[r9,#0]
;;;172    }
000066  e8bd83f0          POP      {r4-r9,pc}
;;;173    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_min_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_min_q31_c_a93be82a____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_min_q31_c_a93be82a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_min_q31_c_a93be82a____REVSH|
#line 144
|__asm___13_arm_min_q31_c_a93be82a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_min_q31_c_a93be82a____RRX|
#line 300
|__asm___13_arm_min_q31_c_a93be82a____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
