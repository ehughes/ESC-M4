; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_partial_fast_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_partial_fast_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_conv_partial_fast_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_partial_fast_q31.c]
                          THUMB

                          AREA ||i.arm_conv_partial_fast_q31||, CODE, READONLY, ALIGN=1

                  arm_conv_partial_fast_q31 PROC
;;;66     
;;;67     arm_status arm_conv_partial_fast_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;68       q31_t * pSrcA,
;;;69       uint32_t srcALen,
;;;70       q31_t * pSrcB,
;;;71       uint32_t srcBLen,
;;;72       q31_t * pDst,
;;;73       uint32_t firstIndex,
;;;74       uint32_t numPoints)
;;;75     {
000004  b08d              SUB      sp,sp,#0x34
000006  e9dd751b          LDRD     r7,r5,[sp,#0x6c]
00000a  9c1a              LDR      r4,[sp,#0x68]
;;;76       q31_t *pIn1;                                   /* inputA pointer               */
;;;77       q31_t *pIn2;                                   /* inputB pointer               */
;;;78       q31_t *pOut = pDst;                            /* output pointer               */
;;;79       q31_t *px;                                     /* Intermediate inputA pointer  */
;;;80       q31_t *py;                                     /* Intermediate inputB pointer  */
;;;81       q31_t *pSrc1, *pSrc2;                          /* Intermediate pointers        */
;;;82       q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulators                  */
;;;83       q31_t x0, x1, x2, x3, c0;
;;;84       uint32_t j, k, count, check, blkCnt;
;;;85       int32_t blockSize1, blockSize2, blockSize3;    /* loop counters                 */
;;;86       arm_status status;                             /* status of Partial convolution */
;;;87     
;;;88     
;;;89       /* Check for range of output samples to be calculated */
;;;90       if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
00000c  9e0e              LDR      r6,[sp,#0x38]
00000e  1979              ADDS     r1,r7,r5
000010  441e              ADD      r6,r6,r3
000012  1e76              SUBS     r6,r6,#1
000014  42b1              CMP      r1,r6
000016  d904              BLS      |L1.34|
;;;91       {
;;;92         /* Set status as ARM_MATH_ARGUMENT_ERROR */
;;;93         status = ARM_MATH_ARGUMENT_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L1.28|
;;;94       }
;;;95       else
;;;96       {
;;;97     
;;;98         /* The algorithm implementation is based on the lengths of the inputs. */
;;;99         /* srcB is always made to slide across srcA. */
;;;100        /* So srcBLen is always considered as shorter or equal to srcALen */
;;;101        if(srcALen >= srcBLen)
;;;102        {
;;;103          /* Initialization of inputA pointer */
;;;104          pIn1 = pSrcA;
;;;105    
;;;106          /* Initialization of inputB pointer */
;;;107          pIn2 = pSrcB;
;;;108        }
;;;109        else
;;;110        {
;;;111          /* Initialization of inputA pointer */
;;;112          pIn1 = pSrcB;
;;;113    
;;;114          /* Initialization of inputB pointer */
;;;115          pIn2 = pSrcA;
;;;116    
;;;117          /* srcBLen is always considered as shorter or equal to srcALen */
;;;118          j = srcBLen;
;;;119          srcBLen = srcALen;
;;;120          srcALen = j;
;;;121        }
;;;122    
;;;123        /* Conditions to check which loopCounter holds    
;;;124         * the first and last indices of the output samples to be calculated. */
;;;125        check = firstIndex + numPoints;
;;;126        blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
;;;127        blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;
;;;128        blockSize1 = (((int32_t) srcBLen - 1) - (int32_t) firstIndex);
;;;129        blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
;;;130                                         (int32_t) numPoints) : 0;
;;;131        blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
;;;132                                        (int32_t) firstIndex);
;;;133        blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
;;;134    
;;;135        /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;136        /* The function is internally    
;;;137         * divided into three stages according to the number of multiplications that has to be    
;;;138         * taken place between inputA samples and inputB samples. In the first stage of the    
;;;139         * algorithm, the multiplications increase by one for every iteration.    
;;;140         * In the second stage of the algorithm, srcBLen number of multiplications are done.    
;;;141         * In the third stage of the algorithm, the multiplications decrease by one    
;;;142         * for every iteration. */
;;;143    
;;;144        /* Set the output pointer to point to the firstIndex    
;;;145         * of the output sample to be calculated. */
;;;146        pOut = pDst + firstIndex;
;;;147    
;;;148        /* --------------------------    
;;;149         * Initializations of stage1    
;;;150         * -------------------------*/
;;;151    
;;;152        /* sum = x[0] * y[0]    
;;;153         * sum = x[0] * y[1] + x[1] * y[0]    
;;;154         * ....    
;;;155         * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]    
;;;156         */
;;;157    
;;;158        /* In this stage the MAC operations are increased by 1 for every iteration.    
;;;159           The count variable holds the number of MAC operations performed.    
;;;160           Since the partial convolution starts from firstIndex    
;;;161           Number of Macs to be performed is firstIndex + 1 */
;;;162        count = 1u + firstIndex;
;;;163    
;;;164        /* Working pointer of inputA */
;;;165        px = pIn1;
;;;166    
;;;167        /* Working pointer of inputB */
;;;168        pSrc2 = pIn2 + firstIndex;
;;;169        py = pSrc2;
;;;170    
;;;171        /* ------------------------    
;;;172         * Stage1 process    
;;;173         * ----------------------*/
;;;174    
;;;175        /* The first loop starts here */
;;;176        while(blockSize1 > 0)
;;;177        {
;;;178          /* Accumulator is made zero for every iteration */
;;;179          sum = 0;
;;;180    
;;;181          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;182          k = count >> 2u;
;;;183    
;;;184          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;185           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;186          while(k > 0u)
;;;187          {
;;;188            /* x[0] * y[srcBLen - 1] */
;;;189            sum = (q31_t) ((((q63_t) sum << 32) +
;;;190                            ((q63_t) * px++ * (*py--))) >> 32);
;;;191    
;;;192            /* x[1] * y[srcBLen - 2] */
;;;193            sum = (q31_t) ((((q63_t) sum << 32) +
;;;194                            ((q63_t) * px++ * (*py--))) >> 32);
;;;195    
;;;196            /* x[2] * y[srcBLen - 3] */
;;;197            sum = (q31_t) ((((q63_t) sum << 32) +
;;;198                            ((q63_t) * px++ * (*py--))) >> 32);
;;;199    
;;;200            /* x[3] * y[srcBLen - 4] */
;;;201            sum = (q31_t) ((((q63_t) sum << 32) +
;;;202                            ((q63_t) * px++ * (*py--))) >> 32);
;;;203    
;;;204            /* Decrement the loop counter */
;;;205            k--;
;;;206          }
;;;207    
;;;208          /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;209           ** No loop unrolling is used. */
;;;210          k = count % 0x4u;
;;;211    
;;;212          while(k > 0u)
;;;213          {
;;;214            /* Perform the multiply-accumulates */
;;;215            sum = (q31_t) ((((q63_t) sum << 32) +
;;;216                            ((q63_t) * px++ * (*py--))) >> 32);
;;;217    
;;;218            /* Decrement the loop counter */
;;;219            k--;
;;;220          }
;;;221    
;;;222          /* Store the result in the accumulator in the destination buffer. */
;;;223          *pOut++ = sum << 1;
;;;224    
;;;225          /* Update the inputA and inputB pointers for next MAC calculation */
;;;226          py = ++pSrc2;
;;;227          px = pIn1;
;;;228    
;;;229          /* Increment the MAC count */
;;;230          count++;
;;;231    
;;;232          /* Decrement the loop counter */
;;;233          blockSize1--;
;;;234        }
;;;235    
;;;236        /* --------------------------    
;;;237         * Initializations of stage2    
;;;238         * ------------------------*/
;;;239    
;;;240        /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]    
;;;241         * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]    
;;;242         * ....    
;;;243         * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]    
;;;244         */
;;;245    
;;;246        /* Working pointer of inputA */
;;;247        if((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
;;;248        {
;;;249          px = pIn1 + firstIndex - srcBLen + 1;
;;;250        }
;;;251        else
;;;252        {
;;;253          px = pIn1;
;;;254        }
;;;255    
;;;256        /* Working pointer of inputB */
;;;257        pSrc2 = pIn2 + (srcBLen - 1u);
;;;258        py = pSrc2;
;;;259    
;;;260        /* count is index by which the pointer pIn1 to be incremented */
;;;261        count = 0u;
;;;262    
;;;263        /* -------------------    
;;;264         * Stage2 process    
;;;265         * ------------------*/
;;;266    
;;;267        /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.    
;;;268         * So, to loop unroll over blockSize2,    
;;;269         * srcBLen should be greater than or equal to 4 */
;;;270        if(srcBLen >= 4u)
;;;271        {
;;;272          /* Loop unroll over blockSize2 */
;;;273          blkCnt = ((uint32_t) blockSize2 >> 2u);
;;;274    
;;;275          while(blkCnt > 0u)
;;;276          {
;;;277            /* Set all accumulators to zero */
;;;278            acc0 = 0;
;;;279            acc1 = 0;
;;;280            acc2 = 0;
;;;281            acc3 = 0;
;;;282    
;;;283            /* read x[0], x[1], x[2] samples */
;;;284            x0 = *(px++);
;;;285            x1 = *(px++);
;;;286            x2 = *(px++);
;;;287    
;;;288            /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;289            k = srcBLen >> 2u;
;;;290    
;;;291            /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;292             ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;293            do
;;;294            {
;;;295              /* Read y[srcBLen - 1] sample */
;;;296              c0 = *(py--);
;;;297    
;;;298              /* Read x[3] sample */
;;;299              x3 = *(px++);
;;;300    
;;;301              /* Perform the multiply-accumulate */
;;;302              /* acc0 +=  x[0] * y[srcBLen - 1] */
;;;303              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;304    
;;;305              /* acc1 +=  x[1] * y[srcBLen - 1] */
;;;306              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;307    
;;;308              /* acc2 +=  x[2] * y[srcBLen - 1] */
;;;309              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;310    
;;;311              /* acc3 +=  x[3] * y[srcBLen - 1] */
;;;312              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;313    
;;;314              /* Read y[srcBLen - 2] sample */
;;;315              c0 = *(py--);
;;;316    
;;;317              /* Read x[4] sample */
;;;318              x0 = *(px++);
;;;319    
;;;320              /* Perform the multiply-accumulate */
;;;321              /* acc0 +=  x[1] * y[srcBLen - 2] */
;;;322              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;323              /* acc1 +=  x[2] * y[srcBLen - 2] */
;;;324              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;325              /* acc2 +=  x[3] * y[srcBLen - 2] */
;;;326              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;327              /* acc3 +=  x[4] * y[srcBLen - 2] */
;;;328              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;329    
;;;330              /* Read y[srcBLen - 3] sample */
;;;331              c0 = *(py--);
;;;332    
;;;333              /* Read x[5] sample */
;;;334              x1 = *(px++);
;;;335    
;;;336              /* Perform the multiply-accumulates */
;;;337              /* acc0 +=  x[2] * y[srcBLen - 3] */
;;;338              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;339              /* acc1 +=  x[3] * y[srcBLen - 2] */
;;;340              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;341              /* acc2 +=  x[4] * y[srcBLen - 2] */
;;;342              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;343              /* acc3 +=  x[5] * y[srcBLen - 2] */
;;;344              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;345    
;;;346              /* Read y[srcBLen - 4] sample */
;;;347              c0 = *(py--);
;;;348    
;;;349              /* Read x[6] sample */
;;;350              x2 = *(px++);
;;;351    
;;;352              /* Perform the multiply-accumulates */
;;;353              /* acc0 +=  x[3] * y[srcBLen - 4] */
;;;354              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;355              /* acc1 +=  x[4] * y[srcBLen - 4] */
;;;356              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;357              /* acc2 +=  x[5] * y[srcBLen - 4] */
;;;358              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;359              /* acc3 +=  x[6] * y[srcBLen - 4] */
;;;360              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;361    
;;;362    
;;;363            } while(--k);
;;;364    
;;;365            /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;366             ** No loop unrolling is used. */
;;;367            k = srcBLen % 0x4u;
;;;368    
;;;369            while(k > 0u)
;;;370            {
;;;371              /* Read y[srcBLen - 5] sample */
;;;372              c0 = *(py--);
;;;373    
;;;374              /* Read x[7] sample */
;;;375              x3 = *(px++);
;;;376    
;;;377              /* Perform the multiply-accumulates */
;;;378              /* acc0 +=  x[4] * y[srcBLen - 5] */
;;;379              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;380              /* acc1 +=  x[5] * y[srcBLen - 5] */
;;;381              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;382              /* acc2 +=  x[6] * y[srcBLen - 5] */
;;;383              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;384              /* acc3 +=  x[7] * y[srcBLen - 5] */
;;;385              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;386    
;;;387              /* Reuse the present samples for the next MAC */
;;;388              x0 = x1;
;;;389              x1 = x2;
;;;390              x2 = x3;
;;;391    
;;;392              /* Decrement the loop counter */
;;;393              k--;
;;;394            }
;;;395    
;;;396            /* Store the result in the accumulator in the destination buffer. */
;;;397            *pOut++ = (q31_t) (acc0 << 1);
;;;398            *pOut++ = (q31_t) (acc1 << 1);
;;;399            *pOut++ = (q31_t) (acc2 << 1);
;;;400            *pOut++ = (q31_t) (acc3 << 1);
;;;401    
;;;402            /* Increment the pointer pIn1 index, count by 4 */
;;;403            count += 4u;
;;;404    
;;;405            /* Update the inputA and inputB pointers for next MAC calculation */
;;;406            px = pIn1 + count;
;;;407            py = pSrc2;
;;;408    
;;;409            /* Decrement the loop counter */
;;;410            blkCnt--;
;;;411          }
;;;412    
;;;413          /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.    
;;;414           ** No loop unrolling is used. */
;;;415          blkCnt = (uint32_t) blockSize2 % 0x4u;
;;;416    
;;;417          while(blkCnt > 0u)
;;;418          {
;;;419            /* Accumulator is made zero for every iteration */
;;;420            sum = 0;
;;;421    
;;;422            /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;423            k = srcBLen >> 2u;
;;;424    
;;;425            /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;426             ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;427            while(k > 0u)
;;;428            {
;;;429              /* Perform the multiply-accumulates */
;;;430              sum = (q31_t) ((((q63_t) sum << 32) +
;;;431                              ((q63_t) * px++ * (*py--))) >> 32);
;;;432              sum = (q31_t) ((((q63_t) sum << 32) +
;;;433                              ((q63_t) * px++ * (*py--))) >> 32);
;;;434              sum = (q31_t) ((((q63_t) sum << 32) +
;;;435                              ((q63_t) * px++ * (*py--))) >> 32);
;;;436              sum = (q31_t) ((((q63_t) sum << 32) +
;;;437                              ((q63_t) * px++ * (*py--))) >> 32);
;;;438    
;;;439              /* Decrement the loop counter */
;;;440              k--;
;;;441            }
;;;442    
;;;443            /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;444             ** No loop unrolling is used. */
;;;445            k = srcBLen % 0x4u;
;;;446    
;;;447            while(k > 0u)
;;;448            {
;;;449              /* Perform the multiply-accumulate */
;;;450              sum = (q31_t) ((((q63_t) sum << 32) +
;;;451                              ((q63_t) * px++ * (*py--))) >> 32);
;;;452    
;;;453              /* Decrement the loop counter */
;;;454              k--;
;;;455            }
;;;456    
;;;457            /* Store the result in the accumulator in the destination buffer. */
;;;458            *pOut++ = sum << 1;
;;;459    
;;;460            /* Increment the MAC count */
;;;461            count++;
;;;462    
;;;463            /* Update the inputA and inputB pointers for next MAC calculation */
;;;464            px = pIn1 + count;
;;;465            py = pSrc2;
;;;466    
;;;467            /* Decrement the loop counter */
;;;468            blkCnt--;
;;;469          }
;;;470        }
;;;471        else
;;;472        {
;;;473          /* If the srcBLen is not a multiple of 4,    
;;;474           * the blockSize2 loop cannot be unrolled by 4 */
;;;475          blkCnt = (uint32_t) blockSize2;
;;;476    
;;;477          while(blkCnt > 0u)
;;;478          {
;;;479            /* Accumulator is made zero for every iteration */
;;;480            sum = 0;
;;;481    
;;;482            /* srcBLen number of MACS should be performed */
;;;483            k = srcBLen;
;;;484    
;;;485            while(k > 0u)
;;;486            {
;;;487              /* Perform the multiply-accumulate */
;;;488              sum = (q31_t) ((((q63_t) sum << 32) +
;;;489                              ((q63_t) * px++ * (*py--))) >> 32);
;;;490    
;;;491              /* Decrement the loop counter */
;;;492              k--;
;;;493            }
;;;494    
;;;495            /* Store the result in the accumulator in the destination buffer. */
;;;496            *pOut++ = sum << 1;
;;;497    
;;;498            /* Increment the MAC count */
;;;499            count++;
;;;500    
;;;501            /* Update the inputA and inputB pointers for next MAC calculation */
;;;502            px = pIn1 + count;
;;;503            py = pSrc2;
;;;504    
;;;505            /* Decrement the loop counter */
;;;506            blkCnt--;
;;;507          }
;;;508        }
;;;509    
;;;510    
;;;511        /* --------------------------    
;;;512         * Initializations of stage3    
;;;513         * -------------------------*/
;;;514    
;;;515        /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]    
;;;516         * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]    
;;;517         * ....    
;;;518         * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]    
;;;519         * sum +=  x[srcALen-1] * y[srcBLen-1]    
;;;520         */
;;;521    
;;;522        /* In this stage the MAC operations are decreased by 1 for every iteration.    
;;;523           The count variable holds the number of MAC operations performed */
;;;524        count = srcBLen - 1u;
;;;525    
;;;526        /* Working pointer of inputA */
;;;527        pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
;;;528        px = pSrc1;
;;;529    
;;;530        /* Working pointer of inputB */
;;;531        pSrc2 = pIn2 + (srcBLen - 1u);
;;;532        py = pSrc2;
;;;533    
;;;534        /* -------------------    
;;;535         * Stage3 process    
;;;536         * ------------------*/
;;;537    
;;;538        while(blockSize3 > 0)
;;;539        {
;;;540          /* Accumulator is made zero for every iteration */
;;;541          sum = 0;
;;;542    
;;;543          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;544          k = count >> 2u;
;;;545    
;;;546          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;547           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;548          while(k > 0u)
;;;549          {
;;;550            /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
;;;551            sum = (q31_t) ((((q63_t) sum << 32) +
;;;552                            ((q63_t) * px++ * (*py--))) >> 32);
;;;553    
;;;554            /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
;;;555            sum = (q31_t) ((((q63_t) sum << 32) +
;;;556                            ((q63_t) * px++ * (*py--))) >> 32);
;;;557    
;;;558            /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
;;;559            sum = (q31_t) ((((q63_t) sum << 32) +
;;;560                            ((q63_t) * px++ * (*py--))) >> 32);
;;;561    
;;;562            /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
;;;563            sum = (q31_t) ((((q63_t) sum << 32) +
;;;564                            ((q63_t) * px++ * (*py--))) >> 32);
;;;565    
;;;566            /* Decrement the loop counter */
;;;567            k--;
;;;568          }
;;;569    
;;;570          /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;571           ** No loop unrolling is used. */
;;;572          k = count % 0x4u;
;;;573    
;;;574          while(k > 0u)
;;;575          {
;;;576            /* Perform the multiply-accumulates */
;;;577            /* sum +=  x[srcALen-1] * y[srcBLen-1] */
;;;578            sum = (q31_t) ((((q63_t) sum << 32) +
;;;579                            ((q63_t) * px++ * (*py--))) >> 32);
;;;580    
;;;581            /* Decrement the loop counter */
;;;582            k--;
;;;583          }
;;;584    
;;;585          /* Store the result in the accumulator in the destination buffer. */
;;;586          *pOut++ = sum << 1;
;;;587    
;;;588          /* Update the inputA and inputB pointers for next MAC calculation */
;;;589          px = ++pSrc1;
;;;590          py = pSrc2;
;;;591    
;;;592          /* Decrement the MAC count */
;;;593          count--;
;;;594    
;;;595          /* Decrement the loop counter */
;;;596          blockSize3--;
;;;597    
;;;598        }
;;;599    
;;;600        /* set status as ARM_MATH_SUCCESS */
;;;601        status = ARM_MATH_SUCCESS;
;;;602      }
;;;603    
;;;604      /* Return to application */
;;;605      return (status);
;;;606    
;;;607    }
00001c  b011              ADD      sp,sp,#0x44
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.34|
000022  9e0e              LDR      r6,[sp,#0x38]         ;101
000024  429e              CMP      r6,r3                 ;101
000026  d302              BCC      |L1.46|
000028  900a              STR      r0,[sp,#0x28]         ;104
00002a  4610              MOV      r0,r2                 ;107
00002c  e003              B        |L1.54|
                  |L1.46|
00002e  920a              STR      r2,[sp,#0x28]         ;112
000030  461a              MOV      r2,r3                 ;118
000032  9b0e              LDR      r3,[sp,#0x38]         ;119
000034  920e              STR      r2,[sp,#0x38]         ;120
                  |L1.54|
000036  9a0e              LDR      r2,[sp,#0x38]         ;126
000038  4291              CMP      r1,r2                 ;126
00003a  dd02              BLE      |L1.66|
00003c  9a0e              LDR      r2,[sp,#0x38]         ;126
00003e  1a8a              SUBS     r2,r1,r2              ;126
000040  e000              B        |L1.68|
                  |L1.66|
000042  2200              MOVS     r2,#0                 ;126
                  |L1.68|
000044  9e0e              LDR      r6,[sp,#0x38]         ;127
000046  1e76              SUBS     r6,r6,#1              ;127
000048  42b7              CMP      r7,r6                 ;127
00004a  dd02              BLE      |L1.82|
00004c  1bd6              SUBS     r6,r2,r7              ;127
00004e  9a0e              LDR      r2,[sp,#0x38]         ;127
000050  4432              ADD      r2,r2,r6              ;127
                  |L1.82|
000052  9200              STR      r2,[sp,#0]            ;127
000054  eba30907          SUB      r9,r3,r7              ;128
000058  f1a90901          SUB      r9,r9,#1              ;128
00005c  f1b90f00          CMP      r9,#0                 ;129
000060  dd04              BLE      |L1.108|
000062  1e5a              SUBS     r2,r3,#1              ;129
000064  4291              CMP      r1,r2                 ;129
000066  d803              BHI      |L1.112|
000068  46a9              MOV      r9,r5                 ;130
00006a  e001              B        |L1.112|
                  |L1.108|
00006c  f04f0900          MOV      r9,#0                 ;130
                  |L1.112|
000070  9a00              LDR      r2,[sp,#0]            ;131
000072  444a              ADD      r2,r2,r9              ;131
000074  443a              ADD      r2,r2,r7              ;131
000076  1a89              SUBS     r1,r1,r2              ;131
000078  2900              CMP      r1,#0                 ;133
00007a  dc00              BGT      |L1.126|
00007c  2100              MOVS     r1,#0                 ;133
                  |L1.126|
00007e  9101              STR      r1,[sp,#4]            ;133
000080  eb040187          ADD      r1,r4,r7,LSL #2       ;146
000084  f1070801          ADD      r8,r7,#1              ;162
000088  9d0a              LDR      r5,[sp,#0x28]         ;165
00008a  eb000a87          ADD      r10,r0,r7,LSL #2      ;168
00008e  46d4              MOV      r12,r10               ;169
000090  e030              B        |L1.244|
                  |L1.146|
000092  2400              MOVS     r4,#0                 ;179
000094  ea4f0698          LSR      r6,r8,#2              ;182
000098  e015              B        |L1.198|
                  |L1.154|
00009a  682a              LDR      r2,[r5,#0]            ;189
00009c  f85cb904          LDR      r11,[r12],#-4         ;189
0000a0  fb52420b          SMMLA    r2,r2,r11,r4          ;189
0000a4  686c              LDR      r4,[r5,#4]            ;193
0000a6  f85cb904          LDR      r11,[r12],#-4         ;193
0000aa  fb54220b          SMMLA    r2,r4,r11,r2          ;193
0000ae  68ac              LDR      r4,[r5,#8]            ;197
0000b0  f85cb904          LDR      r11,[r12],#-4         ;197
0000b4  fb54220b          SMMLA    r2,r4,r11,r2          ;197
0000b8  68ec              LDR      r4,[r5,#0xc]          ;201
0000ba  f85cb904          LDR      r11,[r12],#-4         ;201
0000be  3510              ADDS     r5,r5,#0x10           ;201
0000c0  fb54240b          SMMLA    r4,r4,r11,r2          ;201
0000c4  1e76              SUBS     r6,r6,#1              ;205
                  |L1.198|
0000c6  2e00              CMP      r6,#0                 ;186
0000c8  d1e7              BNE      |L1.154|
0000ca  f0080203          AND      r2,r8,#3              ;210
0000ce  e005              B        |L1.220|
                  |L1.208|
0000d0  cd40              LDM      r5!,{r6}              ;215
0000d2  f85cb904          LDR      r11,[r12],#-4         ;215
0000d6  fb56440b          SMMLA    r4,r6,r11,r4          ;215
0000da  1e52              SUBS     r2,r2,#1              ;219
                  |L1.220|
0000dc  2a00              CMP      r2,#0                 ;212
0000de  d1f7              BNE      |L1.208|
0000e0  0062              LSLS     r2,r4,#1              ;223
0000e2  c104              STM      r1!,{r2}              ;223
0000e4  f10a0a04          ADD      r10,r10,#4            ;226
0000e8  46d4              MOV      r12,r10               ;226
0000ea  9d0a              LDR      r5,[sp,#0x28]         ;227
0000ec  f1080801          ADD      r8,r8,#1              ;230
0000f0  f1a90901          SUB      r9,r9,#1              ;233
                  |L1.244|
0000f4  f1b90f00          CMP      r9,#0                 ;176
0000f8  dccb              BGT      |L1.146|
0000fa  1afa              SUBS     r2,r7,r3              ;247
0000fc  1c52              ADDS     r2,r2,#1              ;247
0000fe  2a00              CMP      r2,#0                 ;247
000100  dd05              BLE      |L1.270|
000102  9a0a              LDR      r2,[sp,#0x28]         ;249
000104  eb020287          ADD      r2,r2,r7,LSL #2       ;249
000108  eba20583          SUB      r5,r2,r3,LSL #2       ;249
00010c  1d2d              ADDS     r5,r5,#4              ;249
                  |L1.270|
00010e  1e5a              SUBS     r2,r3,#1              ;257
000110  eb000082          ADD      r0,r0,r2,LSL #2       ;257
000114  e9cd020b          STRD     r0,r2,[sp,#0x2c]      ;257
000118  9008              STR      r0,[sp,#0x20]         ;257
00011a  9808              LDR      r0,[sp,#0x20]         ;258
00011c  2600              MOVS     r6,#0                 ;261
00011e  2b04              CMP      r3,#4                 ;270
000120  d37e              BCC      |L1.544|
000122  9a01              LDR      r2,[sp,#4]            ;273
000124  0892              LSRS     r2,r2,#2              ;273
000126  9202              STR      r2,[sp,#8]            ;273
000128  e08e              B        |L1.584|
                  |L1.298|
00012a  2700              MOVS     r7,#0                 ;278
00012c  46bc              MOV      r12,r7                ;279
00012e  46b8              MOV      r8,r7                 ;280
000130  46b9              MOV      r9,r7                 ;281
000132  f8d5b000          LDR      r11,[r5,#0]           ;284
000136  686a              LDR      r2,[r5,#4]            ;285
000138  68ac              LDR      r4,[r5,#8]            ;286
00013a  350c              ADDS     r5,r5,#0xc            ;286
00013c  ea4f0a93          LSR      r10,r3,#2             ;289
000140  f8cda00c          STR      r10,[sp,#0xc]         ;289
                  |L1.324|
000144  f850e904          LDR      lr,[r0],#-4           ;296
000148  9009              STR      r0,[sp,#0x24]         ;296
00014a  f8d5a000          LDR      r10,[r5,#0]           ;299
00014e  fb5b770e          SMMLA    r7,r11,lr,r7          ;303
000152  fb52c00e          SMMLA    r0,r2,lr,r12          ;306
000156  9006              STR      r0,[sp,#0x18]         ;306
000158  fb54800e          SMMLA    r0,r4,lr,r8           ;309
00015c  9005              STR      r0,[sp,#0x14]         ;309
00015e  fb5a9e0e          SMMLA    lr,r10,lr,r9          ;312
000162  f8cde010          STR      lr,[sp,#0x10]         ;312
000166  9809              LDR      r0,[sp,#0x24]         ;315
000168  f8d09000          LDR      r9,[r0,#0]            ;315
00016c  f8d5b004          LDR      r11,[r5,#4]           ;318
000170  fb527c09          SMMLA    r12,r2,r9,r7          ;322
000174  9a06              LDR      r2,[sp,#0x18]         ;324
000176  fb542809          SMMLA    r8,r4,r9,r2           ;324
00017a  9a05              LDR      r2,[sp,#0x14]         ;326
00017c  fb5a2e09          SMMLA    lr,r10,r9,r2          ;326
000180  f8cde014          STR      lr,[sp,#0x14]         ;326
000184  f8dde010          LDR      lr,[sp,#0x10]         ;328
000188  fb5be909          SMMLA    r9,r11,r9,lr          ;328
00018c  f8507c04          LDR      r7,[r0,#-4]           ;331
000190  3808              SUBS     r0,r0,#8              ;331
000192  68aa              LDR      r2,[r5,#8]            ;334
000194  fb54ce07          SMMLA    lr,r4,r7,r12          ;338
000198  f8cde01c          STR      lr,[sp,#0x1c]         ;338
00019c  fb5a8c07          SMMLA    r12,r10,r7,r8         ;340
0001a0  f8dde014          LDR      lr,[sp,#0x14]         ;342
0001a4  fb5be807          SMMLA    r8,r11,r7,lr          ;342
0001a8  fb529e07          SMMLA    lr,r2,r7,r9           ;344
0001ac  f8cde010          STR      lr,[sp,#0x10]         ;344
0001b0  f8509904          LDR      r9,[r0],#-4           ;347
0001b4  68ec              LDR      r4,[r5,#0xc]          ;350
0001b6  3510              ADDS     r5,r5,#0x10           ;350
0001b8  f8dde01c          LDR      lr,[sp,#0x1c]         ;354
0001bc  fb5ae709          SMMLA    r7,r10,r9,lr          ;354
0001c0  fb5bcc09          SMMLA    r12,r11,r9,r12        ;356
0001c4  fb528809          SMMLA    r8,r2,r9,r8           ;358
0001c8  f8dde010          LDR      lr,[sp,#0x10]         ;360
0001cc  fb54e909          SMMLA    r9,r4,r9,lr           ;360
0001d0  f8dda00c          LDR      r10,[sp,#0xc]         ;363
0001d4  f1ba0a01          SUBS     r10,r10,#1            ;363
0001d8  f8cda00c          STR      r10,[sp,#0xc]         ;363
0001dc  d1b2              BNE      |L1.324|
0001de  f0030a03          AND      r10,r3,#3             ;367
0001e2  f8cda00c          STR      r10,[sp,#0xc]         ;367
0001e6  e014              B        |L1.530|
                  |L1.488|
0001e8  f850a904          LDR      r10,[r0],#-4          ;372
0001ec  f855eb04          LDR      lr,[r5],#4            ;375
0001f0  fb5b770a          SMMLA    r7,r11,r10,r7         ;379
0001f4  fb52cc0a          SMMLA    r12,r2,r10,r12        ;381
0001f8  fb54880a          SMMLA    r8,r4,r10,r8          ;383
0001fc  fb5e990a          SMMLA    r9,lr,r10,r9          ;385
000200  4693              MOV      r11,r2                ;388
000202  4622              MOV      r2,r4                 ;389
000204  4674              MOV      r4,lr                 ;390
000206  f8dda00c          LDR      r10,[sp,#0xc]         ;393
00020a  f1aa0a01          SUB      r10,r10,#1            ;393
00020e  f8cda00c          STR      r10,[sp,#0xc]         ;393
                  |L1.530|
000212  f8dda00c          LDR      r10,[sp,#0xc]         ;369
000216  f1ba0f00          CMP      r10,#0                ;369
00021a  d1e5              BNE      |L1.488|
00021c  0078              LSLS     r0,r7,#1              ;397
00021e  e000              B        |L1.546|
                  |L1.544|
000220  e04f              B        |L1.706|
                  |L1.546|
000222  6008              STR      r0,[r1,#0]            ;397
000224  ea4f004c          LSL      r0,r12,#1             ;398
000228  6048              STR      r0,[r1,#4]            ;398
00022a  ea4f0048          LSL      r0,r8,#1              ;399
00022e  6088              STR      r0,[r1,#8]            ;399
000230  ea4f0049          LSL      r0,r9,#1              ;400
000234  60c8              STR      r0,[r1,#0xc]          ;400
000236  3110              ADDS     r1,r1,#0x10           ;400
000238  1d36              ADDS     r6,r6,#4              ;403
00023a  980a              LDR      r0,[sp,#0x28]         ;406
00023c  eb000586          ADD      r5,r0,r6,LSL #2       ;406
000240  9808              LDR      r0,[sp,#0x20]         ;407
000242  9a02              LDR      r2,[sp,#8]            ;410
000244  1e52              SUBS     r2,r2,#1              ;410
000246  9202              STR      r2,[sp,#8]            ;410
                  |L1.584|
000248  9a02              LDR      r2,[sp,#8]            ;275
00024a  2a00              CMP      r2,#0                 ;275
00024c  f47faf6d          BNE      |L1.298|
000250  9a01              LDR      r2,[sp,#4]            ;415
000252  f0020703          AND      r7,r2,#3              ;415
000256  e031              B        |L1.700|
                  |L1.600|
000258  2200              MOVS     r2,#0                 ;420
00025a  089c              LSRS     r4,r3,#2              ;423
00025c  e018              B        |L1.656|
                  |L1.606|
00025e  f855cb04          LDR      r12,[r5],#4           ;430
000262  f8508904          LDR      r8,[r0],#-4           ;430
000266  fb5c2208          SMMLA    r2,r12,r8,r2          ;430
00026a  f855cb04          LDR      r12,[r5],#4           ;432
00026e  f8508904          LDR      r8,[r0],#-4           ;432
000272  fb5c2208          SMMLA    r2,r12,r8,r2          ;432
000276  f855cb04          LDR      r12,[r5],#4           ;434
00027a  f8508904          LDR      r8,[r0],#-4           ;434
00027e  fb5c2208          SMMLA    r2,r12,r8,r2          ;434
000282  f855cb04          LDR      r12,[r5],#4           ;436
000286  f8508904          LDR      r8,[r0],#-4           ;436
00028a  fb5c2208          SMMLA    r2,r12,r8,r2          ;436
00028e  1e64              SUBS     r4,r4,#1              ;440
                  |L1.656|
000290  2c00              CMP      r4,#0                 ;427
000292  d1e4              BNE      |L1.606|
000294  f0030403          AND      r4,r3,#3              ;445
000298  e006              B        |L1.680|
                  |L1.666|
00029a  f855cb04          LDR      r12,[r5],#4           ;450
00029e  f8508904          LDR      r8,[r0],#-4           ;450
0002a2  fb5c2208          SMMLA    r2,r12,r8,r2          ;450
0002a6  1e64              SUBS     r4,r4,#1              ;454
                  |L1.680|
0002a8  2c00              CMP      r4,#0                 ;447
0002aa  d1f6              BNE      |L1.666|
0002ac  0050              LSLS     r0,r2,#1              ;458
0002ae  c101              STM      r1!,{r0}              ;458
0002b0  1c76              ADDS     r6,r6,#1              ;461
0002b2  980a              LDR      r0,[sp,#0x28]         ;464
0002b4  eb000586          ADD      r5,r0,r6,LSL #2       ;464
0002b8  9808              LDR      r0,[sp,#0x20]         ;465
0002ba  1e7f              SUBS     r7,r7,#1              ;468
                  |L1.700|
0002bc  2f00              CMP      r7,#0                 ;417
0002be  d1cb              BNE      |L1.600|
0002c0  e017              B        |L1.754|
                  |L1.706|
0002c2  9f01              LDR      r7,[sp,#4]            ;475
0002c4  e013              B        |L1.750|
                  |L1.710|
0002c6  2400              MOVS     r4,#0                 ;480
0002c8  461a              MOV      r2,r3                 ;483
0002ca  e006              B        |L1.730|
                  |L1.716|
0002cc  f855cb04          LDR      r12,[r5],#4           ;488
0002d0  f8508904          LDR      r8,[r0],#-4           ;488
0002d4  fb5c4408          SMMLA    r4,r12,r8,r4          ;488
0002d8  1e52              SUBS     r2,r2,#1              ;492
                  |L1.730|
0002da  2a00              CMP      r2,#0                 ;485
0002dc  d1f6              BNE      |L1.716|
0002de  0060              LSLS     r0,r4,#1              ;496
0002e0  c101              STM      r1!,{r0}              ;496
0002e2  1c76              ADDS     r6,r6,#1              ;499
0002e4  980a              LDR      r0,[sp,#0x28]         ;502
0002e6  eb000586          ADD      r5,r0,r6,LSL #2       ;502
0002ea  9808              LDR      r0,[sp,#0x20]         ;503
0002ec  1e7f              SUBS     r7,r7,#1              ;506
                  |L1.750|
0002ee  2f00              CMP      r7,#0                 ;477
0002f0  d1e9              BNE      |L1.710|
                  |L1.754|
0002f2  1e5b              SUBS     r3,r3,#1              ;524
0002f4  9a0e              LDR      r2,[sp,#0x38]         ;527
0002f6  980a              LDR      r0,[sp,#0x28]         ;527
0002f8  eb000282          ADD      r2,r0,r2,LSL #2       ;527
0002fc  980c              LDR      r0,[sp,#0x30]         ;527
0002fe  eba20680          SUB      r6,r2,r0,LSL #2       ;527
000302  4630              MOV      r0,r6                 ;528
000304  9f0b              LDR      r7,[sp,#0x2c]         ;531
000306  463a              MOV      r2,r7                 ;532
000308  e032              B        |L1.880|
                  |L1.778|
00030a  2400              MOVS     r4,#0                 ;541
00030c  089d              LSRS     r5,r3,#2              ;544
00030e  e018              B        |L1.834|
                  |L1.784|
000310  f850cb04          LDR      r12,[r0],#4           ;551
000314  f8528904          LDR      r8,[r2],#-4           ;551
000318  fb5c4408          SMMLA    r4,r12,r8,r4          ;551
00031c  f850cb04          LDR      r12,[r0],#4           ;555
000320  f8528904          LDR      r8,[r2],#-4           ;555
000324  fb5c4408          SMMLA    r4,r12,r8,r4          ;555
000328  f850cb04          LDR      r12,[r0],#4           ;559
00032c  f8528904          LDR      r8,[r2],#-4           ;559
000330  fb5c4408          SMMLA    r4,r12,r8,r4          ;559
000334  f850cb04          LDR      r12,[r0],#4           ;563
000338  f8528904          LDR      r8,[r2],#-4           ;563
00033c  fb5c4408          SMMLA    r4,r12,r8,r4          ;563
000340  1e6d              SUBS     r5,r5,#1              ;567
                  |L1.834|
000342  2d00              CMP      r5,#0                 ;548
000344  d1e4              BNE      |L1.784|
000346  f0030503          AND      r5,r3,#3              ;572
00034a  e006              B        |L1.858|
                  |L1.844|
00034c  f850cb04          LDR      r12,[r0],#4           ;578
000350  f8528904          LDR      r8,[r2],#-4           ;578
000354  fb5c4408          SMMLA    r4,r12,r8,r4          ;578
000358  1e6d              SUBS     r5,r5,#1              ;582
                  |L1.858|
00035a  2d00              CMP      r5,#0                 ;574
00035c  d1f6              BNE      |L1.844|
00035e  0060              LSLS     r0,r4,#1              ;586
000360  c101              STM      r1!,{r0}              ;586
000362  1d30              ADDS     r0,r6,#4              ;589
000364  4606              MOV      r6,r0                 ;589
000366  463a              MOV      r2,r7                 ;590
000368  1e5b              SUBS     r3,r3,#1              ;593
00036a  9c00              LDR      r4,[sp,#0]            ;596
00036c  1e64              SUBS     r4,r4,#1              ;596
00036e  9400              STR      r4,[sp,#0]            ;596
                  |L1.880|
000370  9c00              LDR      r4,[sp,#0]            ;538
000372  2c00              CMP      r4,#0                 ;538
000374  dcc9              BGT      |L1.778|
000376  2000              MOVS     r0,#0                 ;601
000378  e650              B        |L1.28|
;;;608    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_partial_fast_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REVSH|
#line 144
|__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____RRX|
#line 300
|__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
