; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_partial_fast_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_partial_fast_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_partial_fast_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_partial_fast_q31.c]
                          THUMB

                          AREA ||i.arm_conv_partial_fast_q31||, CODE, READONLY, ALIGN=2

                  arm_conv_partial_fast_q31 PROC
;;;66     
;;;67     arm_status arm_conv_partial_fast_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;68       q31_t * pSrcA,
;;;69       uint32_t srcALen,
;;;70       q31_t * pSrcB,
;;;71       uint32_t srcBLen,
;;;72       q31_t * pDst,
;;;73       uint32_t firstIndex,
;;;74       uint32_t numPoints)
;;;75     {
000004  b094              SUB      sp,sp,#0x50
000006  468e              MOV      lr,r1
000008  e9dd141e          LDRD     r1,r4,[sp,#0x78]
;;;76       q31_t *pIn1;                                   /* inputA pointer               */
;;;77       q31_t *pIn2;                                   /* inputB pointer               */
;;;78       q31_t *pOut = pDst;                            /* output pointer               */
;;;79       q31_t *px;                                     /* Intermediate inputA pointer  */
;;;80       q31_t *py;                                     /* Intermediate inputB pointer  */
;;;81       q31_t *pSrc1, *pSrc2;                          /* Intermediate pointers        */
;;;82       q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulators                  */
;;;83       q31_t x0, x1, x2, x3, c0;
;;;84       uint32_t j, k, count, check, blkCnt;
;;;85       int32_t blockSize1, blockSize2, blockSize3;    /* loop counters                 */
;;;86       arm_status status;                             /* status of Partial convolution */
;;;87     
;;;88     
;;;89       /* Check for range of output samples to be calculated */
;;;90       if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
00000c  eb0e0703          ADD      r7,lr,r3
000010  190d              ADDS     r5,r1,r4
000012  1e7f              SUBS     r7,r7,#1
000014  9e1d              LDR      r6,[sp,#0x74]
000016  42bd              CMP      r5,r7
000018  d904              BLS      |L1.36|
;;;91       {
;;;92         /* Set status as ARM_MATH_ARGUMENT_ERROR */
;;;93         status = ARM_MATH_ARGUMENT_ERROR;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.30|
;;;94       }
;;;95       else
;;;96       {
;;;97     
;;;98         /* The algorithm implementation is based on the lengths of the inputs. */
;;;99         /* srcB is always made to slide across srcA. */
;;;100        /* So srcBLen is always considered as shorter or equal to srcALen */
;;;101        if(srcALen >= srcBLen)
;;;102        {
;;;103          /* Initialization of inputA pointer */
;;;104          pIn1 = pSrcA;
;;;105    
;;;106          /* Initialization of inputB pointer */
;;;107          pIn2 = pSrcB;
;;;108        }
;;;109        else
;;;110        {
;;;111          /* Initialization of inputA pointer */
;;;112          pIn1 = pSrcB;
;;;113    
;;;114          /* Initialization of inputB pointer */
;;;115          pIn2 = pSrcA;
;;;116    
;;;117          /* srcBLen is always considered as shorter or equal to srcALen */
;;;118          j = srcBLen;
;;;119          srcBLen = srcALen;
;;;120          srcALen = j;
;;;121        }
;;;122    
;;;123        /* Conditions to check which loopCounter holds    
;;;124         * the first and last indices of the output samples to be calculated. */
;;;125        check = firstIndex + numPoints;
;;;126        blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
;;;127        blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;
;;;128        blockSize1 = (((int32_t) srcBLen - 1) - (int32_t) firstIndex);
;;;129        blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
;;;130                                         (int32_t) numPoints) : 0;
;;;131        blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
;;;132                                        (int32_t) firstIndex);
;;;133        blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
;;;134    
;;;135        /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;136        /* The function is internally    
;;;137         * divided into three stages according to the number of multiplications that has to be    
;;;138         * taken place between inputA samples and inputB samples. In the first stage of the    
;;;139         * algorithm, the multiplications increase by one for every iteration.    
;;;140         * In the second stage of the algorithm, srcBLen number of multiplications are done.    
;;;141         * In the third stage of the algorithm, the multiplications decrease by one    
;;;142         * for every iteration. */
;;;143    
;;;144        /* Set the output pointer to point to the firstIndex    
;;;145         * of the output sample to be calculated. */
;;;146        pOut = pDst + firstIndex;
;;;147    
;;;148        /* --------------------------    
;;;149         * Initializations of stage1    
;;;150         * -------------------------*/
;;;151    
;;;152        /* sum = x[0] * y[0]    
;;;153         * sum = x[0] * y[1] + x[1] * y[0]    
;;;154         * ....    
;;;155         * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]    
;;;156         */
;;;157    
;;;158        /* In this stage the MAC operations are increased by 1 for every iteration.    
;;;159           The count variable holds the number of MAC operations performed.    
;;;160           Since the partial convolution starts from firstIndex    
;;;161           Number of Macs to be performed is firstIndex + 1 */
;;;162        count = 1u + firstIndex;
;;;163    
;;;164        /* Working pointer of inputA */
;;;165        px = pIn1;
;;;166    
;;;167        /* Working pointer of inputB */
;;;168        pSrc2 = pIn2 + firstIndex;
;;;169        py = pSrc2;
;;;170    
;;;171        /* ------------------------    
;;;172         * Stage1 process    
;;;173         * ----------------------*/
;;;174    
;;;175        /* The first loop starts here */
;;;176        while(blockSize1 > 0)
;;;177        {
;;;178          /* Accumulator is made zero for every iteration */
;;;179          sum = 0;
;;;180    
;;;181          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;182          k = count >> 2u;
;;;183    
;;;184          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;185           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;186          while(k > 0u)
;;;187          {
;;;188            /* x[0] * y[srcBLen - 1] */
;;;189            sum = (q31_t) ((((q63_t) sum << 32) +
;;;190                            ((q63_t) * px++ * (*py--))) >> 32);
;;;191    
;;;192            /* x[1] * y[srcBLen - 2] */
;;;193            sum = (q31_t) ((((q63_t) sum << 32) +
;;;194                            ((q63_t) * px++ * (*py--))) >> 32);
;;;195    
;;;196            /* x[2] * y[srcBLen - 3] */
;;;197            sum = (q31_t) ((((q63_t) sum << 32) +
;;;198                            ((q63_t) * px++ * (*py--))) >> 32);
;;;199    
;;;200            /* x[3] * y[srcBLen - 4] */
;;;201            sum = (q31_t) ((((q63_t) sum << 32) +
;;;202                            ((q63_t) * px++ * (*py--))) >> 32);
;;;203    
;;;204            /* Decrement the loop counter */
;;;205            k--;
;;;206          }
;;;207    
;;;208          /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;209           ** No loop unrolling is used. */
;;;210          k = count % 0x4u;
;;;211    
;;;212          while(k > 0u)
;;;213          {
;;;214            /* Perform the multiply-accumulates */
;;;215            sum = (q31_t) ((((q63_t) sum << 32) +
;;;216                            ((q63_t) * px++ * (*py--))) >> 32);
;;;217    
;;;218            /* Decrement the loop counter */
;;;219            k--;
;;;220          }
;;;221    
;;;222          /* Store the result in the accumulator in the destination buffer. */
;;;223          *pOut++ = sum << 1;
;;;224    
;;;225          /* Update the inputA and inputB pointers for next MAC calculation */
;;;226          py = ++pSrc2;
;;;227          px = pIn1;
;;;228    
;;;229          /* Increment the MAC count */
;;;230          count++;
;;;231    
;;;232          /* Decrement the loop counter */
;;;233          blockSize1--;
;;;234        }
;;;235    
;;;236        /* --------------------------    
;;;237         * Initializations of stage2    
;;;238         * ------------------------*/
;;;239    
;;;240        /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]    
;;;241         * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]    
;;;242         * ....    
;;;243         * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]    
;;;244         */
;;;245    
;;;246        /* Working pointer of inputA */
;;;247        if((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
;;;248        {
;;;249          px = pIn1 + firstIndex - srcBLen + 1;
;;;250        }
;;;251        else
;;;252        {
;;;253          px = pIn1;
;;;254        }
;;;255    
;;;256        /* Working pointer of inputB */
;;;257        pSrc2 = pIn2 + (srcBLen - 1u);
;;;258        py = pSrc2;
;;;259    
;;;260        /* count is index by which the pointer pIn1 to be incremented */
;;;261        count = 0u;
;;;262    
;;;263        /* -------------------    
;;;264         * Stage2 process    
;;;265         * ------------------*/
;;;266    
;;;267        /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.    
;;;268         * So, to loop unroll over blockSize2,    
;;;269         * srcBLen should be greater than or equal to 4 */
;;;270        if(srcBLen >= 4u)
;;;271        {
;;;272          /* Loop unroll over blockSize2 */
;;;273          blkCnt = ((uint32_t) blockSize2 >> 2u);
;;;274    
;;;275          while(blkCnt > 0u)
;;;276          {
;;;277            /* Set all accumulators to zero */
;;;278            acc0 = 0;
;;;279            acc1 = 0;
;;;280            acc2 = 0;
;;;281            acc3 = 0;
;;;282    
;;;283            /* read x[0], x[1], x[2] samples */
;;;284            x0 = *(px++);
;;;285            x1 = *(px++);
;;;286            x2 = *(px++);
;;;287    
;;;288            /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;289            k = srcBLen >> 2u;
;;;290    
;;;291            /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;292             ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;293            do
;;;294            {
;;;295              /* Read y[srcBLen - 1] sample */
;;;296              c0 = *(py--);
;;;297    
;;;298              /* Read x[3] sample */
;;;299              x3 = *(px++);
;;;300    
;;;301              /* Perform the multiply-accumulate */
;;;302              /* acc0 +=  x[0] * y[srcBLen - 1] */
;;;303              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;304    
;;;305              /* acc1 +=  x[1] * y[srcBLen - 1] */
;;;306              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;307    
;;;308              /* acc2 +=  x[2] * y[srcBLen - 1] */
;;;309              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;310    
;;;311              /* acc3 +=  x[3] * y[srcBLen - 1] */
;;;312              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;313    
;;;314              /* Read y[srcBLen - 2] sample */
;;;315              c0 = *(py--);
;;;316    
;;;317              /* Read x[4] sample */
;;;318              x0 = *(px++);
;;;319    
;;;320              /* Perform the multiply-accumulate */
;;;321              /* acc0 +=  x[1] * y[srcBLen - 2] */
;;;322              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;323              /* acc1 +=  x[2] * y[srcBLen - 2] */
;;;324              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;325              /* acc2 +=  x[3] * y[srcBLen - 2] */
;;;326              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;327              /* acc3 +=  x[4] * y[srcBLen - 2] */
;;;328              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;329    
;;;330              /* Read y[srcBLen - 3] sample */
;;;331              c0 = *(py--);
;;;332    
;;;333              /* Read x[5] sample */
;;;334              x1 = *(px++);
;;;335    
;;;336              /* Perform the multiply-accumulates */
;;;337              /* acc0 +=  x[2] * y[srcBLen - 3] */
;;;338              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;339              /* acc1 +=  x[3] * y[srcBLen - 2] */
;;;340              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;341              /* acc2 +=  x[4] * y[srcBLen - 2] */
;;;342              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;343              /* acc3 +=  x[5] * y[srcBLen - 2] */
;;;344              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;345    
;;;346              /* Read y[srcBLen - 4] sample */
;;;347              c0 = *(py--);
;;;348    
;;;349              /* Read x[6] sample */
;;;350              x2 = *(px++);
;;;351    
;;;352              /* Perform the multiply-accumulates */
;;;353              /* acc0 +=  x[3] * y[srcBLen - 4] */
;;;354              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;355              /* acc1 +=  x[4] * y[srcBLen - 4] */
;;;356              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;357              /* acc2 +=  x[5] * y[srcBLen - 4] */
;;;358              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;359              /* acc3 +=  x[6] * y[srcBLen - 4] */
;;;360              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;361    
;;;362    
;;;363            } while(--k);
;;;364    
;;;365            /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;366             ** No loop unrolling is used. */
;;;367            k = srcBLen % 0x4u;
;;;368    
;;;369            while(k > 0u)
;;;370            {
;;;371              /* Read y[srcBLen - 5] sample */
;;;372              c0 = *(py--);
;;;373    
;;;374              /* Read x[7] sample */
;;;375              x3 = *(px++);
;;;376    
;;;377              /* Perform the multiply-accumulates */
;;;378              /* acc0 +=  x[4] * y[srcBLen - 5] */
;;;379              acc0 = (q31_t) ((((q63_t) acc0 << 32) + ((q63_t) x0 * c0)) >> 32);
;;;380              /* acc1 +=  x[5] * y[srcBLen - 5] */
;;;381              acc1 = (q31_t) ((((q63_t) acc1 << 32) + ((q63_t) x1 * c0)) >> 32);
;;;382              /* acc2 +=  x[6] * y[srcBLen - 5] */
;;;383              acc2 = (q31_t) ((((q63_t) acc2 << 32) + ((q63_t) x2 * c0)) >> 32);
;;;384              /* acc3 +=  x[7] * y[srcBLen - 5] */
;;;385              acc3 = (q31_t) ((((q63_t) acc3 << 32) + ((q63_t) x3 * c0)) >> 32);
;;;386    
;;;387              /* Reuse the present samples for the next MAC */
;;;388              x0 = x1;
;;;389              x1 = x2;
;;;390              x2 = x3;
;;;391    
;;;392              /* Decrement the loop counter */
;;;393              k--;
;;;394            }
;;;395    
;;;396            /* Store the result in the accumulator in the destination buffer. */
;;;397            *pOut++ = (q31_t) (acc0 << 1);
;;;398            *pOut++ = (q31_t) (acc1 << 1);
;;;399            *pOut++ = (q31_t) (acc2 << 1);
;;;400            *pOut++ = (q31_t) (acc3 << 1);
;;;401    
;;;402            /* Increment the pointer pIn1 index, count by 4 */
;;;403            count += 4u;
;;;404    
;;;405            /* Update the inputA and inputB pointers for next MAC calculation */
;;;406            px = pIn1 + count;
;;;407            py = pSrc2;
;;;408    
;;;409            /* Decrement the loop counter */
;;;410            blkCnt--;
;;;411          }
;;;412    
;;;413          /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.    
;;;414           ** No loop unrolling is used. */
;;;415          blkCnt = (uint32_t) blockSize2 % 0x4u;
;;;416    
;;;417          while(blkCnt > 0u)
;;;418          {
;;;419            /* Accumulator is made zero for every iteration */
;;;420            sum = 0;
;;;421    
;;;422            /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;423            k = srcBLen >> 2u;
;;;424    
;;;425            /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;426             ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;427            while(k > 0u)
;;;428            {
;;;429              /* Perform the multiply-accumulates */
;;;430              sum = (q31_t) ((((q63_t) sum << 32) +
;;;431                              ((q63_t) * px++ * (*py--))) >> 32);
;;;432              sum = (q31_t) ((((q63_t) sum << 32) +
;;;433                              ((q63_t) * px++ * (*py--))) >> 32);
;;;434              sum = (q31_t) ((((q63_t) sum << 32) +
;;;435                              ((q63_t) * px++ * (*py--))) >> 32);
;;;436              sum = (q31_t) ((((q63_t) sum << 32) +
;;;437                              ((q63_t) * px++ * (*py--))) >> 32);
;;;438    
;;;439              /* Decrement the loop counter */
;;;440              k--;
;;;441            }
;;;442    
;;;443            /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;444             ** No loop unrolling is used. */
;;;445            k = srcBLen % 0x4u;
;;;446    
;;;447            while(k > 0u)
;;;448            {
;;;449              /* Perform the multiply-accumulate */
;;;450              sum = (q31_t) ((((q63_t) sum << 32) +
;;;451                              ((q63_t) * px++ * (*py--))) >> 32);
;;;452    
;;;453              /* Decrement the loop counter */
;;;454              k--;
;;;455            }
;;;456    
;;;457            /* Store the result in the accumulator in the destination buffer. */
;;;458            *pOut++ = sum << 1;
;;;459    
;;;460            /* Increment the MAC count */
;;;461            count++;
;;;462    
;;;463            /* Update the inputA and inputB pointers for next MAC calculation */
;;;464            px = pIn1 + count;
;;;465            py = pSrc2;
;;;466    
;;;467            /* Decrement the loop counter */
;;;468            blkCnt--;
;;;469          }
;;;470        }
;;;471        else
;;;472        {
;;;473          /* If the srcBLen is not a multiple of 4,    
;;;474           * the blockSize2 loop cannot be unrolled by 4 */
;;;475          blkCnt = (uint32_t) blockSize2;
;;;476    
;;;477          while(blkCnt > 0u)
;;;478          {
;;;479            /* Accumulator is made zero for every iteration */
;;;480            sum = 0;
;;;481    
;;;482            /* srcBLen number of MACS should be performed */
;;;483            k = srcBLen;
;;;484    
;;;485            while(k > 0u)
;;;486            {
;;;487              /* Perform the multiply-accumulate */
;;;488              sum = (q31_t) ((((q63_t) sum << 32) +
;;;489                              ((q63_t) * px++ * (*py--))) >> 32);
;;;490    
;;;491              /* Decrement the loop counter */
;;;492              k--;
;;;493            }
;;;494    
;;;495            /* Store the result in the accumulator in the destination buffer. */
;;;496            *pOut++ = sum << 1;
;;;497    
;;;498            /* Increment the MAC count */
;;;499            count++;
;;;500    
;;;501            /* Update the inputA and inputB pointers for next MAC calculation */
;;;502            px = pIn1 + count;
;;;503            py = pSrc2;
;;;504    
;;;505            /* Decrement the loop counter */
;;;506            blkCnt--;
;;;507          }
;;;508        }
;;;509    
;;;510    
;;;511        /* --------------------------    
;;;512         * Initializations of stage3    
;;;513         * -------------------------*/
;;;514    
;;;515        /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]    
;;;516         * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]    
;;;517         * ....    
;;;518         * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]    
;;;519         * sum +=  x[srcALen-1] * y[srcBLen-1]    
;;;520         */
;;;521    
;;;522        /* In this stage the MAC operations are decreased by 1 for every iteration.    
;;;523           The count variable holds the number of MAC operations performed */
;;;524        count = srcBLen - 1u;
;;;525    
;;;526        /* Working pointer of inputA */
;;;527        pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
;;;528        px = pSrc1;
;;;529    
;;;530        /* Working pointer of inputB */
;;;531        pSrc2 = pIn2 + (srcBLen - 1u);
;;;532        py = pSrc2;
;;;533    
;;;534        /* -------------------    
;;;535         * Stage3 process    
;;;536         * ------------------*/
;;;537    
;;;538        while(blockSize3 > 0)
;;;539        {
;;;540          /* Accumulator is made zero for every iteration */
;;;541          sum = 0;
;;;542    
;;;543          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;544          k = count >> 2u;
;;;545    
;;;546          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;547           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;548          while(k > 0u)
;;;549          {
;;;550            /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
;;;551            sum = (q31_t) ((((q63_t) sum << 32) +
;;;552                            ((q63_t) * px++ * (*py--))) >> 32);
;;;553    
;;;554            /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
;;;555            sum = (q31_t) ((((q63_t) sum << 32) +
;;;556                            ((q63_t) * px++ * (*py--))) >> 32);
;;;557    
;;;558            /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
;;;559            sum = (q31_t) ((((q63_t) sum << 32) +
;;;560                            ((q63_t) * px++ * (*py--))) >> 32);
;;;561    
;;;562            /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
;;;563            sum = (q31_t) ((((q63_t) sum << 32) +
;;;564                            ((q63_t) * px++ * (*py--))) >> 32);
;;;565    
;;;566            /* Decrement the loop counter */
;;;567            k--;
;;;568          }
;;;569    
;;;570          /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;571           ** No loop unrolling is used. */
;;;572          k = count % 0x4u;
;;;573    
;;;574          while(k > 0u)
;;;575          {
;;;576            /* Perform the multiply-accumulates */
;;;577            /* sum +=  x[srcALen-1] * y[srcBLen-1] */
;;;578            sum = (q31_t) ((((q63_t) sum << 32) +
;;;579                            ((q63_t) * px++ * (*py--))) >> 32);
;;;580    
;;;581            /* Decrement the loop counter */
;;;582            k--;
;;;583          }
;;;584    
;;;585          /* Store the result in the accumulator in the destination buffer. */
;;;586          *pOut++ = sum << 1;
;;;587    
;;;588          /* Update the inputA and inputB pointers for next MAC calculation */
;;;589          px = ++pSrc1;
;;;590          py = pSrc2;
;;;591    
;;;592          /* Decrement the MAC count */
;;;593          count--;
;;;594    
;;;595          /* Decrement the loop counter */
;;;596          blockSize3--;
;;;597    
;;;598        }
;;;599    
;;;600        /* set status as ARM_MATH_SUCCESS */
;;;601        status = ARM_MATH_SUCCESS;
;;;602      }
;;;603    
;;;604      /* Return to application */
;;;605      return (status);
;;;606    
;;;607    }
00001e  b014              ADD      sp,sp,#0x50
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.36|
000024  4677              MOV      r7,lr                 ;101
000026  459e              CMP      lr,r3                 ;101
000028  d302              BCC      |L1.48|
00002a  4691              MOV      r9,r2                 ;107
00002c  900c              STR      r0,[sp,#0x30]         ;107
00002e  e003              B        |L1.56|
                  |L1.48|
000030  469e              MOV      lr,r3                 ;118
000032  4681              MOV      r9,r0                 ;115
000034  463b              MOV      r3,r7                 ;119
000036  920c              STR      r2,[sp,#0x30]         ;119
                  |L1.56|
000038  4575              CMP      r5,lr                 ;126
00003a  dd02              BLE      |L1.66|
00003c  eba5000e          SUB      r0,r5,lr              ;126
000040  e000              B        |L1.68|
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;126
                  |L1.68|
000044  f1ae0201          SUB      r2,lr,#1              ;127
000048  4291              CMP      r1,r2                 ;127
00004a  dd02              BLE      |L1.82|
00004c  1a42              SUBS     r2,r0,r1              ;127
00004e  eb02000e          ADD      r0,r2,lr              ;127
                  |L1.82|
000052  900d              STR      r0,[sp,#0x34]         ;128
000054  1a58              SUBS     r0,r3,r1              ;128
000056  1e40              SUBS     r0,r0,#1              ;128
000058  2800              CMP      r0,#0                 ;129
00005a  dd04              BLE      |L1.102|
00005c  1e5a              SUBS     r2,r3,#1              ;129
00005e  4295              CMP      r5,r2                 ;129
000060  d902              BLS      |L1.104|
000062  4604              MOV      r4,r0                 ;129
000064  e000              B        |L1.104|
                  |L1.102|
000066  2400              MOVS     r4,#0                 ;130
                  |L1.104|
000068  980d              LDR      r0,[sp,#0x34]         ;131
00006a  46a0              MOV      r8,r4                 ;130
00006c  4440              ADD      r0,r0,r8              ;131
00006e  4408              ADD      r0,r0,r1              ;131
000070  1a28              SUBS     r0,r5,r0              ;131
000072  2800              CMP      r0,#0                 ;133
000074  dc00              BGT      |L1.120|
000076  2000              MOVS     r0,#0                 ;133
                  |L1.120|
000078  9010              STR      r0,[sp,#0x40]         ;146
00007a  eb060081          ADD      r0,r6,r1,LSL #2       ;146
00007e  900e              STR      r0,[sp,#0x38]         ;165
000080  eb090281          ADD      r2,r9,r1,LSL #2       ;168
000084  f1010a01          ADD      r10,r1,#1             ;162
000088  4693              MOV      r11,r2                ;168
00008a  980c              LDR      r0,[sp,#0x30]         ;176
00008c  e037              B        |L1.254|
                  |L1.142|
00008e  2600              MOVS     r6,#0                 ;179
000090  ea4f049a          LSR      r4,r10,#2             ;182
000094  e018              B        |L1.200|
                  |L1.150|
000096  c880              LDM      r0!,{r7}              ;189
000098  f8d2c000          LDR      r12,[r2,#0]           ;189
00009c  fb57660c          SMMLA    r6,r7,r12,r6          ;189
0000a0  c880              LDM      r0!,{r7}              ;193
0000a2  f852cc04          LDR      r12,[r2,#-4]          ;193
0000a6  fb57660c          SMMLA    r6,r7,r12,r6          ;193
0000aa  f8507b08          LDR      r7,[r0],#8            ;197
0000ae  f852cc08          LDR      r12,[r2,#-8]          ;197
0000b2  f1a2050c          SUB      r5,r2,#0xc
0000b6  fb57660c          SMMLA    r6,r7,r12,r6          ;197
0000ba  f8507c04          LDR      r7,[r0,#-4]           ;201
0000be  682d              LDR      r5,[r5,#0]            ;201
0000c0  fb576605          SMMLA    r6,r7,r5,r6           ;201
0000c4  3a10              SUBS     r2,r2,#0x10           ;201
0000c6  1e64              SUBS     r4,r4,#1              ;201
                  |L1.200|
0000c8  2c00              CMP      r4,#0                 ;186
0000ca  d1e4              BNE      |L1.150|
0000cc  f00a0403          AND      r4,r10,#3             ;210
0000d0  e005              B        |L1.222|
                  |L1.210|
0000d2  c820              LDM      r0!,{r5}              ;215
0000d4  f8527904          LDR      r7,[r2],#-4           ;215
0000d8  fb556607          SMMLA    r6,r5,r7,r6           ;215
0000dc  1e64              SUBS     r4,r4,#1              ;215
                  |L1.222|
0000de  2c00              CMP      r4,#0                 ;212
0000e0  d1f7              BNE      |L1.210|
0000e2  980e              LDR      r0,[sp,#0x38]         ;223
0000e4  0072              LSLS     r2,r6,#1              ;223
0000e6  f10a0a01          ADD      r10,r10,#1            ;230
0000ea  6002              STR      r2,[r0,#0]            ;223
0000ec  980e              LDR      r0,[sp,#0x38]         ;223
0000ee  f10b0204          ADD      r2,r11,#4             ;226
0000f2  1d00              ADDS     r0,r0,#4              ;223
0000f4  900e              STR      r0,[sp,#0x38]         ;227
0000f6  980c              LDR      r0,[sp,#0x30]         ;233
0000f8  4693              MOV      r11,r2                ;226
0000fa  f1a80801          SUB      r8,r8,#1              ;233
                  |L1.254|
0000fe  f1b80f00          CMP      r8,#0                 ;176
000102  dcc4              BGT      |L1.142|
000104  1aca              SUBS     r2,r1,r3              ;247
000106  1c52              ADDS     r2,r2,#1              ;247
000108  2a00              CMP      r2,#0                 ;247
00010a  dd04              BLE      |L1.278|
00010c  eb000081          ADD      r0,r0,r1,LSL #2       ;249
000110  eba00083          SUB      r0,r0,r3,LSL #2       ;249
000114  1d00              ADDS     r0,r0,#4              ;249
                  |L1.278|
000116  eb090183          ADD      r1,r9,r3,LSL #2       ;257
00011a  9113              STR      r1,[sp,#0x4c]         ;257
00011c  2200              MOVS     r2,#0                 ;261
00011e  1f09              SUBS     r1,r1,#4              ;257
000120  920f              STR      r2,[sp,#0x3c]         ;270
000122  910a              STR      r1,[sp,#0x28]         ;270
000124  2b04              CMP      r3,#4                 ;270
000126  d37d              BCC      |L1.548|
000128  9a10              LDR      r2,[sp,#0x40]         ;273
00012a  0892              LSRS     r2,r2,#2              ;273
00012c  e090              B        |L1.592|
                  |L1.302|
00012e  c820              LDM      r0!,{r5}              ;284
000130  2600              MOVS     r6,#0                 ;278
000132  e8f02402          LDRD     r2,r4,[r0],#8         ;284
000136  ea4f0c93          LSR      r12,r3,#2             ;289
00013a  46b2              MOV      r10,r6                ;279
00013c  46b3              MOV      r11,r6                ;280
00013e  4637              MOV      r7,r6                 ;281
000140  f8cdc01c          STR      r12,[sp,#0x1c]        ;289
                  |L1.324|
000144  f1a10904          SUB      r9,r1,#4              ;296
000148  f8d1c000          LDR      r12,[r1,#0]           ;296
00014c  f8cd9024          STR      r9,[sp,#0x24]         ;299
000150  f8508b04          LDR      r8,[r0],#4            ;299
000154  fb55690c          SMMLA    r9,r5,r12,r6          ;303
000158  f8cd9018          STR      r9,[sp,#0x18]         ;306
00015c  9011              STR      r0,[sp,#0x44]         ;306
00015e  fb52a90c          SMMLA    r9,r2,r12,r10         ;306
000162  f8cd9008          STR      r9,[sp,#8]            ;309
000166  fb54b90c          SMMLA    r9,r4,r12,r11         ;309
00016a  fb587a0c          SMMLA    r10,r8,r12,r7         ;312
00016e  f8cd9014          STR      r9,[sp,#0x14]         ;315
000172  f8dd9024          LDR      r9,[sp,#0x24]         ;315
000176  c820              LDM      r0!,{r5}              ;318
000178  f8d96000          LDR      r6,[r9,#0]            ;322
00017c  f8dd9018          LDR      r9,[sp,#0x18]         ;322
000180  f1a10708          SUB      r7,r1,#8
000184  fb529b06          SMMLA    r11,r2,r6,r9          ;322
000188  f8dd9008          LDR      r9,[sp,#8]            ;324
00018c  fb549c06          SMMLA    r12,r4,r6,r9          ;324
000190  f8dd9014          LDR      r9,[sp,#0x14]         ;326
000194  f8cdc008          STR      r12,[sp,#8]           ;326
000198  fb589c06          SMMLA    r12,r8,r6,r9          ;326
00019c  fb55a906          SMMLA    r9,r5,r6,r10          ;328
0001a0  f8cdc014          STR      r12,[sp,#0x14]        ;331
0001a4  c804              LDM      r0!,{r2}              ;334
0001a6  683e              LDR      r6,[r7,#0]
0001a8  1f3f              SUBS     r7,r7,#4
0001aa  fb54ba06          SMMLA    r10,r4,r6,r11         ;338
0001ae  f8ddc008          LDR      r12,[sp,#8]           ;340
0001b2  fb58cb06          SMMLA    r11,r8,r6,r12         ;340
0001b6  f8ddc014          LDR      r12,[sp,#0x14]        ;342
0001ba  fb55cc06          SMMLA    r12,r5,r6,r12         ;342
0001be  fb529906          SMMLA    r9,r2,r6,r9           ;344
0001c2  f8cdc014          STR      r12,[sp,#0x14]        ;347
0001c6  c810              LDM      r0!,{r4}              ;350
0001c8  683f              LDR      r7,[r7,#0]            ;347
0001ca  fb58a607          SMMLA    r6,r8,r7,r10          ;354
0001ce  fb55ba07          SMMLA    r10,r5,r7,r11         ;356
0001d2  fb52cb07          SMMLA    r11,r2,r7,r12         ;358
0001d6  fb549707          SMMLA    r7,r4,r7,r9           ;360
0001da  f8ddc01c          LDR      r12,[sp,#0x1c]        ;363
0001de  f1a10110          SUB      r1,r1,#0x10           ;363
0001e2  f1bc0c01          SUBS     r12,r12,#1            ;363
0001e6  f8cdc01c          STR      r12,[sp,#0x1c]        ;363
0001ea  d1ab              BNE      |L1.324|
0001ec  f0030c03          AND      r12,r3,#3             ;367
0001f0  e011              B        |L1.534|
0001f2  bf00              NOP                            ;372
                  |L1.500|
0001f4  f851c904          LDR      r12,[r1],#-4          ;372
0001f8  f8508b04          LDR      r8,[r0],#4            ;375
0001fc  fb55660c          SMMLA    r6,r5,r12,r6          ;379
000200  fb52aa0c          SMMLA    r10,r2,r12,r10        ;381
000204  fb54bb0c          SMMLA    r11,r4,r12,r11        ;383
000208  fb58770c          SMMLA    r7,r8,r12,r7          ;385
00020c  4615              MOV      r5,r2                 ;388
00020e  4622              MOV      r2,r4                 ;389
000210  4644              MOV      r4,r8                 ;390
000212  f1a90c01          SUB      r12,r9,#1             ;393
                  |L1.534|
000216  ea5f090c          MOVS     r9,r12                ;367
00021a  d1eb              BNE      |L1.500|
00021c  980e              LDR      r0,[sp,#0x38]         ;397
00021e  0071              LSLS     r1,r6,#1              ;397
000220  6001              STR      r1,[r0,#0]            ;397
000222  e000              B        |L1.550|
                  |L1.548|
000224  e057              B        |L1.726|
                  |L1.550|
000226  980e              LDR      r0,[sp,#0x38]         ;398
000228  ea4f014a          LSL      r1,r10,#1             ;398
00022c  6041              STR      r1,[r0,#4]            ;399
00022e  ea4f014b          LSL      r1,r11,#1             ;399
000232  6081              STR      r1,[r0,#8]            ;400
000234  0079              LSLS     r1,r7,#1              ;400
000236  60c1              STR      r1,[r0,#0xc]          ;400
000238  3010              ADDS     r0,r0,#0x10           ;400
00023a  900e              STR      r0,[sp,#0x38]         ;403
00023c  980f              LDR      r0,[sp,#0x3c]         ;403
00023e  9a12              LDR      r2,[sp,#0x48]         ;410
000240  1d00              ADDS     r0,r0,#4              ;403
000242  900f              STR      r0,[sp,#0x3c]         ;406
000244  990f              LDR      r1,[sp,#0x3c]         ;406
000246  980c              LDR      r0,[sp,#0x30]         ;406
000248  1e52              SUBS     r2,r2,#1              ;410
00024a  eb000081          ADD      r0,r0,r1,LSL #2       ;406
00024e  990a              LDR      r1,[sp,#0x28]         ;410
                  |L1.592|
000250  9212              STR      r2,[sp,#0x48]         ;273
000252  2a00              CMP      r2,#0                 ;273
000254  f47faf6b          BNE      |L1.302|
000258  9a10              LDR      r2,[sp,#0x40]         ;415
00025a  f0020503          AND      r5,r2,#3              ;415
00025e  e037              B        |L1.720|
                  |L1.608|
000260  2200              MOVS     r2,#0                 ;420
000262  089c              LSRS     r4,r3,#2              ;423
000264  e018              B        |L1.664|
                  |L1.614|
000266  c840              LDM      r0!,{r6}              ;430
000268  f8d1c000          LDR      r12,[r1,#0]           ;430
00026c  fb56220c          SMMLA    r2,r6,r12,r2          ;430
000270  c840              LDM      r0!,{r6}              ;432
000272  f851cc04          LDR      r12,[r1,#-4]          ;432
000276  fb56220c          SMMLA    r2,r6,r12,r2          ;432
00027a  f8506b08          LDR      r6,[r0],#8            ;434
00027e  f851cc08          LDR      r12,[r1,#-8]          ;434
000282  f1a1070c          SUB      r7,r1,#0xc
000286  fb56220c          SMMLA    r2,r6,r12,r2          ;434
00028a  f8506c04          LDR      r6,[r0,#-4]           ;436
00028e  683f              LDR      r7,[r7,#0]            ;436
000290  fb562207          SMMLA    r2,r6,r7,r2           ;436
000294  3910              SUBS     r1,r1,#0x10           ;436
000296  1e64              SUBS     r4,r4,#1              ;436
                  |L1.664|
000298  2c00              CMP      r4,#0                 ;427
00029a  d1e4              BNE      |L1.614|
00029c  f0030403          AND      r4,r3,#3              ;445
0002a0  e005              B        |L1.686|
                  |L1.674|
0002a2  c840              LDM      r0!,{r6}              ;450
0002a4  f8517904          LDR      r7,[r1],#-4           ;450
0002a8  fb562207          SMMLA    r2,r6,r7,r2           ;450
0002ac  1e64              SUBS     r4,r4,#1              ;450
                  |L1.686|
0002ae  2c00              CMP      r4,#0                 ;447
0002b0  d1f7              BNE      |L1.674|
0002b2  980e              LDR      r0,[sp,#0x38]         ;458
0002b4  0051              LSLS     r1,r2,#1              ;458
0002b6  6001              STR      r1,[r0,#0]            ;458
0002b8  980e              LDR      r0,[sp,#0x38]         ;458
0002ba  1d00              ADDS     r0,r0,#4              ;458
0002bc  900e              STR      r0,[sp,#0x38]         ;461
0002be  980f              LDR      r0,[sp,#0x3c]         ;461
0002c0  1c40              ADDS     r0,r0,#1              ;461
0002c2  900f              STR      r0,[sp,#0x3c]         ;464
0002c4  990f              LDR      r1,[sp,#0x3c]         ;464
0002c6  980c              LDR      r0,[sp,#0x30]         ;464
0002c8  1e6d              SUBS     r5,r5,#1              ;465
0002ca  eb000081          ADD      r0,r0,r1,LSL #2       ;464
0002ce  990a              LDR      r1,[sp,#0x28]         ;465
                  |L1.720|
0002d0  2d00              CMP      r5,#0                 ;417
0002d2  d1c5              BNE      |L1.608|
0002d4  e01d              B        |L1.786|
                  |L1.726|
0002d6  9c10              LDR      r4,[sp,#0x40]         ;477
0002d8  e019              B        |L1.782|
                  |L1.730|
0002da  2500              MOVS     r5,#0                 ;480
0002dc  461a              MOV      r2,r3                 ;483
0002de  e005              B        |L1.748|
                  |L1.736|
0002e0  c840              LDM      r0!,{r6}              ;488
0002e2  f8517904          LDR      r7,[r1],#-4           ;488
0002e6  fb565507          SMMLA    r5,r6,r7,r5           ;488
0002ea  1e52              SUBS     r2,r2,#1              ;488
                  |L1.748|
0002ec  2a00              CMP      r2,#0                 ;485
0002ee  d1f7              BNE      |L1.736|
0002f0  980e              LDR      r0,[sp,#0x38]         ;496
0002f2  0069              LSLS     r1,r5,#1              ;496
0002f4  6001              STR      r1,[r0,#0]            ;496
0002f6  980e              LDR      r0,[sp,#0x38]         ;496
0002f8  1d00              ADDS     r0,r0,#4              ;496
0002fa  900e              STR      r0,[sp,#0x38]         ;499
0002fc  980f              LDR      r0,[sp,#0x3c]         ;499
0002fe  1c40              ADDS     r0,r0,#1              ;499
000300  900f              STR      r0,[sp,#0x3c]         ;502
000302  990f              LDR      r1,[sp,#0x3c]         ;502
000304  980c              LDR      r0,[sp,#0x30]         ;502
000306  1e64              SUBS     r4,r4,#1              ;503
000308  eb000081          ADD      r0,r0,r1,LSL #2       ;502
00030c  990a              LDR      r1,[sp,#0x28]         ;503
                  |L1.782|
00030e  2c00              CMP      r4,#0                 ;477
000310  d1e3              BNE      |L1.730|
                  |L1.786|
000312  980c              LDR      r0,[sp,#0x30]         ;527
000314  1e5a              SUBS     r2,r3,#1              ;524
000316  eb00008e          ADD      r0,r0,lr,LSL #2       ;527
00031a  f8dd804c          LDR      r8,[sp,#0x4c]         ;528
00031e  eba00383          SUB      r3,r0,r3,LSL #2       ;527
000322  1d1b              ADDS     r3,r3,#4              ;527
000324  f1a80804          SUB      r8,r8,#4              ;528
000328  4618              MOV      r0,r3                 ;528
00032a  4641              MOV      r1,r8                 ;532
00032c  9c0d              LDR      r4,[sp,#0x34]         ;538
00032e  e036              B        |L1.926|
                  |L1.816|
000330  2400              MOVS     r4,#0                 ;541
000332  0895              LSRS     r5,r2,#2              ;544
000334  e019              B        |L1.874|
                  |L1.822|
000336  c840              LDM      r0!,{r6}              ;551
000338  f8d1c000          LDR      r12,[r1,#0]           ;551
00033c  fb56440c          SMMLA    r4,r6,r12,r4          ;551
000340  c840              LDM      r0!,{r6}              ;555
000342  f851cc04          LDR      r12,[r1,#-4]          ;555
000346  f1a10708          SUB      r7,r1,#8
00034a  fb56440c          SMMLA    r4,r6,r12,r4          ;555
00034e  f850cb08          LDR      r12,[r0],#8           ;559
000352  683f              LDR      r7,[r7,#0]            ;559
000354  f1a1060c          SUB      r6,r1,#0xc
000358  fb5c4407          SMMLA    r4,r12,r7,r4          ;559
00035c  f8507c04          LDR      r7,[r0,#-4]           ;563
000360  6836              LDR      r6,[r6,#0]            ;563
000362  fb574406          SMMLA    r4,r7,r6,r4           ;563
000366  3910              SUBS     r1,r1,#0x10           ;563
000368  1e6d              SUBS     r5,r5,#1              ;563
                  |L1.874|
00036a  2d00              CMP      r5,#0                 ;548
00036c  d1e3              BNE      |L1.822|
00036e  f0020503          AND      r5,r2,#3              ;572
000372  e005              B        |L1.896|
                  |L1.884|
000374  c840              LDM      r0!,{r6}              ;578
000376  f8517904          LDR      r7,[r1],#-4           ;578
00037a  fb564407          SMMLA    r4,r6,r7,r4           ;578
00037e  1e6d              SUBS     r5,r5,#1              ;578
                  |L1.896|
000380  2d00              CMP      r5,#0                 ;574
000382  d1f7              BNE      |L1.884|
000384  980e              LDR      r0,[sp,#0x38]         ;586
000386  0061              LSLS     r1,r4,#1              ;586
000388  6001              STR      r1,[r0,#0]            ;586
00038a  980e              LDR      r0,[sp,#0x38]         ;586
00038c  9c0d              LDR      r4,[sp,#0x34]         ;596
00038e  1d00              ADDS     r0,r0,#4              ;586
000390  900e              STR      r0,[sp,#0x38]         ;589
000392  1d18              ADDS     r0,r3,#4              ;589
000394  1e64              SUBS     r4,r4,#1              ;596
000396  4603              MOV      r3,r0                 ;589
000398  4641              MOV      r1,r8                 ;590
00039a  1e52              SUBS     r2,r2,#1              ;596
00039c  940d              STR      r4,[sp,#0x34]         ;596
                  |L1.926|
00039e  2c00              CMP      r4,#0                 ;538
0003a0  dcc6              BGT      |L1.816|
0003a2  2000              MOVS     r0,#0                 ;601
0003a4  e63b              B        |L1.30|
;;;608    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_partial_fast_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REVSH|
#line 144
|__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____RRX|
#line 300
|__asm___27_arm_conv_partial_fast_q31_c_2b6c07df____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
