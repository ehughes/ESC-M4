; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_copy_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_copy_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_copy_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_copy_f32.c]
                          THUMB

                          AREA ||i.arm_copy_f32||, CODE, READONLY, ALIGN=1

                  arm_copy_f32 PROC
;;;73     
;;;74     void arm_copy_f32(
000000  0893              LSRS     r3,r2,#2
;;;75       float32_t * pSrc,
;;;76       float32_t * pDst,
;;;77       uint32_t blockSize)
;;;78     {
000002  e010              B        |L1.38|
                  |L1.4|
;;;79       uint32_t blkCnt;                               /* loop counter */
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;84       float32_t in1, in2, in3, in4;
;;;85     
;;;86       /*loop Unrolling */
;;;87       blkCnt = blockSize >> 2u;
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93         /* C = A */
;;;94         /* Copy and then store the results in the destination buffer */
;;;95         in1 = *pSrc++;
000004  ecb00a01          VLDM     r0!,{s0}
;;;96         in2 = *pSrc++;
000008  ecf00a01          VLDM     r0!,{s1}
;;;97         in3 = *pSrc++;
00000c  ecb01a01          VLDM     r0!,{s2}
;;;98         in4 = *pSrc++;
000010  ecf01a01          VLDM     r0!,{s3}
;;;99     
;;;100        *pDst++ = in1;
000014  eca10a01          VSTM     r1!,{s0}
;;;101        *pDst++ = in2;
000018  ece10a01          VSTM     r1!,{s1}
;;;102        *pDst++ = in3;
00001c  eca11a01          VSTM     r1!,{s2}
;;;103        *pDst++ = in4;
000020  ece11a01          VSTM     r1!,{s3}
;;;104    
;;;105        /* Decrement the loop counter */
;;;106        blkCnt--;
000024  1e5b              SUBS     r3,r3,#1
                  |L1.38|
000026  2b00              CMP      r3,#0                 ;91
000028  d1ec              BNE      |L1.4|
;;;107      }
;;;108    
;;;109      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;110       ** No loop unrolling is used. */
;;;111      blkCnt = blockSize % 0x4u;
00002a  f0020203          AND      r2,r2,#3
;;;112    
;;;113    #else
;;;114    
;;;115      /* Run the below code for Cortex-M0 */
;;;116    
;;;117      /* Loop over blockSize number of values */
;;;118      blkCnt = blockSize;
;;;119    
;;;120    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;121    
;;;122      while(blkCnt > 0u)
00002e  e004              B        |L1.58|
                  |L1.48|
;;;123      {
;;;124        /* C = A */
;;;125        /* Copy and then store the results in the destination buffer */
;;;126        *pDst++ = *pSrc++;
000030  ecb00a01          VLDM     r0!,{s0}
000034  eca10a01          VSTM     r1!,{s0}
;;;127    
;;;128        /* Decrement the loop counter */
;;;129        blkCnt--;
000038  1e52              SUBS     r2,r2,#1
                  |L1.58|
00003a  2a00              CMP      r2,#0                 ;122
00003c  d1f8              BNE      |L1.48|
;;;130      }
;;;131    }
00003e  4770              BX       lr
;;;132    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_copy_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_copy_f32_c_d86c84a0____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_copy_f32_c_d86c84a0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_copy_f32_c_d86c84a0____REVSH|
#line 144
|__asm___14_arm_copy_f32_c_d86c84a0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_copy_f32_c_d86c84a0____RRX|
#line 300
|__asm___14_arm_copy_f32_c_d86c84a0____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
