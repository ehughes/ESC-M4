; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_fir_decimate_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_q31.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_q31||, CODE, READONLY, ALIGN=2

                  arm_fir_decimate_q31 PROC
;;;71     
;;;72     void arm_fir_decimate_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;73       const arm_fir_decimate_instance_q31 * S,
;;;74       q31_t * pSrc,
;;;75       q31_t * pDst,
;;;76       uint32_t blockSize)
;;;77     {
000004  4681              MOV      r9,r0
;;;78       q31_t *pState = S->pState;                     /* State pointer */
;;;79       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
;;;80       q31_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;81       q31_t x0, c0;                                  /* Temporary variables to hold state and coefficient values */
;;;82       q31_t *px;                                     /* Temporary pointers for state buffer */
;;;83       q31_t *pb;                                     /* Temporary pointers for coefficient buffer */
;;;84       q63_t sum0;                                    /* Accumulator */
;;;85       uint32_t numTaps = S->numTaps;                 /* Number of taps */
;;;86       uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
000006  f8992000          LDRB     r2,[r9,#0]
00000a  e9d9e001          LDRD     lr,r0,[r9,#4]         ;77
00000e  fbb3f2f2          UDIV     r2,r3,r2
000012  f8b9a002          LDRH     r10,[r9,#2]           ;85
;;;87     
;;;88     
;;;89     #ifndef ARM_MATH_CM0_FAMILY
;;;90     
;;;91       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;92     
;;;93       /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;94       /* pStateCurnt points to the location where the new input data should be written */
;;;95       pStateCurnt = S->pState + (numTaps - 1u);
000016  f06f0303          MVN      r3,#3
00001a  eb03038a          ADD      r3,r3,r10,LSL #2
00001e  18c6              ADDS     r6,r0,r3
                  |L1.32|
;;;96     
;;;97       /* Total number of output samples to be computed */
;;;98       blkCnt = outBlockSize;
000020  ea5f0b02          MOVS     r11,r2
000024  d042              BEQ      |L1.172|
;;;99     
;;;100      while(blkCnt > 0u)
;;;101      {
;;;102        /* Copy decimation factor number of new input samples into the state buffer */
;;;103        i = S->M;
000026  f8992000          LDRB     r2,[r9,#0]
                  |L1.42|
;;;104    
;;;105        do
;;;106        {
;;;107          *pStateCurnt++ = *pSrc++;
00002a  c908              LDM      r1!,{r3}
00002c  1e52              SUBS     r2,r2,#1
00002e  c608              STM      r6!,{r3}
;;;108    
;;;109        } while(--i);
000030  d1fb              BNE      |L1.42|
000032  4613              MOV      r3,r2
;;;110    
;;;111        /* Set accumulator to zero */
;;;112        sum0 = 0;
;;;113    
;;;114        /* Initialize state pointer */
;;;115        px = pState;
000034  4604              MOV      r4,r0
;;;116    
;;;117        /* Initialize coeff pointer */
;;;118        pb = pCoeffs;
000036  4675              MOV      r5,lr
;;;119    
;;;120        /* Loop unrolling.  Process 4 taps at a time. */
;;;121        tapCnt = numTaps >> 2;
000038  ea4f079a          LSR      r7,r10,#2
;;;122    
;;;123        /* Loop over the number of taps.  Unroll by a factor of 4.    
;;;124         ** Repeat until we've computed numTaps-4 coefficients. */
;;;125        while(tapCnt > 0u)
00003c  e019              B        |L1.114|
;;;126        {
;;;127          /* Read the b[numTaps-1] coefficient */
;;;128          c0 = *(pb++);
00003e  bf00              NOP      
                  |L1.64|
000040  f855cb04          LDR      r12,[r5],#4
;;;129    
;;;130          /* Read x[n-numTaps-1] sample */
;;;131          x0 = *(px++);
000044  f8548b04          LDR      r8,[r4],#4
;;;132    
;;;133          /* Perform the multiply-accumulate */
;;;134          sum0 += (q63_t) x0 *c0;
;;;135    
;;;136          /* Read the b[numTaps-2] coefficient */
;;;137          c0 = *(pb++);
;;;138    
;;;139          /* Read x[n-numTaps-2] sample */
;;;140          x0 = *(px++);
;;;141    
;;;142          /* Perform the multiply-accumulate */
;;;143          sum0 += (q63_t) x0 *c0;
;;;144    
;;;145          /* Read the b[numTaps-3] coefficient */
;;;146          c0 = *(pb++);
;;;147    
;;;148          /* Read x[n-numTaps-3] sample */
;;;149          x0 = *(px++);
;;;150    
;;;151          /* Perform the multiply-accumulate */
;;;152          sum0 += (q63_t) x0 *c0;
;;;153    
;;;154          /* Read the b[numTaps-4] coefficient */
;;;155          c0 = *(pb++);
;;;156    
;;;157          /* Read x[n-numTaps-4] sample */
;;;158          x0 = *(px++);
;;;159    
;;;160          /* Perform the multiply-accumulate */
;;;161          sum0 += (q63_t) x0 *c0;
000048  1e7f              SUBS     r7,r7,#1
00004a  fbc8230c          SMLAL    r2,r3,r8,r12          ;134
00004e  f8558b04          LDR      r8,[r5],#4            ;137
000052  f854cb04          LDR      r12,[r4],#4           ;140
000056  fbcc2308          SMLAL    r2,r3,r12,r8          ;143
00005a  f855cb04          LDR      r12,[r5],#4           ;146
00005e  f8548b04          LDR      r8,[r4],#4            ;149
000062  fbc8230c          SMLAL    r2,r3,r8,r12          ;152
000066  f8558b04          LDR      r8,[r5],#4            ;155
00006a  f854cb04          LDR      r12,[r4],#4           ;158
00006e  fbcc2308          SMLAL    r2,r3,r12,r8
                  |L1.114|
000072  2f00              CMP      r7,#0                 ;125
000074  d1e4              BNE      |L1.64|
;;;162    
;;;163          /* Decrement the loop counter */
;;;164          tapCnt--;
;;;165        }
;;;166    
;;;167        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;168        tapCnt = numTaps % 0x4u;
000076  f00a0703          AND      r7,r10,#3
;;;169    
;;;170        while(tapCnt > 0u)
00007a  e006              B        |L1.138|
                  |L1.124|
;;;171        {
;;;172          /* Read coefficients */
;;;173          c0 = *(pb++);
00007c  f8558b04          LDR      r8,[r5],#4
;;;174    
;;;175          /* Fetch 1 state variable */
;;;176          x0 = *(px++);
000080  f854cb04          LDR      r12,[r4],#4
;;;177    
;;;178          /* Perform the multiply-accumulate */
;;;179          sum0 += (q63_t) x0 *c0;
000084  1e7f              SUBS     r7,r7,#1
000086  fbcc2308          SMLAL    r2,r3,r12,r8
                  |L1.138|
00008a  2f00              CMP      r7,#0                 ;170
00008c  d1f6              BNE      |L1.124|
;;;180    
;;;181          /* Decrement the loop counter */
;;;182          tapCnt--;
;;;183        }
;;;184    
;;;185        /* Advance the state pointer by the decimation factor    
;;;186         * to process the next group of decimation factor number samples */
;;;187        pState = pState + S->M;
;;;188    
;;;189        /* The result is in the accumulator, store in the destination buffer. */
;;;190        *pDst++ = (q31_t) (sum0 >> 31);
00008e  0fd2              LSRS     r2,r2,#31
000090  ea420243          ORR      r2,r2,r3,LSL #1
000094  9b02              LDR      r3,[sp,#8]
000096  f8994000          LDRB     r4,[r9,#0]            ;187
00009a  601a              STR      r2,[r3,#0]
00009c  9a02              LDR      r2,[sp,#8]
00009e  eb000084          ADD      r0,r0,r4,LSL #2       ;187
0000a2  1d12              ADDS     r2,r2,#4
;;;191    
;;;192        /* Decrement the loop counter */
;;;193        blkCnt--;
0000a4  9202              STR      r2,[sp,#8]
0000a6  f1ab0201          SUB      r2,r11,#1
0000aa  e7b9              B        |L1.32|
                  |L1.172|
;;;194      }
;;;195    
;;;196      /* Processing is complete.    
;;;197       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.    
;;;198       ** This prepares the state buffer for the next function call. */
;;;199    
;;;200      /* Points to the start of the state buffer */
;;;201      pStateCurnt = S->pState;
;;;202    
;;;203      i = (numTaps - 1u) >> 2u;
0000ac  f1aa0301          SUB      r3,r10,#1
0000b0  089a              LSRS     r2,r3,#2
;;;204    
;;;205      /* copy data */
;;;206      while(i > 0u)
0000b2  f8d91008          LDR      r1,[r9,#8]
0000b6  e00c              B        |L1.210|
                  |L1.184|
;;;207      {
;;;208        *pStateCurnt++ = *pState++;
0000b8  c810              LDM      r0!,{r4}
;;;209        *pStateCurnt++ = *pState++;
;;;210        *pStateCurnt++ = *pState++;
;;;211        *pStateCurnt++ = *pState++;
0000ba  1e52              SUBS     r2,r2,#1
0000bc  c110              STM      r1!,{r4}              ;208
0000be  c810              LDM      r0!,{r4}              ;209
0000c0  c110              STM      r1!,{r4}              ;209
0000c2  f8504b08          LDR      r4,[r0],#8            ;210
0000c6  f8414b08          STR      r4,[r1],#8            ;210
0000ca  f8504c04          LDR      r4,[r0,#-4]
0000ce  f8414c04          STR      r4,[r1,#-4]
                  |L1.210|
0000d2  2a00              CMP      r2,#0                 ;206
0000d4  d1f0              BNE      |L1.184|
;;;212    
;;;213        /* Decrement the loop counter */
;;;214        i--;
;;;215      }
;;;216    
;;;217      i = (numTaps - 1u) % 0x04u;
0000d6  f0030203          AND      r2,r3,#3
;;;218    
;;;219      /* copy data */
;;;220      while(i > 0u)
0000da  e002              B        |L1.226|
                  |L1.220|
;;;221      {
;;;222        *pStateCurnt++ = *pState++;
0000dc  c808              LDM      r0!,{r3}
0000de  1e52              SUBS     r2,r2,#1
0000e0  c108              STM      r1!,{r3}
                  |L1.226|
0000e2  2a00              CMP      r2,#0                 ;220
0000e4  d1fa              BNE      |L1.220|
;;;223    
;;;224        /* Decrement the loop counter */
;;;225        i--;
;;;226      }
;;;227    
;;;228    #else
;;;229    
;;;230    /* Run the below code for Cortex-M0 */
;;;231    
;;;232      /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;233      /* pStateCurnt points to the location where the new input data should be written */
;;;234      pStateCurnt = S->pState + (numTaps - 1u);
;;;235    
;;;236      /* Total number of output samples to be computed */
;;;237      blkCnt = outBlockSize;
;;;238    
;;;239      while(blkCnt > 0u)
;;;240      {
;;;241        /* Copy decimation factor number of new input samples into the state buffer */
;;;242        i = S->M;
;;;243    
;;;244        do
;;;245        {
;;;246          *pStateCurnt++ = *pSrc++;
;;;247    
;;;248        } while(--i);
;;;249    
;;;250        /* Set accumulator to zero */
;;;251        sum0 = 0;
;;;252    
;;;253        /* Initialize state pointer */
;;;254        px = pState;
;;;255    
;;;256        /* Initialize coeff pointer */
;;;257        pb = pCoeffs;
;;;258    
;;;259        tapCnt = numTaps;
;;;260    
;;;261        while(tapCnt > 0u)
;;;262        {
;;;263          /* Read coefficients */
;;;264          c0 = *pb++;
;;;265    
;;;266          /* Fetch 1 state variable */
;;;267          x0 = *px++;
;;;268    
;;;269          /* Perform the multiply-accumulate */
;;;270          sum0 += (q63_t) x0 *c0;
;;;271    
;;;272          /* Decrement the loop counter */
;;;273          tapCnt--;
;;;274        }
;;;275    
;;;276        /* Advance the state pointer by the decimation factor           
;;;277         * to process the next group of decimation factor number samples */
;;;278        pState = pState + S->M;
;;;279    
;;;280        /* The result is in the accumulator, store in the destination buffer. */
;;;281        *pDst++ = (q31_t) (sum0 >> 31);
;;;282    
;;;283        /* Decrement the loop counter */
;;;284        blkCnt--;
;;;285      }
;;;286    
;;;287      /* Processing is complete.         
;;;288       ** Now copy the last numTaps - 1 samples to the start of the state buffer.       
;;;289       ** This prepares the state buffer for the next function call. */
;;;290    
;;;291      /* Points to the start of the state buffer */
;;;292      pStateCurnt = S->pState;
;;;293    
;;;294      i = numTaps - 1u;
;;;295    
;;;296      /* copy data */
;;;297      while(i > 0u)
;;;298      {
;;;299        *pStateCurnt++ = *pState++;
;;;300    
;;;301        /* Decrement the loop counter */
;;;302        i--;
;;;303      }
;;;304    
;;;305    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
;;;306    
;;;307    }
0000e6  e8bd8fff          POP      {r0-r11,pc}
;;;308    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REVSH|
#line 144
|__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q31_c_ae3fc47c____RRX|
#line 300
|__asm___22_arm_fir_decimate_q31_c_ae3fc47c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
