; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fir_decimate_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_q31.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_q31||, CODE, READONLY, ALIGN=1

                  arm_fir_decimate_q31 PROC
;;;71     
;;;72     void arm_fir_decimate_q31(
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;73       const arm_fir_decimate_instance_q31 * S,
;;;74       q31_t * pSrc,
;;;75       q31_t * pDst,
;;;76       uint32_t blockSize)
;;;77     {
;;;78       q31_t *pState = S->pState;                     /* State pointer */
000004  6886              LDR      r6,[r0,#8]
;;;79       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000006  6844              LDR      r4,[r0,#4]
000008  9400              STR      r4,[sp,#0]
;;;80       q31_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;81       q31_t x0, c0;                                  /* Temporary variables to hold state and coefficient values */
;;;82       q31_t *px;                                     /* Temporary pointers for state buffer */
;;;83       q31_t *pb;                                     /* Temporary pointers for coefficient buffer */
;;;84       q63_t sum0;                                    /* Accumulator */
;;;85       uint32_t numTaps = S->numTaps;                 /* Number of taps */
00000a  f8b0a002          LDRH     r10,[r0,#2]
;;;86       uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
00000e  7804              LDRB     r4,[r0,#0]
000010  fbb3f9f4          UDIV     r9,r3,r4
;;;87     
;;;88     
;;;89     #ifndef ARM_MATH_CM0_FAMILY
;;;90     
;;;91       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;92     
;;;93       /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;94       /* pStateCurnt points to the location where the new input data should be written */
;;;95       pStateCurnt = S->pState + (numTaps - 1u);
000014  f1aa0401          SUB      r4,r10,#1
000018  eb060c84          ADD      r12,r6,r4,LSL #2
00001c  9401              STR      r4,[sp,#4]
00001e  e03c              B        |L1.154|
                  |L1.32|
;;;96     
;;;97       /* Total number of output samples to be computed */
;;;98       blkCnt = outBlockSize;
;;;99     
;;;100      while(blkCnt > 0u)
;;;101      {
;;;102        /* Copy decimation factor number of new input samples into the state buffer */
;;;103        i = S->M;
000020  7803              LDRB     r3,[r0,#0]
                  |L1.34|
;;;104    
;;;105        do
;;;106        {
;;;107          *pStateCurnt++ = *pSrc++;
000022  c910              LDM      r1!,{r4}
000024  f84c4b04          STR      r4,[r12],#4
;;;108    
;;;109        } while(--i);
000028  1e5b              SUBS     r3,r3,#1
00002a  d1fa              BNE      |L1.34|
;;;110    
;;;111        /* Set accumulator to zero */
;;;112        sum0 = 0;
00002c  461c              MOV      r4,r3
;;;113    
;;;114        /* Initialize state pointer */
;;;115        px = pState;
00002e  4635              MOV      r5,r6
;;;116    
;;;117        /* Initialize coeff pointer */
;;;118        pb = pCoeffs;
000030  f8dd8000          LDR      r8,[sp,#0]
;;;119    
;;;120        /* Loop unrolling.  Process 4 taps at a time. */
;;;121        tapCnt = numTaps >> 2;
000034  ea4f079a          LSR      r7,r10,#2
;;;122    
;;;123        /* Loop over the number of taps.  Unroll by a factor of 4.    
;;;124         ** Repeat until we've computed numTaps-4 coefficients. */
;;;125        while(tapCnt > 0u)
000038  e018              B        |L1.108|
                  |L1.58|
;;;126        {
;;;127          /* Read the b[numTaps-1] coefficient */
;;;128          c0 = *(pb++);
00003a  f858eb04          LDR      lr,[r8],#4
;;;129    
;;;130          /* Read x[n-numTaps-1] sample */
;;;131          x0 = *(px++);
00003e  f855bb04          LDR      r11,[r5],#4
;;;132    
;;;133          /* Perform the multiply-accumulate */
;;;134          sum0 += (q63_t) x0 *c0;
000042  fbcb340e          SMLAL    r3,r4,r11,lr
;;;135    
;;;136          /* Read the b[numTaps-2] coefficient */
;;;137          c0 = *(pb++);
000046  f858bb04          LDR      r11,[r8],#4
;;;138    
;;;139          /* Read x[n-numTaps-2] sample */
;;;140          x0 = *(px++);
00004a  f855eb04          LDR      lr,[r5],#4
;;;141    
;;;142          /* Perform the multiply-accumulate */
;;;143          sum0 += (q63_t) x0 *c0;
00004e  fbce340b          SMLAL    r3,r4,lr,r11
;;;144    
;;;145          /* Read the b[numTaps-3] coefficient */
;;;146          c0 = *(pb++);
000052  f858bb04          LDR      r11,[r8],#4
;;;147    
;;;148          /* Read x[n-numTaps-3] sample */
;;;149          x0 = *(px++);
000056  f855eb04          LDR      lr,[r5],#4
;;;150    
;;;151          /* Perform the multiply-accumulate */
;;;152          sum0 += (q63_t) x0 *c0;
00005a  fbce340b          SMLAL    r3,r4,lr,r11
;;;153    
;;;154          /* Read the b[numTaps-4] coefficient */
;;;155          c0 = *(pb++);
00005e  f858eb04          LDR      lr,[r8],#4
;;;156    
;;;157          /* Read x[n-numTaps-4] sample */
;;;158          x0 = *(px++);
000062  f855bb04          LDR      r11,[r5],#4
;;;159    
;;;160          /* Perform the multiply-accumulate */
;;;161          sum0 += (q63_t) x0 *c0;
000066  fbcb340e          SMLAL    r3,r4,r11,lr
;;;162    
;;;163          /* Decrement the loop counter */
;;;164          tapCnt--;
00006a  1e7f              SUBS     r7,r7,#1
                  |L1.108|
00006c  2f00              CMP      r7,#0                 ;125
00006e  d1e4              BNE      |L1.58|
;;;165        }
;;;166    
;;;167        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;168        tapCnt = numTaps % 0x4u;
000070  f00a0703          AND      r7,r10,#3
;;;169    
;;;170        while(tapCnt > 0u)
000074  e006              B        |L1.132|
                  |L1.118|
;;;171        {
;;;172          /* Read coefficients */
;;;173          c0 = *(pb++);
000076  f858eb04          LDR      lr,[r8],#4
;;;174    
;;;175          /* Fetch 1 state variable */
;;;176          x0 = *(px++);
00007a  f855bb04          LDR      r11,[r5],#4
;;;177    
;;;178          /* Perform the multiply-accumulate */
;;;179          sum0 += (q63_t) x0 *c0;
00007e  fbcb340e          SMLAL    r3,r4,r11,lr
;;;180    
;;;181          /* Decrement the loop counter */
;;;182          tapCnt--;
000082  1e7f              SUBS     r7,r7,#1
                  |L1.132|
000084  2f00              CMP      r7,#0                 ;170
000086  d1f6              BNE      |L1.118|
;;;183        }
;;;184    
;;;185        /* Advance the state pointer by the decimation factor    
;;;186         * to process the next group of decimation factor number samples */
;;;187        pState = pState + S->M;
000088  7805              LDRB     r5,[r0,#0]
00008a  eb060685          ADD      r6,r6,r5,LSL #2
;;;188    
;;;189        /* The result is in the accumulator, store in the destination buffer. */
;;;190        *pDst++ = (q31_t) (sum0 >> 31);
00008e  0fdb              LSRS     r3,r3,#31
000090  ea430344          ORR      r3,r3,r4,LSL #1
000094  c208              STM      r2!,{r3}
;;;191    
;;;192        /* Decrement the loop counter */
;;;193        blkCnt--;
000096  f1a90901          SUB      r9,r9,#1
                  |L1.154|
00009a  f1b90f00          CMP      r9,#0                 ;100
00009e  d1bf              BNE      |L1.32|
;;;194      }
;;;195    
;;;196      /* Processing is complete.    
;;;197       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.    
;;;198       ** This prepares the state buffer for the next function call. */
;;;199    
;;;200      /* Points to the start of the state buffer */
;;;201      pStateCurnt = S->pState;
0000a0  6880              LDR      r0,[r0,#8]
;;;202    
;;;203      i = (numTaps - 1u) >> 2u;
0000a2  9901              LDR      r1,[sp,#4]
0000a4  0889              LSRS     r1,r1,#2
;;;204    
;;;205      /* copy data */
;;;206      while(i > 0u)
0000a6  e00a              B        |L1.190|
                  |L1.168|
;;;207      {
;;;208        *pStateCurnt++ = *pState++;
0000a8  6832              LDR      r2,[r6,#0]
0000aa  6002              STR      r2,[r0,#0]
;;;209        *pStateCurnt++ = *pState++;
0000ac  6872              LDR      r2,[r6,#4]
0000ae  6042              STR      r2,[r0,#4]
;;;210        *pStateCurnt++ = *pState++;
0000b0  68b2              LDR      r2,[r6,#8]
0000b2  6082              STR      r2,[r0,#8]
;;;211        *pStateCurnt++ = *pState++;
0000b4  68f2              LDR      r2,[r6,#0xc]
0000b6  3610              ADDS     r6,r6,#0x10
0000b8  60c2              STR      r2,[r0,#0xc]
0000ba  3010              ADDS     r0,r0,#0x10
;;;212    
;;;213        /* Decrement the loop counter */
;;;214        i--;
0000bc  1e49              SUBS     r1,r1,#1
                  |L1.190|
0000be  2900              CMP      r1,#0                 ;206
0000c0  d1f2              BNE      |L1.168|
;;;215      }
;;;216    
;;;217      i = (numTaps - 1u) % 0x04u;
0000c2  9901              LDR      r1,[sp,#4]
0000c4  f0010103          AND      r1,r1,#3
;;;218    
;;;219      /* copy data */
;;;220      while(i > 0u)
0000c8  e002              B        |L1.208|
                  |L1.202|
;;;221      {
;;;222        *pStateCurnt++ = *pState++;
0000ca  ce04              LDM      r6!,{r2}
0000cc  c004              STM      r0!,{r2}
;;;223    
;;;224        /* Decrement the loop counter */
;;;225        i--;
0000ce  1e49              SUBS     r1,r1,#1
                  |L1.208|
0000d0  2900              CMP      r1,#0                 ;220
0000d2  d1fa              BNE      |L1.202|
;;;226      }
;;;227    
;;;228    #else
;;;229    
;;;230    /* Run the below code for Cortex-M0 */
;;;231    
;;;232      /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;233      /* pStateCurnt points to the location where the new input data should be written */
;;;234      pStateCurnt = S->pState + (numTaps - 1u);
;;;235    
;;;236      /* Total number of output samples to be computed */
;;;237      blkCnt = outBlockSize;
;;;238    
;;;239      while(blkCnt > 0u)
;;;240      {
;;;241        /* Copy decimation factor number of new input samples into the state buffer */
;;;242        i = S->M;
;;;243    
;;;244        do
;;;245        {
;;;246          *pStateCurnt++ = *pSrc++;
;;;247    
;;;248        } while(--i);
;;;249    
;;;250        /* Set accumulator to zero */
;;;251        sum0 = 0;
;;;252    
;;;253        /* Initialize state pointer */
;;;254        px = pState;
;;;255    
;;;256        /* Initialize coeff pointer */
;;;257        pb = pCoeffs;
;;;258    
;;;259        tapCnt = numTaps;
;;;260    
;;;261        while(tapCnt > 0u)
;;;262        {
;;;263          /* Read coefficients */
;;;264          c0 = *pb++;
;;;265    
;;;266          /* Fetch 1 state variable */
;;;267          x0 = *px++;
;;;268    
;;;269          /* Perform the multiply-accumulate */
;;;270          sum0 += (q63_t) x0 *c0;
;;;271    
;;;272          /* Decrement the loop counter */
;;;273          tapCnt--;
;;;274        }
;;;275    
;;;276        /* Advance the state pointer by the decimation factor           
;;;277         * to process the next group of decimation factor number samples */
;;;278        pState = pState + S->M;
;;;279    
;;;280        /* The result is in the accumulator, store in the destination buffer. */
;;;281        *pDst++ = (q31_t) (sum0 >> 31);
;;;282    
;;;283        /* Decrement the loop counter */
;;;284        blkCnt--;
;;;285      }
;;;286    
;;;287      /* Processing is complete.         
;;;288       ** Now copy the last numTaps - 1 samples to the start of the state buffer.       
;;;289       ** This prepares the state buffer for the next function call. */
;;;290    
;;;291      /* Points to the start of the state buffer */
;;;292      pStateCurnt = S->pState;
;;;293    
;;;294      i = numTaps - 1u;
;;;295    
;;;296      /* copy data */
;;;297      while(i > 0u)
;;;298      {
;;;299        *pStateCurnt++ = *pState++;
;;;300    
;;;301        /* Decrement the loop counter */
;;;302        i--;
;;;303      }
;;;304    
;;;305    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
;;;306    
;;;307    }
0000d4  e8bd8ffc          POP      {r2-r11,pc}
;;;308    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REVSH|
#line 144
|__asm___22_arm_fir_decimate_q31_c_ae3fc47c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q31_c_ae3fc47c____RRX|
#line 300
|__asm___22_arm_fir_decimate_q31_c_ae3fc47c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
