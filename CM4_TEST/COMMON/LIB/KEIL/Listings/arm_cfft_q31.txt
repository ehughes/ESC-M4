; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cfft_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_q31.c]
                          THUMB

                          AREA ||i.arm_cfft_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_q31 PROC
;;;88     
;;;89     void arm_cfft_q31( 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90         const arm_cfft_instance_q31 * S, 
;;;91         q31_t * p1,
;;;92         uint8_t ifftFlag,
;;;93         uint8_t bitReverseFlag)
;;;94     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  461d              MOV      r5,r3
;;;95         uint32_t L = S->fftLen;
00000a  8821              LDRH     r1,[r4,#0]
;;;96     
;;;97         if(ifftFlag == 1u)
;;;98         {
;;;99             switch (L) 
00000c  f44f7000          MOV      r0,#0x200
000010  0043              LSLS     r3,r0,#1
000012  0087              LSLS     r7,r0,#2
000014  f44f5c80          MOV      r12,#0x1000
000018  f44f7880          MOV      r8,#0x100
00001c  2a01              CMP      r2,#1                 ;97
00001e  d00b              BEQ      |L1.56|
;;;100            {
;;;101            case 16: 
;;;102            case 64:
;;;103            case 256:
;;;104            case 1024:
;;;105            case 4096:
;;;106                arm_radix4_butterfly_inverse_q31  ( p1, L, (q31_t*)S->pTwiddle, 1 );
;;;107                break;
;;;108                
;;;109            case 32:
;;;110            case 128:
;;;111            case 512:
;;;112            case 2048:
;;;113                arm_cfft_radix4by2_inverse_q31  ( p1, L, S->pTwiddle );
;;;114                break;
;;;115            }  
;;;116        }
;;;117        else
;;;118        {
;;;119            switch (L) 
000020  4541              CMP      r1,r8
000022  d030              BEQ      |L1.134|
000024  dc27              BGT      |L1.118|
000026  2910              CMP      r1,#0x10
000028  d02d              BEQ      |L1.134|
00002a  2920              CMP      r1,#0x20
00002c  d031              BEQ      |L1.146|
00002e  2940              CMP      r1,#0x40
000030  d029              BEQ      |L1.134|
000032  2980              CMP      r1,#0x80
000034  d131              BNE      |L1.154|
000036  e02c              B        |L1.146|
                  |L1.56|
000038  4541              CMP      r1,r8                 ;99
00003a  d011              BEQ      |L1.96|
00003c  dc08              BGT      |L1.80|
00003e  2910              CMP      r1,#0x10              ;99
000040  d00e              BEQ      |L1.96|
000042  2920              CMP      r1,#0x20              ;99
000044  d012              BEQ      |L1.108|
000046  2940              CMP      r1,#0x40              ;99
000048  d00a              BEQ      |L1.96|
00004a  2980              CMP      r1,#0x80              ;99
00004c  d125              BNE      |L1.154|
00004e  e00d              B        |L1.108|
                  |L1.80|
000050  4281              CMP      r1,r0                 ;99
000052  d00b              BEQ      |L1.108|
000054  4299              CMP      r1,r3                 ;99
000056  d003              BEQ      |L1.96|
000058  42b9              CMP      r1,r7                 ;99
00005a  d007              BEQ      |L1.108|
00005c  4561              CMP      r1,r12                ;99
00005e  d11c              BNE      |L1.154|
                  |L1.96|
000060  2301              MOVS     r3,#1                 ;106
000062  4630              MOV      r0,r6                 ;106
000064  6862              LDR      r2,[r4,#4]            ;106
000066  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
00006a  e016              B        |L1.154|
                  |L1.108|
00006c  4630              MOV      r0,r6                 ;113
00006e  6862              LDR      r2,[r4,#4]            ;113
000070  f7fffffe          BL       arm_cfft_radix4by2_inverse_q31
000074  e011              B        |L1.154|
                  |L1.118|
000076  4281              CMP      r1,r0
000078  d00b              BEQ      |L1.146|
00007a  4299              CMP      r1,r3
00007c  d003              BEQ      |L1.134|
00007e  42b9              CMP      r1,r7
000080  d007              BEQ      |L1.146|
000082  4561              CMP      r1,r12
000084  d109              BNE      |L1.154|
                  |L1.134|
;;;120            {
;;;121            case 16: 
;;;122            case 64:
;;;123            case 256:
;;;124            case 1024:
;;;125            case 4096:
;;;126                arm_radix4_butterfly_q31  ( p1, L, (q31_t*)S->pTwiddle, 1 );
000086  2301              MOVS     r3,#1
000088  4630              MOV      r0,r6
00008a  6862              LDR      r2,[r4,#4]
00008c  f7fffffe          BL       arm_radix4_butterfly_q31
;;;127                break;
000090  e003              B        |L1.154|
                  |L1.146|
;;;128                
;;;129            case 32:
;;;130            case 128:
;;;131            case 512:
;;;132            case 2048:
;;;133                arm_cfft_radix4by2_q31  ( p1, L, S->pTwiddle );
000092  4630              MOV      r0,r6
000094  6862              LDR      r2,[r4,#4]
000096  f7fffffe          BL       arm_cfft_radix4by2_q31
                  |L1.154|
;;;134                break;
;;;135            }  
;;;136        }
;;;137        
;;;138        if( bitReverseFlag )
00009a  2d00              CMP      r5,#0
00009c  d006              BEQ      |L1.172|
;;;139            arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);    
00009e  89a1              LDRH     r1,[r4,#0xc]
0000a0  4630              MOV      r0,r6
0000a2  68a2              LDR      r2,[r4,#8]
0000a4  e8bd41f0          POP      {r4-r8,lr}
0000a8  f7ffbffe          B.W      arm_bitreversal_32
                  |L1.172|
;;;140    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
;;;141    
                          ENDP


                          AREA ||i.arm_cfft_radix4by2_inverse_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix4by2_inverse_q31 PROC
;;;205    
;;;206    void arm_cfft_radix4by2_inverse_q31(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;207        q31_t * pSrc,
;;;208        uint32_t fftLen,
;;;209        const q31_t * pCoef) 
;;;210    {    
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
;;;211        uint32_t i, l;
;;;212        uint32_t n2, ia;
;;;213        q31_t xt, yt, cosVal, sinVal;
;;;214        q31_t p0, p1;
;;;215        
;;;216        n2 = fftLen >> 1;    
00000a  ea4f0658          LSR      r6,r8,#1
;;;217        ia = 0;
00000e  2300              MOVS     r3,#0
;;;218        for (i = 0; i < n2; i++)
000010  2000              MOVS     r0,#0
000012  e03b              B        |L2.140|
                  |L2.20|
;;;219        {
;;;220            cosVal = pCoef[2*ia];
000014  f8571033          LDR      r1,[r7,r3,LSL #3]
;;;221            sinVal = pCoef[2*ia + 1];
000018  f04f0901          MOV      r9,#1
00001c  eb090243          ADD      r2,r9,r3,LSL #1
000020  f8572022          LDR      r2,[r7,r2,LSL #2]
;;;222            ia++;
000024  1c5b              ADDS     r3,r3,#1
;;;223            
;;;224            l = i + n2;
000026  1985              ADDS     r5,r0,r6
;;;225            xt = (pSrc[2 * i] >> 2) - (pSrc[2 * l] >> 2);
000028  f854c030          LDR      r12,[r4,r0,LSL #3]
00002c  f854b035          LDR      r11,[r4,r5,LSL #3]
000030  ea4f0aac          ASR      r10,r12,#2
000034  ebaa0cab          SUB      r12,r10,r11,ASR #2
;;;226            pSrc[2 * i] = (pSrc[2 * i] >> 2) + (pSrc[2 * l] >> 2);
000038  eb0a0aab          ADD      r10,r10,r11,ASR #2
00003c  f844a030          STR      r10,[r4,r0,LSL #3]
;;;227            
;;;228            yt = (pSrc[2 * i + 1] >> 2) - (pSrc[2 * l + 1] >> 2);
000040  eb090e40          ADD      lr,r9,r0,LSL #1
000044  eb090945          ADD      r9,r9,r5,LSL #1
000048  f854a02e          LDR      r10,[r4,lr,LSL #2]
00004c  f8cd9000          STR      r9,[sp,#0]
000050  f8549029          LDR      r9,[r4,r9,LSL #2]
000054  ea4f0baa          ASR      r11,r10,#2
000058  ebab0ba9          SUB      r11,r11,r9,ASR #2
;;;229            pSrc[2 * i + 1] = (pSrc[2 * l + 1] >> 2) + (pSrc[2 * i + 1] >> 2);
00005c  ea4f09a9          ASR      r9,r9,#2
000060  eb0909aa          ADD      r9,r9,r10,ASR #2
000064  f844902e          STR      r9,[r4,lr,LSL #2]
;;;230            
;;;231            mult_32x32_keep32_R(p0, xt, cosVal);
000068  fb5cf911          SMMULR   r9,r12,r1
;;;232            mult_32x32_keep32_R(p1, yt, cosVal);
00006c  fb5bf111          SMMULR   r1,r11,r1
;;;233            multSub_32x32_keep32_R(p0, yt, sinVal); 
000070  fb6b9912          SMMLSR   r9,r11,r2,r9
;;;234            multAcc_32x32_keep32_R(p1, xt, sinVal);
000074  fb5c1112          SMMLAR   r1,r12,r2,r1
;;;235            
;;;236            pSrc[2u * l] = p0 << 1;
000078  ea4f0249          LSL      r2,r9,#1
00007c  f8442035          STR      r2,[r4,r5,LSL #3]
;;;237            pSrc[2u * l + 1u] = p1 << 1;
000080  f8dd9000          LDR      r9,[sp,#0]
000084  0049              LSLS     r1,r1,#1
000086  f8441029          STR      r1,[r4,r9,LSL #2]
00008a  1c40              ADDS     r0,r0,#1              ;218
                  |L2.140|
00008c  42b0              CMP      r0,r6                 ;218
00008e  d3c1              BCC      |L2.20|
;;;238        
;;;239        }
;;;240    
;;;241        // first col
;;;242        arm_radix4_butterfly_inverse_q31( pSrc, n2, (q31_t*)pCoef, 2u);
000090  2302              MOVS     r3,#2
000092  463a              MOV      r2,r7
000094  4631              MOV      r1,r6
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
;;;243        // second col
;;;244        arm_radix4_butterfly_inverse_q31( pSrc + fftLen, n2, (q31_t*)pCoef, 2u);
00009c  eb040088          ADD      r0,r4,r8,LSL #2
0000a0  2302              MOVS     r3,#2
0000a2  463a              MOV      r2,r7
0000a4  4631              MOV      r1,r6
0000a6  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
;;;245    			
;;;246        for (i = 0; i < fftLen >> 1; i++)
0000aa  2000              MOVS     r0,#0
0000ac  e022              B        |L2.244|
                  |L2.174|
;;;247        {
;;;248            p0 = pSrc[4*i+0];
0000ae  eb041100          ADD      r1,r4,r0,LSL #4
0000b2  f8d1c000          LDR      r12,[r1,#0]
;;;249            p1 = pSrc[4*i+1];
0000b6  2201              MOVS     r2,#1
0000b8  eb020280          ADD      r2,r2,r0,LSL #2
0000bc  f8547022          LDR      r7,[r4,r2,LSL #2]
;;;250            xt = pSrc[4*i+2];
0000c0  2302              MOVS     r3,#2
0000c2  eb030380          ADD      r3,r3,r0,LSL #2
0000c6  f8546023          LDR      r6,[r4,r3,LSL #2]
;;;251            yt = pSrc[4*i+3];
0000ca  2503              MOVS     r5,#3
0000cc  eb050580          ADD      r5,r5,r0,LSL #2
0000d0  f854a025          LDR      r10,[r4,r5,LSL #2]
;;;252            
;;;253            p0 <<= 1;
0000d4  ea4f094c          LSL      r9,r12,#1
;;;254            p1 <<= 1;
0000d8  007f              LSLS     r7,r7,#1
;;;255            xt <<= 1;
0000da  ea4f0c46          LSL      r12,r6,#1
;;;256            yt <<= 1;
0000de  ea4f064a          LSL      r6,r10,#1
;;;257            
;;;258            pSrc[4*i+0] = p0;
0000e2  f8c19000          STR      r9,[r1,#0]
;;;259            pSrc[4*i+1] = p1;
0000e6  f8447022          STR      r7,[r4,r2,LSL #2]
;;;260            pSrc[4*i+2] = xt;
0000ea  f844c023          STR      r12,[r4,r3,LSL #2]
;;;261            pSrc[4*i+3] = yt;
0000ee  f8446025          STR      r6,[r4,r5,LSL #2]
0000f2  1c40              ADDS     r0,r0,#1              ;246
                  |L2.244|
0000f4  ebb00f58          CMP      r0,r8,LSR #1          ;246
0000f8  d3d9              BCC      |L2.174|
;;;262        }
;;;263    }
0000fa  e8bd8ff8          POP      {r3-r11,pc}
;;;264    
                          ENDP


                          AREA ||i.arm_cfft_radix4by2_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix4by2_q31 PROC
;;;145    
;;;146    void arm_cfft_radix4by2_q31(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;147        q31_t * pSrc,
;;;148        uint32_t fftLen,
;;;149        const q31_t * pCoef) 
;;;150    {    
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
;;;151        uint32_t i, l;
;;;152        uint32_t n2, ia;
;;;153        q31_t xt, yt, cosVal, sinVal;
;;;154        q31_t p0, p1;
;;;155        
;;;156        n2 = fftLen >> 1;    
00000a  ea4f0658          LSR      r6,r8,#1
;;;157        ia = 0;
00000e  2300              MOVS     r3,#0
;;;158        for (i = 0; i < n2; i++)
000010  2000              MOVS     r0,#0
000012  e03b              B        |L3.140|
                  |L3.20|
;;;159        {
;;;160            cosVal = pCoef[2*ia];
000014  f8571033          LDR      r1,[r7,r3,LSL #3]
;;;161            sinVal = pCoef[2*ia + 1];
000018  f04f0901          MOV      r9,#1
00001c  eb090243          ADD      r2,r9,r3,LSL #1
000020  f8572022          LDR      r2,[r7,r2,LSL #2]
;;;162            ia++;
000024  1c5b              ADDS     r3,r3,#1
;;;163            
;;;164            l = i + n2;
000026  1985              ADDS     r5,r0,r6
;;;165            xt = (pSrc[2 * i] >> 2) - (pSrc[2 * l] >> 2);
000028  f854c030          LDR      r12,[r4,r0,LSL #3]
00002c  f854b035          LDR      r11,[r4,r5,LSL #3]
000030  ea4f0aac          ASR      r10,r12,#2
000034  ebaa0cab          SUB      r12,r10,r11,ASR #2
;;;166            pSrc[2 * i] = (pSrc[2 * i] >> 2) + (pSrc[2 * l] >> 2);
000038  eb0a0aab          ADD      r10,r10,r11,ASR #2
00003c  f844a030          STR      r10,[r4,r0,LSL #3]
;;;167            
;;;168            yt = (pSrc[2 * i + 1] >> 2) - (pSrc[2 * l + 1] >> 2);
000040  eb090e40          ADD      lr,r9,r0,LSL #1
000044  eb090945          ADD      r9,r9,r5,LSL #1
000048  f854a02e          LDR      r10,[r4,lr,LSL #2]
00004c  f8cd9000          STR      r9,[sp,#0]
000050  f8549029          LDR      r9,[r4,r9,LSL #2]
000054  ea4f0baa          ASR      r11,r10,#2
000058  ebab0ba9          SUB      r11,r11,r9,ASR #2
;;;169            pSrc[2 * i + 1] = (pSrc[2 * l + 1] >> 2) + (pSrc[2 * i + 1] >> 2);
00005c  ea4f09a9          ASR      r9,r9,#2
000060  eb0909aa          ADD      r9,r9,r10,ASR #2
000064  f844902e          STR      r9,[r4,lr,LSL #2]
;;;170            
;;;171            mult_32x32_keep32_R(p0, xt, cosVal);
000068  fb5cf911          SMMULR   r9,r12,r1
;;;172            mult_32x32_keep32_R(p1, yt, cosVal);
00006c  fb5bf111          SMMULR   r1,r11,r1
;;;173            multAcc_32x32_keep32_R(p0, yt, sinVal); 
000070  fb5b9912          SMMLAR   r9,r11,r2,r9
;;;174            multSub_32x32_keep32_R(p1, xt, sinVal);
000074  fb6c1112          SMMLSR   r1,r12,r2,r1
;;;175            
;;;176            pSrc[2u * l] = p0 << 1;
000078  ea4f0249          LSL      r2,r9,#1
00007c  f8442035          STR      r2,[r4,r5,LSL #3]
;;;177            pSrc[2u * l + 1u] = p1 << 1;
000080  f8dd9000          LDR      r9,[sp,#0]
000084  0049              LSLS     r1,r1,#1
000086  f8441029          STR      r1,[r4,r9,LSL #2]
00008a  1c40              ADDS     r0,r0,#1              ;158
                  |L3.140|
00008c  42b0              CMP      r0,r6                 ;158
00008e  d3c1              BCC      |L3.20|
;;;178        
;;;179        }
;;;180    
;;;181        // first col
;;;182        arm_radix4_butterfly_q31( pSrc, n2, (q31_t*)pCoef, 2u);
000090  2302              MOVS     r3,#2
000092  463a              MOV      r2,r7
000094  4631              MOV      r1,r6
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       arm_radix4_butterfly_q31
;;;183        // second col
;;;184        arm_radix4_butterfly_q31( pSrc + fftLen, n2, (q31_t*)pCoef, 2u);
00009c  eb040088          ADD      r0,r4,r8,LSL #2
0000a0  2302              MOVS     r3,#2
0000a2  463a              MOV      r2,r7
0000a4  4631              MOV      r1,r6
0000a6  f7fffffe          BL       arm_radix4_butterfly_q31
;;;185    			
;;;186        for (i = 0; i < fftLen >> 1; i++)
0000aa  2000              MOVS     r0,#0
0000ac  e022              B        |L3.244|
                  |L3.174|
;;;187        {
;;;188            p0 = pSrc[4*i+0];
0000ae  eb041100          ADD      r1,r4,r0,LSL #4
0000b2  f8d1c000          LDR      r12,[r1,#0]
;;;189            p1 = pSrc[4*i+1];
0000b6  2201              MOVS     r2,#1
0000b8  eb020280          ADD      r2,r2,r0,LSL #2
0000bc  f8547022          LDR      r7,[r4,r2,LSL #2]
;;;190            xt = pSrc[4*i+2];
0000c0  2302              MOVS     r3,#2
0000c2  eb030380          ADD      r3,r3,r0,LSL #2
0000c6  f8546023          LDR      r6,[r4,r3,LSL #2]
;;;191            yt = pSrc[4*i+3];
0000ca  2503              MOVS     r5,#3
0000cc  eb050580          ADD      r5,r5,r0,LSL #2
0000d0  f854a025          LDR      r10,[r4,r5,LSL #2]
;;;192            
;;;193            p0 <<= 1;
0000d4  ea4f094c          LSL      r9,r12,#1
;;;194            p1 <<= 1;
0000d8  007f              LSLS     r7,r7,#1
;;;195            xt <<= 1;
0000da  ea4f0c46          LSL      r12,r6,#1
;;;196            yt <<= 1;
0000de  ea4f064a          LSL      r6,r10,#1
;;;197            
;;;198            pSrc[4*i+0] = p0;
0000e2  f8c19000          STR      r9,[r1,#0]
;;;199            pSrc[4*i+1] = p1;
0000e6  f8447022          STR      r7,[r4,r2,LSL #2]
;;;200            pSrc[4*i+2] = xt;
0000ea  f844c023          STR      r12,[r4,r3,LSL #2]
;;;201            pSrc[4*i+3] = yt;
0000ee  f8446025          STR      r6,[r4,r5,LSL #2]
0000f2  1c40              ADDS     r0,r0,#1              ;186
                  |L3.244|
0000f4  ebb00f58          CMP      r0,r8,LSR #1          ;186
0000f8  d3d9              BCC      |L3.174|
;;;202        }
;;;203    
;;;204    }
0000fa  e8bd8ff8          POP      {r3-r11,pc}
;;;205    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q31_c_e08b000b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_cfft_q31_c_e08b000b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q31_c_e08b000b____REVSH|
#line 144
|__asm___14_arm_cfft_q31_c_e08b000b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q31_c_e08b000b____RRX|
#line 300
|__asm___14_arm_cfft_q31_c_e08b000b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
