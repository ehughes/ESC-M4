; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cfft_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_q31.c]
                          THUMB

                          AREA ||i.arm_cfft_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_q31 PROC
;;;88     
;;;89     void arm_cfft_q31( 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90         const arm_cfft_instance_q31 * S, 
;;;91         q31_t * p1,
;;;92         uint8_t ifftFlag,
;;;93         uint8_t bitReverseFlag)
;;;94     {
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
;;;95         uint32_t L = S->fftLen;
000008  8801              LDRH     r1,[r0,#0]
;;;96     
;;;97         if(ifftFlag == 1u)
;;;98         {
;;;99             switch (L) 
00000a  f44f7000          MOV      r0,#0x200
00000e  461d              MOV      r5,r3                 ;94
000010  0043              LSLS     r3,r0,#1
000012  0087              LSLS     r7,r0,#2
000014  f44f5c80          MOV      r12,#0x1000
000018  f44f7e80          MOV      lr,#0x100
00001c  2a01              CMP      r2,#1                 ;97
00001e  d00b              BEQ      |L1.56|
;;;100            {
;;;101            case 16: 
;;;102            case 64:
;;;103            case 256:
;;;104            case 1024:
;;;105            case 4096:
;;;106                arm_radix4_butterfly_inverse_q31  ( p1, L, (q31_t*)S->pTwiddle, 1 );
;;;107                break;
;;;108                
;;;109            case 32:
;;;110            case 128:
;;;111            case 512:
;;;112            case 2048:
;;;113                arm_cfft_radix4by2_inverse_q31  ( p1, L, S->pTwiddle );
;;;114                break;
;;;115            }  
;;;116        }
;;;117        else
;;;118        {
;;;119            switch (L) 
000020  4571              CMP      r1,lr
000022  d030              BEQ      |L1.134|
000024  dc27              BGT      |L1.118|
000026  2910              CMP      r1,#0x10
000028  d02d              BEQ      |L1.134|
00002a  2920              CMP      r1,#0x20
00002c  d031              BEQ      |L1.146|
00002e  2940              CMP      r1,#0x40
000030  d029              BEQ      |L1.134|
000032  2980              CMP      r1,#0x80
000034  d131              BNE      |L1.154|
000036  e02c              B        |L1.146|
                  |L1.56|
000038  4571              CMP      r1,lr                 ;99
00003a  d011              BEQ      |L1.96|
00003c  dc08              BGT      |L1.80|
00003e  2910              CMP      r1,#0x10              ;99
000040  d00e              BEQ      |L1.96|
000042  2920              CMP      r1,#0x20              ;99
000044  d012              BEQ      |L1.108|
000046  2940              CMP      r1,#0x40              ;99
000048  d00a              BEQ      |L1.96|
00004a  2980              CMP      r1,#0x80              ;99
00004c  d125              BNE      |L1.154|
00004e  e00d              B        |L1.108|
                  |L1.80|
000050  4281              CMP      r1,r0                 ;99
000052  d00b              BEQ      |L1.108|
000054  4299              CMP      r1,r3                 ;99
000056  d003              BEQ      |L1.96|
000058  42b9              CMP      r1,r7                 ;99
00005a  d007              BEQ      |L1.108|
00005c  4561              CMP      r1,r12                ;99
00005e  d11c              BNE      |L1.154|
                  |L1.96|
000060  2301              MOVS     r3,#1                 ;106
000062  4630              MOV      r0,r6                 ;106
000064  6862              LDR      r2,[r4,#4]            ;106
000066  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
00006a  e016              B        |L1.154|
                  |L1.108|
00006c  4630              MOV      r0,r6                 ;113
00006e  6862              LDR      r2,[r4,#4]            ;113
000070  f7fffffe          BL       arm_cfft_radix4by2_inverse_q31
000074  e011              B        |L1.154|
                  |L1.118|
000076  4281              CMP      r1,r0
000078  d00b              BEQ      |L1.146|
00007a  4299              CMP      r1,r3
00007c  d003              BEQ      |L1.134|
00007e  42b9              CMP      r1,r7
000080  d007              BEQ      |L1.146|
000082  4561              CMP      r1,r12
000084  d109              BNE      |L1.154|
                  |L1.134|
;;;120            {
;;;121            case 16: 
;;;122            case 64:
;;;123            case 256:
;;;124            case 1024:
;;;125            case 4096:
;;;126                arm_radix4_butterfly_q31  ( p1, L, (q31_t*)S->pTwiddle, 1 );
000086  2301              MOVS     r3,#1
000088  4630              MOV      r0,r6
00008a  6862              LDR      r2,[r4,#4]
00008c  f7fffffe          BL       arm_radix4_butterfly_q31
;;;127                break;
000090  e003              B        |L1.154|
                  |L1.146|
;;;128                
;;;129            case 32:
;;;130            case 128:
;;;131            case 512:
;;;132            case 2048:
;;;133                arm_cfft_radix4by2_q31  ( p1, L, S->pTwiddle );
000092  4630              MOV      r0,r6
000094  6862              LDR      r2,[r4,#4]
000096  f7fffffe          BL       arm_cfft_radix4by2_q31
                  |L1.154|
;;;134                break;
;;;135            }  
;;;136        }
;;;137        
;;;138        if( bitReverseFlag )
00009a  2d00              CMP      r5,#0
00009c  d006              BEQ      |L1.172|
;;;139            arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);    
00009e  89a1              LDRH     r1,[r4,#0xc]
0000a0  4630              MOV      r0,r6
0000a2  68a2              LDR      r2,[r4,#8]
0000a4  e8bd41f0          POP      {r4-r8,lr}
0000a8  f7ffbffe          B.W      arm_bitreversal_32
                  |L1.172|
;;;140    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
;;;141    
                          ENDP


                          AREA ||i.arm_cfft_radix4by2_inverse_q31||, CODE, READONLY, ALIGN=2

                  arm_cfft_radix4by2_inverse_q31 PROC
;;;205    
;;;206    void arm_cfft_radix4by2_inverse_q31(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;207        q31_t * pSrc,
;;;208        uint32_t fftLen,
;;;209        const q31_t * pCoef) 
;;;210    {    
000004  460e              MOV      r6,r1
;;;211        uint32_t i, l;
;;;212        uint32_t n2, ia;
;;;213        q31_t xt, yt, cosVal, sinVal;
;;;214        q31_t p0, p1;
;;;215        
;;;216        n2 = fftLen >> 1;    
000006  084d              LSRS     r5,r1,#1
000008  4604              MOV      r4,r0                 ;210
;;;217        ia = 0;
00000a  2100              MOVS     r1,#0
00000c  4693              MOV      r11,r2                ;210
;;;218        for (i = 0; i < n2; i++)
00000e  4608              MOV      r0,r1
000010  e038              B        |L2.132|
;;;219        {
;;;220            cosVal = pCoef[2*ia];
000012  bf00              NOP      
                  |L2.20|
;;;221            sinVal = pCoef[2*ia + 1];
000014  eb0b02c1          ADD      r2,r11,r1,LSL #3
;;;222            ia++;
;;;223            
;;;224            l = i + n2;
;;;225            xt = (pSrc[2 * i] >> 2) - (pSrc[2 * l] >> 2);
000018  f8547030          LDR      r7,[r4,r0,LSL #3]
00001c  f8d2a004          LDR      r10,[r2,#4]           ;224
000020  1942              ADDS     r2,r0,r5              ;224
000022  10bf              ASRS     r7,r7,#2
000024  f854c032          LDR      r12,[r4,r2,LSL #3]
000028  f85b3031          LDR      r3,[r11,r1,LSL #3]    ;220
00002c  eba709ac          SUB      r9,r7,r12,ASR #2
;;;226            pSrc[2 * i] = (pSrc[2 * i] >> 2) + (pSrc[2 * l] >> 2);
000030  eb0707ac          ADD      r7,r7,r12,ASR #2
;;;227            
;;;228            yt = (pSrc[2 * i + 1] >> 2) - (pSrc[2 * l + 1] >> 2);
000034  eb040ec0          ADD      lr,r4,r0,LSL #3
000038  f8447030          STR      r7,[r4,r0,LSL #3]     ;226
00003c  f8de8004          LDR      r8,[lr,#4]
000040  eb040cc2          ADD      r12,r4,r2,LSL #3
000044  f8cdc000          STR      r12,[sp,#0]
000048  f8dcc004          LDR      r12,[r12,#4]
00004c  ea4f07a8          ASR      r7,r8,#2
000050  eba707ac          SUB      r7,r7,r12,ASR #2
;;;229            pSrc[2 * i + 1] = (pSrc[2 * l + 1] >> 2) + (pSrc[2 * i + 1] >> 2);
000054  ea4f0cac          ASR      r12,r12,#2
000058  eb0c08a8          ADD      r8,r12,r8,ASR #2
;;;230            
;;;231            mult_32x32_keep32_R(p0, xt, cosVal);
00005c  f8ce8004          STR      r8,[lr,#4]
000060  fb59f813          SMMULR   r8,r9,r3
;;;232            mult_32x32_keep32_R(p1, yt, cosVal);
000064  fb57f313          SMMULR   r3,r7,r3
;;;233            multSub_32x32_keep32_R(p0, yt, sinVal); 
000068  fb67871a          SMMLSR   r7,r7,r10,r8
;;;234            multAcc_32x32_keep32_R(p1, xt, sinVal);
00006c  fb59331a          SMMLAR   r3,r9,r10,r3
;;;235            
;;;236            pSrc[2u * l] = p0 << 1;
000070  007f              LSLS     r7,r7,#1
000072  f8447032          STR      r7,[r4,r2,LSL #3]
;;;237            pSrc[2u * l + 1u] = p1 << 1;
000076  f8ddc000          LDR      r12,[sp,#0]
00007a  005a              LSLS     r2,r3,#1
00007c  1c40              ADDS     r0,r0,#1
00007e  1c49              ADDS     r1,r1,#1
000080  f8cc2004          STR      r2,[r12,#4]
                  |L2.132|
000084  42a8              CMP      r0,r5                 ;218
000086  d3c5              BCC      |L2.20|
;;;238        
;;;239        }
;;;240    
;;;241        // first col
;;;242        arm_radix4_butterfly_inverse_q31( pSrc, n2, (q31_t*)pCoef, 2u);
000088  2302              MOVS     r3,#2
00008a  465a              MOV      r2,r11
00008c  4629              MOV      r1,r5
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
;;;243        // second col
;;;244        arm_radix4_butterfly_inverse_q31( pSrc + fftLen, n2, (q31_t*)pCoef, 2u);
000094  eb040086          ADD      r0,r4,r6,LSL #2
000098  2302              MOVS     r3,#2
00009a  465a              MOV      r2,r11
00009c  4629              MOV      r1,r5
00009e  f7fffffe          BL       arm_radix4_butterfly_inverse_q31
;;;245    			
;;;246        for (i = 0; i < fftLen >> 1; i++)
0000a2  2100              MOVS     r1,#0
0000a4  e00f              B        |L2.198|
;;;247        {
;;;248            p0 = pSrc[4*i+0];
0000a6  bf00              NOP      
                  |L2.168|
0000a8  eb041001          ADD      r0,r4,r1,LSL #4
0000ac  e9d05300          LDRD     r5,r3,[r0,#0]
;;;249            p1 = pSrc[4*i+1];
;;;250            xt = pSrc[4*i+2];
;;;251            yt = pSrc[4*i+3];
;;;252            
;;;253            p0 <<= 1;
;;;254            p1 <<= 1;
0000b0  e9d07202          LDRD     r7,r2,[r0,#8]
;;;255            xt <<= 1;
0000b4  007f              LSLS     r7,r7,#1
;;;256            yt <<= 1;
0000b6  0052              LSLS     r2,r2,#1
0000b8  e9c07202          STRD     r7,r2,[r0,#8]
0000bc  006d              LSLS     r5,r5,#1              ;253
0000be  005b              LSLS     r3,r3,#1              ;254
0000c0  e9c05300          STRD     r5,r3,[r0,#0]
0000c4  1c49              ADDS     r1,r1,#1
                  |L2.198|
0000c6  ebb10f56          CMP      r1,r6,LSR #1          ;246
0000ca  d3ed              BCC      |L2.168|
;;;257            
;;;258            pSrc[4*i+0] = p0;
;;;259            pSrc[4*i+1] = p1;
;;;260            pSrc[4*i+2] = xt;
;;;261            pSrc[4*i+3] = yt;
;;;262        }
;;;263    }
0000cc  e8bd8ff8          POP      {r3-r11,pc}
;;;264    
                          ENDP


                          AREA ||i.arm_cfft_radix4by2_q31||, CODE, READONLY, ALIGN=2

                  arm_cfft_radix4by2_q31 PROC
;;;145    
;;;146    void arm_cfft_radix4by2_q31(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;147        q31_t * pSrc,
;;;148        uint32_t fftLen,
;;;149        const q31_t * pCoef) 
;;;150    {    
000004  460e              MOV      r6,r1
;;;151        uint32_t i, l;
;;;152        uint32_t n2, ia;
;;;153        q31_t xt, yt, cosVal, sinVal;
;;;154        q31_t p0, p1;
;;;155        
;;;156        n2 = fftLen >> 1;    
000006  084d              LSRS     r5,r1,#1
000008  4604              MOV      r4,r0                 ;150
;;;157        ia = 0;
00000a  2100              MOVS     r1,#0
00000c  4693              MOV      r11,r2                ;150
;;;158        for (i = 0; i < n2; i++)
00000e  4608              MOV      r0,r1
000010  e038              B        |L3.132|
;;;159        {
;;;160            cosVal = pCoef[2*ia];
000012  bf00              NOP      
                  |L3.20|
;;;161            sinVal = pCoef[2*ia + 1];
000014  eb0b02c1          ADD      r2,r11,r1,LSL #3
;;;162            ia++;
;;;163            
;;;164            l = i + n2;
;;;165            xt = (pSrc[2 * i] >> 2) - (pSrc[2 * l] >> 2);
000018  f8547030          LDR      r7,[r4,r0,LSL #3]
00001c  f8d2a004          LDR      r10,[r2,#4]           ;164
000020  1942              ADDS     r2,r0,r5              ;164
000022  10bf              ASRS     r7,r7,#2
000024  f854c032          LDR      r12,[r4,r2,LSL #3]
000028  f85b3031          LDR      r3,[r11,r1,LSL #3]    ;160
00002c  eba709ac          SUB      r9,r7,r12,ASR #2
;;;166            pSrc[2 * i] = (pSrc[2 * i] >> 2) + (pSrc[2 * l] >> 2);
000030  eb0707ac          ADD      r7,r7,r12,ASR #2
;;;167            
;;;168            yt = (pSrc[2 * i + 1] >> 2) - (pSrc[2 * l + 1] >> 2);
000034  eb040ec0          ADD      lr,r4,r0,LSL #3
000038  f8447030          STR      r7,[r4,r0,LSL #3]     ;166
00003c  f8de8004          LDR      r8,[lr,#4]
000040  eb040cc2          ADD      r12,r4,r2,LSL #3
000044  f8cdc000          STR      r12,[sp,#0]
000048  f8dcc004          LDR      r12,[r12,#4]
00004c  ea4f07a8          ASR      r7,r8,#2
000050  eba707ac          SUB      r7,r7,r12,ASR #2
;;;169            pSrc[2 * i + 1] = (pSrc[2 * l + 1] >> 2) + (pSrc[2 * i + 1] >> 2);
000054  ea4f0cac          ASR      r12,r12,#2
000058  eb0c08a8          ADD      r8,r12,r8,ASR #2
;;;170            
;;;171            mult_32x32_keep32_R(p0, xt, cosVal);
00005c  f8ce8004          STR      r8,[lr,#4]
000060  fb59f813          SMMULR   r8,r9,r3
;;;172            mult_32x32_keep32_R(p1, yt, cosVal);
000064  fb57f313          SMMULR   r3,r7,r3
;;;173            multAcc_32x32_keep32_R(p0, yt, sinVal); 
000068  fb57871a          SMMLAR   r7,r7,r10,r8
;;;174            multSub_32x32_keep32_R(p1, xt, sinVal);
00006c  fb69331a          SMMLSR   r3,r9,r10,r3
;;;175            
;;;176            pSrc[2u * l] = p0 << 1;
000070  007f              LSLS     r7,r7,#1
000072  f8447032          STR      r7,[r4,r2,LSL #3]
;;;177            pSrc[2u * l + 1u] = p1 << 1;
000076  f8ddc000          LDR      r12,[sp,#0]
00007a  005a              LSLS     r2,r3,#1
00007c  1c40              ADDS     r0,r0,#1
00007e  1c49              ADDS     r1,r1,#1
000080  f8cc2004          STR      r2,[r12,#4]
                  |L3.132|
000084  42a8              CMP      r0,r5                 ;158
000086  d3c5              BCC      |L3.20|
;;;178        
;;;179        }
;;;180    
;;;181        // first col
;;;182        arm_radix4_butterfly_q31( pSrc, n2, (q31_t*)pCoef, 2u);
000088  2302              MOVS     r3,#2
00008a  465a              MOV      r2,r11
00008c  4629              MOV      r1,r5
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       arm_radix4_butterfly_q31
;;;183        // second col
;;;184        arm_radix4_butterfly_q31( pSrc + fftLen, n2, (q31_t*)pCoef, 2u);
000094  eb040086          ADD      r0,r4,r6,LSL #2
000098  2302              MOVS     r3,#2
00009a  465a              MOV      r2,r11
00009c  4629              MOV      r1,r5
00009e  f7fffffe          BL       arm_radix4_butterfly_q31
;;;185    			
;;;186        for (i = 0; i < fftLen >> 1; i++)
0000a2  2100              MOVS     r1,#0
0000a4  e00f              B        |L3.198|
;;;187        {
;;;188            p0 = pSrc[4*i+0];
0000a6  bf00              NOP      
                  |L3.168|
0000a8  eb041001          ADD      r0,r4,r1,LSL #4
0000ac  e9d05300          LDRD     r5,r3,[r0,#0]
;;;189            p1 = pSrc[4*i+1];
;;;190            xt = pSrc[4*i+2];
;;;191            yt = pSrc[4*i+3];
;;;192            
;;;193            p0 <<= 1;
;;;194            p1 <<= 1;
0000b0  e9d07202          LDRD     r7,r2,[r0,#8]
;;;195            xt <<= 1;
0000b4  007f              LSLS     r7,r7,#1
;;;196            yt <<= 1;
0000b6  0052              LSLS     r2,r2,#1
0000b8  e9c07202          STRD     r7,r2,[r0,#8]
0000bc  006d              LSLS     r5,r5,#1              ;193
0000be  005b              LSLS     r3,r3,#1              ;194
0000c0  e9c05300          STRD     r5,r3,[r0,#0]
0000c4  1c49              ADDS     r1,r1,#1
                  |L3.198|
0000c6  ebb10f56          CMP      r1,r6,LSR #1          ;186
0000ca  d3ed              BCC      |L3.168|
;;;197            
;;;198            pSrc[4*i+0] = p0;
;;;199            pSrc[4*i+1] = p1;
;;;200            pSrc[4*i+2] = xt;
;;;201            pSrc[4*i+3] = yt;
;;;202        }
;;;203    
;;;204    }
0000cc  e8bd8ff8          POP      {r3-r11,pc}
;;;205    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q31_c_e08b000b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_cfft_q31_c_e08b000b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q31_c_e08b000b____REVSH|
#line 144
|__asm___14_arm_cfft_q31_c_e08b000b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_cfft_q31_c_e08b000b____RRX|
#line 300
|__asm___14_arm_cfft_q31_c_e08b000b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
