; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_lattice_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_lattice_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_fir_lattice_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_lattice_q15.c]
                          THUMB

                          AREA ||i.arm_fir_lattice_q15||, CODE, READONLY, ALIGN=2

                  arm_fir_lattice_q15 PROC
;;;61     
;;;62     void arm_fir_lattice_q15(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;63       const arm_fir_lattice_instance_q15 * S,
;;;64       q15_t * pSrc,
;;;65       q15_t * pDst,
;;;66       uint32_t blockSize)
;;;67     {
000004  b098              SUB      sp,sp,#0x60
000006  468e              MOV      lr,r1
;;;68       q15_t *pState;                                 /* State pointer */
;;;69       q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000008  6881              LDR      r1,[r0,#8]
;;;70       q15_t *px;                                     /* temporary state pointer */
;;;71       q15_t *pk;                                     /* temporary coefficient pointer */
;;;72     
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77     
;;;78       q31_t fcurnt1, fnext1, gcurnt1 = 0, gnext1;    /* temporary variables for first sample in loop unrolling */
;;;79       q31_t fcurnt2, fnext2, gnext2;                 /* temporary variables for second sample in loop unrolling */
;;;80       q31_t fcurnt3, fnext3, gnext3;                 /* temporary variables for third sample in loop unrolling */
;;;81       q31_t fcurnt4, fnext4, gnext4;                 /* temporary variables for fourth sample in loop unrolling */
;;;82       uint32_t numStages = S->numStages;             /* Number of stages in the filter */
00000a  9117              STR      r1,[sp,#0x5c]
00000c  8801              LDRH     r1,[r0,#0]
;;;83       uint32_t blkCnt, stageCnt;                     /* temporary variables for counts */
;;;84     
;;;85       pState = &S->pState[0];
00000e  9115              STR      r1,[sp,#0x54]
000010  6840              LDR      r0,[r0,#4]
;;;86     
;;;87       blkCnt = blockSize >> 2u;
000012  9013              STR      r0,[sp,#0x4c]
000014  981b              LDR      r0,[sp,#0x6c]
000016  0880              LSRS     r0,r0,#2
                  |L1.24|
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
000018  9009              STR      r0,[sp,#0x24]
00001a  2800              CMP      r0,#0
00001c  d07e              BEQ      |L1.284|
;;;92       {
;;;93     
;;;94         /* Read two samples from input buffer */
;;;95         /* f0(n) = x(n) */
;;;96         fcurnt1 = *pSrc++;
;;;97         fcurnt2 = *pSrc++;
;;;98     
;;;99         /* Initialize coeff pointer */
;;;100        pk = (pCoeffs);
;;;101    
;;;102        /* Initialize state pointer */
;;;103        px = pState;
;;;104    
;;;105        /* Read g0(n-1) from state */
;;;106        gcurnt1 = *px;
00001e  9813              LDR      r0,[sp,#0x4c]
;;;107    
;;;108        /* Process first sample for first tap */
;;;109        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;110        fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
000020  9917              LDR      r1,[sp,#0x5c]
000022  f10e0402          ADD      r4,lr,#2              ;96
000026  f9be3000          LDRSH    r3,[lr,#0]            ;96
00002a  f9345b02          LDRSH    r5,[r4],#2            ;97
00002e  f9b02000          LDRSH    r2,[r0,#0]            ;106
000032  f8b1c000          LDRH     r12,[r1,#0]
000036  fb1cf602          SMULBB   r6,r12,r2
00003a  eb0336e6          ADD      r6,r3,r6,ASR #15
;;;111        fnext1 = __SSAT(fnext1, 16);
00003e  f306060f          SSAT     r6,#16,r6
;;;112    
;;;113        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;114        gnext1 = (q31_t) ((fcurnt1 * (*pk)) >> 15u) + gcurnt1;
000042  9603              STR      r6,[sp,#0xc]
000044  fb1cf603          SMULBB   r6,r12,r3
000048  eb0232e6          ADD      r2,r2,r6,ASR #15
;;;115        gnext1 = __SSAT(gnext1, 16);
;;;116    
;;;117        /* Process second sample for first tap */
;;;118        /* for sample 2 processing */
;;;119        fnext2 = (q31_t) ((fcurnt1 * (*pk)) >> 15u) + fcurnt2;
00004c  eb0536e6          ADD      r6,r5,r6,ASR #15
000050  f302020f          SSAT     r2,#16,r2             ;115
;;;120        fnext2 = __SSAT(fnext2, 16);
000054  f306090f          SSAT     r9,#16,r6
;;;121    
;;;122        gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + fcurnt1;
000058  fb1cf605          SMULBB   r6,r12,r5
00005c  eb0333e6          ADD      r3,r3,r6,ASR #15
;;;123        gnext2 = __SSAT(gnext2, 16);
;;;124    
;;;125    
;;;126        /* Read next two samples from input buffer */
;;;127        /* f0(n+2) = x(n+2) */
;;;128        fcurnt3 = *pSrc++;
000060  f9347b02          LDRSH    r7,[r4],#2
000064  f303030f          SSAT     r3,#16,r3             ;123
;;;129        fcurnt4 = *pSrc++;
000068  f9346b02          LDRSH    r6,[r4],#2
;;;130    
;;;131        /* Copy only last input samples into the state buffer    
;;;132           which is used for next four samples processing */
;;;133        *px++ = (q15_t) fcurnt4;
00006c  f8206b02          STRH     r6,[r0],#2
;;;134    
;;;135        /* Process third sample for first tap */
;;;136        fnext3 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + fcurnt3;
000070  f831cb02          LDRH     r12,[r1],#2
000074  46a6              MOV      lr,r4                 ;129
000076  fb1cf405          SMULBB   r4,r12,r5
00007a  eb0734e4          ADD      r4,r7,r4,ASR #15
;;;137        fnext3 = __SSAT(fnext3, 16);
00007e  f304040f          SSAT     r4,#16,r4
;;;138        gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + fcurnt2;
000082  fb1cf807          SMULBB   r8,r12,r7
000086  eb0535e8          ADD      r5,r5,r8,ASR #15
;;;139        gnext3 = __SSAT(gnext3, 16);
00008a  f3050a0f          SSAT     r10,#16,r5
;;;140    
;;;141        /* Process fourth sample for first tap */
;;;142        fnext4 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + fcurnt4;
00008e  eb0635e8          ADD      r5,r6,r8,ASR #15
;;;143        fnext4 = __SSAT(fnext4, 16);
000092  f305050f          SSAT     r5,#16,r5
;;;144        gnext4 = (q31_t) ((fcurnt4 * (*pk++)) >> 15u) + fcurnt3;
000096  fb1cf606          SMULBB   r6,r12,r6
;;;145        gnext4 = __SSAT(gnext4, 16);
;;;146    
;;;147        /* Update of f values for next coefficient set processing */
;;;148        fcurnt1 = fnext1;
;;;149        fcurnt2 = fnext2;
;;;150        fcurnt3 = fnext3;
;;;151        fcurnt4 = fnext4;
;;;152    
;;;153    
;;;154        /* Loop unrolling.  Process 4 taps at a time . */
;;;155        stageCnt = (numStages - 1u) >> 2;
00009a  f8ddc054          LDR      r12,[sp,#0x54]
00009e  eb0736e6          ADD      r6,r7,r6,ASR #15      ;144
0000a2  f1ac0c01          SUB      r12,r12,#1
0000a6  f3060b0f          SSAT     r11,#16,r6            ;145
0000aa  f8cdc044          STR      r12,[sp,#0x44]
0000ae  464f              MOV      r7,r9                 ;149
0000b0  9e03              LDR      r6,[sp,#0xc]
0000b2  ea4f0c9c          LSR      r12,r12,#2
;;;156    
;;;157    
;;;158        /* Loop over the number of taps.  Unroll by a factor of 4.    
;;;159         ** Repeat until we've computed numStages-3 coefficients. */
;;;160    
;;;161        /* Process 2nd, 3rd, 4th and 5th taps ... here */
;;;162        while(stageCnt > 0u)
0000b6  e115              B        |L1.740|
                  |L1.184|
;;;163        {
;;;164          /* Read g1(n-1), g3(n-1) .... from state */
;;;165          gcurnt1 = *px;
0000b8  f9b08000          LDRSH    r8,[r0,#0]
;;;166    
;;;167          /* save g1(n) in state buffer */
;;;168          *px++ = (q15_t) gnext4;
0000bc  f8cd802c          STR      r8,[sp,#0x2c]
0000c0  f820bb02          STRH     r11,[r0],#2
0000c4  4681              MOV      r9,r0
;;;169    
;;;170          /* Process first sample for 2nd, 6th .. tap */
;;;171          /* Sample processing for K2, K6.... */
;;;172          /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;173          fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0000c6  f9310b02          LDRSH    r0,[r1],#2
0000ca  f8dd802c          LDR      r8,[sp,#0x2c]
0000ce  fb10f808          SMULBB   r8,r0,r8
0000d2  eb0638e8          ADD      r8,r6,r8,ASR #15
;;;174          fnext1 = __SSAT(fnext1, 16);
0000d6  f308080f          SSAT     r8,#16,r8
;;;175    
;;;176    
;;;177          /* Process second sample for 2nd, 6th .. tap */
;;;178          /* for sample 2 processing */
;;;179          fnext2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fcurnt2;
0000da  f8cd800c          STR      r8,[sp,#0xc]
0000de  fb00f802          MUL      r8,r0,r2
0000e2  eb0738e8          ADD      r8,r7,r8,ASR #15
;;;180          fnext2 = __SSAT(fnext2, 16);
0000e6  f308080f          SSAT     r8,#16,r8
;;;181          /* Process third sample for 2nd, 6th .. tap */
;;;182          fnext3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fcurnt3;
0000ea  f8cd8028          STR      r8,[sp,#0x28]
0000ee  fb00f803          MUL      r8,r0,r3
0000f2  eb0438e8          ADD      r8,r4,r8,ASR #15
;;;183          fnext3 = __SSAT(fnext3, 16);
0000f6  f308080f          SSAT     r8,#16,r8
;;;184          /* Process fourth sample for 2nd, 6th .. tap */
;;;185          /* fnext4 = fcurnt4 + (*pk) * gnext3; */
;;;186          fnext4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fcurnt4;
0000fa  f8cd8030          STR      r8,[sp,#0x30]
0000fe  fb00f80a          MUL      r8,r0,r10
000102  eb0538e8          ADD      r8,r5,r8,ASR #15
;;;187          fnext4 = __SSAT(fnext4, 16);
;;;188    
;;;189          /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;190          /* Calculation of state values for next stage */
;;;191          gnext4 = (q31_t) ((fcurnt4 * (*pk)) >> 15u) + gnext3;
000106  4345              MULS     r5,r0,r5
000108  eb0a35e5          ADD      r5,r10,r5,ASR #15
;;;192          gnext4 = __SSAT(gnext4, 16);
;;;193          gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + gnext2;
00010c  4344              MULS     r4,r0,r4
00010e  f3080b0f          SSAT     r11,#16,r8            ;187
000112  f305050f          SSAT     r5,#16,r5             ;192
000116  eb0333e4          ADD      r3,r3,r4,ASR #15
;;;194          gnext3 = __SSAT(gnext3, 16);
00011a  e000              B        |L1.286|
                  |L1.284|
00011c  e146              B        |L1.940|
                  |L1.286|
00011e  f3030a0f          SSAT     r10,#16,r3
;;;195    
;;;196          gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + gnext1;
000122  fb00f307          MUL      r3,r0,r7
;;;197          gnext2 = __SSAT(gnext2, 16);
;;;198    
;;;199          gnext1 = (q31_t) ((fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
000126  f8dd802c          LDR      r8,[sp,#0x2c]
00012a  eb0232e3          ADD      r2,r2,r3,ASR #15      ;196
00012e  4370              MULS     r0,r6,r0
;;;200          gnext1 = __SSAT(gnext1, 16);
;;;201    
;;;202    
;;;203          /* Read g2(n-1), g4(n-1) .... from state */
;;;204          gcurnt1 = *px;
000130  f9b93000          LDRSH    r3,[r9,#0]
000134  eb0830e0          ADD      r0,r8,r0,ASR #15      ;199
;;;205    
;;;206          /* save g1(n) in state buffer */
;;;207          *px++ = (q15_t) gnext4;
000138  f8a95000          STRH     r5,[r9,#0]
00013c  f300040f          SSAT     r4,#16,r0             ;200
;;;208    
;;;209          /* Sample processing for K3, K7.... */
;;;210          /* Process first sample for 3rd, 7th .. tap */
;;;211          /* f3(n) = f2(n) +  K3 * g2(n-1) */
;;;212          fcurnt1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fnext1;
000140  f9315b02          LDRSH    r5,[r1],#2
000144  f302020f          SSAT     r2,#16,r2             ;197
000148  f1090002          ADD      r0,r9,#2              ;207
00014c  fb15f603          SMULBB   r6,r5,r3
000150  f8dd800c          LDR      r8,[sp,#0xc]
000154  eb0836e6          ADD      r6,r8,r6,ASR #15
;;;213          fcurnt1 = __SSAT(fcurnt1, 16);
000158  f306060f          SSAT     r6,#16,r6
;;;214    
;;;215          /* Process second sample for 3rd, 7th .. tap */
;;;216          fcurnt2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fnext2;
00015c  9608              STR      r6,[sp,#0x20]
00015e  f8dd8028          LDR      r8,[sp,#0x28]
000162  fb05f604          MUL      r6,r5,r4
000166  eb0836e6          ADD      r6,r8,r6,ASR #15
;;;217          fcurnt2 = __SSAT(fcurnt2, 16);
00016a  f306060f          SSAT     r6,#16,r6
;;;218    
;;;219          /* Process third sample for 3rd, 7th .. tap */
;;;220          fcurnt3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fnext3;
00016e  960e              STR      r6,[sp,#0x38]
000170  f8dd8030          LDR      r8,[sp,#0x30]
000174  fb05f602          MUL      r6,r5,r2
000178  eb0836e6          ADD      r6,r8,r6,ASR #15
;;;221          fcurnt3 = __SSAT(fcurnt3, 16);
00017c  f306060f          SSAT     r6,#16,r6
;;;222    
;;;223          /* Process fourth sample for 3rd, 7th .. tap */
;;;224          fcurnt4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fnext4;
000180  9610              STR      r6,[sp,#0x40]
000182  fb05f60a          MUL      r6,r5,r10
000186  eb0b36e6          ADD      r6,r11,r6,ASR #15
;;;225          fcurnt4 = __SSAT(fcurnt4, 16);
00018a  f306090f          SSAT     r9,#16,r6
;;;226    
;;;227          /* Calculation of state values for next stage */
;;;228          /* g3(n) = f2(n) * K3  +  g2(n-1) */
;;;229          gnext4 = (q31_t) ((fnext4 * (*pk)) >> 15u) + gnext3;
00018e  fb05f60b          MUL      r6,r5,r11
000192  eb0a36e6          ADD      r6,r10,r6,ASR #15
;;;230          gnext4 = __SSAT(gnext4, 16);
000196  f306070f          SSAT     r7,#16,r6
;;;231    
;;;232          gnext3 = (q31_t) ((fnext3 * (*pk)) >> 15u) + gnext2;
00019a  fb05f608          MUL      r6,r5,r8
00019e  eb0232e6          ADD      r2,r2,r6,ASR #15
;;;233          gnext3 = __SSAT(gnext3, 16);
;;;234    
;;;235          gnext2 = (q31_t) ((fnext2 * (*pk)) >> 15u) + gnext1;
0001a2  f8dd8028          LDR      r8,[sp,#0x28]
0001a6  f302020f          SSAT     r2,#16,r2             ;233
0001aa  fb05f608          MUL      r6,r5,r8
;;;236          gnext2 = __SSAT(gnext2, 16);
;;;237    
;;;238          gnext1 = (q31_t) ((fnext1 * (*pk++)) >> 15u) + gcurnt1;
0001ae  f8dd800c          LDR      r8,[sp,#0xc]
0001b2  eb0434e6          ADD      r4,r4,r6,ASR #15      ;235
0001b6  fb05f508          MUL      r5,r5,r8
0001ba  eb0333e5          ADD      r3,r3,r5,ASR #15
;;;239          gnext1 = __SSAT(gnext1, 16);
0001be  f303050f          SSAT     r5,#16,r3
;;;240    
;;;241          /* Read g1(n-1), g3(n-1) .... from state */
;;;242          gcurnt1 = *px;
0001c2  f9b03000          LDRSH    r3,[r0,#0]
;;;243    
;;;244          /* save g1(n) in state buffer */
;;;245          *px++ = (q15_t) gnext4;
0001c6  f8207b02          STRH     r7,[r0],#2
;;;246    
;;;247          /* Sample processing for K4, K8.... */
;;;248          /* Process first sample for 4th, 8th .. tap */
;;;249          /* f4(n) = f3(n) +  K4 * g3(n-1) */
;;;250          fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0001ca  f9317b02          LDRSH    r7,[r1],#2
0001ce  f304040f          SSAT     r4,#16,r4             ;236
0001d2  fb17f803          SMULBB   r8,r7,r3
0001d6  9e08              LDR      r6,[sp,#0x20]
0001d8  eb0636e8          ADD      r6,r6,r8,ASR #15
;;;251          fnext1 = __SSAT(fnext1, 16);
0001dc  f306080f          SSAT     r8,#16,r6
;;;252    
;;;253          /* Process second sample for 4th, 8th .. tap */
;;;254          /* for sample 2 processing */
;;;255          fnext2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fcurnt2;
0001e0  f8cd800c          STR      r8,[sp,#0xc]
0001e4  9e0e              LDR      r6,[sp,#0x38]
0001e6  fb07f805          MUL      r8,r7,r5
0001ea  eb0636e8          ADD      r6,r6,r8,ASR #15
;;;256          fnext2 = __SSAT(fnext2, 16);
0001ee  f306080f          SSAT     r8,#16,r6
;;;257    
;;;258          /* Process third sample for 4th, 8th .. tap */
;;;259          fnext3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fcurnt3;
0001f2  f8cd8028          STR      r8,[sp,#0x28]
0001f6  9e10              LDR      r6,[sp,#0x40]
0001f8  fb07f804          MUL      r8,r7,r4
0001fc  eb0636e8          ADD      r6,r6,r8,ASR #15
;;;260          fnext3 = __SSAT(fnext3, 16);
000200  f306080f          SSAT     r8,#16,r6
;;;261    
;;;262          /* Process fourth sample for 4th, 8th .. tap */
;;;263          fnext4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fcurnt4;
000204  f8cd8030          STR      r8,[sp,#0x30]
000208  fb07f802          MUL      r8,r7,r2
00020c  eb0936e8          ADD      r6,r9,r8,ASR #15
;;;264          fnext4 = __SSAT(fnext4, 16);
000210  f3060b0f          SSAT     r11,#16,r6
;;;265    
;;;266          /* g4(n) = f3(n) * K4  +  g3(n-1) */
;;;267          /* Calculation of state values for next stage */
;;;268          gnext4 = (q31_t) ((fcurnt4 * (*pk)) >> 15u) + gnext3;
000214  fb07f609          MUL      r6,r7,r9
000218  eb0232e6          ADD      r2,r2,r6,ASR #15
;;;269          gnext4 = __SSAT(gnext4, 16);
;;;270    
;;;271          gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + gnext2;
00021c  9e10              LDR      r6,[sp,#0x40]
00021e  f302080f          SSAT     r8,#16,r2             ;269
000222  fb07f206          MUL      r2,r7,r6
;;;272          gnext3 = __SSAT(gnext3, 16);
;;;273    
;;;274          gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + gnext1;
000226  9e0e              LDR      r6,[sp,#0x38]
000228  eb0432e2          ADD      r2,r4,r2,ASR #15      ;271
00022c  fb07f406          MUL      r4,r7,r6
;;;275          gnext2 = __SSAT(gnext2, 16);
;;;276          gnext1 = (q31_t) ((fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
000230  9e08              LDR      r6,[sp,#0x20]
000232  eb0534e4          ADD      r4,r5,r4,ASR #15      ;274
000236  4377              MULS     r7,r6,r7
000238  eb0333e7          ADD      r3,r3,r7,ASR #15
;;;277          gnext1 = __SSAT(gnext1, 16);
00023c  f303030f          SSAT     r3,#16,r3
;;;278    
;;;279    
;;;280          /* Read g2(n-1), g4(n-1) .... from state */
;;;281          gcurnt1 = *px;
000240  9301              STR      r3,[sp,#4]
000242  9106              STR      r1,[sp,#0x18]
000244  f9309b02          LDRSH    r9,[r0],#2
;;;282    
;;;283          /* save g4(n) in state buffer */
;;;284          *px++ = (q15_t) gnext4;
000248  f8cd902c          STR      r9,[sp,#0x2c]
00024c  f8208c02          STRH     r8,[r0,#-2]
;;;285    
;;;286          /* Sample processing for K5, K9.... */
;;;287          /* Process first sample for 5th, 9th .. tap */
;;;288          /* f5(n) = f4(n) +  K5 * g4(n-1) */
;;;289          fcurnt1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fnext1;
000250  9906              LDR      r1,[sp,#0x18]
000252  f8dd902c          LDR      r9,[sp,#0x2c]
000256  f302020f          SSAT     r2,#16,r2             ;272
00025a  f9b11000          LDRSH    r1,[r1,#0]
00025e  f3040a0f          SSAT     r10,#16,r4            ;275
000262  fb11f309          SMULBB   r3,r1,r9
000266  f8dd800c          LDR      r8,[sp,#0xc]
;;;290          fcurnt1 = __SSAT(fcurnt1, 16);
;;;291    
;;;292          /* Process second sample for 5th, 9th .. tap */
;;;293          fcurnt2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fnext2;
;;;294          fcurnt2 = __SSAT(fcurnt2, 16);
;;;295    
;;;296          /* Process third sample for 5th, 9th .. tap */
;;;297          fcurnt3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fnext3;
;;;298          fcurnt3 = __SSAT(fcurnt3, 16);
;;;299    
;;;300          /* Process fourth sample for 5th, 9th .. tap */
;;;301          fcurnt4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fnext4;
;;;302          fcurnt4 = __SSAT(fcurnt4, 16);
;;;303    
;;;304          /* Calculation of state values for next stage */
;;;305          /* g5(n) = f4(n) * K5  +  g4(n-1) */
;;;306          gnext4 = (q31_t) ((fnext4 * (*pk)) >> 15u) + gnext3;
;;;307          gnext4 = __SSAT(gnext4, 16);
;;;308          gnext3 = (q31_t) ((fnext3 * (*pk)) >> 15u) + gnext2;
;;;309          gnext3 = __SSAT(gnext3, 16);
;;;310          gnext2 = (q31_t) ((fnext2 * (*pk)) >> 15u) + gnext1;
;;;311          gnext2 = __SSAT(gnext2, 16);
;;;312          gnext1 = (q31_t) ((fnext1 * (*pk++)) >> 15u) + gcurnt1;
00026a  f8dd902c          LDR      r9,[sp,#0x2c]
00026e  eb0833e3          ADD      r3,r8,r3,ASR #15      ;289
000272  f303060f          SSAT     r6,#16,r3             ;290
000276  9b01              LDR      r3,[sp,#4]            ;293
000278  f8dd8028          LDR      r8,[sp,#0x28]         ;293
00027c  434b              MULS     r3,r1,r3              ;293
00027e  eb0833e3          ADD      r3,r8,r3,ASR #15      ;293
000282  f303070f          SSAT     r7,#16,r3             ;294
000286  f8dd8030          LDR      r8,[sp,#0x30]         ;297
00028a  fb01f30a          MUL      r3,r1,r10             ;297
00028e  eb0833e3          ADD      r3,r8,r3,ASR #15      ;297
000292  f303040f          SSAT     r4,#16,r3             ;298
000296  fb01f302          MUL      r3,r1,r2              ;301
00029a  eb0b33e3          ADD      r3,r11,r3,ASR #15     ;301
00029e  f303050f          SSAT     r5,#16,r3             ;302
0002a2  fb01f30b          MUL      r3,r1,r11             ;306
0002a6  eb0232e3          ADD      r2,r2,r3,ASR #15      ;306
0002aa  f3020b0f          SSAT     r11,#16,r2            ;307
0002ae  fb01f208          MUL      r2,r1,r8              ;308
0002b2  eb0a32e2          ADD      r2,r10,r2,ASR #15     ;308
0002b6  f8dd8028          LDR      r8,[sp,#0x28]         ;310
0002ba  f3020a0f          SSAT     r10,#16,r2            ;309
0002be  fb01f208          MUL      r2,r1,r8              ;310
0002c2  9b01              LDR      r3,[sp,#4]            ;310
0002c4  f8dd800c          LDR      r8,[sp,#0xc]
0002c8  eb0332e2          ADD      r2,r3,r2,ASR #15      ;310
0002cc  f302030f          SSAT     r3,#16,r2             ;311
0002d0  fb01f108          MUL      r1,r1,r8
0002d4  eb0932e1          ADD      r2,r9,r1,ASR #15
;;;313          gnext1 = __SSAT(gnext1, 16);
0002d8  9906              LDR      r1,[sp,#0x18]
0002da  f302020f          SSAT     r2,#16,r2
0002de  1c89              ADDS     r1,r1,#2
0002e0  f1ac0c01          SUB      r12,r12,#1
                  |L1.740|
0002e4  f1bc0f00          CMP      r12,#0                ;162
0002e8  f47faee6          BNE      |L1.184|
;;;314    
;;;315          stageCnt--;
;;;316        }
;;;317    
;;;318        /* If the (filter length -1) is not a multiple of 4, compute the remaining filter taps */
;;;319        stageCnt = (numStages - 1u) % 0x4u;
0002ec  f8ddc044          LDR      r12,[sp,#0x44]
0002f0  f00c0c03          AND      r12,r12,#3
;;;320    
;;;321        while(stageCnt > 0u)
0002f4  e04a              B        |L1.908|
;;;322        {
;;;323          gcurnt1 = *px;
0002f6  bf00              NOP      
                  |L1.760|
0002f8  f9b08000          LDRSH    r8,[r0,#0]
;;;324    
;;;325          /* save g value in state buffer */
;;;326          *px++ = (q15_t) gnext4;
0002fc  f8cd802c          STR      r8,[sp,#0x2c]
000300  f820bb02          STRH     r11,[r0],#2
;;;327    
;;;328          /* Process four samples for last three taps here */
;;;329          fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
000304  f931cb02          LDRSH    r12,[r1],#2
000308  f8dd802c          LDR      r8,[sp,#0x2c]
00030c  fb1cf808          SMULBB   r8,r12,r8
000310  eb0638e8          ADD      r8,r6,r8,ASR #15
;;;330          fnext1 = __SSAT(fnext1, 16);
000314  f308080f          SSAT     r8,#16,r8
;;;331          fnext2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fcurnt2;
000318  f8cd800c          STR      r8,[sp,#0xc]
00031c  fb0cf802          MUL      r8,r12,r2
000320  eb0738e8          ADD      r8,r7,r8,ASR #15
;;;332          fnext2 = __SSAT(fnext2, 16);
000324  f308080f          SSAT     r8,#16,r8
;;;333    
;;;334          fnext3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fcurnt3;
000328  f8cd8028          STR      r8,[sp,#0x28]
00032c  fb0cf803          MUL      r8,r12,r3
000330  eb0438e8          ADD      r8,r4,r8,ASR #15
;;;335          fnext3 = __SSAT(fnext3, 16);
000334  f308080f          SSAT     r8,#16,r8
;;;336    
;;;337          fnext4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fcurnt4;
000338  f8cd8030          STR      r8,[sp,#0x30]
00033c  fb0cf80a          MUL      r8,r12,r10
000340  eb0538e8          ADD      r8,r5,r8,ASR #15
;;;338          fnext4 = __SSAT(fnext4, 16);
;;;339    
;;;340          /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;341          gnext4 = (q31_t) ((fcurnt4 * (*pk)) >> 15u) + gnext3;
000344  fb0cf505          MUL      r5,r12,r5
000348  eb0a35e5          ADD      r5,r10,r5,ASR #15
;;;342          gnext4 = __SSAT(gnext4, 16);
;;;343          gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + gnext2;
00034c  fb0cf404          MUL      r4,r12,r4
000350  eb0333e4          ADD      r3,r3,r4,ASR #15
;;;344          gnext3 = __SSAT(gnext3, 16);
000354  f3030a0f          SSAT     r10,#16,r3
;;;345          gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + gnext1;
000358  fb0cf307          MUL      r3,r12,r7
00035c  f308080f          SSAT     r8,#16,r8             ;338
;;;346          gnext2 = __SSAT(gnext2, 16);
;;;347          gnext1 = (q31_t) ((fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
000360  f8cd8050          STR      r8,[sp,#0x50]
000364  eb0232e3          ADD      r2,r2,r3,ASR #15      ;345
000368  fb0cfc06          MUL      r12,r12,r6
00036c  f8dd802c          LDR      r8,[sp,#0x2c]
000370  f302030f          SSAT     r3,#16,r2             ;346
000374  f3050b0f          SSAT     r11,#16,r5            ;342
000378  eb0832ec          ADD      r2,r8,r12,ASR #15
;;;348          gnext1 = __SSAT(gnext1, 16);
;;;349    
;;;350          /* Update of f values for next coefficient set processing */
;;;351          fcurnt1 = fnext1;
;;;352          fcurnt2 = fnext2;
;;;353          fcurnt3 = fnext3;
;;;354          fcurnt4 = fnext4;
;;;355    
;;;356          stageCnt--;
00037c  9f0a              LDR      r7,[sp,#0x28]
00037e  9e03              LDR      r6,[sp,#0xc]
000380  9d14              LDR      r5,[sp,#0x50]
000382  9c0c              LDR      r4,[sp,#0x30]
000384  f302020f          SSAT     r2,#16,r2             ;348
000388  f1a90c01          SUB      r12,r9,#1
                  |L1.908|
00038c  ea5f090c          MOVS     r9,r12                ;319
000390  d1b2              BNE      |L1.760|
;;;357    
;;;358        }
;;;359    
;;;360        /* The results in the 4 accumulators, store in the destination buffer. */
;;;361        /* y(n) = fN(n) */
;;;362    
;;;363    #ifndef  ARM_MATH_BIG_ENDIAN
;;;364    
;;;365        *__SIMD32(pDst)++ = __PKHBT(fcurnt1, fcurnt2, 16);
000392  eac64107          PKHBT    r1,r6,r7,LSL #16
000396  981a              LDR      r0,[sp,#0x68]
000398  6001              STR      r1,[r0,#0]
;;;366        *__SIMD32(pDst)++ = __PKHBT(fcurnt3, fcurnt4, 16);
00039a  eac44105          PKHBT    r1,r4,r5,LSL #16
00039e  981a              LDR      r0,[sp,#0x68]
0003a0  6041              STR      r1,[r0,#4]
0003a2  3008              ADDS     r0,r0,#8
;;;367    
;;;368    #else
;;;369    
;;;370        *__SIMD32(pDst)++ = __PKHBT(fcurnt2, fcurnt1, 16);
;;;371        *__SIMD32(pDst)++ = __PKHBT(fcurnt4, fcurnt3, 16);
;;;372    
;;;373    #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;374    
;;;375        blkCnt--;
0003a4  901a              STR      r0,[sp,#0x68]
0003a6  9809              LDR      r0,[sp,#0x24]
0003a8  1e40              SUBS     r0,r0,#1
0003aa  e635              B        |L1.24|
                  |L1.940|
;;;376      }
;;;377    
;;;378      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;379       ** No loop unrolling is used. */
;;;380      blkCnt = blockSize % 0x4u;
0003ac  981b              LDR      r0,[sp,#0x6c]
0003ae  f0000403          AND      r4,r0,#3
;;;381    
;;;382      while(blkCnt > 0u)
0003b2  e033              B        |L1.1052|
                  |L1.948|
;;;383      {
;;;384        /* f0(n) = x(n) */
;;;385        fcurnt1 = *pSrc++;
;;;386    
;;;387        /* Initialize coeff pointer */
;;;388        pk = (pCoeffs);
;;;389    
;;;390        /* Initialize state pointer */
;;;391        px = pState;
;;;392    
;;;393        /* read g2(n) from state buffer */
;;;394        gcurnt1 = *px;
0003b4  9813              LDR      r0,[sp,#0x4c]
;;;395    
;;;396        /* for sample 1 processing */
;;;397        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;398        fnext1 = (((q31_t) gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0003b6  9a17              LDR      r2,[sp,#0x5c]
0003b8  f93e3b02          LDRSH    r3,[lr],#2            ;385
0003bc  f9b05000          LDRSH    r5,[r0,#0]            ;394
0003c0  f8326b02          LDRH     r6,[r2],#2
0003c4  fb16f105          SMULBB   r1,r6,r5
0003c8  eb0331e1          ADD      r1,r3,r1,ASR #15
;;;399        fnext1 = __SSAT(fnext1, 16);
0003cc  f301010f          SSAT     r1,#16,r1
;;;400    
;;;401    
;;;402        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;403        gnext1 = (((q31_t) fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
0003d0  fb16f603          SMULBB   r6,r6,r3
0003d4  eb0535e6          ADD      r5,r5,r6,ASR #15
;;;404        gnext1 = __SSAT(gnext1, 16);
;;;405    
;;;406        /* save g1(n) in state buffer */
;;;407        *px++ = (q15_t) fcurnt1;
0003d8  f8203b02          STRH     r3,[r0],#2
0003dc  f305050f          SSAT     r5,#16,r5             ;404
;;;408    
;;;409        /* f1(n) is saved in fcurnt1    
;;;410           for next stage processing */
;;;411        fcurnt1 = fnext1;
;;;412    
;;;413        stageCnt = (numStages - 1u);
;;;414    
;;;415        /* stage loop */
;;;416        while(stageCnt > 0u)
0003e0  9b15              LDR      r3,[sp,#0x54]
0003e2  e011              B        |L1.1032|
                  |L1.996|
;;;417        {
;;;418          /* read g2(n) from state buffer */
;;;419          gcurnt1 = *px;
0003e4  f9b06000          LDRSH    r6,[r0,#0]
;;;420    
;;;421          /* save g1(n) in state buffer */
;;;422          *px++ = (q15_t) gnext1;
0003e8  f8205b02          STRH     r5,[r0],#2
;;;423    
;;;424          /* Sample processing for K2, K3.... */
;;;425          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;426          fnext1 = (((q31_t) gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0003ec  f9325b02          LDRSH    r5,[r2],#2
0003f0  fb15f706          SMULBB   r7,r5,r6
0003f4  eb0137e7          ADD      r7,r1,r7,ASR #15
;;;427          fnext1 = __SSAT(fnext1, 16);
;;;428    
;;;429          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;430          gnext1 = (((q31_t) fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
0003f8  434d              MULS     r5,r1,r5
0003fa  eb0631e5          ADD      r1,r6,r5,ASR #15
0003fe  f307070f          SSAT     r7,#16,r7             ;427
;;;431          gnext1 = __SSAT(gnext1, 16);
000402  f301050f          SSAT     r5,#16,r1
;;;432    
;;;433    
;;;434          /* f1(n) is saved in fcurnt1    
;;;435             for next stage processing */
;;;436          fcurnt1 = fnext1;
000406  4639              MOV      r1,r7
                  |L1.1032|
000408  1e5b              SUBS     r3,r3,#1
00040a  d1eb              BNE      |L1.996|
;;;437    
;;;438          stageCnt--;
;;;439    
;;;440        }
;;;441    
;;;442        /* y(n) = fN(n) */
;;;443        *pDst++ = __SSAT(fcurnt1, 16);
00040c  981a              LDR      r0,[sp,#0x68]
00040e  f301010f          SSAT     r1,#16,r1
000412  8001              STRH     r1,[r0,#0]
000414  981a              LDR      r0,[sp,#0x68]
000416  1c80              ADDS     r0,r0,#2
000418  1e64              SUBS     r4,r4,#1
00041a  901a              STR      r0,[sp,#0x68]
                  |L1.1052|
00041c  2c00              CMP      r4,#0                 ;382
00041e  d1c9              BNE      |L1.948|
;;;444    
;;;445    
;;;446        blkCnt--;
;;;447    
;;;448      }
;;;449    
;;;450    #else
;;;451    
;;;452      /* Run the below code for Cortex-M0 */
;;;453    
;;;454      q31_t fcurnt, fnext, gcurnt, gnext;            /* temporary variables */
;;;455      uint32_t numStages = S->numStages;             /* Length of the filter */
;;;456      uint32_t blkCnt, stageCnt;                     /* temporary variables for counts */
;;;457    
;;;458      pState = &S->pState[0];
;;;459    
;;;460      blkCnt = blockSize;
;;;461    
;;;462      while(blkCnt > 0u)
;;;463      {
;;;464        /* f0(n) = x(n) */
;;;465        fcurnt = *pSrc++;
;;;466    
;;;467        /* Initialize coeff pointer */
;;;468        pk = (pCoeffs);
;;;469    
;;;470        /* Initialize state pointer */
;;;471        px = pState;
;;;472    
;;;473        /* read g0(n-1) from state buffer */
;;;474        gcurnt = *px;
;;;475    
;;;476        /* for sample 1 processing */
;;;477        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;478        fnext = ((gcurnt * (*pk)) >> 15u) + fcurnt;
;;;479        fnext = __SSAT(fnext, 16);
;;;480    
;;;481    
;;;482        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;483        gnext = ((fcurnt * (*pk++)) >> 15u) + gcurnt;
;;;484        gnext = __SSAT(gnext, 16);
;;;485    
;;;486        /* save f0(n) in state buffer */
;;;487        *px++ = (q15_t) fcurnt;
;;;488    
;;;489        /* f1(n) is saved in fcurnt            
;;;490           for next stage processing */
;;;491        fcurnt = fnext;
;;;492    
;;;493        stageCnt = (numStages - 1u);
;;;494    
;;;495        /* stage loop */
;;;496        while(stageCnt > 0u)
;;;497        {
;;;498          /* read g1(n-1) from state buffer */
;;;499          gcurnt = *px;
;;;500    
;;;501          /* save g0(n-1) in state buffer */
;;;502          *px++ = (q15_t) gnext;
;;;503    
;;;504          /* Sample processing for K2, K3.... */
;;;505          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;506          fnext = ((gcurnt * (*pk)) >> 15u) + fcurnt;
;;;507          fnext = __SSAT(fnext, 16);
;;;508    
;;;509          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;510          gnext = ((fcurnt * (*pk++)) >> 15u) + gcurnt;
;;;511          gnext = __SSAT(gnext, 16);
;;;512    
;;;513    
;;;514          /* f1(n) is saved in fcurnt            
;;;515             for next stage processing */
;;;516          fcurnt = fnext;
;;;517    
;;;518          stageCnt--;
;;;519    
;;;520        }
;;;521    
;;;522        /* y(n) = fN(n) */
;;;523        *pDst++ = __SSAT(fcurnt, 16);
;;;524    
;;;525    
;;;526        blkCnt--;
;;;527    
;;;528      }
;;;529    
;;;530    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
;;;531    
;;;532    }
000420  b01c              ADD      sp,sp,#0x70
000422  e8bd8ff0          POP      {r4-r11,pc}
;;;533    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_lattice_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REVSH|
#line 144
|__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q15_c_2dabaeb7____RRX|
#line 300
|__asm___21_arm_fir_lattice_q15_c_2dabaeb7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
