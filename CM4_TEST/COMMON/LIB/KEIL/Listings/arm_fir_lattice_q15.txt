; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_lattice_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_lattice_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fir_lattice_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_lattice_q15.c]
                          THUMB

                          AREA ||i.arm_fir_lattice_q15||, CODE, READONLY, ALIGN=1

                  arm_fir_lattice_q15 PROC
;;;61     
;;;62     void arm_fir_lattice_q15(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;63       const arm_fir_lattice_instance_q15 * S,
;;;64       q15_t * pSrc,
;;;65       q15_t * pDst,
;;;66       uint32_t blockSize)
;;;67     {
000004  b08d              SUB      sp,sp,#0x34
;;;68       q15_t *pState;                                 /* State pointer */
;;;69       q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000006  6883              LDR      r3,[r0,#8]
000008  930a              STR      r3,[sp,#0x28]
;;;70       q15_t *px;                                     /* temporary state pointer */
;;;71       q15_t *pk;                                     /* temporary coefficient pointer */
;;;72     
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77     
;;;78       q31_t fcurnt1, fnext1, gcurnt1 = 0, gnext1;    /* temporary variables for first sample in loop unrolling */
;;;79       q31_t fcurnt2, fnext2, gnext2;                 /* temporary variables for second sample in loop unrolling */
;;;80       q31_t fcurnt3, fnext3, gnext3;                 /* temporary variables for third sample in loop unrolling */
;;;81       q31_t fcurnt4, fnext4, gnext4;                 /* temporary variables for fourth sample in loop unrolling */
;;;82       uint32_t numStages = S->numStages;             /* Number of stages in the filter */
00000a  8803              LDRH     r3,[r0,#0]
00000c  9301              STR      r3,[sp,#4]
;;;83       uint32_t blkCnt, stageCnt;                     /* temporary variables for counts */
;;;84     
;;;85       pState = &S->pState[0];
00000e  6840              LDR      r0,[r0,#4]
000010  900b              STR      r0,[sp,#0x2c]
;;;86     
;;;87       blkCnt = blockSize >> 2u;
000012  9810              LDR      r0,[sp,#0x40]
000014  0880              LSRS     r0,r0,#2
000016  9000              STR      r0,[sp,#0]
000018  e1b8              B        |L1.908|
                  |L1.26|
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93     
;;;94         /* Read two samples from input buffer */
;;;95         /* f0(n) = x(n) */
;;;96         fcurnt1 = *pSrc++;
00001a  f9b10000          LDRSH    r0,[r1,#0]
;;;97         fcurnt2 = *pSrc++;
00001e  f9b16002          LDRSH    r6,[r1,#2]
;;;98     
;;;99         /* Initialize coeff pointer */
;;;100        pk = (pCoeffs);
000022  9f0a              LDR      r7,[sp,#0x28]
;;;101    
;;;102        /* Initialize state pointer */
;;;103        px = pState;
000024  f8dda02c          LDR      r10,[sp,#0x2c]
;;;104    
;;;105        /* Read g0(n-1) from state */
;;;106        gcurnt1 = *px;
000028  f9ba4000          LDRSH    r4,[r10,#0]
;;;107    
;;;108        /* Process first sample for first tap */
;;;109        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;110        fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
00002c  883d              LDRH     r5,[r7,#0]
00002e  fb15f304          SMULBB   r3,r5,r4
000032  eb0033e3          ADD      r3,r0,r3,ASR #15
;;;111        fnext1 = __SSAT(fnext1, 16);
000036  f303030f          SSAT     r3,#16,r3
;;;112    
;;;113        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;114        gnext1 = (q31_t) ((fcurnt1 * (*pk)) >> 15u) + gcurnt1;
00003a  fb15f800          SMULBB   r8,r5,r0
00003e  eb0434e8          ADD      r4,r4,r8,ASR #15
;;;115        gnext1 = __SSAT(gnext1, 16);
000042  f3040c0f          SSAT     r12,#16,r4
;;;116    
;;;117        /* Process second sample for first tap */
;;;118        /* for sample 2 processing */
;;;119        fnext2 = (q31_t) ((fcurnt1 * (*pk)) >> 15u) + fcurnt2;
000046  eb0634e8          ADD      r4,r6,r8,ASR #15
;;;120        fnext2 = __SSAT(fnext2, 16);
00004a  f304040f          SSAT     r4,#16,r4
00004e  9405              STR      r4,[sp,#0x14]
;;;121    
;;;122        gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + fcurnt1;
000050  fb15f406          SMULBB   r4,r5,r6
000054  eb0030e4          ADD      r0,r0,r4,ASR #15
;;;123        gnext2 = __SSAT(gnext2, 16);
000058  f300080f          SSAT     r8,#16,r0
;;;124    
;;;125    
;;;126        /* Read next two samples from input buffer */
;;;127        /* f0(n+2) = x(n+2) */
;;;128        fcurnt3 = *pSrc++;
00005c  f9b14004          LDRSH    r4,[r1,#4]
;;;129        fcurnt4 = *pSrc++;
000060  f9b10006          LDRSH    r0,[r1,#6]
000064  3108              ADDS     r1,r1,#8
;;;130    
;;;131        /* Copy only last input samples into the state buffer    
;;;132           which is used for next four samples processing */
;;;133        *px++ = (q15_t) fcurnt4;
000066  f82a0b02          STRH     r0,[r10],#2
;;;134    
;;;135        /* Process third sample for first tap */
;;;136        fnext3 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + fcurnt3;
00006a  f8b7b000          LDRH     r11,[r7,#0]
00006e  fb1bf506          SMULBB   r5,r11,r6
000072  eb0435e5          ADD      r5,r4,r5,ASR #15
;;;137        fnext3 = __SSAT(fnext3, 16);
000076  f305050f          SSAT     r5,#16,r5
;;;138        gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + fcurnt2;
00007a  fb1bfe04          SMULBB   lr,r11,r4
00007e  eb0636ee          ADD      r6,r6,lr,ASR #15
;;;139        gnext3 = __SSAT(gnext3, 16);
000082  f306090f          SSAT     r9,#16,r6
;;;140    
;;;141        /* Process fourth sample for first tap */
;;;142        fnext4 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + fcurnt4;
000086  eb0036ee          ADD      r6,r0,lr,ASR #15
;;;143        fnext4 = __SSAT(fnext4, 16);
00008a  f306060f          SSAT     r6,#16,r6
;;;144        gnext4 = (q31_t) ((fcurnt4 * (*pk++)) >> 15u) + fcurnt3;
00008e  1cbf              ADDS     r7,r7,#2
000090  fb1bf000          SMULBB   r0,r11,r0
000094  eb0430e0          ADD      r0,r4,r0,ASR #15
;;;145        gnext4 = __SSAT(gnext4, 16);
000098  f300000f          SSAT     r0,#16,r0
;;;146    
;;;147        /* Update of f values for next coefficient set processing */
;;;148        fcurnt1 = fnext1;
;;;149        fcurnt2 = fnext2;
00009c  9c05              LDR      r4,[sp,#0x14]
;;;150        fcurnt3 = fnext3;
;;;151        fcurnt4 = fnext4;
;;;152    
;;;153    
;;;154        /* Loop unrolling.  Process 4 taps at a time . */
;;;155        stageCnt = (numStages - 1u) >> 2;
00009e  f8ddb004          LDR      r11,[sp,#4]
0000a2  f1ab0b01          SUB      r11,r11,#1
0000a6  f8cdb030          STR      r11,[sp,#0x30]
0000aa  ea4f0b9b          LSR      r11,r11,#2
;;;156    
;;;157    
;;;158        /* Loop over the number of taps.  Unroll by a factor of 4.    
;;;159         ** Repeat until we've computed numStages-3 coefficients. */
;;;160    
;;;161        /* Process 2nd, 3rd, 4th and 5th taps ... here */
;;;162        while(stageCnt > 0u)
0000ae  e111              B        |L1.724|
                  |L1.176|
;;;163        {
;;;164          /* Read g1(n-1), g3(n-1) .... from state */
;;;165          gcurnt1 = *px;
0000b0  f9bae000          LDRSH    lr,[r10,#0]
0000b4  f8cde01c          STR      lr,[sp,#0x1c]
;;;166    
;;;167          /* save g1(n) in state buffer */
;;;168          *px++ = (q15_t) gnext4;
0000b8  f8aa0000          STRH     r0,[r10,#0]
;;;169    
;;;170          /* Process first sample for 2nd, 6th .. tap */
;;;171          /* Sample processing for K2, K6.... */
;;;172          /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;173          fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0000bc  f9b70000          LDRSH    r0,[r7,#0]
0000c0  f8dde01c          LDR      lr,[sp,#0x1c]
0000c4  fb10fe0e          SMULBB   lr,r0,lr
0000c8  eb033eee          ADD      lr,r3,lr,ASR #15
;;;174          fnext1 = __SSAT(fnext1, 16);
0000cc  f30e0e0f          SSAT     lr,#16,lr
0000d0  f8cde020          STR      lr,[sp,#0x20]
;;;175    
;;;176    
;;;177          /* Process second sample for 2nd, 6th .. tap */
;;;178          /* for sample 2 processing */
;;;179          fnext2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fcurnt2;
0000d4  fb00fe0c          MUL      lr,r0,r12
0000d8  eb043eee          ADD      lr,r4,lr,ASR #15
;;;180          fnext2 = __SSAT(fnext2, 16);
0000dc  f30e0e0f          SSAT     lr,#16,lr
0000e0  f8cde014          STR      lr,[sp,#0x14]
;;;181          /* Process third sample for 2nd, 6th .. tap */
;;;182          fnext3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fcurnt3;
0000e4  fb00fe08          MUL      lr,r0,r8
0000e8  eb053eee          ADD      lr,r5,lr,ASR #15
;;;183          fnext3 = __SSAT(fnext3, 16);
0000ec  f30e0e0f          SSAT     lr,#16,lr
0000f0  f8cde010          STR      lr,[sp,#0x10]
;;;184          /* Process fourth sample for 2nd, 6th .. tap */
;;;185          /* fnext4 = fcurnt4 + (*pk) * gnext3; */
;;;186          fnext4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fcurnt4;
0000f4  fb00fe09          MUL      lr,r0,r9
0000f8  eb063eee          ADD      lr,r6,lr,ASR #15
;;;187          fnext4 = __SSAT(fnext4, 16);
0000fc  f30e0e0f          SSAT     lr,#16,lr
;;;188    
;;;189          /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;190          /* Calculation of state values for next stage */
;;;191          gnext4 = (q31_t) ((fcurnt4 * (*pk)) >> 15u) + gnext3;
000100  4346              MULS     r6,r0,r6
000102  eb0936e6          ADD      r6,r9,r6,ASR #15
;;;192          gnext4 = __SSAT(gnext4, 16);
000106  f306060f          SSAT     r6,#16,r6
;;;193          gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + gnext2;
00010a  4345              MULS     r5,r0,r5
00010c  eb0835e5          ADD      r5,r8,r5,ASR #15
;;;194          gnext3 = __SSAT(gnext3, 16);
000110  f305050f          SSAT     r5,#16,r5
;;;195    
;;;196          gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + gnext1;
000114  4344              MULS     r4,r0,r4
000116  eb0c34e4          ADD      r4,r12,r4,ASR #15
;;;197          gnext2 = __SSAT(gnext2, 16);
00011a  f304040f          SSAT     r4,#16,r4
;;;198    
;;;199          gnext1 = (q31_t) ((fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
00011e  4358              MULS     r0,r3,r0
000120  9b07              LDR      r3,[sp,#0x1c]
000122  eb0330e0          ADD      r0,r3,r0,ASR #15
;;;200          gnext1 = __SSAT(gnext1, 16);
000126  f300080f          SSAT     r8,#16,r0
;;;201    
;;;202    
;;;203          /* Read g2(n-1), g4(n-1) .... from state */
;;;204          gcurnt1 = *px;
00012a  f9ba0002          LDRSH    r0,[r10,#2]
;;;205    
;;;206          /* save g1(n) in state buffer */
;;;207          *px++ = (q15_t) gnext4;
00012e  f8aa6002          STRH     r6,[r10,#2]
;;;208    
;;;209          /* Sample processing for K3, K7.... */
;;;210          /* Process first sample for 3rd, 7th .. tap */
;;;211          /* f3(n) = f2(n) +  K3 * g2(n-1) */
;;;212          fcurnt1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fnext1;
000132  f9b76002          LDRSH    r6,[r7,#2]
000136  fb16fc00          SMULBB   r12,r6,r0
00013a  9b08              LDR      r3,[sp,#0x20]
00013c  eb0333ec          ADD      r3,r3,r12,ASR #15
;;;213          fcurnt1 = __SSAT(fcurnt1, 16);
000140  f303030f          SSAT     r3,#16,r3
000144  9309              STR      r3,[sp,#0x24]
;;;214    
;;;215          /* Process second sample for 3rd, 7th .. tap */
;;;216          fcurnt2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fnext2;
000146  9b05              LDR      r3,[sp,#0x14]
000148  fb06fc08          MUL      r12,r6,r8
00014c  eb0333ec          ADD      r3,r3,r12,ASR #15
;;;217          fcurnt2 = __SSAT(fcurnt2, 16);
000150  f303030f          SSAT     r3,#16,r3
000154  9306              STR      r3,[sp,#0x18]
;;;218    
;;;219          /* Process third sample for 3rd, 7th .. tap */
;;;220          fcurnt3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fnext3;
000156  9b04              LDR      r3,[sp,#0x10]
000158  fb06fc04          MUL      r12,r6,r4
00015c  eb0333ec          ADD      r3,r3,r12,ASR #15
;;;221          fcurnt3 = __SSAT(fcurnt3, 16);
000160  f303030f          SSAT     r3,#16,r3
;;;222    
;;;223          /* Process fourth sample for 3rd, 7th .. tap */
;;;224          fcurnt4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fnext4;
000164  fb06fc05          MUL      r12,r6,r5
000168  eb0e3cec          ADD      r12,lr,r12,ASR #15
;;;225          fcurnt4 = __SSAT(fcurnt4, 16);
00016c  f30c0c0f          SSAT     r12,#16,r12
;;;226    
;;;227          /* Calculation of state values for next stage */
;;;228          /* g3(n) = f2(n) * K3  +  g2(n-1) */
;;;229          gnext4 = (q31_t) ((fnext4 * (*pk)) >> 15u) + gnext3;
000170  fb06f90e          MUL      r9,r6,lr
000174  eb0535e9          ADD      r5,r5,r9,ASR #15
;;;230          gnext4 = __SSAT(gnext4, 16);
000178  f3050e0f          SSAT     lr,#16,r5
00017c  f8cde008          STR      lr,[sp,#8]
;;;231    
;;;232          gnext3 = (q31_t) ((fnext3 * (*pk)) >> 15u) + gnext2;
000180  f8dde010          LDR      lr,[sp,#0x10]
000184  fb06f50e          MUL      r5,r6,lr
000188  eb0434e5          ADD      r4,r4,r5,ASR #15
;;;233          gnext3 = __SSAT(gnext3, 16);
00018c  f304040f          SSAT     r4,#16,r4
;;;234    
;;;235          gnext2 = (q31_t) ((fnext2 * (*pk)) >> 15u) + gnext1;
000190  f8dde014          LDR      lr,[sp,#0x14]
000194  fb06f50e          MUL      r5,r6,lr
000198  eb0835e5          ADD      r5,r8,r5,ASR #15
;;;236          gnext2 = __SSAT(gnext2, 16);
00019c  f305080f          SSAT     r8,#16,r5
;;;237    
;;;238          gnext1 = (q31_t) ((fnext1 * (*pk++)) >> 15u) + gcurnt1;
0001a0  f8dde020          LDR      lr,[sp,#0x20]
0001a4  fb06f60e          MUL      r6,r6,lr
0001a8  eb0030e6          ADD      r0,r0,r6,ASR #15
;;;239          gnext1 = __SSAT(gnext1, 16);
0001ac  f300090f          SSAT     r9,#16,r0
;;;240    
;;;241          /* Read g1(n-1), g3(n-1) .... from state */
;;;242          gcurnt1 = *px;
0001b0  f9ba5004          LDRSH    r5,[r10,#4]
;;;243    
;;;244          /* save g1(n) in state buffer */
;;;245          *px++ = (q15_t) gnext4;
0001b4  f8dde008          LDR      lr,[sp,#8]
0001b8  f8aae004          STRH     lr,[r10,#4]
;;;246    
;;;247          /* Sample processing for K4, K8.... */
;;;248          /* Process first sample for 4th, 8th .. tap */
;;;249          /* f4(n) = f3(n) +  K4 * g3(n-1) */
;;;250          fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0001bc  f9b76004          LDRSH    r6,[r7,#4]
0001c0  1dbf              ADDS     r7,r7,#6
0001c2  fb16fe05          SMULBB   lr,r6,r5
0001c6  9809              LDR      r0,[sp,#0x24]
0001c8  eb0030ee          ADD      r0,r0,lr,ASR #15
;;;251          fnext1 = __SSAT(fnext1, 16);
0001cc  f3000e0f          SSAT     lr,#16,r0
0001d0  f8cde020          STR      lr,[sp,#0x20]
;;;252    
;;;253          /* Process second sample for 4th, 8th .. tap */
;;;254          /* for sample 2 processing */
;;;255          fnext2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fcurnt2;
0001d4  9806              LDR      r0,[sp,#0x18]
0001d6  fb06fe09          MUL      lr,r6,r9
0001da  eb0030ee          ADD      r0,r0,lr,ASR #15
;;;256          fnext2 = __SSAT(fnext2, 16);
0001de  f3000e0f          SSAT     lr,#16,r0
0001e2  f8cde014          STR      lr,[sp,#0x14]
;;;257    
;;;258          /* Process third sample for 4th, 8th .. tap */
;;;259          fnext3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fcurnt3;
0001e6  fb06f008          MUL      r0,r6,r8
0001ea  eb0330e0          ADD      r0,r3,r0,ASR #15
;;;260          fnext3 = __SSAT(fnext3, 16);
0001ee  f3000e0f          SSAT     lr,#16,r0
0001f2  f8cde010          STR      lr,[sp,#0x10]
;;;261    
;;;262          /* Process fourth sample for 4th, 8th .. tap */
;;;263          fnext4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fcurnt4;
0001f6  fb06f004          MUL      r0,r6,r4
0001fa  eb0c30e0          ADD      r0,r12,r0,ASR #15
;;;264          fnext4 = __SSAT(fnext4, 16);
0001fe  f3000e0f          SSAT     lr,#16,r0
000202  f8cde00c          STR      lr,[sp,#0xc]
;;;265    
;;;266          /* g4(n) = f3(n) * K4  +  g3(n-1) */
;;;267          /* Calculation of state values for next stage */
;;;268          gnext4 = (q31_t) ((fcurnt4 * (*pk)) >> 15u) + gnext3;
000206  fb06f00c          MUL      r0,r6,r12
00020a  eb0430e0          ADD      r0,r4,r0,ASR #15
;;;269          gnext4 = __SSAT(gnext4, 16);
00020e  f300040f          SSAT     r4,#16,r0
;;;270    
;;;271          gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + gnext2;
000212  fb06f003          MUL      r0,r6,r3
000216  eb0830e0          ADD      r0,r8,r0,ASR #15
;;;272          gnext3 = __SSAT(gnext3, 16);
00021a  f300000f          SSAT     r0,#16,r0
;;;273    
;;;274          gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + gnext1;
00021e  9b06              LDR      r3,[sp,#0x18]
000220  4373              MULS     r3,r6,r3
000222  eb0933e3          ADD      r3,r9,r3,ASR #15
;;;275          gnext2 = __SSAT(gnext2, 16);
000226  f303090f          SSAT     r9,#16,r3
;;;276          gnext1 = (q31_t) ((fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
00022a  9b09              LDR      r3,[sp,#0x24]
00022c  435e              MULS     r6,r3,r6
00022e  eb0533e6          ADD      r3,r5,r6,ASR #15
;;;277          gnext1 = __SSAT(gnext1, 16);
000232  f303080f          SSAT     r8,#16,r3
;;;278    
;;;279    
;;;280          /* Read g2(n-1), g4(n-1) .... from state */
;;;281          gcurnt1 = *px;
000236  f93aef06          LDRSH    lr,[r10,#6]!
00023a  f8cde01c          STR      lr,[sp,#0x1c]
;;;282    
;;;283          /* save g4(n) in state buffer */
;;;284          *px++ = (q15_t) gnext4;
00023e  f82a4b02          STRH     r4,[r10],#2
;;;285    
;;;286          /* Sample processing for K5, K9.... */
;;;287          /* Process first sample for 5th, 9th .. tap */
;;;288          /* f5(n) = f4(n) +  K5 * g4(n-1) */
;;;289          fcurnt1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fnext1;
000242  f9b7c000          LDRSH    r12,[r7,#0]
000246  f8dde01c          LDR      lr,[sp,#0x1c]
00024a  fb1cf30e          SMULBB   r3,r12,lr
00024e  f8dde020          LDR      lr,[sp,#0x20]
000252  eb0e33e3          ADD      r3,lr,r3,ASR #15
;;;290          fcurnt1 = __SSAT(fcurnt1, 16);
000256  f303030f          SSAT     r3,#16,r3
;;;291    
;;;292          /* Process second sample for 5th, 9th .. tap */
;;;293          fcurnt2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fnext2;
00025a  f8dde014          LDR      lr,[sp,#0x14]
00025e  fb0cf408          MUL      r4,r12,r8
000262  eb0e34e4          ADD      r4,lr,r4,ASR #15
;;;294          fcurnt2 = __SSAT(fcurnt2, 16);
000266  f304040f          SSAT     r4,#16,r4
;;;295    
;;;296          /* Process third sample for 5th, 9th .. tap */
;;;297          fcurnt3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fnext3;
00026a  f8dde010          LDR      lr,[sp,#0x10]
00026e  fb0cf509          MUL      r5,r12,r9
000272  eb0e35e5          ADD      r5,lr,r5,ASR #15
;;;298          fcurnt3 = __SSAT(fcurnt3, 16);
000276  f305050f          SSAT     r5,#16,r5
;;;299    
;;;300          /* Process fourth sample for 5th, 9th .. tap */
;;;301          fcurnt4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fnext4;
00027a  f8dde00c          LDR      lr,[sp,#0xc]
00027e  fb0cf600          MUL      r6,r12,r0
000282  eb0e36e6          ADD      r6,lr,r6,ASR #15
;;;302          fcurnt4 = __SSAT(fcurnt4, 16);
000286  f306060f          SSAT     r6,#16,r6
;;;303    
;;;304          /* Calculation of state values for next stage */
;;;305          /* g5(n) = f4(n) * K5  +  g4(n-1) */
;;;306          gnext4 = (q31_t) ((fnext4 * (*pk)) >> 15u) + gnext3;
00028a  f8dde00c          LDR      lr,[sp,#0xc]
00028e  fb0cfe0e          MUL      lr,r12,lr
000292  eb0030ee          ADD      r0,r0,lr,ASR #15
;;;307          gnext4 = __SSAT(gnext4, 16);
000296  f300000f          SSAT     r0,#16,r0
;;;308          gnext3 = (q31_t) ((fnext3 * (*pk)) >> 15u) + gnext2;
00029a  f8dde010          LDR      lr,[sp,#0x10]
00029e  fb0cfe0e          MUL      lr,r12,lr
0002a2  eb0939ee          ADD      r9,r9,lr,ASR #15
;;;309          gnext3 = __SSAT(gnext3, 16);
0002a6  f309090f          SSAT     r9,#16,r9
;;;310          gnext2 = (q31_t) ((fnext2 * (*pk)) >> 15u) + gnext1;
0002aa  f8dde014          LDR      lr,[sp,#0x14]
0002ae  fb0cfe0e          MUL      lr,r12,lr
0002b2  eb0838ee          ADD      r8,r8,lr,ASR #15
;;;311          gnext2 = __SSAT(gnext2, 16);
0002b6  f308080f          SSAT     r8,#16,r8
;;;312          gnext1 = (q31_t) ((fnext1 * (*pk++)) >> 15u) + gcurnt1;
0002ba  f8dde020          LDR      lr,[sp,#0x20]
0002be  1cbf              ADDS     r7,r7,#2
0002c0  fb0cfc0e          MUL      r12,r12,lr
0002c4  f8dde01c          LDR      lr,[sp,#0x1c]
0002c8  eb0e3cec          ADD      r12,lr,r12,ASR #15
;;;313          gnext1 = __SSAT(gnext1, 16);
0002cc  f30c0c0f          SSAT     r12,#16,r12
;;;314    
;;;315          stageCnt--;
0002d0  f1ab0b01          SUB      r11,r11,#1
                  |L1.724|
0002d4  f1bb0f00          CMP      r11,#0                ;162
0002d8  f47faeea          BNE      |L1.176|
;;;316        }
;;;317    
;;;318        /* If the (filter length -1) is not a multiple of 4, compute the remaining filter taps */
;;;319        stageCnt = (numStages - 1u) % 0x4u;
0002dc  f8ddb030          LDR      r11,[sp,#0x30]
0002e0  f00b0e03          AND      lr,r11,#3
;;;320    
;;;321        while(stageCnt > 0u)
0002e4  e045              B        |L1.882|
                  |L1.742|
;;;322        {
;;;323          gcurnt1 = *px;
0002e6  f9bab000          LDRSH    r11,[r10,#0]
0002ea  f8cdb01c          STR      r11,[sp,#0x1c]
;;;324    
;;;325          /* save g value in state buffer */
;;;326          *px++ = (q15_t) gnext4;
0002ee  f82a0b02          STRH     r0,[r10],#2
;;;327    
;;;328          /* Process four samples for last three taps here */
;;;329          fnext1 = (q31_t) ((gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0002f2  f9b7b000          LDRSH    r11,[r7,#0]
0002f6  9807              LDR      r0,[sp,#0x1c]
0002f8  fb1bf000          SMULBB   r0,r11,r0
0002fc  eb0330e0          ADD      r0,r3,r0,ASR #15
;;;330          fnext1 = __SSAT(fnext1, 16);
000300  f300000f          SSAT     r0,#16,r0
000304  9008              STR      r0,[sp,#0x20]
;;;331          fnext2 = (q31_t) ((gnext1 * (*pk)) >> 15u) + fcurnt2;
000306  fb0bf00c          MUL      r0,r11,r12
00030a  eb0430e0          ADD      r0,r4,r0,ASR #15
;;;332          fnext2 = __SSAT(fnext2, 16);
00030e  f300000f          SSAT     r0,#16,r0
000312  9005              STR      r0,[sp,#0x14]
;;;333    
;;;334          fnext3 = (q31_t) ((gnext2 * (*pk)) >> 15u) + fcurnt3;
000314  fb0bf008          MUL      r0,r11,r8
000318  eb0530e0          ADD      r0,r5,r0,ASR #15
;;;335          fnext3 = __SSAT(fnext3, 16);
00031c  f300000f          SSAT     r0,#16,r0
000320  9004              STR      r0,[sp,#0x10]
;;;336    
;;;337          fnext4 = (q31_t) ((gnext3 * (*pk)) >> 15u) + fcurnt4;
000322  fb0bf009          MUL      r0,r11,r9
000326  eb0630e0          ADD      r0,r6,r0,ASR #15
;;;338          fnext4 = __SSAT(fnext4, 16);
00032a  f300000f          SSAT     r0,#16,r0
00032e  9003              STR      r0,[sp,#0xc]
;;;339    
;;;340          /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;341          gnext4 = (q31_t) ((fcurnt4 * (*pk)) >> 15u) + gnext3;
000330  fb0bf006          MUL      r0,r11,r6
000334  eb0930e0          ADD      r0,r9,r0,ASR #15
;;;342          gnext4 = __SSAT(gnext4, 16);
000338  f300000f          SSAT     r0,#16,r0
;;;343          gnext3 = (q31_t) ((fcurnt3 * (*pk)) >> 15u) + gnext2;
00033c  fb0bf505          MUL      r5,r11,r5
000340  eb0835e5          ADD      r5,r8,r5,ASR #15
;;;344          gnext3 = __SSAT(gnext3, 16);
000344  f305090f          SSAT     r9,#16,r5
;;;345          gnext2 = (q31_t) ((fcurnt2 * (*pk)) >> 15u) + gnext1;
000348  fb0bf404          MUL      r4,r11,r4
00034c  eb0c34e4          ADD      r4,r12,r4,ASR #15
;;;346          gnext2 = __SSAT(gnext2, 16);
000350  f304080f          SSAT     r8,#16,r4
;;;347          gnext1 = (q31_t) ((fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
000354  fb0bf403          MUL      r4,r11,r3
000358  f8ddb01c          LDR      r11,[sp,#0x1c]
00035c  1cbf              ADDS     r7,r7,#2
00035e  eb0b33e4          ADD      r3,r11,r4,ASR #15
;;;348          gnext1 = __SSAT(gnext1, 16);
000362  f3030c0f          SSAT     r12,#16,r3
;;;349    
;;;350          /* Update of f values for next coefficient set processing */
;;;351          fcurnt1 = fnext1;
000366  9b08              LDR      r3,[sp,#0x20]
;;;352          fcurnt2 = fnext2;
000368  9c05              LDR      r4,[sp,#0x14]
;;;353          fcurnt3 = fnext3;
00036a  9d04              LDR      r5,[sp,#0x10]
;;;354          fcurnt4 = fnext4;
00036c  9e03              LDR      r6,[sp,#0xc]
;;;355    
;;;356          stageCnt--;
00036e  f1ae0e01          SUB      lr,lr,#1
                  |L1.882|
000372  f1be0f00          CMP      lr,#0                 ;321
000376  d1b6              BNE      |L1.742|
;;;357    
;;;358        }
;;;359    
;;;360        /* The results in the 4 accumulators, store in the destination buffer. */
;;;361        /* y(n) = fN(n) */
;;;362    
;;;363    #ifndef  ARM_MATH_BIG_ENDIAN
;;;364    
;;;365        *__SIMD32(pDst)++ = __PKHBT(fcurnt1, fcurnt2, 16);
000378  eac34004          PKHBT    r0,r3,r4,LSL #16
00037c  6010              STR      r0,[r2,#0]
;;;366        *__SIMD32(pDst)++ = __PKHBT(fcurnt3, fcurnt4, 16);
00037e  eac54006          PKHBT    r0,r5,r6,LSL #16
000382  6050              STR      r0,[r2,#4]
000384  3208              ADDS     r2,r2,#8
;;;367    
;;;368    #else
;;;369    
;;;370        *__SIMD32(pDst)++ = __PKHBT(fcurnt2, fcurnt1, 16);
;;;371        *__SIMD32(pDst)++ = __PKHBT(fcurnt4, fcurnt3, 16);
;;;372    
;;;373    #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;374    
;;;375        blkCnt--;
000386  9800              LDR      r0,[sp,#0]
000388  1e40              SUBS     r0,r0,#1
00038a  9000              STR      r0,[sp,#0]
                  |L1.908|
00038c  9800              LDR      r0,[sp,#0]            ;91
00038e  2800              CMP      r0,#0                 ;91
000390  f47fae43          BNE      |L1.26|
;;;376      }
;;;377    
;;;378      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;379       ** No loop unrolling is used. */
;;;380      blkCnt = blockSize % 0x4u;
000394  9810              LDR      r0,[sp,#0x40]
000396  f0000c03          AND      r12,r0,#3
;;;381    
;;;382      while(blkCnt > 0u)
00039a  e033              B        |L1.1028|
                  |L1.924|
;;;383      {
;;;384        /* f0(n) = x(n) */
;;;385        fcurnt1 = *pSrc++;
00039c  f9315b02          LDRSH    r5,[r1],#2
;;;386    
;;;387        /* Initialize coeff pointer */
;;;388        pk = (pCoeffs);
0003a0  9c0a              LDR      r4,[sp,#0x28]
;;;389    
;;;390        /* Initialize state pointer */
;;;391        px = pState;
0003a2  980b              LDR      r0,[sp,#0x2c]
;;;392    
;;;393        /* read g2(n) from state buffer */
;;;394        gcurnt1 = *px;
0003a4  f9b06000          LDRSH    r6,[r0,#0]
;;;395    
;;;396        /* for sample 1 processing */
;;;397        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;398        fnext1 = (((q31_t) gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0003a8  f8347b02          LDRH     r7,[r4],#2
0003ac  fb17f306          SMULBB   r3,r7,r6
0003b0  eb0533e3          ADD      r3,r5,r3,ASR #15
;;;399        fnext1 = __SSAT(fnext1, 16);
0003b4  f303030f          SSAT     r3,#16,r3
;;;400    
;;;401    
;;;402        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;403        gnext1 = (((q31_t) fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
0003b8  fb17f705          SMULBB   r7,r7,r5
0003bc  eb0636e7          ADD      r6,r6,r7,ASR #15
;;;404        gnext1 = __SSAT(gnext1, 16);
0003c0  f306070f          SSAT     r7,#16,r6
;;;405    
;;;406        /* save g1(n) in state buffer */
;;;407        *px++ = (q15_t) fcurnt1;
0003c4  f8205b02          STRH     r5,[r0],#2
;;;408    
;;;409        /* f1(n) is saved in fcurnt1    
;;;410           for next stage processing */
;;;411        fcurnt1 = fnext1;
;;;412    
;;;413        stageCnt = (numStages - 1u);
0003c8  9d01              LDR      r5,[sp,#4]
0003ca  1e6d              SUBS     r5,r5,#1
;;;414    
;;;415        /* stage loop */
;;;416        while(stageCnt > 0u)
0003cc  e012              B        |L1.1012|
                  |L1.974|
;;;417        {
;;;418          /* read g2(n) from state buffer */
;;;419          gcurnt1 = *px;
0003ce  f9b06000          LDRSH    r6,[r0,#0]
;;;420    
;;;421          /* save g1(n) in state buffer */
;;;422          *px++ = (q15_t) gnext1;
0003d2  f8207b02          STRH     r7,[r0],#2
;;;423    
;;;424          /* Sample processing for K2, K3.... */
;;;425          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;426          fnext1 = (((q31_t) gcurnt1 * (*pk)) >> 15u) + fcurnt1;
0003d6  f9347b02          LDRSH    r7,[r4],#2
0003da  fb17f806          SMULBB   r8,r7,r6
0003de  eb0338e8          ADD      r8,r3,r8,ASR #15
;;;427          fnext1 = __SSAT(fnext1, 16);
0003e2  f308080f          SSAT     r8,#16,r8
;;;428    
;;;429          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;430          gnext1 = (((q31_t) fcurnt1 * (*pk++)) >> 15u) + gcurnt1;
0003e6  435f              MULS     r7,r3,r7
0003e8  eb0633e7          ADD      r3,r6,r7,ASR #15
;;;431          gnext1 = __SSAT(gnext1, 16);
0003ec  f303070f          SSAT     r7,#16,r3
;;;432    
;;;433    
;;;434          /* f1(n) is saved in fcurnt1    
;;;435             for next stage processing */
;;;436          fcurnt1 = fnext1;
0003f0  4643              MOV      r3,r8
;;;437    
;;;438          stageCnt--;
0003f2  1e6d              SUBS     r5,r5,#1
                  |L1.1012|
0003f4  2d00              CMP      r5,#0                 ;416
0003f6  d1ea              BNE      |L1.974|
;;;439    
;;;440        }
;;;441    
;;;442        /* y(n) = fN(n) */
;;;443        *pDst++ = __SSAT(fcurnt1, 16);
0003f8  f303000f          SSAT     r0,#16,r3
0003fc  f8220b02          STRH     r0,[r2],#2
;;;444    
;;;445    
;;;446        blkCnt--;
000400  f1ac0c01          SUB      r12,r12,#1
                  |L1.1028|
000404  f1bc0f00          CMP      r12,#0                ;382
000408  d1c8              BNE      |L1.924|
;;;447    
;;;448      }
;;;449    
;;;450    #else
;;;451    
;;;452      /* Run the below code for Cortex-M0 */
;;;453    
;;;454      q31_t fcurnt, fnext, gcurnt, gnext;            /* temporary variables */
;;;455      uint32_t numStages = S->numStages;             /* Length of the filter */
;;;456      uint32_t blkCnt, stageCnt;                     /* temporary variables for counts */
;;;457    
;;;458      pState = &S->pState[0];
;;;459    
;;;460      blkCnt = blockSize;
;;;461    
;;;462      while(blkCnt > 0u)
;;;463      {
;;;464        /* f0(n) = x(n) */
;;;465        fcurnt = *pSrc++;
;;;466    
;;;467        /* Initialize coeff pointer */
;;;468        pk = (pCoeffs);
;;;469    
;;;470        /* Initialize state pointer */
;;;471        px = pState;
;;;472    
;;;473        /* read g0(n-1) from state buffer */
;;;474        gcurnt = *px;
;;;475    
;;;476        /* for sample 1 processing */
;;;477        /* f1(n) = f0(n) +  K1 * g0(n-1) */
;;;478        fnext = ((gcurnt * (*pk)) >> 15u) + fcurnt;
;;;479        fnext = __SSAT(fnext, 16);
;;;480    
;;;481    
;;;482        /* g1(n) = f0(n) * K1  +  g0(n-1) */
;;;483        gnext = ((fcurnt * (*pk++)) >> 15u) + gcurnt;
;;;484        gnext = __SSAT(gnext, 16);
;;;485    
;;;486        /* save f0(n) in state buffer */
;;;487        *px++ = (q15_t) fcurnt;
;;;488    
;;;489        /* f1(n) is saved in fcurnt            
;;;490           for next stage processing */
;;;491        fcurnt = fnext;
;;;492    
;;;493        stageCnt = (numStages - 1u);
;;;494    
;;;495        /* stage loop */
;;;496        while(stageCnt > 0u)
;;;497        {
;;;498          /* read g1(n-1) from state buffer */
;;;499          gcurnt = *px;
;;;500    
;;;501          /* save g0(n-1) in state buffer */
;;;502          *px++ = (q15_t) gnext;
;;;503    
;;;504          /* Sample processing for K2, K3.... */
;;;505          /* f2(n) = f1(n) +  K2 * g1(n-1) */
;;;506          fnext = ((gcurnt * (*pk)) >> 15u) + fcurnt;
;;;507          fnext = __SSAT(fnext, 16);
;;;508    
;;;509          /* g2(n) = f1(n) * K2  +  g1(n-1) */
;;;510          gnext = ((fcurnt * (*pk++)) >> 15u) + gcurnt;
;;;511          gnext = __SSAT(gnext, 16);
;;;512    
;;;513    
;;;514          /* f1(n) is saved in fcurnt            
;;;515             for next stage processing */
;;;516          fcurnt = fnext;
;;;517    
;;;518          stageCnt--;
;;;519    
;;;520        }
;;;521    
;;;522        /* y(n) = fN(n) */
;;;523        *pDst++ = __SSAT(fcurnt, 16);
;;;524    
;;;525    
;;;526        blkCnt--;
;;;527    
;;;528      }
;;;529    
;;;530    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
;;;531    
;;;532    }
00040a  b011              ADD      sp,sp,#0x44
00040c  e8bd8ff0          POP      {r4-r11,pc}
;;;533    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_lattice_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REVSH|
#line 144
|__asm___21_arm_fir_lattice_q15_c_2dabaeb7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_fir_lattice_q15_c_2dabaeb7____RRX|
#line 300
|__asm___21_arm_fir_lattice_q15_c_2dabaeb7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
