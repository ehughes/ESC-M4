; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix2_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix2_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cfft_radix2_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix2_f32.c]
                          THUMB

                          AREA ||i.arm_cfft_radix2_f32||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix2_f32 PROC
;;;81     
;;;82     void arm_cfft_radix2_f32(
000000  b570              PUSH     {r4-r6,lr}
;;;83     const arm_cfft_radix2_instance_f32 * S,
;;;84     float32_t * pSrc)
;;;85     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;86     
;;;87        if(S->ifftFlag == 1u)
000006  78a0              LDRB     r0,[r4,#2]
;;;88        {
;;;89           /*  Complex IFFT radix-2  */
;;;90           arm_radix2_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;87
00000e  2801              CMP      r0,#1                 ;87
000010  d00d              BEQ      |L1.46|
;;;91           S->twidCoefModifier, S->onebyfftLen);
;;;92        }
;;;93        else
;;;94        {
;;;95           /*  Complex FFT radix-2  */
;;;96           arm_radix2_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       arm_radix2_butterfly_f32
                  |L1.24|
;;;97           S->twidCoefModifier);
;;;98        }
;;;99     
;;;100       if(S->bitReverseFlag == 1u)
000018  78e0              LDRB     r0,[r4,#3]
00001a  2801              CMP      r0,#1
00001c  d10d              BNE      |L1.58|
;;;101       {
;;;102          /*  Bit Reversal */
;;;103          arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
00001e  89e2              LDRH     r2,[r4,#0xe]
000020  8821              LDRH     r1,[r4,#0]
000022  4628              MOV      r0,r5
000024  68a3              LDR      r3,[r4,#8]
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      arm_bitreversal_f32
                  |L1.46|
00002e  ed940a04          VLDR     s0,[r4,#0x10]         ;90
000032  4628              MOV      r0,r5                 ;90
000034  f7fffffe          BL       arm_radix2_butterfly_inverse_f32
000038  e7ee              B        |L1.24|
                  |L1.58|
;;;104       }
;;;105    
;;;106    }
00003a  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.arm_radix2_butterfly_f32||, CODE, READONLY, ALIGN=1

                  arm_radix2_butterfly_f32 PROC
;;;127    
;;;128    void arm_radix2_butterfly_f32(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;129    float32_t * pSrc,
;;;130    uint32_t fftLen,
;;;131    float32_t * pCoef,
;;;132    uint16_t twidCoefModifier)
;;;133    {
;;;134    
;;;135       uint32_t i, j, k, l;
;;;136       uint32_t n1, n2, ia;
;;;137       float32_t xt, yt, cosVal, sinVal;
;;;138       float32_t p0, p1, p2, p3;
;;;139       float32_t a0, a1;
;;;140    
;;;141    #ifndef ARM_MATH_CM0_FAMILY
;;;142    
;;;143       /*  Initializations for the first stage */
;;;144       n2 = fftLen >> 1;
000004  084c              LSRS     r4,r1,#1
;;;145       ia = 0;
000006  2600              MOVS     r6,#0
;;;146       i = 0;
000008  2500              MOVS     r5,#0
;;;147    
;;;148       // loop for groups 
;;;149       for (k = n2; k > 0; k--)
00000a  4627              MOV      r7,r4
;;;150       {
;;;151          cosVal = pCoef[ia * 2];
;;;152          sinVal = pCoef[(ia * 2) + 1];
00000c  f04f0b01          MOV      r11,#1
000010  2f00              CMP      r7,#0                 ;149
000012  d040              BEQ      |L2.150|
                  |L2.20|
000014  eb020cc6          ADD      r12,r2,r6,LSL #3      ;151
000018  ed9c0a00          VLDR     s0,[r12,#0]           ;151
00001c  eb0b0c46          ADD      r12,r11,r6,LSL #1
000020  eb020c8c          ADD      r12,r2,r12,LSL #2
000024  eddc1a00          VLDR     s3,[r12,#0]
;;;153    
;;;154          /*  Twiddle coefficients index modifier */
;;;155          ia += twidCoefModifier;
000028  441e              ADD      r6,r6,r3
;;;156    
;;;157          /*  index calculation for the input as, */
;;;158          /*  pSrc[i + 0], pSrc[i + fftLen/1] */
;;;159          l = i + n2;
00002a  eb050c04          ADD      r12,r5,r4
;;;160    
;;;161          /*  Butterfly implementation */
;;;162          a0 = pSrc[2 * i] + pSrc[2 * l];
00002e  eb0009c5          ADD      r9,r0,r5,LSL #3
000032  eb000acc          ADD      r10,r0,r12,LSL #3
000036  edd90a00          VLDR     s1,[r9,#0]
00003a  ed9a1a00          VLDR     s2,[r10,#0]
00003e  ee303a81          VADD.F32 s6,s1,s2
;;;163          xt = pSrc[2 * i] - pSrc[2 * l];
000042  ee700ac1          VSUB.F32 s1,s1,s2
;;;164    
;;;165          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000046  eb0b0845          ADD      r8,r11,r5,LSL #1
00004a  eb0b0c4c          ADD      r12,r11,r12,LSL #1
00004e  eb000888          ADD      r8,r0,r8,LSL #2
000052  eb000c8c          ADD      r12,r0,r12,LSL #2
000056  ed982a00          VLDR     s4,[r8,#0]
00005a  eddc2a00          VLDR     s5,[r12,#0]
00005e  ee321a62          VSUB.F32 s2,s4,s5
;;;166          a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
000062  ee322a82          VADD.F32 s4,s5,s4
;;;167          
;;;168          p0 = xt * cosVal;
000066  ee602a80          VMUL.F32 s5,s1,s0
;;;169          p1 = yt * sinVal;
00006a  ee613a21          VMUL.F32 s7,s2,s3
;;;170          p2 = yt * cosVal;
00006e  ee210a00          VMUL.F32 s0,s2,s0
;;;171          p3 = xt * sinVal;  
000072  ee600aa1          VMUL.F32 s1,s1,s3
;;;172          
;;;173          pSrc[2 * i]     = a0;   
000076  ed893a00          VSTR     s6,[r9,#0]
;;;174          pSrc[2 * i + 1] = a1;       
00007a  ed882a00          VSTR     s4,[r8,#0]
;;;175          
;;;176          pSrc[2 * l]     = p0 + p1;
00007e  ee321aa3          VADD.F32 s2,s5,s7
000082  ed8a1a00          VSTR     s2,[r10,#0]
;;;177          pSrc[2 * l + 1] = p2 - p3;
000086  ee300a60          VSUB.F32 s0,s0,s1
00008a  ed8c0a00          VSTR     s0,[r12,#0]
;;;178          
;;;179          i++;
00008e  1c6d              ADDS     r5,r5,#1
000090  1e7f              SUBS     r7,r7,#1              ;149
000092  2f00              CMP      r7,#0                 ;149
000094  d1be              BNE      |L2.20|
                  |L2.150|
;;;180       }                             // groups loop end 
;;;181    
;;;182       twidCoefModifier <<= 1u;
000096  f64f75ff          MOV      r5,#0xffff
00009a  ea050843          AND      r8,r5,r3,LSL #1
;;;183    
;;;184       // loop for stage 
;;;185       for (k = n2; k > 2; k = k >> 1)
00009e  46a6              MOV      lr,r4
0000a0  e04d              B        |L2.318|
                  |L2.162|
;;;186       {
;;;187          n1 = n2;
0000a2  9400              STR      r4,[sp,#0]
;;;188          n2 = n2 >> 1;
0000a4  0864              LSRS     r4,r4,#1
;;;189          ia = 0;
0000a6  2600              MOVS     r6,#0
;;;190    
;;;191          // loop for groups 
;;;192          j = 0;
0000a8  2500              MOVS     r5,#0
                  |L2.170|
;;;193          do
;;;194          {
;;;195             cosVal = pCoef[ia * 2];
0000aa  eb0203c6          ADD      r3,r2,r6,LSL #3
0000ae  ed932a00          VLDR     s4,[r3,#0]
;;;196             sinVal = pCoef[(ia * 2) + 1];
0000b2  eb0b0346          ADD      r3,r11,r6,LSL #1
0000b6  eb020383          ADD      r3,r2,r3,LSL #2
0000ba  edd32a00          VLDR     s5,[r3,#0]
;;;197             ia += twidCoefModifier;
0000be  4446              ADD      r6,r6,r8
;;;198    
;;;199             // loop for butterfly 
;;;200             i = j;
0000c0  462b              MOV      r3,r5
                  |L2.194|
;;;201             do
;;;202             {
;;;203                l = i + n2;
0000c2  191f              ADDS     r7,r3,r4
;;;204                a0 = pSrc[2 * i] + pSrc[2 * l];
0000c4  eb0009c3          ADD      r9,r0,r3,LSL #3
0000c8  eb000ac7          ADD      r10,r0,r7,LSL #3
0000cc  ed990a00          VLDR     s0,[r9,#0]
0000d0  edda0a00          VLDR     s1,[r10,#0]
0000d4  ee303a20          VADD.F32 s6,s0,s1
;;;205                xt = pSrc[2 * i] - pSrc[2 * l];
0000d8  ee300a60          VSUB.F32 s0,s0,s1
;;;206    
;;;207                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000dc  eb0b0c43          ADD      r12,r11,r3,LSL #1
0000e0  eb0b0747          ADD      r7,r11,r7,LSL #1
0000e4  eb000c8c          ADD      r12,r0,r12,LSL #2
0000e8  eb000787          ADD      r7,r0,r7,LSL #2
0000ec  ed9c1a00          VLDR     s2,[r12,#0]
0000f0  edd71a00          VLDR     s3,[r7,#0]
0000f4  ee710a61          VSUB.F32 s1,s2,s3
;;;208                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
0000f8  ee713a81          VADD.F32 s7,s3,s2
;;;209                
;;;210                p0 = xt * cosVal;
0000fc  ee201a02          VMUL.F32 s2,s0,s4
;;;211                p1 = yt * sinVal;
000100  ee601aa2          VMUL.F32 s3,s1,s5
;;;212                p2 = yt * cosVal;
000104  ee600a82          VMUL.F32 s1,s1,s4
;;;213                p3 = xt * sinVal;  
000108  ee200a22          VMUL.F32 s0,s0,s5
;;;214                
;;;215                pSrc[2 * i] = a0;   
00010c  ed893a00          VSTR     s6,[r9,#0]
;;;216                pSrc[2 * i + 1] = a1;       
000110  edcc3a00          VSTR     s7,[r12,#0]
;;;217                
;;;218                pSrc[2 * l]     = p0 + p1;
000114  ee311a21          VADD.F32 s2,s2,s3
000118  ed8a1a00          VSTR     s2,[r10,#0]
;;;219                pSrc[2 * l + 1] = p2 - p3;
00011c  ee300ac0          VSUB.F32 s0,s1,s0
000120  ed870a00          VSTR     s0,[r7,#0]
;;;220                
;;;221                i += n1;
000124  9f00              LDR      r7,[sp,#0]
000126  443b              ADD      r3,r3,r7
;;;222             } while( i < fftLen );                        // butterfly loop end 
000128  428b              CMP      r3,r1
00012a  d3ca              BCC      |L2.194|
;;;223             j++;
00012c  1c6d              ADDS     r5,r5,#1
;;;224          } while( j < n2);                          // groups loop end 
00012e  42a5              CMP      r5,r4
000130  d3bb              BCC      |L2.170|
;;;225          twidCoefModifier <<= 1u;
000132  f64f73ff          MOV      r3,#0xffff
000136  ea030848          AND      r8,r3,r8,LSL #1
00013a  ea4f0e5e          LSR      lr,lr,#1              ;185
                  |L2.318|
00013e  f1be0f02          CMP      lr,#2                 ;185
000142  d8ae              BHI      |L2.162|
;;;226       }                             // stages loop end 
;;;227    
;;;228       // loop for butterfly 
;;;229       for (i = 0; i < fftLen; i += 2)
000144  2200              MOVS     r2,#0
000146  e028              B        |L2.410|
                  |L2.328|
;;;230       {
;;;231          a0 = pSrc[2 * i] + pSrc[2 * i + 2];
000148  2402              MOVS     r4,#2
00014a  eb040442          ADD      r4,r4,r2,LSL #1
00014e  eb0003c2          ADD      r3,r0,r2,LSL #3
000152  eb000484          ADD      r4,r0,r4,LSL #2
000156  ed930a00          VLDR     s0,[r3,#0]
00015a  edd40a00          VLDR     s1,[r4,#0]
00015e  ee301a20          VADD.F32 s2,s0,s1
;;;232          xt = pSrc[2 * i] - pSrc[2 * i + 2];
000162  ee701a60          VSUB.F32 s3,s0,s1
;;;233    
;;;234          yt = pSrc[2 * i + 1] - pSrc[2 * i + 3];
000166  2603              MOVS     r6,#3
000168  eb0b0542          ADD      r5,r11,r2,LSL #1
00016c  eb060642          ADD      r6,r6,r2,LSL #1
000170  eb000585          ADD      r5,r0,r5,LSL #2
000174  eb000686          ADD      r6,r0,r6,LSL #2
000178  ed950a00          VLDR     s0,[r5,#0]
00017c  edd60a00          VLDR     s1,[r6,#0]
000180  ee302a60          VSUB.F32 s4,s0,s1
;;;235          a1 = pSrc[2 * i + 3] + pSrc[2 * i + 1];
000184  ee300a80          VADD.F32 s0,s1,s0
;;;236          
;;;237          pSrc[2 * i] = a0;   
000188  ed831a00          VSTR     s2,[r3,#0]
;;;238          pSrc[2 * i + 1] = a1;
00018c  ed850a00          VSTR     s0,[r5,#0]
;;;239          pSrc[2 * i + 2] = xt;
000190  edc41a00          VSTR     s3,[r4,#0]
;;;240          pSrc[2 * i + 3] = yt;
000194  ed862a00          VSTR     s4,[r6,#0]
000198  1c92              ADDS     r2,r2,#2              ;229
                  |L2.410|
00019a  428a              CMP      r2,r1                 ;229
00019c  d3d4              BCC      |L2.328|
;;;241       }                             // groups loop end 
;;;242    
;;;243    #else
;;;244     
;;;245       n2 = fftLen;
;;;246    
;;;247       // loop for stage 
;;;248       for (k = fftLen; k > 1; k = k >> 1)
;;;249       {
;;;250          n1 = n2;
;;;251          n2 = n2 >> 1;
;;;252          ia = 0;
;;;253    
;;;254          // loop for groups 
;;;255          j = 0;
;;;256          do
;;;257          {
;;;258             cosVal = pCoef[ia * 2];
;;;259             sinVal = pCoef[(ia * 2) + 1];
;;;260             ia += twidCoefModifier;
;;;261    
;;;262             // loop for butterfly 
;;;263             i = j;
;;;264             do
;;;265             {
;;;266                l = i + n2;
;;;267                a0 = pSrc[2 * i] + pSrc[2 * l];
;;;268                xt = pSrc[2 * i] - pSrc[2 * l];
;;;269    
;;;270                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
;;;271                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
;;;272                
;;;273                p0 = xt * cosVal;
;;;274                p1 = yt * sinVal;
;;;275                p2 = yt * cosVal;
;;;276                p3 = xt * sinVal;  
;;;277                
;;;278                pSrc[2 * i] = a0;   
;;;279                pSrc[2 * i + 1] = a1;       
;;;280                
;;;281                pSrc[2 * l]     = p0 + p1;
;;;282                pSrc[2 * l + 1] = p2 - p3;
;;;283                
;;;284                i += n1;
;;;285             } while(i < fftLen);
;;;286             j++;
;;;287          } while(j < n2);
;;;288          twidCoefModifier <<= 1u;
;;;289       }
;;;290    
;;;291    #endif //    #ifndef ARM_MATH_CM0_FAMILY
;;;292    
;;;293    }
00019e  e8bd8ff8          POP      {r3-r11,pc}
;;;294    
                          ENDP


                          AREA ||i.arm_radix2_butterfly_inverse_f32||, CODE, READONLY, ALIGN=1

                  arm_radix2_butterfly_inverse_f32 PROC
;;;295    
;;;296    void arm_radix2_butterfly_inverse_f32(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;297    float32_t * pSrc,
;;;298    uint32_t fftLen,
;;;299    float32_t * pCoef,
;;;300    uint16_t twidCoefModifier,
;;;301    float32_t onebyfftLen)
;;;302    {
;;;303    
;;;304       uint32_t i, j, k, l;
;;;305       uint32_t n1, n2, ia;
;;;306       float32_t xt, yt, cosVal, sinVal;
;;;307       float32_t p0, p1, p2, p3;
;;;308       float32_t a0, a1;
;;;309    
;;;310    #ifndef ARM_MATH_CM0_FAMILY
;;;311    
;;;312       n2 = fftLen >> 1;
000004  084c              LSRS     r4,r1,#1
;;;313       ia = 0;
000006  2600              MOVS     r6,#0
;;;314    
;;;315       // loop for groups 
;;;316       for (i = 0; i < n2; i++)
000008  2500              MOVS     r5,#0
;;;317       {
;;;318          cosVal = pCoef[ia * 2];
;;;319          sinVal = pCoef[(ia * 2) + 1];
00000a  f04f0a01          MOV      r10,#1
00000e  e03c              B        |L3.138|
                  |L3.16|
000010  eb0207c6          ADD      r7,r2,r6,LSL #3       ;318
000014  edd71a00          VLDR     s3,[r7,#0]            ;318
000018  eb0a0746          ADD      r7,r10,r6,LSL #1
00001c  eb020787          ADD      r7,r2,r7,LSL #2
000020  ed972a00          VLDR     s4,[r7,#0]
;;;320          ia += twidCoefModifier;
000024  441e              ADD      r6,r6,r3
;;;321    
;;;322          l = i + n2;
000026  192f              ADDS     r7,r5,r4
;;;323          a0 = pSrc[2 * i] + pSrc[2 * l];
000028  eb0008c5          ADD      r8,r0,r5,LSL #3
00002c  eb0009c7          ADD      r9,r0,r7,LSL #3
000030  edd80a00          VLDR     s1,[r8,#0]
000034  ed991a00          VLDR     s2,[r9,#0]
000038  ee703a81          VADD.F32 s7,s1,s2
;;;324          xt = pSrc[2 * i] - pSrc[2 * l];
00003c  ee700ac1          VSUB.F32 s1,s1,s2
;;;325    
;;;326          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000040  eb0a0c45          ADD      r12,r10,r5,LSL #1
000044  eb0a0747          ADD      r7,r10,r7,LSL #1
000048  eb000c8c          ADD      r12,r0,r12,LSL #2
00004c  eb000787          ADD      r7,r0,r7,LSL #2
000050  eddc2a00          VLDR     s5,[r12,#0]
000054  ed973a00          VLDR     s6,[r7,#0]
000058  ee321ac3          VSUB.F32 s2,s5,s6
;;;327          a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
00005c  ee334a22          VADD.F32 s8,s6,s5
;;;328          
;;;329          p0 = xt * cosVal;
000060  ee602aa1          VMUL.F32 s5,s1,s3
;;;330          p1 = yt * sinVal;
000064  ee213a02          VMUL.F32 s6,s2,s4
;;;331          p2 = yt * cosVal;
000068  ee211a21          VMUL.F32 s2,s2,s3
;;;332          p3 = xt * sinVal;  
00006c  ee600a82          VMUL.F32 s1,s1,s4
;;;333          
;;;334          pSrc[2 * i] = a0;   
000070  edc83a00          VSTR     s7,[r8,#0]
;;;335          pSrc[2 * i + 1] = a1;       
000074  ed8c4a00          VSTR     s8,[r12,#0]
;;;336          
;;;337          pSrc[2 * l]     = p0 - p1;
000078  ee721ac3          VSUB.F32 s3,s5,s6
00007c  edc91a00          VSTR     s3,[r9,#0]
;;;338          pSrc[2 * l + 1] = p2 + p3;  
000080  ee710a20          VADD.F32 s1,s2,s1
000084  edc70a00          VSTR     s1,[r7,#0]
000088  1c6d              ADDS     r5,r5,#1              ;316
                  |L3.138|
00008a  42a5              CMP      r5,r4                 ;316
00008c  d3c0              BCC      |L3.16|
;;;339       }                             // groups loop end 
;;;340    
;;;341       twidCoefModifier <<= 1u;
00008e  f64f75ff          MOV      r5,#0xffff
000092  ea050843          AND      r8,r5,r3,LSL #1
;;;342    
;;;343       // loop for stage 
;;;344       for (k = fftLen / 2; k > 2; k = k >> 1)
000096  46a3              MOV      r11,r4
000098  e04d              B        |L3.310|
                  |L3.154|
;;;345       {
;;;346          n1 = n2;
00009a  9400              STR      r4,[sp,#0]
;;;347          n2 = n2 >> 1;
00009c  0864              LSRS     r4,r4,#1
;;;348          ia = 0;
00009e  2600              MOVS     r6,#0
;;;349    
;;;350          // loop for groups 
;;;351          j = 0;
0000a0  2500              MOVS     r5,#0
                  |L3.162|
;;;352          do
;;;353          {
;;;354             cosVal = pCoef[ia * 2];
0000a2  eb0203c6          ADD      r3,r2,r6,LSL #3
0000a6  edd32a00          VLDR     s5,[r3,#0]
;;;355             sinVal = pCoef[(ia * 2) + 1];
0000aa  eb0a0346          ADD      r3,r10,r6,LSL #1
0000ae  eb020383          ADD      r3,r2,r3,LSL #2
0000b2  ed933a00          VLDR     s6,[r3,#0]
;;;356             ia += twidCoefModifier;
0000b6  4446              ADD      r6,r6,r8
;;;357    
;;;358             // loop for butterfly 
;;;359             i = j;
0000b8  462b              MOV      r3,r5
                  |L3.186|
;;;360             do
;;;361             {
;;;362                l = i + n2;
0000ba  191f              ADDS     r7,r3,r4
;;;363                a0 = pSrc[2 * i] + pSrc[2 * l];
0000bc  eb0009c3          ADD      r9,r0,r3,LSL #3
0000c0  eb000ec7          ADD      lr,r0,r7,LSL #3
0000c4  edd90a00          VLDR     s1,[r9,#0]
0000c8  ed9e1a00          VLDR     s2,[lr,#0]
0000cc  ee703a81          VADD.F32 s7,s1,s2
;;;364                xt = pSrc[2 * i] - pSrc[2 * l];
0000d0  ee700ac1          VSUB.F32 s1,s1,s2
;;;365    
;;;366                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000d4  eb0a0c43          ADD      r12,r10,r3,LSL #1
0000d8  eb0a0747          ADD      r7,r10,r7,LSL #1
0000dc  eb000c8c          ADD      r12,r0,r12,LSL #2
0000e0  eb000787          ADD      r7,r0,r7,LSL #2
0000e4  eddc1a00          VLDR     s3,[r12,#0]
0000e8  ed972a00          VLDR     s4,[r7,#0]
0000ec  ee311ac2          VSUB.F32 s2,s3,s4
;;;367                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
0000f0  ee324a21          VADD.F32 s8,s4,s3
;;;368                
;;;369                p0 = xt * cosVal;
0000f4  ee601aa2          VMUL.F32 s3,s1,s5
;;;370                p1 = yt * sinVal;
0000f8  ee212a03          VMUL.F32 s4,s2,s6
;;;371                p2 = yt * cosVal;
0000fc  ee211a22          VMUL.F32 s2,s2,s5
;;;372                p3 = xt * sinVal;  
000100  ee600a83          VMUL.F32 s1,s1,s6
;;;373                
;;;374                pSrc[2 * i] = a0;   
000104  edc93a00          VSTR     s7,[r9,#0]
;;;375                pSrc[2 * i + 1] = a1;       
000108  ed8c4a00          VSTR     s8,[r12,#0]
;;;376                
;;;377                pSrc[2 * l]     = p0 - p1;
00010c  ee711ac2          VSUB.F32 s3,s3,s4
000110  edce1a00          VSTR     s3,[lr,#0]
;;;378                pSrc[2 * l + 1] = p2 + p3; 
000114  ee710a20          VADD.F32 s1,s2,s1
000118  edc70a00          VSTR     s1,[r7,#0]
;;;379    
;;;380                i += n1;
00011c  9f00              LDR      r7,[sp,#0]
00011e  443b              ADD      r3,r3,r7
;;;381             } while( i < fftLen );                 // butterfly loop end 
000120  428b              CMP      r3,r1
000122  d3ca              BCC      |L3.186|
;;;382             j++;
000124  1c6d              ADDS     r5,r5,#1
;;;383          } while(j < n2);                      // groups loop end 
000126  42a5              CMP      r5,r4
000128  d3bb              BCC      |L3.162|
;;;384    
;;;385          twidCoefModifier <<= 1u;
00012a  f64f73ff          MOV      r3,#0xffff
00012e  ea030848          AND      r8,r3,r8,LSL #1
000132  ea4f0b5b          LSR      r11,r11,#1            ;344
                  |L3.310|
000136  f1bb0f02          CMP      r11,#2                ;344
00013a  d8ae              BHI      |L3.154|
;;;386       }                             // stages loop end 
;;;387    
;;;388       // loop for butterfly 
;;;389       for (i = 0; i < fftLen; i += 2)
00013c  2200              MOVS     r2,#0
00013e  e030              B        |L3.418|
                  |L3.320|
;;;390       {   
;;;391          a0 = pSrc[2 * i] + pSrc[2 * i + 2];
000140  2402              MOVS     r4,#2
000142  eb040442          ADD      r4,r4,r2,LSL #1
000146  eb0003c2          ADD      r3,r0,r2,LSL #3
00014a  eb000484          ADD      r4,r0,r4,LSL #2
00014e  edd30a00          VLDR     s1,[r3,#0]
000152  ed941a00          VLDR     s2,[r4,#0]
000156  ee302a81          VADD.F32 s4,s1,s2
;;;392          xt = pSrc[2 * i] - pSrc[2 * i + 2];
00015a  ee701ac1          VSUB.F32 s3,s1,s2
;;;393          
;;;394          a1 = pSrc[2 * i + 3] + pSrc[2 * i + 1];
00015e  2503              MOVS     r5,#3
000160  eb050542          ADD      r5,r5,r2,LSL #1
000164  eb0a0642          ADD      r6,r10,r2,LSL #1
000168  eb000585          ADD      r5,r0,r5,LSL #2
00016c  eb000686          ADD      r6,r0,r6,LSL #2
000170  edd50a00          VLDR     s1,[r5,#0]
000174  ed961a00          VLDR     s2,[r6,#0]
000178  ee702a81          VADD.F32 s5,s1,s2
;;;395          yt = pSrc[2 * i + 1] - pSrc[2 * i + 3];
00017c  ee710a60          VSUB.F32 s1,s2,s1
;;;396          
;;;397          p0 = a0 * onebyfftLen;
000180  ee221a00          VMUL.F32 s2,s4,s0
;;;398          p2 = xt * onebyfftLen;
000184  ee611a80          VMUL.F32 s3,s3,s0
;;;399          p1 = a1 * onebyfftLen;
000188  ee222a80          VMUL.F32 s4,s5,s0
;;;400          p3 = yt * onebyfftLen; 
00018c  ee600a80          VMUL.F32 s1,s1,s0
;;;401          
;;;402          pSrc[2 * i] = p0;
000190  ed831a00          VSTR     s2,[r3,#0]
;;;403          pSrc[2 * i + 1] = p1;  
000194  ed862a00          VSTR     s4,[r6,#0]
;;;404          pSrc[2 * i + 2] = p2;       
000198  edc41a00          VSTR     s3,[r4,#0]
;;;405          pSrc[2 * i + 3] = p3;
00019c  edc50a00          VSTR     s1,[r5,#0]
0001a0  1c92              ADDS     r2,r2,#2              ;389
                  |L3.418|
0001a2  428a              CMP      r2,r1                 ;389
0001a4  d3cc              BCC      |L3.320|
;;;406       }                             // butterfly loop end 
;;;407    
;;;408    #else
;;;409    
;;;410       n2 = fftLen;
;;;411    
;;;412       // loop for stage 
;;;413       for (k = fftLen; k > 2; k = k >> 1)
;;;414       {
;;;415          n1 = n2;
;;;416          n2 = n2 >> 1;
;;;417          ia = 0;
;;;418    
;;;419          // loop for groups 
;;;420          j = 0;
;;;421          do
;;;422          {
;;;423             cosVal = pCoef[ia * 2];
;;;424             sinVal = pCoef[(ia * 2) + 1];
;;;425             ia = ia + twidCoefModifier;
;;;426    
;;;427             // loop for butterfly 
;;;428             i = j;
;;;429             do
;;;430             {
;;;431                l = i + n2;
;;;432                a0 = pSrc[2 * i] + pSrc[2 * l];
;;;433                xt = pSrc[2 * i] - pSrc[2 * l];
;;;434    
;;;435                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
;;;436                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
;;;437                
;;;438                p0 = xt * cosVal;
;;;439                p1 = yt * sinVal;
;;;440                p2 = yt * cosVal;
;;;441                p3 = xt * sinVal;  
;;;442                
;;;443                pSrc[2 * i] = a0;   
;;;444                pSrc[2 * i + 1] = a1;       
;;;445                
;;;446                pSrc[2 * l]     = p0 - p1;
;;;447                pSrc[2 * l + 1] = p2 + p3;  
;;;448                
;;;449                i += n1;
;;;450             } while( i < fftLen );                    // butterfly loop end 
;;;451             j++;
;;;452          } while( j < n2 );                      // groups loop end 
;;;453    
;;;454          twidCoefModifier = twidCoefModifier << 1u;
;;;455       }                             // stages loop end 
;;;456    
;;;457       n1 = n2;
;;;458       n2 = n2 >> 1;
;;;459    
;;;460       // loop for butterfly 
;;;461       for (i = 0; i < fftLen; i += n1)
;;;462       {
;;;463          l = i + n2;
;;;464          
;;;465          a0 = pSrc[2 * i] + pSrc[2 * l];
;;;466          xt = pSrc[2 * i] - pSrc[2 * l];
;;;467          
;;;468          a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
;;;469          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
;;;470          
;;;471          p0 = a0 * onebyfftLen;
;;;472          p2 = xt * onebyfftLen;
;;;473          p1 = a1 * onebyfftLen;
;;;474          p3 = yt * onebyfftLen; 
;;;475          
;;;476          pSrc[2 * i] = p0;
;;;477          pSrc[2u * l] = p2;
;;;478         
;;;479          pSrc[2 * i + 1] = p1;    
;;;480          pSrc[2u * l + 1u] = p3;
;;;481       }                             // butterfly loop end 
;;;482    
;;;483    #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;484    
;;;485    }
0001a6  e8bd8ff8          POP      {r3-r11,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix2_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_f32_c_e44195c4____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix2_f32_c_e44195c4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_f32_c_e44195c4____REVSH|
#line 144
|__asm___21_arm_cfft_radix2_f32_c_e44195c4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_f32_c_e44195c4____RRX|
#line 300
|__asm___21_arm_cfft_radix2_f32_c_e44195c4____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
