; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix2_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix2_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cfft_radix2_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix2_f32.c]
                          THUMB

                          AREA ||i.arm_cfft_radix2_f32||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix2_f32 PROC
;;;81     
;;;82     void arm_cfft_radix2_f32(
000000  b570              PUSH     {r4-r6,lr}
;;;83     const arm_cfft_radix2_instance_f32 * S,
;;;84     float32_t * pSrc)
;;;85     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;86     
;;;87        if(S->ifftFlag == 1u)
000006  7880              LDRB     r0,[r0,#2]
;;;88        {
;;;89           /*  Complex IFFT radix-2  */
;;;90           arm_radix2_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;87
00000e  2801              CMP      r0,#1                 ;87
000010  d00d              BEQ      |L1.46|
;;;91           S->twidCoefModifier, S->onebyfftLen);
;;;92        }
;;;93        else
;;;94        {
;;;95           /*  Complex FFT radix-2  */
;;;96           arm_radix2_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       arm_radix2_butterfly_f32
                  |L1.24|
;;;97           S->twidCoefModifier);
;;;98        }
;;;99     
;;;100       if(S->bitReverseFlag == 1u)
000018  78e0              LDRB     r0,[r4,#3]
00001a  2801              CMP      r0,#1
00001c  d10d              BNE      |L1.58|
;;;101       {
;;;102          /*  Bit Reversal */
;;;103          arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
00001e  89e2              LDRH     r2,[r4,#0xe]
000020  8821              LDRH     r1,[r4,#0]
000022  4628              MOV      r0,r5
000024  68a3              LDR      r3,[r4,#8]
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      arm_bitreversal_f32
                  |L1.46|
00002e  ed940a04          VLDR     s0,[r4,#0x10]         ;90
000032  4628              MOV      r0,r5                 ;90
000034  f7fffffe          BL       arm_radix2_butterfly_inverse_f32
000038  e7ee              B        |L1.24|
                  |L1.58|
;;;104       }
;;;105    
;;;106    }
00003a  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.arm_radix2_butterfly_f32||, CODE, READONLY, ALIGN=2

                  arm_radix2_butterfly_f32 PROC
;;;127    
;;;128    void arm_radix2_butterfly_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;129    float32_t * pSrc,
;;;130    uint32_t fftLen,
;;;131    float32_t * pCoef,
;;;132    uint16_t twidCoefModifier)
;;;133    {
000004  4692              MOV      r10,r2
;;;134    
;;;135       uint32_t i, j, k, l;
;;;136       uint32_t n1, n2, ia;
;;;137       float32_t xt, yt, cosVal, sinVal;
;;;138       float32_t p0, p1, p2, p3;
;;;139       float32_t a0, a1;
;;;140    
;;;141    #ifndef ARM_MATH_CM0_FAMILY
;;;142    
;;;143       /*  Initializations for the first stage */
;;;144       n2 = fftLen >> 1;
000006  084a              LSRS     r2,r1,#1
;;;145       ia = 0;
000008  f04f0700          MOV      r7,#0
;;;146       i = 0;
00000c  463d              MOV      r5,r7
;;;147    
;;;148       // loop for groups 
;;;149       for (k = n2; k > 0; k--)
00000e  4614              MOV      r4,r2
000010  d033              BEQ      |L2.122|
;;;150       {
;;;151          cosVal = pCoef[ia * 2];
000012  bf00              NOP      
                  |L2.20|
000014  eb0a06c7          ADD      r6,r10,r7,LSL #3
;;;152          sinVal = pCoef[(ia * 2) + 1];
;;;153    
;;;154          /*  Twiddle coefficients index modifier */
;;;155          ia += twidCoefModifier;
;;;156    
;;;157          /*  index calculation for the input as, */
;;;158          /*  pSrc[i + 0], pSrc[i + fftLen/1] */
;;;159          l = i + n2;
000018  eb050c02          ADD      r12,r5,r2
00001c  ec960a02          VLDM     r6,{s0-s1}            ;151
;;;160    
;;;161          /*  Butterfly implementation */
;;;162          a0 = pSrc[2 * i] + pSrc[2 * l];
000020  eb0006c5          ADD      r6,r0,r5,LSL #3
000024  eb000ccc          ADD      r12,r0,r12,LSL #3
000028  edd61a00          VLDR     s3,[r6,#0]
00002c  ed9c1a00          VLDR     s2,[r12,#0]
;;;163          xt = pSrc[2 * i] - pSrc[2 * l];
;;;164    
;;;165          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000030  ed963a01          VLDR     s6,[r6,#4]
000034  ed9c2a01          VLDR     s4,[r12,#4]
000038  ee712a81          VADD.F32 s5,s3,s2              ;162
00003c  ee311ac1          VSUB.F32 s2,s3,s2              ;163
000040  ee731a42          VSUB.F32 s3,s6,s4
;;;166          a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
000044  ee322a03          VADD.F32 s4,s4,s6
;;;167          
;;;168          p0 = xt * cosVal;
;;;169          p1 = yt * sinVal;
;;;170          p2 = yt * cosVal;
;;;171          p3 = xt * sinVal;  
;;;172          
;;;173          pSrc[2 * i]     = a0;   
000048  edc62a00          VSTR     s5,[r6,#0]
00004c  ee213a00          VMUL.F32 s6,s2,s0              ;168
000050  ee613aa0          VMUL.F32 s7,s3,s1              ;169
000054  ee611a80          VMUL.F32 s3,s3,s0              ;170
000058  ee210a20          VMUL.F32 s0,s2,s1              ;171
;;;174          pSrc[2 * i + 1] = a1;       
00005c  ed862a01          VSTR     s4,[r6,#4]
;;;175          
;;;176          pSrc[2 * l]     = p0 + p1;
000060  ee730a23          VADD.F32 s1,s6,s7
000064  441f              ADD      r7,r7,r3              ;155
;;;177          pSrc[2 * l + 1] = p2 - p3;
000066  ee310ac0          VSUB.F32 s0,s3,s0
00006a  edcc0a00          VSTR     s1,[r12,#0]           ;176
00006e  1e64              SUBS     r4,r4,#1
000070  ed8c0a01          VSTR     s0,[r12,#4]
000074  f1050501          ADD      r5,r5,#1
000078  d1cc              BNE      |L2.20|
                  |L2.122|
;;;178          
;;;179          i++;
;;;180       }                             // groups loop end 
;;;181    
;;;182       twidCoefModifier <<= 1u;
00007a  f64f7bff          MOV      r11,#0xffff
00007e  ea0b0743          AND      r7,r11,r3,LSL #1
;;;183    
;;;184       // loop for stage 
;;;185       for (k = n2; k > 2; k = k >> 1)
000082  4690              MOV      r8,r2
000084  e03e              B        |L2.260|
                  |L2.134|
;;;186       {
;;;187          n1 = n2;
000086  4691              MOV      r9,r2
;;;188          n2 = n2 >> 1;
000088  0852              LSRS     r2,r2,#1
;;;189          ia = 0;
00008a  2600              MOVS     r6,#0
;;;190    
;;;191          // loop for groups 
;;;192          j = 0;
00008c  ea4f0406          MOV.W    r4,r6
                  |L2.144|
;;;193          do
;;;194          {
;;;195             cosVal = pCoef[ia * 2];
000090  eb0a03c6          ADD      r3,r10,r6,LSL #3
;;;196             sinVal = pCoef[(ia * 2) + 1];
;;;197             ia += twidCoefModifier;
000094  443e              ADD      r6,r6,r7
000096  ec931a02          VLDM     r3,{s2-s3}            ;195
;;;198    
;;;199             // loop for butterfly 
;;;200             i = j;
00009a  4623              MOV      r3,r4
                  |L2.156|
;;;201             do
;;;202             {
;;;203                l = i + n2;
00009c  eb030c02          ADD      r12,r3,r2
;;;204                a0 = pSrc[2 * i] + pSrc[2 * l];
0000a0  eb0005c3          ADD      r5,r0,r3,LSL #3
0000a4  eb000ccc          ADD      r12,r0,r12,LSL #3
0000a8  ed950a00          VLDR     s0,[r5,#0]
0000ac  eddc0a00          VLDR     s1,[r12,#0]
;;;205                xt = pSrc[2 * i] - pSrc[2 * l];
;;;206    
;;;207                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000b0  ed953a01          VLDR     s6,[r5,#4]
0000b4  ed9c2a01          VLDR     s4,[r12,#4]
0000b8  ee702a20          VADD.F32 s5,s0,s1              ;204
0000bc  ee300a60          VSUB.F32 s0,s0,s1              ;205
0000c0  ee730a42          VSUB.F32 s1,s6,s4
;;;208                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
0000c4  ee322a03          VADD.F32 s4,s4,s6
;;;209                
;;;210                p0 = xt * cosVal;
;;;211                p1 = yt * sinVal;
;;;212                p2 = yt * cosVal;
;;;213                p3 = xt * sinVal;  
;;;214                
;;;215                pSrc[2 * i] = a0;   
0000c8  edc52a00          VSTR     s5,[r5,#0]
0000cc  ee203a01          VMUL.F32 s6,s0,s2              ;210
0000d0  ee603aa1          VMUL.F32 s7,s1,s3              ;211
0000d4  ee600a81          VMUL.F32 s1,s1,s2              ;212
0000d8  ee200a21          VMUL.F32 s0,s0,s3              ;213
;;;216                pSrc[2 * i + 1] = a1;       
0000dc  ed852a01          VSTR     s4,[r5,#4]
;;;217                
;;;218                pSrc[2 * l]     = p0 + p1;
0000e0  ee332a23          VADD.F32 s4,s6,s7
;;;219                pSrc[2 * l + 1] = p2 - p3;
;;;220                
;;;221                i += n1;
0000e4  444b              ADD      r3,r3,r9
0000e6  ee300ac0          VSUB.F32 s0,s1,s0              ;219
0000ea  ed8c2a00          VSTR     s4,[r12,#0]           ;218
;;;222             } while( i < fftLen );                        // butterfly loop end 
0000ee  428b              CMP      r3,r1
0000f0  ed8c0a01          VSTR     s0,[r12,#4]           ;219
0000f4  d3d2              BCC      |L2.156|
0000f6  1c64              ADDS     r4,r4,#1
;;;223             j++;
;;;224          } while( j < n2);                          // groups loop end 
0000f8  4294              CMP      r4,r2
0000fa  d3c9              BCC      |L2.144|
;;;225          twidCoefModifier <<= 1u;
0000fc  ea0b0747          AND      r7,r11,r7,LSL #1
000100  ea4f0858          LSR      r8,r8,#1              ;185
                  |L2.260|
000104  f1b80f02          CMP      r8,#2                 ;185
000108  d8bd              BHI      |L2.134|
;;;226       }                             // stages loop end 
;;;227    
;;;228       // loop for butterfly 
;;;229       for (i = 0; i < fftLen; i += 2)
00010a  2300              MOVS     r3,#0
00010c  e01b              B        |L2.326|
;;;230       {
;;;231          a0 = pSrc[2 * i] + pSrc[2 * i + 2];
00010e  bf00              NOP      
                  |L2.272|
000110  eb0002c3          ADD      r2,r0,r3,LSL #3
;;;232          xt = pSrc[2 * i] - pSrc[2 * i + 2];
;;;233    
;;;234          yt = pSrc[2 * i + 1] - pSrc[2 * i + 3];
;;;235          a1 = pSrc[2 * i + 3] + pSrc[2 * i + 1];
;;;236          
;;;237          pSrc[2 * i] = a0;   
;;;238          pSrc[2 * i + 1] = a1;
;;;239          pSrc[2 * i + 2] = xt;
;;;240          pSrc[2 * i + 3] = yt;
000114  1c9b              ADDS     r3,r3,#2
000116  edd20a00          VLDR     s1,[r2,#0]            ;231
00011a  ed920a02          VLDR     s0,[r2,#8]            ;231
00011e  ee302a80          VADD.F32 s4,s1,s0              ;231
000122  ee301ac0          VSUB.F32 s2,s1,s0              ;232
000126  ed920a01          VLDR     s0,[r2,#4]            ;234
00012a  edd20a03          VLDR     s1,[r2,#0xc]          ;234
00012e  ed822a00          VSTR     s4,[r2,#0]            ;237
000132  ee701a60          VSUB.F32 s3,s0,s1              ;234
000136  ee300a80          VADD.F32 s0,s1,s0              ;235
00013a  ed820a01          VSTR     s0,[r2,#4]            ;238
00013e  ed821a02          VSTR     s2,[r2,#8]            ;239
000142  edc21a03          VSTR     s3,[r2,#0xc]
                  |L2.326|
000146  428b              CMP      r3,r1                 ;229
000148  d3e2              BCC      |L2.272|
;;;241       }                             // groups loop end 
;;;242    
;;;243    #else
;;;244     
;;;245       n2 = fftLen;
;;;246    
;;;247       // loop for stage 
;;;248       for (k = fftLen; k > 1; k = k >> 1)
;;;249       {
;;;250          n1 = n2;
;;;251          n2 = n2 >> 1;
;;;252          ia = 0;
;;;253    
;;;254          // loop for groups 
;;;255          j = 0;
;;;256          do
;;;257          {
;;;258             cosVal = pCoef[ia * 2];
;;;259             sinVal = pCoef[(ia * 2) + 1];
;;;260             ia += twidCoefModifier;
;;;261    
;;;262             // loop for butterfly 
;;;263             i = j;
;;;264             do
;;;265             {
;;;266                l = i + n2;
;;;267                a0 = pSrc[2 * i] + pSrc[2 * l];
;;;268                xt = pSrc[2 * i] - pSrc[2 * l];
;;;269    
;;;270                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
;;;271                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
;;;272                
;;;273                p0 = xt * cosVal;
;;;274                p1 = yt * sinVal;
;;;275                p2 = yt * cosVal;
;;;276                p3 = xt * sinVal;  
;;;277                
;;;278                pSrc[2 * i] = a0;   
;;;279                pSrc[2 * i + 1] = a1;       
;;;280                
;;;281                pSrc[2 * l]     = p0 + p1;
;;;282                pSrc[2 * l + 1] = p2 - p3;
;;;283                
;;;284                i += n1;
;;;285             } while(i < fftLen);
;;;286             j++;
;;;287          } while(j < n2);
;;;288          twidCoefModifier <<= 1u;
;;;289       }
;;;290    
;;;291    #endif //    #ifndef ARM_MATH_CM0_FAMILY
;;;292    
;;;293    }
00014a  e8bd8ff0          POP      {r4-r11,pc}
;;;294    
                          ENDP


                          AREA ||i.arm_radix2_butterfly_inverse_f32||, CODE, READONLY, ALIGN=2

                  arm_radix2_butterfly_inverse_f32 PROC
;;;295    
;;;296    void arm_radix2_butterfly_inverse_f32(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;297    float32_t * pSrc,
;;;298    uint32_t fftLen,
;;;299    float32_t * pCoef,
;;;300    uint16_t twidCoefModifier,
;;;301    float32_t onebyfftLen)
;;;302    {
000004  4692              MOV      r10,r2
;;;303    
;;;304       uint32_t i, j, k, l;
;;;305       uint32_t n1, n2, ia;
;;;306       float32_t xt, yt, cosVal, sinVal;
;;;307       float32_t p0, p1, p2, p3;
;;;308       float32_t a0, a1;
;;;309    
;;;310    #ifndef ARM_MATH_CM0_FAMILY
;;;311    
;;;312       n2 = fftLen >> 1;
000006  084a              LSRS     r2,r1,#1
;;;313       ia = 0;
000008  2700              MOVS     r7,#0
;;;314    
;;;315       // loop for groups 
;;;316       for (i = 0; i < n2; i++)
00000a  463c              MOV      r4,r7
00000c  e02d              B        |L3.106|
;;;317       {
;;;318          cosVal = pCoef[ia * 2];
00000e  bf00              NOP      
                  |L3.16|
000010  eb0a05c7          ADD      r5,r10,r7,LSL #3
;;;319          sinVal = pCoef[(ia * 2) + 1];
;;;320          ia += twidCoefModifier;
;;;321    
;;;322          l = i + n2;
;;;323          a0 = pSrc[2 * i] + pSrc[2 * l];
000014  eb0006c4          ADD      r6,r0,r4,LSL #3
000018  ecd50a02          VLDM     r5,{s1-s2}            ;318
00001c  18a5              ADDS     r5,r4,r2              ;322
00001e  eb0005c5          ADD      r5,r0,r5,LSL #3
000022  ed962a00          VLDR     s4,[r6,#0]
000026  edd51a00          VLDR     s3,[r5,#0]
;;;324          xt = pSrc[2 * i] - pSrc[2 * l];
;;;325    
;;;326          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
00002a  edd63a01          VLDR     s7,[r6,#4]
00002e  edd52a01          VLDR     s5,[r5,#4]
000032  ee323a21          VADD.F32 s6,s4,s3              ;323
000036  ee721a61          VSUB.F32 s3,s4,s3              ;324
00003a  ee332ae2          VSUB.F32 s4,s7,s5
;;;327          a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
00003e  ee723aa3          VADD.F32 s7,s5,s7
000042  441f              ADD      r7,r7,r3              ;320
;;;328          
;;;329          p0 = xt * cosVal;
000044  ee612aa0          VMUL.F32 s5,s3,s1
;;;330          p1 = yt * sinVal;
000048  ee224a01          VMUL.F32 s8,s4,s2
;;;331          p2 = yt * cosVal;
00004c  ee620a20          VMUL.F32 s1,s4,s1
;;;332          p3 = xt * sinVal;  
000050  ee211a81          VMUL.F32 s2,s3,s2
000054  ec863a02          VSTM     r6,{s6-s7}
;;;333          
;;;334          pSrc[2 * i] = a0;   
;;;335          pSrc[2 * i + 1] = a1;       
;;;336          
;;;337          pSrc[2 * l]     = p0 - p1;
000058  ee721ac4          VSUB.F32 s3,s5,s8
;;;338          pSrc[2 * l + 1] = p2 + p3;  
00005c  1c64              ADDS     r4,r4,#1
00005e  ee700a81          VADD.F32 s1,s1,s2
000062  edc51a00          VSTR     s3,[r5,#0]            ;337
000066  edc50a01          VSTR     s1,[r5,#4]
                  |L3.106|
00006a  4615              MOV      r5,r2                 ;316
00006c  4294              CMP      r4,r2                 ;316
00006e  d3cf              BCC      |L3.16|
;;;339       }                             // groups loop end 
;;;340    
;;;341       twidCoefModifier <<= 1u;
000070  f64f7bff          MOV      r11,#0xffff
000074  ea0b0743          AND      r7,r11,r3,LSL #1
000078  46a8              MOV      r8,r5
;;;342    
;;;343       // loop for stage 
;;;344       for (k = fftLen / 2; k > 2; k = k >> 1)
00007a  e03f              B        |L3.252|
                  |L3.124|
;;;345       {
;;;346          n1 = n2;
00007c  4691              MOV      r9,r2
;;;347          n2 = n2 >> 1;
00007e  0852              LSRS     r2,r2,#1
;;;348          ia = 0;
000080  2600              MOVS     r6,#0
;;;349    
;;;350          // loop for groups 
;;;351          j = 0;
000082  4634              MOV      r4,r6
                  |L3.132|
;;;352          do
;;;353          {
;;;354             cosVal = pCoef[ia * 2];
000084  eb0a03c6          ADD      r3,r10,r6,LSL #3
;;;355             sinVal = pCoef[(ia * 2) + 1];
;;;356             ia += twidCoefModifier;
000088  443e              ADD      r6,r6,r7
00008a  ed933a00          VLDR     s6,[r3,#0]            ;354
00008e  ed931a01          VLDR     s2,[r3,#4]            ;355
;;;357    
;;;358             // loop for butterfly 
;;;359             i = j;
000092  4623              MOV      r3,r4
                  |L3.148|
;;;360             do
;;;361             {
;;;362                l = i + n2;
000094  eb030c02          ADD      r12,r3,r2
;;;363                a0 = pSrc[2 * i] + pSrc[2 * l];
000098  eb0005c3          ADD      r5,r0,r3,LSL #3
00009c  eb000ccc          ADD      r12,r0,r12,LSL #3
0000a0  edd51a00          VLDR     s3,[r5,#0]
0000a4  eddc0a00          VLDR     s1,[r12,#0]
;;;364                xt = pSrc[2 * i] - pSrc[2 * l];
;;;365    
;;;366                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000a8  ed952a01          VLDR     s4,[r5,#4]
0000ac  eddc2a01          VLDR     s5,[r12,#4]
0000b0  ee713aa0          VADD.F32 s7,s3,s1              ;363
0000b4  ee710ae0          VSUB.F32 s1,s3,s1              ;364
0000b8  ee721a62          VSUB.F32 s3,s4,s5
;;;367                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
0000bc  ee322a82          VADD.F32 s4,s5,s4
;;;368                
;;;369                p0 = xt * cosVal;
;;;370                p1 = yt * sinVal;
;;;371                p2 = yt * cosVal;
;;;372                p3 = xt * sinVal;  
;;;373                
;;;374                pSrc[2 * i] = a0;   
0000c0  edc53a00          VSTR     s7,[r5,#0]
0000c4  ee602a83          VMUL.F32 s5,s1,s6              ;369
0000c8  ee214a81          VMUL.F32 s8,s3,s2              ;370
0000cc  ee611a83          VMUL.F32 s3,s3,s6              ;371
0000d0  ee600a81          VMUL.F32 s1,s1,s2              ;372
;;;375                pSrc[2 * i + 1] = a1;       
0000d4  ed852a01          VSTR     s4,[r5,#4]
;;;376                
;;;377                pSrc[2 * l]     = p0 - p1;
0000d8  ee322ac4          VSUB.F32 s4,s5,s8
;;;378                pSrc[2 * l + 1] = p2 + p3; 
;;;379    
;;;380                i += n1;
0000dc  444b              ADD      r3,r3,r9
0000de  ee710aa0          VADD.F32 s1,s3,s1              ;378
0000e2  ed8c2a00          VSTR     s4,[r12,#0]           ;377
;;;381             } while( i < fftLen );                 // butterfly loop end 
0000e6  428b              CMP      r3,r1
0000e8  edcc0a01          VSTR     s1,[r12,#4]           ;378
0000ec  d3d2              BCC      |L3.148|
0000ee  1c64              ADDS     r4,r4,#1
;;;382             j++;
;;;383          } while(j < n2);                      // groups loop end 
0000f0  4294              CMP      r4,r2
0000f2  d3c7              BCC      |L3.132|
;;;384    
;;;385          twidCoefModifier <<= 1u;
0000f4  ea0b0747          AND      r7,r11,r7,LSL #1
0000f8  ea4f0858          LSR      r8,r8,#1              ;344
                  |L3.252|
0000fc  f1b80f02          CMP      r8,#2                 ;344
000100  d8bc              BHI      |L3.124|
;;;386       }                             // stages loop end 
;;;387    
;;;388       // loop for butterfly 
;;;389       for (i = 0; i < fftLen; i += 2)
000102  2300              MOVS     r3,#0
000104  e023              B        |L3.334|
;;;390       {   
;;;391          a0 = pSrc[2 * i] + pSrc[2 * i + 2];
000106  bf00              NOP      
                  |L3.264|
000108  eb0002c3          ADD      r2,r0,r3,LSL #3
;;;392          xt = pSrc[2 * i] - pSrc[2 * i + 2];
;;;393          
;;;394          a1 = pSrc[2 * i + 3] + pSrc[2 * i + 1];
;;;395          yt = pSrc[2 * i + 1] - pSrc[2 * i + 3];
;;;396          
;;;397          p0 = a0 * onebyfftLen;
;;;398          p2 = xt * onebyfftLen;
;;;399          p1 = a1 * onebyfftLen;
;;;400          p3 = yt * onebyfftLen; 
;;;401          
;;;402          pSrc[2 * i] = p0;
;;;403          pSrc[2 * i + 1] = p1;  
;;;404          pSrc[2 * i + 2] = p2;       
;;;405          pSrc[2 * i + 3] = p3;
00010c  1c9b              ADDS     r3,r3,#2
00010e  edd21a00          VLDR     s3,[r2,#0]            ;391
000112  ed921a02          VLDR     s2,[r2,#8]            ;391
000116  edd22a03          VLDR     s5,[r2,#0xc]          ;394
00011a  ee710a81          VADD.F32 s1,s3,s2              ;391
00011e  ee711ac1          VSUB.F32 s3,s3,s2              ;392
000122  ed921a01          VLDR     s2,[r2,#4]            ;394
000126  ee600a80          VMUL.F32 s1,s1,s0              ;397
00012a  ee322a81          VADD.F32 s4,s5,s2              ;394
00012e  ee311a62          VSUB.F32 s2,s2,s5              ;395
000132  ee611a80          VMUL.F32 s3,s3,s0              ;398
000136  edc20a00          VSTR     s1,[r2,#0]            ;402
00013a  ee222a00          VMUL.F32 s4,s4,s0              ;399
00013e  ee211a00          VMUL.F32 s2,s2,s0              ;400
000142  ed822a01          VSTR     s4,[r2,#4]            ;403
000146  edc21a02          VSTR     s3,[r2,#8]            ;404
00014a  ed821a03          VSTR     s2,[r2,#0xc]
                  |L3.334|
00014e  428b              CMP      r3,r1                 ;389
000150  d3da              BCC      |L3.264|
;;;406       }                             // butterfly loop end 
;;;407    
;;;408    #else
;;;409    
;;;410       n2 = fftLen;
;;;411    
;;;412       // loop for stage 
;;;413       for (k = fftLen; k > 2; k = k >> 1)
;;;414       {
;;;415          n1 = n2;
;;;416          n2 = n2 >> 1;
;;;417          ia = 0;
;;;418    
;;;419          // loop for groups 
;;;420          j = 0;
;;;421          do
;;;422          {
;;;423             cosVal = pCoef[ia * 2];
;;;424             sinVal = pCoef[(ia * 2) + 1];
;;;425             ia = ia + twidCoefModifier;
;;;426    
;;;427             // loop for butterfly 
;;;428             i = j;
;;;429             do
;;;430             {
;;;431                l = i + n2;
;;;432                a0 = pSrc[2 * i] + pSrc[2 * l];
;;;433                xt = pSrc[2 * i] - pSrc[2 * l];
;;;434    
;;;435                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
;;;436                a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
;;;437                
;;;438                p0 = xt * cosVal;
;;;439                p1 = yt * sinVal;
;;;440                p2 = yt * cosVal;
;;;441                p3 = xt * sinVal;  
;;;442                
;;;443                pSrc[2 * i] = a0;   
;;;444                pSrc[2 * i + 1] = a1;       
;;;445                
;;;446                pSrc[2 * l]     = p0 - p1;
;;;447                pSrc[2 * l + 1] = p2 + p3;  
;;;448                
;;;449                i += n1;
;;;450             } while( i < fftLen );                    // butterfly loop end 
;;;451             j++;
;;;452          } while( j < n2 );                      // groups loop end 
;;;453    
;;;454          twidCoefModifier = twidCoefModifier << 1u;
;;;455       }                             // stages loop end 
;;;456    
;;;457       n1 = n2;
;;;458       n2 = n2 >> 1;
;;;459    
;;;460       // loop for butterfly 
;;;461       for (i = 0; i < fftLen; i += n1)
;;;462       {
;;;463          l = i + n2;
;;;464          
;;;465          a0 = pSrc[2 * i] + pSrc[2 * l];
;;;466          xt = pSrc[2 * i] - pSrc[2 * l];
;;;467          
;;;468          a1 = pSrc[2 * l + 1] + pSrc[2 * i + 1];
;;;469          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
;;;470          
;;;471          p0 = a0 * onebyfftLen;
;;;472          p2 = xt * onebyfftLen;
;;;473          p1 = a1 * onebyfftLen;
;;;474          p3 = yt * onebyfftLen; 
;;;475          
;;;476          pSrc[2 * i] = p0;
;;;477          pSrc[2u * l] = p2;
;;;478         
;;;479          pSrc[2 * i + 1] = p1;    
;;;480          pSrc[2u * l + 1u] = p3;
;;;481       }                             // butterfly loop end 
;;;482    
;;;483    #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;484    
;;;485    }
000152  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix2_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_f32_c_e44195c4____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix2_f32_c_e44195c4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_f32_c_e44195c4____REVSH|
#line 144
|__asm___21_arm_cfft_radix2_f32_c_e44195c4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_f32_c_e44195c4____RRX|
#line 300
|__asm___21_arm_cfft_radix2_f32_c_e44195c4____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
