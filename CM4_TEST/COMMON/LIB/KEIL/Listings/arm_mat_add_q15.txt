; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_add_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_add_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_mat_add_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_add_q15.c]
                          THUMB

                          AREA ||i.arm_mat_add_q15||, CODE, READONLY, ALIGN=1

                  arm_mat_add_q15 PROC
;;;65     
;;;66     arm_status arm_mat_add_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;67       const arm_matrix_instance_q15 * pSrcA,
;;;68       const arm_matrix_instance_q15 * pSrcB,
;;;69       arm_matrix_instance_q15 * pDst)
;;;70     {
;;;71       q15_t *pInA = pSrcA->pData;                    /* input data matrix pointer A  */
;;;72       q15_t *pInB = pSrcB->pData;                    /* input data matrix pointer B */
000002  6843              LDR      r3,[r0,#4]
;;;73       q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
;;;74       uint16_t numSamples;                           /* total number of elements in the matrix  */
;;;75       uint32_t blkCnt;                               /* loop counters  */
;;;76       arm_status status;                             /* status of matrix addition  */
;;;77     
;;;78     #ifdef ARM_MATH_MATRIX_CHECK
;;;79     
;;;80     
;;;81       /* Check for matrix mismatch condition */
;;;82       if((pSrcA->numRows != pSrcB->numRows) ||
;;;83          (pSrcA->numCols != pSrcB->numCols) ||
;;;84          (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
;;;85       {
;;;86         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;87         status = ARM_MATH_SIZE_MISMATCH;
;;;88       }
;;;89       else
;;;90     #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
;;;91     
;;;92       {
;;;93         /* Total number of samples in the input matrix */
;;;94         numSamples = (uint16_t) (pSrcA->numRows * pSrcA->numCols);
000004  8804              LDRH     r4,[r0,#0]
000006  8840              LDRH     r0,[r0,#2]
000008  6849              LDR      r1,[r1,#4]            ;72
00000a  4344              MULS     r4,r0,r4
00000c  b2a4              UXTH     r4,r4
00000e  6852              LDR      r2,[r2,#4]            ;73
;;;95     
;;;96     #ifndef ARM_MATH_CM0_FAMILY
;;;97     
;;;98         /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;99     
;;;100        /* Loop unrolling */
;;;101        blkCnt = (uint32_t) numSamples >> 2u;
000010  08a0              LSRS     r0,r4,#2
000012  e010              B        |L1.54|
                  |L1.20|
;;;102    
;;;103        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;104         ** a second loop below computes the remaining 1 to 3 samples. */
;;;105        while(blkCnt > 0u)
;;;106        {
;;;107          /* C(m,n) = A(m,n) + B(m,n) */
;;;108          /* Add, Saturate and then store the results in the destination buffer. */
;;;109          *__SIMD32(pOut)++ = __QADD16(*__SIMD32(pInA)++, *__SIMD32(pInB)++);
000014  f8535b04          LDR      r5,[r3],#4
000018  f8516b04          LDR      r6,[r1],#4
00001c  fa95f516          QADD16   r5,r5,r6
000020  f8425b04          STR      r5,[r2],#4
;;;110          *__SIMD32(pOut)++ = __QADD16(*__SIMD32(pInA)++, *__SIMD32(pInB)++);
000024  f8535b04          LDR      r5,[r3],#4
000028  f8516b04          LDR      r6,[r1],#4
00002c  fa95f516          QADD16   r5,r5,r6
000030  f8425b04          STR      r5,[r2],#4
000034  1e40              SUBS     r0,r0,#1
                  |L1.54|
000036  2800              CMP      r0,#0                 ;105
000038  d1ec              BNE      |L1.20|
;;;111    
;;;112          /* Decrement the loop counter */
;;;113          blkCnt--;
;;;114        }
;;;115    
;;;116        /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;117         ** No loop unrolling is used. */
;;;118        blkCnt = (uint32_t) numSamples % 0x4u;
00003a  f0040003          AND      r0,r4,#3
;;;119    
;;;120        /* q15 pointers of input and output are initialized */
;;;121    
;;;122        while(blkCnt > 0u)
00003e  e008              B        |L1.82|
                  |L1.64|
;;;123        {
;;;124          /* C(m,n) = A(m,n) + B(m,n) */
;;;125          /* Add, Saturate and then store the results in the destination buffer. */
;;;126          *pOut++ = (q15_t) __QADD16(*pInA++, *pInB++);
000040  f9334b02          LDRSH    r4,[r3],#2
000044  f9315b02          LDRSH    r5,[r1],#2
000048  fa94f415          QADD16   r4,r4,r5
00004c  f8224b02          STRH     r4,[r2],#2
000050  1e40              SUBS     r0,r0,#1
                  |L1.82|
000052  2800              CMP      r0,#0                 ;122
000054  d1f4              BNE      |L1.64|
;;;127    
;;;128          /* Decrement the loop counter */
;;;129          blkCnt--;
;;;130        }
;;;131    
;;;132    #else
;;;133    
;;;134        /* Run the below code for Cortex-M0 */
;;;135    
;;;136        /* Initialize blkCnt with number of samples */
;;;137        blkCnt = (uint32_t) numSamples;
;;;138    
;;;139    
;;;140        /* q15 pointers of input and output are initialized */
;;;141        while(blkCnt > 0u)
;;;142        {
;;;143          /* C(m,n) = A(m,n) + B(m,n) */
;;;144          /* Add, Saturate and then store the results in the destination buffer. */
;;;145          *pOut++ = (q15_t) __SSAT(((q31_t) * pInA++ + *pInB++), 16);
;;;146    
;;;147          /* Decrement the loop counter */
;;;148          blkCnt--;
;;;149        }
;;;150    
;;;151    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;152    
;;;153        /* set status as ARM_MATH_SUCCESS */
;;;154        status = ARM_MATH_SUCCESS;
;;;155      }
;;;156    
;;;157      /* Return to application */
;;;158      return (status);
;;;159    }
000056  bd70              POP      {r4-r6,pc}
;;;160    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_add_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_q15_c_20ae5709____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_mat_add_q15_c_20ae5709____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_q15_c_20ae5709____REVSH|
#line 144
|__asm___17_arm_mat_add_q15_c_20ae5709____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_q15_c_20ae5709____RRX|
#line 300
|__asm___17_arm_mat_add_q15_c_20ae5709____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
