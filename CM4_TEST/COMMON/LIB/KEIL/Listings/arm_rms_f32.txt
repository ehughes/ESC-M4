; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_rms_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rms_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_rms_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_rms_f32.c]
                          THUMB

                          AREA ||i.arm_rms_f32||, CODE, READONLY, ALIGN=2

                  arm_rms_f32 PROC
;;;75     
;;;76     void arm_rms_f32(
000000  eddf0a1b          VLDR     s1,|L1.112|
;;;77       float32_t * pSrc,
;;;78       uint32_t blockSize,
;;;79       float32_t * pResult)
;;;80     {
;;;81       float32_t sum = 0.0f;                          /* Accumulator */
;;;82       float32_t in;                                  /* Tempoprary variable to store input value */
;;;83       uint32_t blkCnt;                               /* loop counter */
;;;84     
;;;85     #ifndef ARM_MATH_CM0_FAMILY
;;;86     
;;;87       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;88     
;;;89       /* loop Unrolling */
;;;90       blkCnt = blockSize >> 2u;
000004  088b              LSRS     r3,r1,#2
000006  eeb00a60          VMOV.F32 s0,s1                 ;81
00000a  e011              B        |L1.48|
                  |L1.12|
;;;91     
;;;92       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;93        ** a second loop below computes the remaining 1 to 3 samples. */
;;;94       while(blkCnt > 0u)
;;;95       {
;;;96         /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;97         /* Compute sum of the squares and then store the result in a temporary variable, sum  */
;;;98         in = *pSrc++;
00000c  ed901a00          VLDR     s2,[r0,#0]
;;;99         sum += in * in;
000010  ee010a01          VMLA.F32 s0,s2,s2
;;;100        in = *pSrc++;
000014  ed901a01          VLDR     s2,[r0,#4]
;;;101        sum += in * in;
000018  ee010a01          VMLA.F32 s0,s2,s2
;;;102        in = *pSrc++;
00001c  ed901a02          VLDR     s2,[r0,#8]
;;;103        sum += in * in;
000020  ee010a01          VMLA.F32 s0,s2,s2
;;;104        in = *pSrc++;
000024  ed901a03          VLDR     s2,[r0,#0xc]
;;;105        sum += in * in;
000028  3010              ADDS     r0,r0,#0x10
00002a  1e5b              SUBS     r3,r3,#1
00002c  ee010a01          VMLA.F32 s0,s2,s2
                  |L1.48|
000030  2b00              CMP      r3,#0                 ;94
000032  d1eb              BNE      |L1.12|
;;;106    
;;;107        /* Decrement the loop counter */
;;;108        blkCnt--;
;;;109      }
;;;110    
;;;111      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;112       ** No loop unrolling is used. */
;;;113      blkCnt = blockSize % 0x4u;
000034  f0010303          AND      r3,r1,#3
;;;114    
;;;115    #else
;;;116    
;;;117      /* Run the below code for Cortex-M0 */
;;;118    
;;;119      /* Loop over blockSize number of values */
;;;120      blkCnt = blockSize;
;;;121    
;;;122    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;123    
;;;124      while(blkCnt > 0u)
000038  e005              B        |L1.70|
;;;125      {
;;;126        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;127        /* Compute sum of the squares and then store the results in a temporary variable, sum  */
;;;128        in = *pSrc++;
00003a  bf00              NOP      
                  |L1.60|
00003c  ecb01a01          VLDM     r0!,{s2}
;;;129        sum += in * in;
000040  1e5b              SUBS     r3,r3,#1
000042  ee010a01          VMLA.F32 s0,s2,s2
                  |L1.70|
000046  2b00              CMP      r3,#0                 ;124
000048  d1f8              BNE      |L1.60|
;;;130    
;;;131        /* Decrement the loop counter */
;;;132        blkCnt--;
;;;133      }
;;;134    
;;;135      /* Compute Rms and store the result in the destination */
;;;136      arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
00004a  ee011a10          VMOV     s2,r1
00004e  eef81a41          VCVT.F32.U32 s3,s2
000052  ee801a21          VDIV.F32 s2,s0,s3
000056  eeb51ac0          VCMPE.F32 s2,#0.0
00005a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00005e  dd04              BLE      |L1.106|
000060  eeb10ac1          VSQRT.F32 s0,s2
000064  ed820a00          VSTR     s0,[r2,#0]
;;;137    }
000068  4770              BX       lr
                  |L1.106|
00006a  edc20a00          VSTR     s1,[r2,#0]
00006e  4770              BX       lr
;;;138    
                          ENDP

                  |L1.112|
000070  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_rms_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_f32_c_bb2cf167____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_rms_f32_c_bb2cf167____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_f32_c_bb2cf167____REVSH|
#line 144
|__asm___13_arm_rms_f32_c_bb2cf167____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_f32_c_bb2cf167____RRX|
#line 300
|__asm___13_arm_rms_f32_c_bb2cf167____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
