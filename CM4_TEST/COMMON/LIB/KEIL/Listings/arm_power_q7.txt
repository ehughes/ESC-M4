; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_power_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_power_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_power_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_power_q7.c]
                          THUMB

                          AREA ||i.arm_power_q7||, CODE, READONLY, ALIGN=1

                  arm_power_q7 PROC
;;;72     
;;;73     void arm_power_q7(
000000  b570              PUSH     {r4-r6,lr}
;;;74       q7_t * pSrc,
;;;75       uint32_t blockSize,
;;;76       q31_t * pResult)
;;;77     {
;;;78       q31_t sum = 0;                                 /* Temporary result storage */
000002  2300              MOVS     r3,#0
;;;79       q7_t in;                                       /* Temporary variable to store input */
;;;80       uint32_t blkCnt;                               /* loop counter */
;;;81     
;;;82     #ifndef ARM_MATH_CM0_FAMILY
;;;83     
;;;84       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;85     
;;;86       q31_t input1;                                  /* Temporary variable to store packed input */
;;;87       q31_t in1, in2;                                /* Temporary variables to store input */
;;;88     
;;;89       /*loop Unrolling */
;;;90       blkCnt = blockSize >> 2u;
000004  088c              LSRS     r4,r1,#2
000006  e00a              B        |L1.30|
                  |L1.8|
;;;91     
;;;92       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;93        ** a second loop below computes the remaining 1 to 3 samples. */
;;;94       while(blkCnt > 0u)
;;;95       {
;;;96         /* Reading two inputs of pSrc vector and packing */
;;;97         input1 = *__SIMD32(pSrc)++;
000008  f8506b04          LDR      r6,[r0],#4
;;;98     
;;;99         in1 = __SXTB16(__ROR(input1, 8));
00000c  fa2ff596          SXTB16   r5,r6,ROR #8
;;;100        in2 = __SXTB16(input1);
000010  fa2ff686          SXTB16   r6,r6
;;;101    
;;;102        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;103        /* calculate power and accumulate to accumulator */
;;;104        sum = __SMLAD(in1, in1, sum);
000014  fb253305          SMLAD    r3,r5,r5,r3
;;;105        sum = __SMLAD(in2, in2, sum);
000018  fb263306          SMLAD    r3,r6,r6,r3
;;;106    
;;;107        /* Decrement the loop counter */
;;;108        blkCnt--;
00001c  1e64              SUBS     r4,r4,#1
                  |L1.30|
00001e  2c00              CMP      r4,#0                 ;94
000020  d1f2              BNE      |L1.8|
;;;109      }
;;;110    
;;;111      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;112       ** No loop unrolling is used. */
;;;113      blkCnt = blockSize % 0x4u;
000022  f0010103          AND      r1,r1,#3
;;;114    
;;;115    #else
;;;116    
;;;117      /* Run the below code for Cortex-M0 */
;;;118    
;;;119      /* Loop over blockSize number of values */
;;;120      blkCnt = blockSize;
;;;121    
;;;122    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;123    
;;;124      while(blkCnt > 0u)
000026  e004              B        |L1.50|
                  |L1.40|
;;;125      {
;;;126        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;127        /* Compute Power and then store the result in a temporary variable, sum. */
;;;128        in = *pSrc++;
000028  f9104b01          LDRSB    r4,[r0],#1
;;;129        sum += ((q15_t) in * in);
00002c  fb143304          SMLABB   r3,r4,r4,r3
;;;130    
;;;131        /* Decrement the loop counter */
;;;132        blkCnt--;
000030  1e49              SUBS     r1,r1,#1
                  |L1.50|
000032  2900              CMP      r1,#0                 ;124
000034  d1f8              BNE      |L1.40|
;;;133      }
;;;134    
;;;135      /* Store the result in 18.14 format  */
;;;136      *pResult = sum;
000036  6013              STR      r3,[r2,#0]
;;;137    }
000038  bd70              POP      {r4-r6,pc}
;;;138    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_power_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_power_q7_c_598a88a7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_power_q7_c_598a88a7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_power_q7_c_598a88a7____REVSH|
#line 144
|__asm___14_arm_power_q7_c_598a88a7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_power_q7_c_598a88a7____RRX|
#line 300
|__asm___14_arm_power_q7_c_598a88a7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
