; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_shift_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_shift_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_shift_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_shift_q15.c]
                          THUMB

                          AREA ||i.arm_shift_q15||, CODE, READONLY, ALIGN=1

                  arm_shift_q15 PROC
;;;65     
;;;66     void arm_shift_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q15_t * pSrc,
;;;68       int8_t shiftBits,
;;;69       q15_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73       uint8_t sign;                                  /* Sign of shiftBits */
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78     
;;;79       q15_t in1, in2;                                /* Temporary variables */
;;;80     
;;;81     
;;;82       /*loop Unrolling */
;;;83       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
;;;84     
;;;85       /* Getting the sign of shiftBits */
;;;86       sign = (shiftBits & 0x80);
000004  f0010580          AND      r5,r1,#0x80
;;;87     
;;;88       /* If the shift value is positive then do right shift else left shift */
;;;89       if(sign == 0u)
;;;90       {
;;;91         /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;92          ** a second loop below computes the remaining 1 to 3 samples. */
;;;93         while(blkCnt > 0u)
;;;94         {
;;;95           /* Read 2 inputs */
;;;96           in1 = *pSrc++;
;;;97           in2 = *pSrc++;
;;;98           /* C = A << shiftBits */
;;;99           /* Shift the inputs and then store the results in the destination buffer. */
;;;100    #ifndef  ARM_MATH_BIG_ENDIAN
;;;101    
;;;102          *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
;;;103                                      __SSAT((in2 << shiftBits), 16), 16);
;;;104    
;;;105    #else
;;;106    
;;;107          *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
;;;108                                      __SSAT((in1 << shiftBits), 16), 16);
;;;109    
;;;110    #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;111    
;;;112          in1 = *pSrc++;
;;;113          in2 = *pSrc++;
;;;114    
;;;115    #ifndef  ARM_MATH_BIG_ENDIAN
;;;116    
;;;117          *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
;;;118                                      __SSAT((in2 << shiftBits), 16), 16);
;;;119    
;;;120    #else
;;;121    
;;;122          *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
;;;123                                      __SSAT((in1 << shiftBits), 16), 16);
;;;124    
;;;125    #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;126    
;;;127          /* Decrement the loop counter */
;;;128          blkCnt--;
;;;129        }
;;;130    
;;;131        /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;132         ** No loop unrolling is used. */
;;;133        blkCnt = blockSize % 0x4u;
000008  f0030303          AND      r3,r3,#3
00000c  2d00              CMP      r5,#0                 ;89
00000e  d01e              BEQ      |L1.78|
;;;134    
;;;135        while(blkCnt > 0u)
;;;136        {
;;;137          /* C = A << shiftBits */
;;;138          /* Shift and then store the results in the destination buffer. */
;;;139          *pDst++ = __SSAT((*pSrc++ << shiftBits), 16);
;;;140    
;;;141          /* Decrement the loop counter */
;;;142          blkCnt--;
;;;143        }
;;;144      }
;;;145      else
;;;146      {
;;;147        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;148         ** a second loop below computes the remaining 1 to 3 samples. */
;;;149        while(blkCnt > 0u)
;;;150        {
;;;151          /* Read 2 inputs */
;;;152          in1 = *pSrc++;
;;;153          in2 = *pSrc++;
;;;154    
;;;155          /* C = A >> shiftBits */
;;;156          /* Shift the inputs and then store the results in the destination buffer. */
;;;157    #ifndef  ARM_MATH_BIG_ENDIAN
;;;158    
;;;159          *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
000010  4249              RSBS     r1,r1,#0
000012  e03f              B        |L1.148|
                  |L1.20|
000014  f9b05000          LDRSH    r5,[r0,#0]            ;96
000018  f9b06002          LDRSH    r6,[r0,#2]            ;97
00001c  408d              LSLS     r5,r5,r1              ;102
00001e  408e              LSLS     r6,r6,r1              ;102
000020  f305050f          SSAT     r5,#16,r5             ;102
000024  f306060f          SSAT     r6,#16,r6             ;102
000028  eac54506          PKHBT    r5,r5,r6,LSL #16      ;102
00002c  6015              STR      r5,[r2,#0]            ;102
00002e  f9b05004          LDRSH    r5,[r0,#4]            ;112
000032  f9b06006          LDRSH    r6,[r0,#6]            ;113
000036  3008              ADDS     r0,r0,#8              ;113
000038  408d              LSLS     r5,r5,r1              ;117
00003a  408e              LSLS     r6,r6,r1              ;117
00003c  f305050f          SSAT     r5,#16,r5             ;117
000040  f306060f          SSAT     r6,#16,r6             ;117
000044  eac54506          PKHBT    r5,r5,r6,LSL #16      ;117
000048  6055              STR      r5,[r2,#4]            ;117
00004a  3208              ADDS     r2,r2,#8              ;117
00004c  1e64              SUBS     r4,r4,#1              ;128
                  |L1.78|
00004e  2c00              CMP      r4,#0                 ;93
000050  d1e0              BNE      |L1.20|
000052  e007              B        |L1.100|
                  |L1.84|
000054  f9304b02          LDRSH    r4,[r0],#2            ;139
000058  408c              LSLS     r4,r4,r1              ;139
00005a  f304040f          SSAT     r4,#16,r4             ;139
00005e  f8224b02          STRH     r4,[r2],#2            ;139
000062  1e5b              SUBS     r3,r3,#1              ;142
                  |L1.100|
000064  2b00              CMP      r3,#0                 ;135
000066  d1f5              BNE      |L1.84|
;;;160                                      (in2 >> -shiftBits), 16);
;;;161    
;;;162    #else
;;;163    
;;;164          *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
;;;165                                      (in1 >> -shiftBits), 16);
;;;166    
;;;167    #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;168    
;;;169          in1 = *pSrc++;
;;;170          in2 = *pSrc++;
;;;171    
;;;172    #ifndef  ARM_MATH_BIG_ENDIAN
;;;173    
;;;174          *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
;;;175                                      (in2 >> -shiftBits), 16);
;;;176    
;;;177    #else
;;;178    
;;;179          *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
;;;180                                      (in1 >> -shiftBits), 16);
;;;181    
;;;182    #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;183    
;;;184          /* Decrement the loop counter */
;;;185          blkCnt--;
;;;186        }
;;;187    
;;;188        /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;189         ** No loop unrolling is used. */
;;;190        blkCnt = blockSize % 0x4u;
;;;191    
;;;192        while(blkCnt > 0u)
;;;193        {
;;;194          /* C = A >> shiftBits */
;;;195          /* Shift the inputs and then store the results in the destination buffer. */
;;;196          *pDst++ = (*pSrc++ >> -shiftBits);
;;;197    
;;;198          /* Decrement the loop counter */
;;;199          blkCnt--;
;;;200        }
;;;201      }
;;;202    
;;;203    #else
;;;204    
;;;205      /* Run the below code for Cortex-M0 */
;;;206    
;;;207      /* Getting the sign of shiftBits */
;;;208      sign = (shiftBits & 0x80);
;;;209    
;;;210      /* If the shift value is positive then do right shift else left shift */
;;;211      if(sign == 0u)
;;;212      {
;;;213        /* Initialize blkCnt with number of samples */
;;;214        blkCnt = blockSize;
;;;215    
;;;216        while(blkCnt > 0u)
;;;217        {
;;;218          /* C = A << shiftBits */
;;;219          /* Shift and then store the results in the destination buffer. */
;;;220          *pDst++ = __SSAT(((q31_t) * pSrc++ << shiftBits), 16);
;;;221    
;;;222          /* Decrement the loop counter */
;;;223          blkCnt--;
;;;224        }
;;;225      }
;;;226      else
;;;227      {
;;;228        /* Initialize blkCnt with number of samples */
;;;229        blkCnt = blockSize;
;;;230    
;;;231        while(blkCnt > 0u)
;;;232        {
;;;233          /* C = A >> shiftBits */
;;;234          /* Shift the inputs and then store the results in the destination buffer. */
;;;235          *pDst++ = (*pSrc++ >> -shiftBits);
;;;236    
;;;237          /* Decrement the loop counter */
;;;238          blkCnt--;
;;;239        }
;;;240      }
;;;241    
;;;242    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;243    
;;;244    }
000068  bd70              POP      {r4-r6,pc}
                  |L1.106|
00006a  f9b05000          LDRSH    r5,[r0,#0]            ;152
00006e  f9b06002          LDRSH    r6,[r0,#2]            ;153
000072  410d              ASRS     r5,r5,r1              ;159
000074  410e              ASRS     r6,r6,r1              ;159
000076  eac54506          PKHBT    r5,r5,r6,LSL #16      ;159
00007a  6015              STR      r5,[r2,#0]            ;159
00007c  f9b05004          LDRSH    r5,[r0,#4]            ;169
000080  f9b06006          LDRSH    r6,[r0,#6]            ;170
000084  3008              ADDS     r0,r0,#8              ;170
000086  410d              ASRS     r5,r5,r1              ;174
000088  410e              ASRS     r6,r6,r1              ;174
00008a  eac54506          PKHBT    r5,r5,r6,LSL #16      ;174
00008e  6055              STR      r5,[r2,#4]            ;174
000090  3208              ADDS     r2,r2,#8              ;174
000092  1e64              SUBS     r4,r4,#1              ;185
                  |L1.148|
000094  2c00              CMP      r4,#0                 ;149
000096  d1e8              BNE      |L1.106|
000098  e005              B        |L1.166|
                  |L1.154|
00009a  f9304b02          LDRSH    r4,[r0],#2            ;196
00009e  410c              ASRS     r4,r4,r1              ;196
0000a0  f8224b02          STRH     r4,[r2],#2            ;196
0000a4  1e5b              SUBS     r3,r3,#1              ;199
                  |L1.166|
0000a6  2b00              CMP      r3,#0                 ;192
0000a8  d1f7              BNE      |L1.154|
0000aa  bd70              POP      {r4-r6,pc}
;;;245    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_shift_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_shift_q15_c_977d65aa____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_shift_q15_c_977d65aa____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_shift_q15_c_977d65aa____REVSH|
#line 144
|__asm___15_arm_shift_q15_c_977d65aa____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_shift_q15_c_977d65aa____RRX|
#line 300
|__asm___15_arm_shift_q15_c_977d65aa____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
