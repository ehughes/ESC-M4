; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_rms_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rms_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_rms_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_rms_q15.c]
                          THUMB

                          AREA ||i.arm_rms_q15||, CODE, READONLY, ALIGN=1

                  arm_rms_q15 PROC
;;;69     
;;;70     void arm_rms_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;71       q15_t * pSrc,
;;;72       uint32_t blockSize,
;;;73       q15_t * pResult)
;;;74     {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;75       q63_t sum = 0;                                 /* accumulator */
000008  2000              MOVS     r0,#0
00000a  4601              MOV      r1,r0
;;;76     
;;;77     #ifndef ARM_MATH_CM0_FAMILY
;;;78     
;;;79       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;80     
;;;81       q31_t in;                                      /* temporary variable to store the input value */
;;;82       q15_t in1;                                     /* temporary variable to store the input value */
;;;83       uint32_t blkCnt;                               /* loop counter */
;;;84     
;;;85       /* loop Unrolling */
;;;86       blkCnt = blockSize >> 2u;
00000c  08aa              LSRS     r2,r5,#2
00000e  e007              B        |L1.32|
                  |L1.16|
;;;87     
;;;88       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;89        ** a second loop below computes the remaining 1 to 3 samples. */
;;;90       while(blkCnt > 0u)
;;;91       {
;;;92         /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;93         /* Compute sum of the squares and then store the results in a temporary variable, sum */
;;;94         in = *__SIMD32(pSrc)++;
000010  681e              LDR      r6,[r3,#0]
;;;95         sum = __SMLALD(in, in, sum);
000012  fbc601c6          SMLALD   r0,r1,r6,r6
;;;96         in = *__SIMD32(pSrc)++;
000016  685e              LDR      r6,[r3,#4]
000018  3308              ADDS     r3,r3,#8
;;;97         sum = __SMLALD(in, in, sum);
00001a  fbc601c6          SMLALD   r0,r1,r6,r6
;;;98     
;;;99         /* Decrement the loop counter */
;;;100        blkCnt--;
00001e  1e52              SUBS     r2,r2,#1
                  |L1.32|
000020  2a00              CMP      r2,#0                 ;90
000022  d1f5              BNE      |L1.16|
;;;101      }
;;;102    
;;;103      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;104       ** No loop unrolling is used. */
;;;105      blkCnt = blockSize % 0x4u;
000024  f0050203          AND      r2,r5,#3
;;;106    
;;;107      while(blkCnt > 0u)
000028  e004              B        |L1.52|
                  |L1.42|
;;;108      {
;;;109        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;110        /* Compute sum of the squares and then store the results in a temporary variable, sum */
;;;111        in1 = *pSrc++;
00002a  f9336b02          LDRSH    r6,[r3],#2
;;;112        sum = __SMLALD(in1, in1, sum);
00002e  fbc601c6          SMLALD   r0,r1,r6,r6
;;;113    
;;;114        /* Decrement the loop counter */
;;;115        blkCnt--;
000032  1e52              SUBS     r2,r2,#1
                  |L1.52|
000034  2a00              CMP      r2,#0                 ;107
000036  d1f8              BNE      |L1.42|
;;;116      }
;;;117    
;;;118      /* Truncating and saturating the accumulator to 1.15 format */
;;;119      /* Store the result in the destination */
;;;120      arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);
000038  462a              MOV      r2,r5
00003a  2300              MOVS     r3,#0
00003c  f7fffffe          BL       __aeabi_ldivmod
000040  0bc0              LSRS     r0,r0,#15
000042  ea404041          ORR      r0,r0,r1,LSL #17
000046  4621              MOV      r1,r4
000048  e8bd4070          POP      {r4-r6,lr}
00004c  f300000f          SSAT     r0,#16,r0
000050  f7ffbffe          B.W      arm_sqrt_q15
;;;121    
;;;122    #else
;;;123    
;;;124      /* Run the below code for Cortex-M0 */
;;;125    
;;;126      q15_t in;                                      /* temporary variable to store the input value */
;;;127      uint32_t blkCnt;                               /* loop counter */
;;;128    
;;;129      /* Loop over blockSize number of values */
;;;130      blkCnt = blockSize;
;;;131    
;;;132      while(blkCnt > 0u)
;;;133      {
;;;134        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;135        /* Compute sum of the squares and then store the results in a temporary variable, sum */
;;;136        in = *pSrc++;
;;;137        sum += ((q31_t) in * in);
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
;;;141      }
;;;142    
;;;143      /* Truncating and saturating the accumulator to 1.15 format */
;;;144      /* Store the result in the destination */
;;;145      arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);
;;;146    
;;;147    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;148    
;;;149    }
;;;150    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_rms_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_q15_c_0e17b3b3____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_rms_q15_c_0e17b3b3____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_q15_c_0e17b3b3____REVSH|
#line 144
|__asm___13_arm_rms_q15_c_0e17b3b3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_q15_c_0e17b3b3____RRX|
#line 300
|__asm___13_arm_rms_q15_c_0e17b3b3____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
