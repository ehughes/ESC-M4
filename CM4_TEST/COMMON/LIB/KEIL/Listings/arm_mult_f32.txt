; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mult_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mult_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mult_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_mult_f32.c]
                          THUMB

                          AREA ||i.arm_mult_f32||, CODE, READONLY, ALIGN=1

                  arm_mult_f32 PROC
;;;72     
;;;73     void arm_mult_f32(
000000  b510              PUSH     {r4,lr}
;;;74       float32_t * pSrcA,
;;;75       float32_t * pSrcB,
;;;76       float32_t * pDst,
;;;77       uint32_t blockSize)
;;;78     {
;;;79       uint32_t blkCnt;                               /* loop counters */
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
;;;84       float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
;;;85       float32_t out1, out2, out3, out4;              /* temporary output variables */
;;;86     
;;;87       /* loop Unrolling */
;;;88       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e023              B        |L1.78|
                  |L1.6|
;;;89     
;;;90       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;91        ** a second loop below computes the remaining 1 to 3 samples. */
;;;92       while(blkCnt > 0u)
;;;93       {
;;;94         /* C = A * B */
;;;95         /* Multiply the inputs and store the results in output buffer */
;;;96         /* read sample from sourceA */
;;;97         inA1 = *pSrcA;
000006  ed900a00          VLDR     s0,[r0,#0]
;;;98         /* read sample from sourceB */
;;;99         inB1 = *pSrcB;
00000a  edd10a00          VLDR     s1,[r1,#0]
;;;100        /* read sample from sourceA */
;;;101        inA2 = *(pSrcA + 1);
00000e  edd01a01          VLDR     s3,[r0,#4]
;;;102        /* read sample from sourceB */
;;;103        inB2 = *(pSrcB + 1);
000012  ed912a01          VLDR     s4,[r1,#4]
;;;104    
;;;105        /* out = sourceA * sourceB */
;;;106        out1 = inA1 * inB1;
000016  ee201a20          VMUL.F32 s2,s0,s1
;;;107    
;;;108        /* read sample from sourceA */
;;;109        inA3 = *(pSrcA + 2);
00001a  ed900a02          VLDR     s0,[r0,#8]
;;;110        /* read sample from sourceB */
;;;111        inB3 = *(pSrcB + 2);
00001e  edd10a02          VLDR     s1,[r1,#8]
;;;112    
;;;113        /* out = sourceA * sourceB */
;;;114        out2 = inA2 * inB2;
000022  ee611a82          VMUL.F32 s3,s3,s4
;;;115    
;;;116        /* read sample from sourceA */
;;;117        inA4 = *(pSrcA + 3);
000026  ed902a03          VLDR     s4,[r0,#0xc]
;;;118    
;;;119        /* store result to destination buffer */
;;;120        *pDst = out1;
00002a  ed821a00          VSTR     s2,[r2,#0]
;;;121    
;;;122        /* read sample from sourceB */
;;;123        inB4 = *(pSrcB + 3);
00002e  ed911a03          VLDR     s2,[r1,#0xc]
;;;124    
;;;125        /* out = sourceA * sourceB */
;;;126        out3 = inA3 * inB3;
000032  ee200a20          VMUL.F32 s0,s0,s1
;;;127    
;;;128        /* store result to destination buffer */
;;;129        *(pDst + 1) = out2;
000036  edc21a01          VSTR     s3,[r2,#4]
;;;130    
;;;131        /* out = sourceA * sourceB */
;;;132        out4 = inA4 * inB4;
00003a  ee620a01          VMUL.F32 s1,s4,s2
;;;133        /* store result to destination buffer */
;;;134        *(pDst + 2) = out3;
00003e  ed820a02          VSTR     s0,[r2,#8]
;;;135        /* store result to destination buffer */
;;;136        *(pDst + 3) = out4;
000042  edc20a03          VSTR     s1,[r2,#0xc]
;;;137    
;;;138    
;;;139        /* update pointers to process next samples */
;;;140        pSrcA += 4u;
000046  3010              ADDS     r0,r0,#0x10
;;;141        pSrcB += 4u;
000048  3110              ADDS     r1,r1,#0x10
;;;142        pDst += 4u;
00004a  3210              ADDS     r2,r2,#0x10
;;;143    
;;;144        /* Decrement the blockSize loop counter */
;;;145        blkCnt--;
00004c  1e64              SUBS     r4,r4,#1
                  |L1.78|
00004e  2c00              CMP      r4,#0                 ;92
000050  d1d9              BNE      |L1.6|
;;;146      }
;;;147    
;;;148      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;149       ** No loop unrolling is used. */
;;;150      blkCnt = blockSize % 0x4u;
000052  f0030303          AND      r3,r3,#3
;;;151    
;;;152    #else
;;;153    
;;;154      /* Run the below code for Cortex-M0 */
;;;155    
;;;156      /* Initialize blkCnt with number of samples */
;;;157      blkCnt = blockSize;
;;;158    
;;;159    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;160    
;;;161      while(blkCnt > 0u)
000056  e008              B        |L1.106|
                  |L1.88|
;;;162      {
;;;163        /* C = A * B */
;;;164        /* Multiply the inputs and store the results in output buffer */
;;;165        *pDst++ = (*pSrcA++) * (*pSrcB++);
000058  ecb00a01          VLDM     r0!,{s0}
00005c  ecf10a01          VLDM     r1!,{s1}
000060  ee200a20          VMUL.F32 s0,s0,s1
000064  eca20a01          VSTM     r2!,{s0}
;;;166    
;;;167        /* Decrement the blockSize loop counter */
;;;168        blkCnt--;
000068  1e5b              SUBS     r3,r3,#1
                  |L1.106|
00006a  2b00              CMP      r3,#0                 ;161
00006c  d1f4              BNE      |L1.88|
;;;169      }
;;;170    }
00006e  bd10              POP      {r4,pc}
;;;171    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_mult_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_f32_c_82cc5343____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_mult_f32_c_82cc5343____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_f32_c_82cc5343____REVSH|
#line 144
|__asm___14_arm_mult_f32_c_82cc5343____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_f32_c_82cc5343____RRX|
#line 300
|__asm___14_arm_mult_f32_c_82cc5343____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
