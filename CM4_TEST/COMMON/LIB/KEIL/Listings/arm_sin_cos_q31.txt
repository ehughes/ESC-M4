; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_sin_cos_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sin_cos_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_sin_cos_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ControllerFunctions\arm_sin_cos_q31.c]
                          THUMB

                          AREA ||i.arm_sin_cos_q31||, CODE, READONLY, ALIGN=2

                  arm_sin_cos_q31 PROC
;;;63     
;;;64     void arm_sin_cos_q31(
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;65       q31_t theta,
;;;66       q31_t * pSinVal,
;;;67       q31_t * pCosVal)
;;;68     {
000004  b088              SUB      sp,sp,#0x20
;;;69       q31_t fract;                                 /* Temporary variables for input, output */
;;;70       uint16_t indexS, indexC;                     /* Index variable */
;;;71       q31_t f1, f2, d1, d2;                        /* Two nearest output values */
;;;72       q31_t Dn, Df;
;;;73       q63_t temp;
;;;74       
;;;75       /* Calculate the nearest index */
;;;76       indexS = (uint32_t)theta >> CONTROLLER_Q31_SHIFT;
000006  ea4f58d0          LSR      r8,r0,#23
;;;77       indexC = (indexS + 128) & 0x1ff;
00000a  f1080180          ADD      r1,r8,#0x80
00000e  f3c10108          UBFX     r1,r1,#0,#9
000012  9103              STR      r1,[sp,#0xc]
;;;78     
;;;79       /* Calculation of fractional value */
;;;80       fract = (theta - (indexS << CONTROLLER_Q31_SHIFT)) << 8;
000014  eba050c8          SUB      r0,r0,r8,LSL #23
000018  0204              LSLS     r4,r0,#8
;;;81       
;;;82       /* Read two nearest values of input value from the cos & sin tables */
;;;83       f1 = sinTable_q31[indexC+0];
00001a  4e80              LDR      r6,|L1.540|
00001c  9903              LDR      r1,[sp,#0xc]
00001e  f8560021          LDR      r0,[r6,r1,LSL #2]
000022  9002              STR      r0,[sp,#8]
;;;84       f2 = sinTable_q31[indexC+1];
000024  9903              LDR      r1,[sp,#0xc]
000026  1c49              ADDS     r1,r1,#1
000028  9107              STR      r1,[sp,#0x1c]
00002a  f8563021          LDR      r3,[r6,r1,LSL #2]
;;;85       d1 = -sinTable_q31[indexS+0];
00002e  f8560028          LDR      r0,[r6,r8,LSL #2]
000032  f1c00c00          RSB      r12,r0,#0
000036  f8cdc004          STR      r12,[sp,#4]
;;;86       d2 = -sinTable_q31[indexS+1];
00003a  f1080101          ADD      r1,r8,#1
00003e  9106              STR      r1,[sp,#0x18]
000040  f8560021          LDR      r0,[r6,r1,LSL #2]
000044  4242              RSBS     r2,r0,#0
;;;87     
;;;88       Dn = 0x1921FB5; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
;;;89       Df = f2 - f1; // delta between the values of the functions
000046  9802              LDR      r0,[sp,#8]
000048  eba30900          SUB      r9,r3,r0
;;;90       temp = Dn*((q63_t)d1 + d2);
00004c  f8ddc004          LDR      r12,[sp,#4]
000050  17d7              ASRS     r7,r2,#31
000052  ea4f73ec          ASR      r3,r12,#31
000056  eb1c0102          ADDS     r1,r12,r2
00005a  4d71              LDR      r5,|L1.544|
00005c  469e              MOV      lr,r3
00005e  fba10c05          UMULL    r0,r12,r1,r5
000062  417b              ADCS     r3,r3,r7
000064  9705              STR      r7,[sp,#0x14]
000066  fb03c305          MLA      r3,r3,r5,r12
00006a  2700              MOVS     r7,#0
00006c  fb013107          MLA      r1,r1,r7,r3
;;;91       temp = temp - ((q63_t)Df << 32);
000070  1e00              SUBS     r0,r0,#0
000072  eb610109          SBC      r1,r1,r9
;;;92       temp = (q63_t)fract*(temp >> 31);
000076  0fc3              LSRS     r3,r0,#31
000078  ea430341          ORR      r3,r3,r1,LSL #1
00007c  fba30704          UMULL    r0,r7,r3,r4
000080  17c9              ASRS     r1,r1,#31
000082  fb017104          MLA      r1,r1,r4,r7
000086  17e5              ASRS     r5,r4,#31
000088  fb031105          MLA      r1,r3,r5,r1
;;;93       temp = temp + ((3*(q63_t)Df << 31) - (d2 + ((q63_t)d1 << 1))*Dn);
00008c  f04f4300          MOV      r3,#0x80000000
000090  fba9ab03          UMULL    r10,r11,r9,r3
000094  ea4f7ce9          ASR      r12,r9,#31
000098  fb0cb303          MLA      r3,r12,r3,r11
00009c  2701              MOVS     r7,#1
00009e  fb093907          MLA      r9,r9,r7,r3
0000a2  f8ddc004          LDR      r12,[sp,#4]
0000a6  9f05              LDR      r7,[sp,#0x14]
0000a8  eb1c0c0c          ADDS     r12,r12,r12
0000ac  eb4e030e          ADC      r3,lr,lr
0000b0  eb1c0202          ADDS     r2,r12,r2
0000b4  417b              ADCS     r3,r3,r7
0000b6  4f5a              LDR      r7,|L1.544|
0000b8  f04f0c00          MOV      r12,#0
0000bc  fba2be07          UMULL    r11,lr,r2,r7
0000c0  fb03e307          MLA      r3,r3,r7,lr
0000c4  fb02320c          MLA      r2,r2,r12,r3
0000c8  ebba030b          SUBS     r3,r10,r11
0000cc  eb690902          SBC      r9,r9,r2
0000d0  1818              ADDS     r0,r3,r0
0000d2  eb490101          ADC      r1,r9,r1
;;;94       temp = (q63_t)fract*(temp >> 31);
0000d6  460a              MOV      r2,r1
0000d8  004b              LSLS     r3,r1,#1
0000da  ea4371d0          ORR      r1,r3,r0,LSR #31
0000de  fba10304          UMULL    r0,r3,r1,r4
0000e2  17d2              ASRS     r2,r2,#31
0000e4  fb023204          MLA      r2,r2,r4,r3
0000e8  fb012105          MLA      r1,r1,r5,r2
;;;95       temp = temp + (q63_t)d1*Dn;
0000ec  f8ddc004          LDR      r12,[sp,#4]
0000f0  463a              MOV      r2,r7
0000f2  fbcc0102          SMLAL    r0,r1,r12,r2
;;;96       temp = (q63_t)fract*(temp >> 31);
0000f6  460a              MOV      r2,r1
0000f8  004b              LSLS     r3,r1,#1
0000fa  ea4371d0          ORR      r1,r3,r0,LSR #31
0000fe  fba10304          UMULL    r0,r3,r1,r4
000102  17d2              ASRS     r2,r2,#31
000104  fb023204          MLA      r2,r2,r4,r3
000108  fb012105          MLA      r1,r1,r5,r2
;;;97     
;;;98       /* Calculation of cosine value */
;;;99       *pCosVal = clip_q63_to_q31((temp >> 31) + (q63_t)f1);
00010c  0fc2              LSRS     r2,r0,#31
00010e  9802              LDR      r0,[sp,#8]
000110  ea420241          ORR      r2,r2,r1,LSL #1
000114  17c3              ASRS     r3,r0,#31
000116  1810              ADDS     r0,r2,r0
000118  eb4371e1          ADC      r1,r3,r1,ASR #31
00011c  f7fffffe          BL       clip_q63_to_q31
000120  990a              LDR      r1,[sp,#0x28]
000122  6008              STR      r0,[r1,#0]
;;;100      
;;;101      /* Read two nearest values of input value from the cos & sin tables */
;;;102      f1 = sinTable_q31[indexS+0];
000124  f8567028          LDR      r7,[r6,r8,LSL #2]
;;;103      f2 = sinTable_q31[indexS+1];
000128  9906              LDR      r1,[sp,#0x18]
00012a  f8560021          LDR      r0,[r6,r1,LSL #2]
;;;104      d1 = sinTable_q31[indexC+0];
00012e  9903              LDR      r1,[sp,#0xc]
000130  f8562021          LDR      r2,[r6,r1,LSL #2]
;;;105      d2 = sinTable_q31[indexC+1];
000134  9907              LDR      r1,[sp,#0x1c]
000136  f8563021          LDR      r3,[r6,r1,LSL #2]
;;;106    
;;;107      Df = f2 - f1; // delta between the values of the functions
00013a  1bc6              SUBS     r6,r0,r7
;;;108      temp = Dn*((q63_t)d1 + d2);
00013c  ea4f78e3          ASR      r8,r3,#31
000140  ea4f7ce2          ASR      r12,r2,#31
000144  18d1              ADDS     r1,r2,r3
000146  f8cd8010          STR      r8,[sp,#0x10]
00014a  eb4c0908          ADC      r9,r12,r8
00014e  f8df80d0          LDR      r8,|L1.544|
000152  f04f0a00          MOV      r10,#0
000156  fba10b08          UMULL    r0,r11,r1,r8
00015a  fb09b808          MLA      r8,r9,r8,r11
00015e  fb01810a          MLA      r1,r1,r10,r8
;;;109      temp = temp - ((q63_t)Df << 32);
000162  1e00              SUBS     r0,r0,#0
000164  eb610106          SBC      r1,r1,r6
;;;110      temp = (q63_t)fract*(temp >> 31);
000168  4688              MOV      r8,r1
00016a  ea4f0941          LSL      r9,r1,#1
00016e  ea4971d0          ORR      r1,r9,r0,LSR #31
000172  fba10904          UMULL    r0,r9,r1,r4
000176  ea4f78e8          ASR      r8,r8,#31
00017a  fb089804          MLA      r8,r8,r4,r9
00017e  fb018105          MLA      r1,r1,r5,r8
;;;111      temp = temp + ((3*(q63_t)Df << 31) - (d2 + ((q63_t)d1 << 1))*Dn);
000182  f04f4800          MOV      r8,#0x80000000
000186  fba69e08          UMULL    r9,lr,r6,r8
00018a  ea4f7be6          ASR      r11,r6,#31
00018e  fb0be808          MLA      r8,r11,r8,lr
000192  f04f0a01          MOV      r10,#1
000196  fb06860a          MLA      r6,r6,r10,r8
00019a  eb120a02          ADDS     r10,r2,r2
00019e  eb4c0c0c          ADC      r12,r12,r12
0001a2  f8dd8010          LDR      r8,[sp,#0x10]
0001a6  eb1a0303          ADDS     r3,r10,r3
0001aa  eb4c0c08          ADC      r12,r12,r8
0001ae  f8df8070          LDR      r8,|L1.544|
0001b2  f04f0a00          MOV      r10,#0
0001b6  fba3be08          UMULL    r11,lr,r3,r8
0001ba  fb0cec08          MLA      r12,r12,r8,lr
0001be  fb03cc0a          MLA      r12,r3,r10,r12
0001c2  ebb9030b          SUBS     r3,r9,r11
0001c6  eb66060c          SBC      r6,r6,r12
0001ca  1818              ADDS     r0,r3,r0
0001cc  4171              ADCS     r1,r1,r6
;;;112      temp = (q63_t)fract*(temp >> 31);
0001ce  460b              MOV      r3,r1
0001d0  004e              LSLS     r6,r1,#1
0001d2  ea4671d0          ORR      r1,r6,r0,LSR #31
0001d6  fba10604          UMULL    r0,r6,r1,r4
0001da  17db              ASRS     r3,r3,#31
0001dc  fb036304          MLA      r3,r3,r4,r6
0001e0  fb013105          MLA      r1,r1,r5,r3
;;;113      temp = temp + (q63_t)d1*Dn;
0001e4  4643              MOV      r3,r8
0001e6  fbc20103          SMLAL    r0,r1,r2,r3
;;;114      temp = (q63_t)fract*(temp >> 31);
0001ea  460a              MOV      r2,r1
0001ec  004b              LSLS     r3,r1,#1
0001ee  ea4371d0          ORR      r1,r3,r0,LSR #31
0001f2  fba10304          UMULL    r0,r3,r1,r4
0001f6  17d2              ASRS     r2,r2,#31
0001f8  fb023204          MLA      r2,r2,r4,r3
0001fc  fb012105          MLA      r1,r1,r5,r2
;;;115      
;;;116      /* Calculation of sine value */
;;;117      *pSinVal = clip_q63_to_q31((temp >> 31) + (q63_t)f1);
000200  0fc0              LSRS     r0,r0,#31
000202  ea400041          ORR      r0,r0,r1,LSL #1
000206  17c9              ASRS     r1,r1,#31
000208  19c0              ADDS     r0,r0,r7
00020a  eb4171e7          ADC      r1,r1,r7,ASR #31
00020e  f7fffffe          BL       clip_q63_to_q31
000212  9909              LDR      r1,[sp,#0x24]
000214  6008              STR      r0,[r1,#0]
;;;118    }
000216  b00b              ADD      sp,sp,#0x2c
000218  e8bd8ff0          POP      {r4-r11,pc}
;;;119    
                          ENDP

                  |L1.540|
                          DCD      sinTable_q31
                  |L1.544|
                          DCD      0x01921fb5

                          AREA ||i.clip_q63_to_q31||, CODE, READONLY, ALIGN=1

                  clip_q63_to_q31 PROC
;;;458       */
;;;459      static __INLINE q31_t clip_q63_to_q31(
000000  17ca              ASRS     r2,r1,#31
;;;460      q63_t x)
;;;461      {
;;;462        return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
000002  ebb17fe0          CMP      r1,r0,ASR #31
000006  d002              BEQ      |L2.14|
;;;463          ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
000008  f06f4000          MVN      r0,#0x80000000
00000c  4050              EORS     r0,r0,r2
                  |L2.14|
;;;464      }
00000e  4770              BX       lr
;;;465    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ControllerFunctions\\arm_sin_cos_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_q31_c_ecd43c3c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_sin_cos_q31_c_ecd43c3c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_q31_c_ecd43c3c____REVSH|
#line 144
|__asm___17_arm_sin_cos_q31_c_ecd43c3c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_q31_c_ecd43c3c____RRX|
#line 300
|__asm___17_arm_sin_cos_q31_c_ecd43c3c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
