; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_sin_cos_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sin_cos_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_sin_cos_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ControllerFunctions\arm_sin_cos_q31.c]
                          THUMB

                          AREA ||i.arm_sin_cos_q31||, CODE, READONLY, ALIGN=2

                  arm_sin_cos_q31 PROC
;;;63     
;;;64     void arm_sin_cos_q31(
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;65       q31_t theta,
;;;66       q31_t * pSinVal,
;;;67       q31_t * pCosVal)
;;;68     {
;;;69       q31_t fract;                                 /* Temporary variables for input, output */
;;;70       uint16_t indexS, indexC;                     /* Index variable */
;;;71       q31_t f1, f2, d1, d2;                        /* Two nearest output values */
;;;72       q31_t Dn, Df;
;;;73       q63_t temp;
;;;74       
;;;75       /* Calculate the nearest index */
;;;76       indexS = (uint32_t)theta >> CONTROLLER_Q31_SHIFT;
000004  ea4f59d0          LSR      r9,r0,#23
;;;77       indexC = (indexS + 128) & 0x1ff;
;;;78     
;;;79       /* Calculation of fractional value */
;;;80       fract = (theta - (indexS << CONTROLLER_Q31_SHIFT)) << 8;
000008  eba050c9          SUB      r0,r0,r9,LSL #23
00000c  0204              LSLS     r4,r0,#8
00000e  f1090180          ADD      r1,r9,#0x80           ;77
;;;81       
;;;82       /* Read two nearest values of input value from the cos & sin tables */
;;;83       f1 = sinTable_q31[indexC+0];
000012  4875              LDR      r0,|L1.488|
000014  f3c10b08          UBFX     r11,r1,#0,#9          ;77
000018  b086              SUB      sp,sp,#0x18           ;68
00001a  f850e02b          LDR      lr,[r0,r11,LSL #2]
;;;84       f2 = sinTable_q31[indexC+1];
00001e  eb00008b          ADD      r0,r0,r11,LSL #2
000022  9004              STR      r0,[sp,#0x10]
;;;85       d1 = -sinTable_q31[indexS+0];
000024  6843              LDR      r3,[r0,#4]
000026  4870              LDR      r0,|L1.488|
;;;86       d2 = -sinTable_q31[indexS+1];
;;;87     
;;;88       Dn = 0x1921FB5; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
;;;89       Df = f2 - f1; // delta between the values of the functions
;;;90       temp = Dn*((q63_t)d1 + d2);
000028  f8dfc1c0          LDR      r12,|L1.492|
00002c  2700              MOVS     r7,#0
00002e  f8500029          LDR      r0,[r0,r9,LSL #2]     ;85
000032  f1c00a00          RSB      r10,r0,#0             ;85
000036  486c              LDR      r0,|L1.488|
000038  eb000089          ADD      r0,r0,r9,LSL #2       ;86
00003c  9003              STR      r0,[sp,#0xc]          ;86
00003e  6840              LDR      r0,[r0,#4]            ;86
000040  4242              RSBS     r2,r0,#0              ;86
000042  17d6              ASRS     r6,r2,#31
000044  eb1a0102          ADDS     r1,r10,r2
000048  fba1580c          UMULL    r5,r8,r1,r12
00004c  eba3000e          SUB      r0,r3,lr              ;89
000050  ea4f73ea          ASR      r3,r10,#31
000054  9302              STR      r3,[sp,#8]
000056  4173              ADCS     r3,r3,r6
000058  fb03830c          MLA      r3,r3,r12,r8
00005c  fb013107          MLA      r1,r1,r7,r3
000060  1beb              SUBS     r3,r5,r7
000062  eb610100          SBC      r1,r1,r0
;;;91       temp = temp - ((q63_t)Df << 32);
;;;92       temp = (q63_t)fract*(temp >> 31);
000066  0fdb              LSRS     r3,r3,#31
000068  ea430341          ORR      r3,r3,r1,LSL #1
00006c  17cf              ASRS     r7,r1,#31
00006e  fba31c04          UMULL    r1,r12,r3,r4
000072  fb07c704          MLA      r7,r7,r4,r12
000076  17e5              ASRS     r5,r4,#31
000078  fb037305          MLA      r3,r3,r5,r7
;;;93       temp = temp + ((3*(q63_t)Df << 31) - (d2 + ((q63_t)d1 << 1))*Dn);
00007c  e9cd1300          STRD     r1,r3,[sp,#0]
000080  f04f4100          MOV      r1,#0x80000000
000084  fba07801          UMULL    r7,r8,r0,r1
000088  ea4f7ce0          ASR      r12,r0,#31
00008c  fb0c8101          MLA      r1,r12,r1,r8
000090  2301              MOVS     r3,#1
000092  fb001003          MLA      r0,r0,r3,r1
000096  9b02              LDR      r3,[sp,#8]
000098  eb1a010a          ADDS     r1,r10,r10
00009c  415b              ADCS     r3,r3,r3
00009e  eb110c02          ADDS     r12,r1,r2
0000a2  4a52              LDR      r2,|L1.492|
0000a4  4173              ADCS     r3,r3,r6
0000a6  fbac6802          UMULL    r6,r8,r12,r2
0000aa  fb038202          MLA      r2,r3,r2,r8
0000ae  2100              MOVS     r1,#0
0000b0  fb0c2101          MLA      r1,r12,r1,r2
0000b4  1bba              SUBS     r2,r7,r6
0000b6  eb600001          SBC      r0,r0,r1
0000ba  e9dd1300          LDRD     r1,r3,[sp,#0]
0000be  1851              ADDS     r1,r2,r1
0000c0  4158              ADCS     r0,r0,r3
;;;94       temp = (q63_t)fract*(temp >> 31);
0000c2  0fc9              LSRS     r1,r1,#31
0000c4  ea410140          ORR      r1,r1,r0,LSL #1
0000c8  17c2              ASRS     r2,r0,#31
0000ca  fba10304          UMULL    r0,r3,r1,r4
0000ce  fb023204          MLA      r2,r2,r4,r3
0000d2  fb012205          MLA      r2,r1,r5,r2
;;;95       temp = temp + (q63_t)d1*Dn;
0000d6  4b45              LDR      r3,|L1.492|
0000d8  fbca0203          SMLAL    r0,r2,r10,r3
;;;96       temp = (q63_t)fract*(temp >> 31);
0000dc  0fc1              LSRS     r1,r0,#31
0000de  ea410142          ORR      r1,r1,r2,LSL #1
0000e2  fba10304          UMULL    r0,r3,r1,r4
0000e6  17d2              ASRS     r2,r2,#31
0000e8  fb023204          MLA      r2,r2,r4,r3
0000ec  fb012105          MLA      r1,r1,r5,r2
;;;97     
;;;98       /* Calculation of cosine value */
;;;99       *pCosVal = clip_q63_to_q31((temp >> 31) + (q63_t)f1);
0000f0  0fc2              LSRS     r2,r0,#31
0000f2  ea420241          ORR      r2,r2,r1,LSL #1
0000f6  17c9              ASRS     r1,r1,#31
0000f8  eb12000e          ADDS     r0,r2,lr
0000fc  eb4171ee          ADC      r1,r1,lr,ASR #31
000100  f7fffffe          BL       clip_q63_to_q31
000104  9908              LDR      r1,[sp,#0x20]
;;;100      
;;;101      /* Read two nearest values of input value from the cos & sin tables */
;;;102      f1 = sinTable_q31[indexS+0];
;;;103      f2 = sinTable_q31[indexS+1];
;;;104      d1 = sinTable_q31[indexC+0];
;;;105      d2 = sinTable_q31[indexC+1];
;;;106    
;;;107      Df = f2 - f1; // delta between the values of the functions
;;;108      temp = Dn*((q63_t)d1 + d2);
000106  f8dfc0e4          LDR      r12,|L1.492|
00010a  6008              STR      r0,[r1,#0]            ;102
00010c  4836              LDR      r0,|L1.488|
00010e  f850a029          LDR      r10,[r0,r9,LSL #2]    ;102
000112  9803              LDR      r0,[sp,#0xc]          ;103
000114  6842              LDR      r2,[r0,#4]            ;104
000116  4834              LDR      r0,|L1.488|
000118  eba2020a          SUB      r2,r2,r10             ;107
00011c  f850102b          LDR      r1,[r0,r11,LSL #2]    ;104
000120  9804              LDR      r0,[sp,#0x10]         ;105
000122  4689              MOV      r9,r1                 ;104
000124  6843              LDR      r3,[r0,#4]
000126  17c8              ASRS     r0,r1,#31
000128  17df              ASRS     r7,r3,#31
00012a  18ce              ADDS     r6,r1,r3
00012c  fba6180c          UMULL    r1,r8,r6,r12
000130  e9cd7000          STRD     r7,r0,[sp,#0]
000134  4178              ADCS     r0,r0,r7
000136  2700              MOVS     r7,#0
000138  fb00800c          MLA      r0,r0,r12,r8
00013c  fb060007          MLA      r0,r6,r7,r0
000140  1bc9              SUBS     r1,r1,r7
000142  eb600002          SBC      r0,r0,r2
;;;109      temp = temp - ((q63_t)Df << 32);
;;;110      temp = (q63_t)fract*(temp >> 31);
000146  0fc9              LSRS     r1,r1,#31
000148  ea410140          ORR      r1,r1,r0,LSL #1
00014c  fba1b704          UMULL    r11,r7,r1,r4
000150  17c0              ASRS     r0,r0,#31
000152  fb007004          MLA      r0,r0,r4,r7
000156  fb010e05          MLA      lr,r1,r5,r0
;;;111      temp = temp + ((3*(q63_t)Df << 31) - (d2 + ((q63_t)d1 << 1))*Dn);
00015a  f04f4100          MOV      r1,#0x80000000
00015e  fba26c01          UMULL    r6,r12,r2,r1
000162  17d7              ASRS     r7,r2,#31
000164  fb07c101          MLA      r1,r7,r1,r12
000168  2001              MOVS     r0,#1
00016a  fb021200          MLA      r2,r2,r0,r1
00016e  9801              LDR      r0,[sp,#4]
000170  eb190109          ADDS     r1,r9,r9
000174  4140              ADCS     r0,r0,r0
000176  9f00              LDR      r7,[sp,#0]
000178  18cb              ADDS     r3,r1,r3
00017a  4178              ADCS     r0,r0,r7
00017c  4f1b              LDR      r7,|L1.492|
00017e  2100              MOVS     r1,#0
000180  fba3c807          UMULL    r12,r8,r3,r7
000184  fb008007          MLA      r0,r0,r7,r8
000188  fb030001          MLA      r0,r3,r1,r0
00018c  ebb6010c          SUBS     r1,r6,r12
000190  eb620200          SBC      r2,r2,r0
000194  eb11010b          ADDS     r1,r1,r11
000198  eb42020e          ADC      r2,r2,lr
;;;112      temp = (q63_t)fract*(temp >> 31);
00019c  0fc9              LSRS     r1,r1,#31
00019e  ea410142          ORR      r1,r1,r2,LSL #1
0001a2  fba10304          UMULL    r0,r3,r1,r4
0001a6  17d2              ASRS     r2,r2,#31
0001a8  fb023204          MLA      r2,r2,r4,r3
0001ac  fb012205          MLA      r2,r1,r5,r2
;;;113      temp = temp + (q63_t)d1*Dn;
0001b0  fbc90207          SMLAL    r0,r2,r9,r7
;;;114      temp = (q63_t)fract*(temp >> 31);
0001b4  0fc1              LSRS     r1,r0,#31
0001b6  ea410142          ORR      r1,r1,r2,LSL #1
0001ba  fba10304          UMULL    r0,r3,r1,r4
0001be  17d2              ASRS     r2,r2,#31
0001c0  fb023204          MLA      r2,r2,r4,r3
0001c4  fb012105          MLA      r1,r1,r5,r2
;;;115      
;;;116      /* Calculation of sine value */
;;;117      *pSinVal = clip_q63_to_q31((temp >> 31) + (q63_t)f1);
0001c8  0fc2              LSRS     r2,r0,#31
0001ca  ea420241          ORR      r2,r2,r1,LSL #1
0001ce  17c9              ASRS     r1,r1,#31
0001d0  eb12000a          ADDS     r0,r2,r10
0001d4  eb4171ea          ADC      r1,r1,r10,ASR #31
0001d8  f7fffffe          BL       clip_q63_to_q31
0001dc  9907              LDR      r1,[sp,#0x1c]
0001de  6008              STR      r0,[r1,#0]
;;;118    }
0001e0  b009              ADD      sp,sp,#0x24
0001e2  e8bd8ff0          POP      {r4-r11,pc}
;;;119    
                          ENDP

0001e6  0000              DCW      0x0000
                  |L1.488|
                          DCD      sinTable_q31
                  |L1.492|
                          DCD      0x01921fb5

                          AREA ||i.clip_q63_to_q31||, CODE, READONLY, ALIGN=1

                  clip_q63_to_q31 PROC
;;;458       */
;;;459      static __INLINE q31_t clip_q63_to_q31(
000000  17ca              ASRS     r2,r1,#31
;;;460      q63_t x)
;;;461      {
;;;462        return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
000002  ebb17fe0          CMP      r1,r0,ASR #31
000006  d002              BEQ      |L2.14|
;;;463          ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
000008  f06f4000          MVN      r0,#0x80000000
00000c  4050              EORS     r0,r0,r2
                  |L2.14|
;;;464      }
00000e  4770              BX       lr
;;;465    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ControllerFunctions\\arm_sin_cos_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_q31_c_ecd43c3c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_sin_cos_q31_c_ecd43c3c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_q31_c_ecd43c3c____REVSH|
#line 144
|__asm___17_arm_sin_cos_q31_c_ecd43c3c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_q31_c_ecd43c3c____RRX|
#line 300
|__asm___17_arm_sin_cos_q31_c_ecd43c3c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
