; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_sin_cos_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_sin_cos_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_sin_cos_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\ControllerFunctions\arm_sin_cos_f32.c]
                          THUMB

                          AREA ||i.arm_sin_cos_f32||, CODE, READONLY, ALIGN=2

                  arm_sin_cos_f32 PROC
;;;83     
;;;84     void arm_sin_cos_f32(
000000  b570              PUSH     {r4-r6,lr}
;;;85       float32_t theta,
;;;86       float32_t * pSinVal,
;;;87       float32_t * pCosVal)
;;;88     {
;;;89       float32_t fract, in;                             /* Temporary variables for input, output */
;;;90       uint16_t indexS, indexC;                         /* Index variable */
;;;91       float32_t f1, f2, d1, d2;                        /* Two nearest output values */
;;;92       int32_t n;
;;;93       float32_t findex, Dn, Df, temp;
;;;94     
;;;95       /* input x is in degrees */
;;;96       /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
;;;97       in = theta * 0.00277777777778f;
000002  eddf0a3f          VLDR     s1,|L1.256|
000006  ee200a20          VMUL.F32 s0,s0,s1
;;;98     
;;;99       /* Calculation of floor value of input */
;;;100      n = (int32_t) in;
00000a  eefd0ac0          VCVT.S32.F32 s1,s0
00000e  ee102a90          VMOV     r2,s1
;;;101    
;;;102      /* Make negative values towards -infinity */
;;;103      if(in < 0.0f)
000012  eeb50ac0          VCMPE.F32 s0,#0.0
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001a  d200              BCS      |L1.30|
;;;104      {
;;;105        n--;
00001c  1e52              SUBS     r2,r2,#1
                  |L1.30|
;;;106      }
;;;107      /* Map input value to [0 1] */
;;;108      in = in - (float32_t) n;
00001e  ee002a90          VMOV     s1,r2
000022  eef80ae0          VCVT.F32.S32 s1,s1
000026  ee300a60          VSUB.F32 s0,s0,s1
;;;109    
;;;110      /* Calculation of index of the table */
;;;111      findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
00002a  eddf0a36          VLDR     s1,|L1.260|
00002e  ee200a20          VMUL.F32 s0,s0,s1
;;;112      indexS = ((uint16_t)findex) & 0x1ff;
000032  eefc0ac0          VCVT.U32.F32 s1,s0
000036  ee102a90          VMOV     r2,s1
00003a  f3c20208          UBFX     r2,r2,#0,#9
;;;113      indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
00003e  f1020380          ADD      r3,r2,#0x80
000042  f3c30308          UBFX     r3,r3,#0,#9
;;;114    
;;;115      /* fractional value calculation */
;;;116      fract = findex - (float32_t) indexS;
000046  ee002a90          VMOV     s1,r2
00004a  eef80a60          VCVT.F32.U32 s1,s1
00004e  ee300a60          VSUB.F32 s0,s0,s1
;;;117    
;;;118      /* Read two nearest values of input value from the cos & sin tables */
;;;119      f1 = sinTable_f32[indexC+0];
000052  4e2d              LDR      r6,|L1.264|
000054  eb060483          ADD      r4,r6,r3,LSL #2
000058  edd41a00          VLDR     s3,[r4,#0]
;;;120      f2 = sinTable_f32[indexC+1];
00005c  1c5b              ADDS     r3,r3,#1
00005e  eb060383          ADD      r3,r6,r3,LSL #2
000062  edd32a00          VLDR     s5,[r3,#0]
;;;121      d1 = -sinTable_f32[indexS+0];
000066  eb060582          ADD      r5,r6,r2,LSL #2
00006a  edd50a00          VLDR     s1,[r5,#0]
00006e  eeb11a60          VNEG.F32 s2,s1
;;;122      d2 = -sinTable_f32[indexS+1];
000072  1c52              ADDS     r2,r2,#1
000074  eb060282          ADD      r2,r6,r2,LSL #2
000078  edd20a00          VLDR     s1,[r2,#0]
00007c  eeb12a60          VNEG.F32 s4,s1
;;;123    
;;;124      Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
000080  eddf0a22          VLDR     s1,|L1.268|
;;;125      Df = f2 - f1; // delta between the values of the functions
000084  ee722ae1          VSUB.F32 s5,s5,s3
;;;126      temp = Dn*(d1 + d2) - 2*Df;
000088  ee313a02          VADD.F32 s6,s2,s4
00008c  ee633a20          VMUL.F32 s7,s6,s1
000090  eeb03a00          VMOV.F32 s6,#2.00000000
000094  ee423ac3          VMLS.F32 s7,s5,s6
;;;127      temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
000098  eeb04a08          VMOV.F32 s8,#3.00000000
00009c  ee012a03          VMLA.F32 s4,s2,s6
0000a0  ee622a84          VMUL.F32 s5,s5,s8
0000a4  ee422a60          VMLS.F32 s5,s4,s1
0000a8  ee402a23          VMLA.F32 s5,s0,s7
;;;128      temp = fract*temp + d1*Dn;
0000ac  ee202a22          VMUL.F32 s4,s0,s5
0000b0  ee012a20          VMLA.F32 s4,s2,s1
;;;129    
;;;130      /* Calculation of cosine value */
;;;131      *pCosVal = fract*temp + f1;
0000b4  ee401a02          VMLA.F32 s3,s0,s4
0000b8  edc11a00          VSTR     s3,[r1,#0]
;;;132      
;;;133      /* Read two nearest values of input value from the cos & sin tables */
;;;134      f1 = sinTable_f32[indexS+0];
0000bc  edd51a00          VLDR     s3,[r5,#0]
;;;135      f2 = sinTable_f32[indexS+1];
0000c0  edd22a00          VLDR     s5,[r2,#0]
;;;136      d1 = sinTable_f32[indexC+0];
0000c4  ed941a00          VLDR     s2,[r4,#0]
;;;137      d2 = sinTable_f32[indexC+1];
0000c8  ed932a00          VLDR     s4,[r3,#0]
;;;138    
;;;139      Df = f2 - f1; // delta between the values of the functions
0000cc  ee722ae1          VSUB.F32 s5,s5,s3
;;;140      temp = Dn*(d1 + d2) - 2*Df;
0000d0  ee713a02          VADD.F32 s7,s2,s4
0000d4  ee633aa0          VMUL.F32 s7,s7,s1
0000d8  ee423ac3          VMLS.F32 s7,s5,s6
;;;141      temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
0000dc  ee012a03          VMLA.F32 s4,s2,s6
0000e0  ee622a84          VMUL.F32 s5,s5,s8
0000e4  ee422a60          VMLS.F32 s5,s4,s1
0000e8  ee402a23          VMLA.F32 s5,s0,s7
;;;142      temp = fract*temp + d1*Dn;
0000ec  ee202a22          VMUL.F32 s4,s0,s5
0000f0  ee012a20          VMLA.F32 s4,s2,s1
;;;143      
;;;144      /* Calculation of sine value */
;;;145      *pSinVal = fract*temp + f1;
0000f4  ee401a02          VMLA.F32 s3,s0,s4
0000f8  edc01a00          VSTR     s3,[r0,#0]
;;;146    }
0000fc  bd70              POP      {r4-r6,pc}
;;;147    /**    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L1.256|
000100  3b360b61          DCFS     0x3b360b61 ; 0.0027777778450399637
                  |L1.260|
000104  44000000          DCFS     0x44000000 ; 512
                  |L1.264|
                          DCD      sinTable_f32
                  |L1.268|
00010c  3c490fdb          DCFS     0x3c490fdb ; 0.012271846644580364

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ControllerFunctions\\arm_sin_cos_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_f32_c_6cb4d873____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_sin_cos_f32_c_6cb4d873____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_f32_c_6cb4d873____REVSH|
#line 144
|__asm___17_arm_sin_cos_f32_c_6cb4d873____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_sin_cos_f32_c_6cb4d873____RRX|
#line 300
|__asm___17_arm_sin_cos_f32_c_6cb4d873____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
