; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_negate_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_negate_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_negate_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_negate_q31.c]
                          THUMB

                          AREA ||i.arm_negate_q31||, CODE, READONLY, ALIGN=2

                  arm_negate_q31 PROC
;;;64     
;;;65     void arm_negate_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;66       q31_t * pSrc,
;;;67       q31_t * pDst,
;;;68       uint32_t blockSize)
;;;69     {
;;;70       q31_t in;                                      /* Temporary variable */
;;;71       uint32_t blkCnt;                               /* loop counter */
;;;72     
;;;73     #ifndef ARM_MATH_CM0_FAMILY
;;;74     
;;;75     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;76       q31_t in1, in2, in3, in4;
;;;77     
;;;78       /*loop Unrolling */
;;;79       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e014              B        |L1.48|
;;;80     
;;;81       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;82        ** a second loop below computes the remaining 1 to 3 samples. */
;;;83       while(blkCnt > 0u)
;;;84       {
;;;85         /* C = -A */
;;;86         /* Negate and then store the results in the destination buffer. */
;;;87         in1 = *pSrc++;
000006  bf00              NOP      
                  |L1.8|
000008  f850cb0c          LDR      r12,[r0],#0xc
;;;88         in2 = *pSrc++;
;;;89         in3 = *pSrc++;
;;;90         in4 = *pSrc++;
;;;91     
;;;92         *pDst++ = __QSUB(0, in1);
00000c  2400              MOVS     r4,#0
00000e  f8507908          LDR      r7,[r0],#-8           ;90
000012  e8f06503          LDRD     r6,r5,[r0],#0xc       ;90
000016  fa8cfca4          QSUB     r12,r4,r12
;;;93         *pDst++ = __QSUB(0, in2);
00001a  fa86f6a4          QSUB     r6,r4,r6
;;;94         *pDst++ = __QSUB(0, in3);
00001e  fa85f5a4          QSUB     r5,r4,r5
;;;95         *pDst++ = __QSUB(0, in4);
000022  fa87f4a4          QSUB     r4,r4,r7
000026  e9c15402          STRD     r5,r4,[r1,#8]
00002a  e8e1c604          STRD     r12,r6,[r1],#0x10
00002e  1e5b              SUBS     r3,r3,#1
                  |L1.48|
000030  2b00              CMP      r3,#0                 ;83
000032  d1e9              BNE      |L1.8|
;;;96     
;;;97         /* Decrement the loop counter */
;;;98         blkCnt--;
;;;99       }
;;;100    
;;;101      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;102       ** No loop unrolling is used. */
;;;103      blkCnt = blockSize % 0x4u;
;;;104    
;;;105    #else
;;;106    
;;;107      /* Run the below code for Cortex-M0 */
;;;108    
;;;109      /* Initialize blkCnt with number of samples */
;;;110      blkCnt = blockSize;
;;;111    
;;;112    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;113    
;;;114    
;;;115      while(blkCnt > 0u)
;;;116      {
;;;117        /* C = -A */
;;;118        /* Negate and then store the result in the destination buffer. */
;;;119        in = *pSrc++;
;;;120        *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
000034  f04f4400          MOV      r4,#0x80000000
000038  f0020203          AND      r2,r2,#3              ;103
00003c  1e65              SUBS     r5,r4,#1
00003e  e007              B        |L1.80|
                  |L1.64|
000040  c808              LDM      r0!,{r3}              ;119
000042  42a3              CMP      r3,r4
000044  d101              BNE      |L1.74|
000046  462b              MOV      r3,r5
000048  e000              B        |L1.76|
                  |L1.74|
00004a  425b              RSBS     r3,r3,#0
                  |L1.76|
00004c  c108              STM      r1!,{r3}
00004e  1e52              SUBS     r2,r2,#1
                  |L1.80|
000050  2a00              CMP      r2,#0                 ;115
000052  d1f5              BNE      |L1.64|
;;;121    
;;;122        /* Decrement the loop counter */
;;;123        blkCnt--;
;;;124      }
;;;125    }
000054  bdf0              POP      {r4-r7,pc}
;;;126    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_negate_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_q31_c_cbc64bfb____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___16_arm_negate_q31_c_cbc64bfb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_q31_c_cbc64bfb____REVSH|
#line 144
|__asm___16_arm_negate_q31_c_cbc64bfb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_arm_negate_q31_c_cbc64bfb____RRX|
#line 300
|__asm___16_arm_negate_q31_c_cbc64bfb____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
