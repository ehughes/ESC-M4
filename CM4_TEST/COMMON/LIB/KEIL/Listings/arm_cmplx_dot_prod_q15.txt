; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_dot_prod_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_dot_prod_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_dot_prod_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_dot_prod_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_dot_prod_q15||, CODE, READONLY, ALIGN=1

                  arm_cmplx_dot_prod_q15 PROC
;;;69     
;;;70     void arm_cmplx_dot_prod_q15(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;71       q15_t * pSrcA,
;;;72       q15_t * pSrcB,
;;;73       uint32_t numSamples,
;;;74       q31_t * realResult,
;;;75       q31_t * imagResult)
;;;76     {
;;;77       q63_t real_sum = 0, imag_sum = 0;              /* Temporary result storage */
000004  2600              MOVS     r6,#0
000006  4637              MOV      r7,r6
000008  2400              MOVS     r4,#0
00000a  4625              MOV      r5,r4
;;;78       q15_t a0,b0,c0,d0;
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       uint32_t blkCnt;                               /* loop counter */
;;;84     
;;;85     
;;;86       /*loop Unrolling */
;;;87       blkCnt = numSamples >> 2u;
00000c  ea4f0c92          LSR      r12,r2,#2
000010  e051              B        |L1.182|
                  |L1.18|
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93           a0 = *pSrcA++;
000012  f9309b02          LDRSH    r9,[r0],#2
;;;94           b0 = *pSrcA++;
000016  f930bb02          LDRSH    r11,[r0],#2
;;;95           c0 = *pSrcB++;
00001a  f9318b02          LDRSH    r8,[r1],#2
;;;96           d0 = *pSrcB++;  
00001e  f931ab02          LDRSH    r10,[r1],#2
;;;97       
;;;98           real_sum += (q31_t)a0 * c0;
000022  fbc96788          SMLALBB  r6,r7,r9,r8
;;;99           imag_sum += (q31_t)a0 * d0;
000026  fbc9458a          SMLALBB  r4,r5,r9,r10
;;;100          real_sum -= (q31_t)b0 * d0;
00002a  fb1bf90a          SMULBB   r9,r11,r10
00002e  ebb60609          SUBS     r6,r6,r9
000032  eb6777e9          SBC      r7,r7,r9,ASR #31
;;;101          imag_sum += (q31_t)b0 * c0;
000036  fbcb4588          SMLALBB  r4,r5,r11,r8
;;;102          
;;;103          a0 = *pSrcA++;
00003a  f9309b02          LDRSH    r9,[r0],#2
;;;104          b0 = *pSrcA++;
00003e  f930bb02          LDRSH    r11,[r0],#2
;;;105          c0 = *pSrcB++;
000042  f9318b02          LDRSH    r8,[r1],#2
;;;106          d0 = *pSrcB++;  
000046  f931ab02          LDRSH    r10,[r1],#2
;;;107      
;;;108          real_sum += (q31_t)a0 * c0;
00004a  fbc96788          SMLALBB  r6,r7,r9,r8
;;;109          imag_sum += (q31_t)a0 * d0;
00004e  fbc9458a          SMLALBB  r4,r5,r9,r10
;;;110          real_sum -= (q31_t)b0 * d0;
000052  fb1bf90a          SMULBB   r9,r11,r10
000056  ebb60609          SUBS     r6,r6,r9
00005a  eb6777e9          SBC      r7,r7,r9,ASR #31
;;;111          imag_sum += (q31_t)b0 * c0;
00005e  fbcb4588          SMLALBB  r4,r5,r11,r8
;;;112          
;;;113          a0 = *pSrcA++;
000062  f9309b02          LDRSH    r9,[r0],#2
;;;114          b0 = *pSrcA++;
000066  f930bb02          LDRSH    r11,[r0],#2
;;;115          c0 = *pSrcB++;
00006a  f9318b02          LDRSH    r8,[r1],#2
;;;116          d0 = *pSrcB++;  
00006e  f931ab02          LDRSH    r10,[r1],#2
;;;117      
;;;118          real_sum += (q31_t)a0 * c0;
000072  fbc96788          SMLALBB  r6,r7,r9,r8
;;;119          imag_sum += (q31_t)a0 * d0;
000076  fbc9458a          SMLALBB  r4,r5,r9,r10
;;;120          real_sum -= (q31_t)b0 * d0;
00007a  fb1bf90a          SMULBB   r9,r11,r10
00007e  ebb60609          SUBS     r6,r6,r9
000082  eb6777e9          SBC      r7,r7,r9,ASR #31
;;;121          imag_sum += (q31_t)b0 * c0;
000086  fbcb4588          SMLALBB  r4,r5,r11,r8
;;;122          
;;;123          a0 = *pSrcA++;
00008a  f9309b02          LDRSH    r9,[r0],#2
;;;124          b0 = *pSrcA++;
00008e  f930bb02          LDRSH    r11,[r0],#2
;;;125          c0 = *pSrcB++;
000092  f9318b02          LDRSH    r8,[r1],#2
;;;126          d0 = *pSrcB++;  
000096  f931ab02          LDRSH    r10,[r1],#2
;;;127      
;;;128          real_sum += (q31_t)a0 * c0;
00009a  fbc96788          SMLALBB  r6,r7,r9,r8
;;;129          imag_sum += (q31_t)a0 * d0;
00009e  fbc9458a          SMLALBB  r4,r5,r9,r10
;;;130          real_sum -= (q31_t)b0 * d0;
0000a2  fb1bf90a          SMULBB   r9,r11,r10
0000a6  ebb60609          SUBS     r6,r6,r9
0000aa  eb6777e9          SBC      r7,r7,r9,ASR #31
;;;131          imag_sum += (q31_t)b0 * c0;
0000ae  fbcb4588          SMLALBB  r4,r5,r11,r8
;;;132    
;;;133          /* Decrement the loop counter */
;;;134          blkCnt--;
0000b2  f1ac0c01          SUB      r12,r12,#1
                  |L1.182|
0000b6  f1bc0f00          CMP      r12,#0                ;91
0000ba  d1aa              BNE      |L1.18|
;;;135      }
;;;136    
;;;137      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;138       ** No loop unrolling is used. */
;;;139      blkCnt = numSamples % 0x4u;
0000bc  f0020203          AND      r2,r2,#3
;;;140    
;;;141      while(blkCnt > 0u)
0000c0  e015              B        |L1.238|
                  |L1.194|
;;;142      {
;;;143          a0 = *pSrcA++;
0000c2  f9308b02          LDRSH    r8,[r0],#2
;;;144          b0 = *pSrcA++;
0000c6  f930ab02          LDRSH    r10,[r0],#2
;;;145          c0 = *pSrcB++;
0000ca  f931cb02          LDRSH    r12,[r1],#2
;;;146          d0 = *pSrcB++;  
0000ce  f9319b02          LDRSH    r9,[r1],#2
;;;147      
;;;148          real_sum += (q31_t)a0 * c0;
0000d2  fbc8678c          SMLALBB  r6,r7,r8,r12
;;;149          imag_sum += (q31_t)a0 * d0;
0000d6  fbc84589          SMLALBB  r4,r5,r8,r9
;;;150          real_sum -= (q31_t)b0 * d0;
0000da  fb1af809          SMULBB   r8,r10,r9
0000de  ebb60608          SUBS     r6,r6,r8
0000e2  eb6777e8          SBC      r7,r7,r8,ASR #31
;;;151          imag_sum += (q31_t)b0 * c0;
0000e6  fbca458c          SMLALBB  r4,r5,r10,r12
;;;152    
;;;153          /* Decrement the loop counter */
;;;154          blkCnt--;
0000ea  f1a20201          SUB      r2,r2,#1
                  |L1.238|
0000ee  2a00              CMP      r2,#0                 ;141
0000f0  d1e7              BNE      |L1.194|
;;;155      }
;;;156    
;;;157    #else
;;;158    
;;;159      /* Run the below code for Cortex-M0 */
;;;160    
;;;161      while(numSamples > 0u)
;;;162      {
;;;163          a0 = *pSrcA++;
;;;164          b0 = *pSrcA++;
;;;165          c0 = *pSrcB++;
;;;166          d0 = *pSrcB++;  
;;;167      
;;;168          real_sum += a0 * c0;
;;;169          imag_sum += a0 * d0;
;;;170          real_sum -= b0 * d0;
;;;171          imag_sum += b0 * c0;
;;;172    
;;;173    
;;;174          /* Decrement the loop counter */
;;;175          numSamples--;
;;;176      }
;;;177    
;;;178    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;179    
;;;180      /* Store the real and imaginary results in 8.24 format  */
;;;181      /* Convert real data in 34.30 to 8.24 by 6 right shifts */
;;;182      *realResult = (q31_t) (real_sum >> 6);
0000f2  ea4f1096          LSR      r0,r6,#6
0000f6  ea406087          ORR      r0,r0,r7,LSL #26
0000fa  6018              STR      r0,[r3,#0]
;;;183      /* Convert imaginary data in 34.30 to 8.24 by 6 right shifts */
;;;184      *imagResult = (q31_t) (imag_sum >> 6);
0000fc  9909              LDR      r1,[sp,#0x24]
0000fe  ea4f1094          LSR      r0,r4,#6
000102  ea406085          ORR      r0,r0,r5,LSL #26
000106  6008              STR      r0,[r1,#0]
;;;185    }
000108  e8bd8ff0          POP      {r4-r11,pc}
;;;186    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_dot_prod_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REVSH|
#line 144
|__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____RRX|
#line 300
|__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
