; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_dot_prod_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_dot_prod_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_dot_prod_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_dot_prod_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_dot_prod_q15||, CODE, READONLY, ALIGN=2

                  arm_cmplx_dot_prod_q15 PROC
;;;69     
;;;70     void arm_cmplx_dot_prod_q15(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;71       q15_t * pSrcA,
;;;72       q15_t * pSrcB,
;;;73       uint32_t numSamples,
;;;74       q31_t * realResult,
;;;75       q31_t * imagResult)
;;;76     {
000004  2500              MOVS     r5,#0
000006  4696              MOV      lr,r2
000008  462c              MOV      r4,r5
00000a  462a              MOV      r2,r5
00000c  462b              MOV      r3,r5
;;;77       q63_t real_sum = 0, imag_sum = 0;              /* Temporary result storage */
;;;78       q15_t a0,b0,c0,d0;
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       uint32_t blkCnt;                               /* loop counter */
;;;84     
;;;85     
;;;86       /*loop Unrolling */
;;;87       blkCnt = numSamples >> 2u;
00000e  ea4f079e          LSR      r7,lr,#2
000012  e05d              B        |L1.208|
                  |L1.20|
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93           a0 = *pSrcA++;
000014  f9b06000          LDRSH    r6,[r0,#0]
;;;94           b0 = *pSrcA++;
000018  f9b0a002          LDRSH    r10,[r0,#2]
;;;95           c0 = *pSrcB++;
00001c  f9b1c000          LDRSH    r12,[r1,#0]
;;;96           d0 = *pSrcB++;  
000020  f9b18002          LDRSH    r8,[r1,#2]
;;;97       
;;;98           real_sum += (q31_t)a0 * c0;
000024  fbc6548c          SMLALBB  r5,r4,r6,r12
;;;99           imag_sum += (q31_t)a0 * d0;
000028  fbc62388          SMLALBB  r2,r3,r6,r8
00002c  469b              MOV      r11,r3
;;;100          real_sum -= (q31_t)b0 * d0;
00002e  fb1af308          SMULBB   r3,r10,r8
000032  ebb50903          SUBS     r9,r5,r3
000036  eb6474e3          SBC      r4,r4,r3,ASR #31
;;;101          imag_sum += (q31_t)b0 * c0;
00003a  465b              MOV      r3,r11
00003c  fbca238c          SMLALBB  r2,r3,r10,r12
;;;102          
;;;103          a0 = *pSrcA++;
000040  f9b05004          LDRSH    r5,[r0,#4]
;;;104          b0 = *pSrcA++;
000044  f9b0c006          LDRSH    r12,[r0,#6]
;;;105          c0 = *pSrcB++;
000048  f9b16004          LDRSH    r6,[r1,#4]
;;;106          d0 = *pSrcB++;  
00004c  f9b18006          LDRSH    r8,[r1,#6]
;;;107      
;;;108          real_sum += (q31_t)a0 * c0;
000050  fbc59486          SMLALBB  r9,r4,r5,r6
;;;109          imag_sum += (q31_t)a0 * d0;
000054  fbc52388          SMLALBB  r2,r3,r5,r8
000058  4692              MOV      r10,r2
;;;110          real_sum -= (q31_t)b0 * d0;
00005a  fb1cf208          SMULBB   r2,r12,r8
00005e  ebb90902          SUBS     r9,r9,r2
000062  eb6474e2          SBC      r4,r4,r2,ASR #31
;;;111          imag_sum += (q31_t)b0 * c0;
000066  4652              MOV      r2,r10
000068  fbcc2386          SMLALBB  r2,r3,r12,r6
;;;112          
;;;113          a0 = *pSrcA++;
00006c  f9b05008          LDRSH    r5,[r0,#8]
;;;114          b0 = *pSrcA++;
000070  f9b0c00a          LDRSH    r12,[r0,#0xa]
;;;115          c0 = *pSrcB++;
000074  f9b16008          LDRSH    r6,[r1,#8]
;;;116          d0 = *pSrcB++;  
000078  f9b1800a          LDRSH    r8,[r1,#0xa]
;;;117      
;;;118          real_sum += (q31_t)a0 * c0;
00007c  fbc59486          SMLALBB  r9,r4,r5,r6
;;;119          imag_sum += (q31_t)a0 * d0;
000080  fbc52388          SMLALBB  r2,r3,r5,r8
000084  469a              MOV      r10,r3
;;;120          real_sum -= (q31_t)b0 * d0;
000086  fb1cf308          SMULBB   r3,r12,r8
00008a  ebb90903          SUBS     r9,r9,r3
00008e  eb6474e3          SBC      r4,r4,r3,ASR #31
;;;121          imag_sum += (q31_t)b0 * c0;
000092  4653              MOV      r3,r10
000094  fbcc2386          SMLALBB  r2,r3,r12,r6
;;;122          
;;;123          a0 = *pSrcA++;
000098  f9305f0c          LDRSH    r5,[r0,#0xc]!
;;;124          b0 = *pSrcA++;
;;;125          c0 = *pSrcB++;
00009c  f9316f0c          LDRSH    r6,[r1,#0xc]!
0000a0  f9b0c002          LDRSH    r12,[r0,#2]           ;124
;;;126          d0 = *pSrcB++;  
0000a4  f9b18002          LDRSH    r8,[r1,#2]
;;;127      
;;;128          real_sum += (q31_t)a0 * c0;
0000a8  fbc59486          SMLALBB  r9,r4,r5,r6
;;;129          imag_sum += (q31_t)a0 * d0;
0000ac  fbc52388          SMLALBB  r2,r3,r5,r8
0000b0  4692              MOV      r10,r2
;;;130          real_sum -= (q31_t)b0 * d0;
0000b2  fb1cf208          SMULBB   r2,r12,r8
0000b6  ebb90502          SUBS     r5,r9,r2
0000ba  eb6474e2          SBC      r4,r4,r2,ASR #31
0000be  f1000004          ADD      r0,r0,#4
0000c2  f1010104          ADD      r1,r1,#4
;;;131          imag_sum += (q31_t)b0 * c0;
0000c6  4652              MOV      r2,r10
0000c8  fbcc2386          SMLALBB  r2,r3,r12,r6
0000cc  f1a70701          SUB      r7,r7,#1
                  |L1.208|
0000d0  2f00              CMP      r7,#0                 ;91
0000d2  d19f              BNE      |L1.20|
;;;132    
;;;133          /* Decrement the loop counter */
;;;134          blkCnt--;
;;;135      }
;;;136    
;;;137      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;138       ** No loop unrolling is used. */
;;;139      blkCnt = numSamples % 0x4u;
0000d4  f00e0c03          AND      r12,lr,#3
;;;140    
;;;141      while(blkCnt > 0u)
0000d8  e015              B        |L1.262|
;;;142      {
;;;143          a0 = *pSrcA++;
0000da  bf00              NOP      
                  |L1.220|
0000dc  f9306b02          LDRSH    r6,[r0],#2
;;;144          b0 = *pSrcA++;
;;;145          c0 = *pSrcB++;
0000e0  f9317b02          LDRSH    r7,[r1],#2
0000e4  f9309b02          LDRSH    r9,[r0],#2            ;144
;;;146          d0 = *pSrcB++;  
0000e8  f9318b02          LDRSH    r8,[r1],#2
;;;147      
;;;148          real_sum += (q31_t)a0 * c0;
0000ec  fbc65487          SMLALBB  r5,r4,r6,r7
;;;149          imag_sum += (q31_t)a0 * d0;
0000f0  fbc62388          SMLALBB  r2,r3,r6,r8
;;;150          real_sum -= (q31_t)b0 * d0;
0000f4  fb19f608          SMULBB   r6,r9,r8
0000f8  1bad              SUBS     r5,r5,r6
0000fa  eb6474e6          SBC      r4,r4,r6,ASR #31
;;;151          imag_sum += (q31_t)b0 * c0;
0000fe  fbc92387          SMLALBB  r2,r3,r9,r7
000102  f1ac0c01          SUB      r12,r12,#1
                  |L1.262|
000106  f1bc0f00          CMP      r12,#0                ;141
00010a  d1e7              BNE      |L1.220|
;;;152    
;;;153          /* Decrement the loop counter */
;;;154          blkCnt--;
;;;155      }
;;;156    
;;;157    #else
;;;158    
;;;159      /* Run the below code for Cortex-M0 */
;;;160    
;;;161      while(numSamples > 0u)
;;;162      {
;;;163          a0 = *pSrcA++;
;;;164          b0 = *pSrcA++;
;;;165          c0 = *pSrcB++;
;;;166          d0 = *pSrcB++;  
;;;167      
;;;168          real_sum += a0 * c0;
;;;169          imag_sum += a0 * d0;
;;;170          real_sum -= b0 * d0;
;;;171          imag_sum += b0 * c0;
;;;172    
;;;173    
;;;174          /* Decrement the loop counter */
;;;175          numSamples--;
;;;176      }
;;;177    
;;;178    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;179    
;;;180      /* Store the real and imaginary results in 8.24 format  */
;;;181      /* Convert real data in 34.30 to 8.24 by 6 right shifts */
;;;182      *realResult = (q31_t) (real_sum >> 6);
00010c  9903              LDR      r1,[sp,#0xc]
00010e  09a8              LSRS     r0,r5,#6
000110  ea406084          ORR      r0,r0,r4,LSL #26
;;;183      /* Convert imaginary data in 34.30 to 8.24 by 6 right shifts */
;;;184      *imagResult = (q31_t) (imag_sum >> 6);
000114  6008              STR      r0,[r1,#0]
000116  990d              LDR      r1,[sp,#0x34]
000118  0990              LSRS     r0,r2,#6
00011a  ea406083          ORR      r0,r0,r3,LSL #26
00011e  6008              STR      r0,[r1,#0]
;;;185    }
000120  e8bd8fff          POP      {r0-r11,pc}
;;;186    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_dot_prod_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REVSH|
#line 144
|__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____RRX|
#line 300
|__asm___24_arm_cmplx_dot_prod_q15_c_581b2599____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
