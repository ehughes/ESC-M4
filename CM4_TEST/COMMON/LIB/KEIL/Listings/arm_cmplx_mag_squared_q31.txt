; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_squared_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_squared_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mag_squared_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_squared_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_squared_q31||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mag_squared_q31 PROC
;;;65     
;;;66     void arm_cmplx_mag_squared_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q31_t * pSrc,
;;;68       q31_t * pDst,
;;;69       uint32_t numSamples)
;;;70     {
;;;71       q31_t real, imag;                              /* Temporary variables to store real and imaginary values */
;;;72       q31_t acc0, acc1;                              /* Accumulators */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       uint32_t blkCnt;                               /* loop counter */
;;;78     
;;;79       /* loop Unrolling */
;;;80       blkCnt = numSamples >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e02b              B        |L1.94|
000006  bf00              NOP                            ;70
                  |L1.8|
000008  e8f04502          LDRD     r4,r5,[r0],#8         ;70
;;;81     
;;;82       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;83        ** a second loop below computes the remaining 1 to 3 samples. */
;;;84       while(blkCnt > 0u)
;;;85       {
;;;86         /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;87         real = *pSrc++;
;;;88         imag = *pSrc++;
;;;89         acc0 = (q31_t) (((q63_t) real * real) >> 33);
00000c  fb846404          SMULL    r6,r4,r4,r4
;;;90         acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000010  fb856505          SMULL    r6,r5,r5,r5
000014  1064              ASRS     r4,r4,#1              ;89
;;;91         /* store the result in 3.29 format in the destination buffer. */
;;;92         *pDst++ = acc0 + acc1;
000016  eb040465          ADD      r4,r4,r5,ASR #1
00001a  c110              STM      r1!,{r4}
00001c  e8f05402          LDRD     r5,r4,[r0],#8
;;;93     
;;;94         real = *pSrc++;
;;;95         imag = *pSrc++;
;;;96         acc0 = (q31_t) (((q63_t) real * real) >> 33);
000020  fb856505          SMULL    r6,r5,r5,r5
;;;97         acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000024  fb846404          SMULL    r6,r4,r4,r4
000028  106d              ASRS     r5,r5,#1              ;96
;;;98         /* store the result in 3.29 format in the destination buffer. */
;;;99         *pDst++ = acc0 + acc1;
00002a  eb050464          ADD      r4,r5,r4,ASR #1
00002e  c110              STM      r1!,{r4}
000030  e8f04504          LDRD     r4,r5,[r0],#0x10
;;;100    
;;;101        real = *pSrc++;
;;;102        imag = *pSrc++;
;;;103        acc0 = (q31_t) (((q63_t) real * real) >> 33);
000034  fb846404          SMULL    r6,r4,r4,r4
;;;104        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000038  fb856505          SMULL    r6,r5,r5,r5
00003c  1064              ASRS     r4,r4,#1              ;103
;;;105        /* store the result in 3.29 format in the destination buffer. */
;;;106        *pDst++ = acc0 + acc1;
00003e  eb040465          ADD      r4,r4,r5,ASR #1
000042  f8414b08          STR      r4,[r1],#8
000046  e9505402          LDRD     r5,r4,[r0,#-8]
;;;107    
;;;108        real = *pSrc++;
;;;109        imag = *pSrc++;
;;;110        acc0 = (q31_t) (((q63_t) real * real) >> 33);
00004a  fb856505          SMULL    r6,r5,r5,r5
;;;111        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
00004e  fb846404          SMULL    r6,r4,r4,r4
000052  106d              ASRS     r5,r5,#1              ;110
;;;112        /* store the result in 3.29 format in the destination buffer. */
;;;113        *pDst++ = acc0 + acc1;
000054  eb050464          ADD      r4,r5,r4,ASR #1
000058  f8414c04          STR      r4,[r1,#-4]
00005c  1e5b              SUBS     r3,r3,#1
                  |L1.94|
00005e  2b00              CMP      r3,#0                 ;84
000060  d1d2              BNE      |L1.8|
;;;114    
;;;115        /* Decrement the loop counter */
;;;116        blkCnt--;
;;;117      }
;;;118    
;;;119      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;120       ** No loop unrolling is used. */
;;;121      blkCnt = numSamples % 0x4u;
000062  f0020203          AND      r2,r2,#3
;;;122    
;;;123      while(blkCnt > 0u)
000066  e00a              B        |L1.126|
                  |L1.104|
000068  e8f03402          LDRD     r3,r4,[r0],#8
;;;124      {
;;;125        /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;126        real = *pSrc++;
;;;127        imag = *pSrc++;
;;;128        acc0 = (q31_t) (((q63_t) real * real) >> 33);
00006c  fb835303          SMULL    r5,r3,r3,r3
;;;129        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000070  fb845404          SMULL    r5,r4,r4,r4
000074  105b              ASRS     r3,r3,#1              ;128
;;;130        /* store the result in 3.29 format in the destination buffer. */
;;;131        *pDst++ = acc0 + acc1;
000076  eb030364          ADD      r3,r3,r4,ASR #1
00007a  c108              STM      r1!,{r3}
00007c  1e52              SUBS     r2,r2,#1
                  |L1.126|
00007e  2a00              CMP      r2,#0                 ;123
000080  d1f2              BNE      |L1.104|
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
;;;135      }
;;;136    
;;;137    #else
;;;138    
;;;139      /* Run the below code for Cortex-M0 */
;;;140    
;;;141      while(numSamples > 0u)
;;;142      {
;;;143        /* out = ((real * real) + (imag * imag)) */
;;;144        real = *pSrc++;
;;;145        imag = *pSrc++;
;;;146        acc0 = (q31_t) (((q63_t) real * real) >> 33);
;;;147        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
;;;148        /* store the result in 3.29 format in the destination buffer. */
;;;149        *pDst++ = acc0 + acc1;
;;;150    
;;;151        /* Decrement the loop counter */
;;;152        numSamples--;
;;;153      }
;;;154    
;;;155    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;156    
;;;157    }
000082  bd70              POP      {r4-r6,pc}
;;;158    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_squared_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REVSH|
#line 144
|__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____RRX|
#line 300
|__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
