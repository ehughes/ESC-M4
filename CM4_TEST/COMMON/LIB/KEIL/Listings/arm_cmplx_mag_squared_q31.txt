; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_squared_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_squared_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_mag_squared_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_squared_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_squared_q31||, CODE, READONLY, ALIGN=1

                  arm_cmplx_mag_squared_q31 PROC
;;;65     
;;;66     void arm_cmplx_mag_squared_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q31_t * pSrc,
;;;68       q31_t * pDst,
;;;69       uint32_t numSamples)
;;;70     {
;;;71       q31_t real, imag;                              /* Temporary variables to store real and imaginary values */
;;;72       q31_t acc0, acc1;                              /* Accumulators */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       uint32_t blkCnt;                               /* loop counter */
;;;78     
;;;79       /* loop Unrolling */
;;;80       blkCnt = numSamples >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e02a              B        |L1.92|
                  |L1.6|
;;;81     
;;;82       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;83        ** a second loop below computes the remaining 1 to 3 samples. */
;;;84       while(blkCnt > 0u)
;;;85       {
;;;86         /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;87         real = *pSrc++;
000006  6804              LDR      r4,[r0,#0]
;;;88         imag = *pSrc++;
000008  6845              LDR      r5,[r0,#4]
;;;89         acc0 = (q31_t) (((q63_t) real * real) >> 33);
00000a  fb846404          SMULL    r6,r4,r4,r4
00000e  1064              ASRS     r4,r4,#1
;;;90         acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000010  fb856505          SMULL    r6,r5,r5,r5
000014  106d              ASRS     r5,r5,#1
;;;91         /* store the result in 3.29 format in the destination buffer. */
;;;92         *pDst++ = acc0 + acc1;
000016  442c              ADD      r4,r4,r5
000018  600c              STR      r4,[r1,#0]
;;;93     
;;;94         real = *pSrc++;
00001a  6884              LDR      r4,[r0,#8]
;;;95         imag = *pSrc++;
00001c  68c5              LDR      r5,[r0,#0xc]
;;;96         acc0 = (q31_t) (((q63_t) real * real) >> 33);
00001e  fb846404          SMULL    r6,r4,r4,r4
000022  1064              ASRS     r4,r4,#1
;;;97         acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000024  fb856505          SMULL    r6,r5,r5,r5
000028  106d              ASRS     r5,r5,#1
;;;98         /* store the result in 3.29 format in the destination buffer. */
;;;99         *pDst++ = acc0 + acc1;
00002a  442c              ADD      r4,r4,r5
00002c  604c              STR      r4,[r1,#4]
;;;100    
;;;101        real = *pSrc++;
00002e  6904              LDR      r4,[r0,#0x10]
;;;102        imag = *pSrc++;
000030  6945              LDR      r5,[r0,#0x14]
;;;103        acc0 = (q31_t) (((q63_t) real * real) >> 33);
000032  fb846404          SMULL    r6,r4,r4,r4
000036  1064              ASRS     r4,r4,#1
;;;104        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000038  fb856505          SMULL    r6,r5,r5,r5
00003c  106d              ASRS     r5,r5,#1
;;;105        /* store the result in 3.29 format in the destination buffer. */
;;;106        *pDst++ = acc0 + acc1;
00003e  442c              ADD      r4,r4,r5
000040  608c              STR      r4,[r1,#8]
;;;107    
;;;108        real = *pSrc++;
000042  6984              LDR      r4,[r0,#0x18]
;;;109        imag = *pSrc++;
000044  69c5              LDR      r5,[r0,#0x1c]
000046  3020              ADDS     r0,r0,#0x20
;;;110        acc0 = (q31_t) (((q63_t) real * real) >> 33);
000048  fb846404          SMULL    r6,r4,r4,r4
00004c  1064              ASRS     r4,r4,#1
;;;111        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
00004e  fb856505          SMULL    r6,r5,r5,r5
000052  106d              ASRS     r5,r5,#1
;;;112        /* store the result in 3.29 format in the destination buffer. */
;;;113        *pDst++ = acc0 + acc1;
000054  442c              ADD      r4,r4,r5
000056  60cc              STR      r4,[r1,#0xc]
000058  3110              ADDS     r1,r1,#0x10
;;;114    
;;;115        /* Decrement the loop counter */
;;;116        blkCnt--;
00005a  1e5b              SUBS     r3,r3,#1
                  |L1.92|
00005c  2b00              CMP      r3,#0                 ;84
00005e  d1d2              BNE      |L1.6|
;;;117      }
;;;118    
;;;119      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;120       ** No loop unrolling is used. */
;;;121      blkCnt = numSamples % 0x4u;
000060  f0020203          AND      r2,r2,#3
;;;122    
;;;123      while(blkCnt > 0u)
000064  e00b              B        |L1.126|
                  |L1.102|
;;;124      {
;;;125        /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
;;;126        real = *pSrc++;
000066  6803              LDR      r3,[r0,#0]
;;;127        imag = *pSrc++;
000068  6844              LDR      r4,[r0,#4]
00006a  3008              ADDS     r0,r0,#8
;;;128        acc0 = (q31_t) (((q63_t) real * real) >> 33);
00006c  fb835303          SMULL    r5,r3,r3,r3
000070  105b              ASRS     r3,r3,#1
;;;129        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
000072  fb845404          SMULL    r5,r4,r4,r4
000076  1064              ASRS     r4,r4,#1
;;;130        /* store the result in 3.29 format in the destination buffer. */
;;;131        *pDst++ = acc0 + acc1;
000078  4423              ADD      r3,r3,r4
00007a  c108              STM      r1!,{r3}
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
00007c  1e52              SUBS     r2,r2,#1
                  |L1.126|
00007e  2a00              CMP      r2,#0                 ;123
000080  d1f1              BNE      |L1.102|
;;;135      }
;;;136    
;;;137    #else
;;;138    
;;;139      /* Run the below code for Cortex-M0 */
;;;140    
;;;141      while(numSamples > 0u)
;;;142      {
;;;143        /* out = ((real * real) + (imag * imag)) */
;;;144        real = *pSrc++;
;;;145        imag = *pSrc++;
;;;146        acc0 = (q31_t) (((q63_t) real * real) >> 33);
;;;147        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
;;;148        /* store the result in 3.29 format in the destination buffer. */
;;;149        *pDst++ = acc0 + acc1;
;;;150    
;;;151        /* Decrement the loop counter */
;;;152        numSamples--;
;;;153      }
;;;154    
;;;155    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;156    
;;;157    }
000082  bd70              POP      {r4-r6,pc}
;;;158    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_squared_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REVSH|
#line 144
|__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____RRX|
#line 300
|__asm___27_arm_cmplx_mag_squared_q31_c_ba29f82c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
