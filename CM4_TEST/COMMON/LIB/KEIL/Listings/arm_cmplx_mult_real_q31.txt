; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mult_real_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mult_real_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_mult_real_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mult_real_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_mult_real_q31||, CODE, READONLY, ALIGN=1

                  arm_cmplx_mult_real_q31 PROC
;;;66     
;;;67     void arm_cmplx_mult_real_q31(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;68       q31_t * pSrcCmplx,
;;;69       q31_t * pSrcReal,
;;;70       q31_t * pCmplxDst,
;;;71       uint32_t numSamples)
;;;72     {
;;;73       q31_t inA1;                                    /* Temporary variable to store input value */
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       uint32_t blkCnt;                               /* loop counters */
;;;79       q31_t inA2, inA3, inA4;                        /* Temporary variables to hold input data */
;;;80       q31_t inB1, inB2;                              /* Temporary variabels to hold input data */
;;;81       q31_t out1, out2, out3, out4;                  /* Temporary variables to hold output data */
;;;82     
;;;83       /* loop Unrolling */
;;;84       blkCnt = numSamples >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e04c              B        |L1.162|
                  |L1.8|
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C[2 * i] = A[2 * i] * B[i].            */
;;;91         /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;92         /* read real input from complex input buffer */
;;;93         inA1 = *pSrcCmplx++;
000008  6807              LDR      r7,[r0,#0]
;;;94         inA2 = *pSrcCmplx++;
00000a  f8d0c004          LDR      r12,[r0,#4]
;;;95         /* read input from real input bufer */
;;;96         inB1 = *pSrcReal++;
00000e  680d              LDR      r5,[r1,#0]
;;;97         inB2 = *pSrcReal++;
000010  684e              LDR      r6,[r1,#4]
;;;98         /* read imaginary input from complex input buffer */
;;;99         inA3 = *pSrcCmplx++;
000012  f8d08008          LDR      r8,[r0,#8]
;;;100        inA4 = *pSrcCmplx++;
000016  f8d0900c          LDR      r9,[r0,#0xc]
;;;101    
;;;102        /* multiply complex input with real input */
;;;103        out1 = ((q63_t) inA1 * inB1) >> 32;
00001a  fb57f705          SMMUL    r7,r7,r5
;;;104        out2 = ((q63_t) inA2 * inB1) >> 32;
00001e  fb5cf505          SMMUL    r5,r12,r5
;;;105        out3 = ((q63_t) inA3 * inB2) >> 32;
000022  fb58fc06          SMMUL    r12,r8,r6
;;;106        out4 = ((q63_t) inA4 * inB2) >> 32;
000026  fb59f606          SMMUL    r6,r9,r6
;;;107    
;;;108        /* sature the result */
;;;109        out1 = __SSAT(out1, 31);
00002a  f307071e          SSAT     r7,#31,r7
;;;110        out2 = __SSAT(out2, 31);
00002e  f305051e          SSAT     r5,#31,r5
;;;111        out3 = __SSAT(out3, 31);
000032  f30c081e          SSAT     r8,#31,r12
;;;112        out4 = __SSAT(out4, 31);
000036  f306091e          SSAT     r9,#31,r6
;;;113    
;;;114        /* get result in 1.31 format */
;;;115        out1 = out1 << 1;
00003a  ea4f0c47          LSL      r12,r7,#1
;;;116        out2 = out2 << 1;
00003e  006f              LSLS     r7,r5,#1
;;;117        out3 = out3 << 1;
000040  ea4f0648          LSL      r6,r8,#1
;;;118        out4 = out4 << 1;
000044  ea4f0549          LSL      r5,r9,#1
;;;119    
;;;120        /* store the result to destination buffer */
;;;121        *pCmplxDst++ = out1;
000048  f8c2c000          STR      r12,[r2,#0]
;;;122        *pCmplxDst++ = out2;
00004c  6057              STR      r7,[r2,#4]
;;;123        *pCmplxDst++ = out3;
00004e  6096              STR      r6,[r2,#8]
;;;124        *pCmplxDst++ = out4;
000050  60d5              STR      r5,[r2,#0xc]
;;;125    
;;;126        /* read real input from complex input buffer */
;;;127        inA1 = *pSrcCmplx++;
000052  6907              LDR      r7,[r0,#0x10]
000054  3014              ADDS     r0,r0,#0x14
;;;128        inA2 = *pSrcCmplx++;
000056  f850cb04          LDR      r12,[r0],#4
;;;129        /* read input from real input bufer */
;;;130        inB1 = *pSrcReal++;
00005a  688d              LDR      r5,[r1,#8]
;;;131        inB2 = *pSrcReal++;
00005c  68ce              LDR      r6,[r1,#0xc]
00005e  3110              ADDS     r1,r1,#0x10
;;;132        /* read imaginary input from complex input buffer */
;;;133        inA3 = *pSrcCmplx++;
000060  f8508b04          LDR      r8,[r0],#4
;;;134        inA4 = *pSrcCmplx++;
000064  f8509b04          LDR      r9,[r0],#4
;;;135    
;;;136        /* multiply complex input with real input */
;;;137        out1 = ((q63_t) inA1 * inB1) >> 32;
000068  fb57f705          SMMUL    r7,r7,r5
;;;138        out2 = ((q63_t) inA2 * inB1) >> 32;
00006c  fb5cf505          SMMUL    r5,r12,r5
;;;139        out3 = ((q63_t) inA3 * inB2) >> 32;
000070  fb58fc06          SMMUL    r12,r8,r6
;;;140        out4 = ((q63_t) inA4 * inB2) >> 32;
000074  fb59f806          SMMUL    r8,r9,r6
;;;141    
;;;142        /* sature the result */
;;;143        out1 = __SSAT(out1, 31);
000078  f307061e          SSAT     r6,#31,r7
;;;144        out2 = __SSAT(out2, 31);
00007c  f305051e          SSAT     r5,#31,r5
;;;145        out3 = __SSAT(out3, 31);
000080  f30c071e          SSAT     r7,#31,r12
;;;146        out4 = __SSAT(out4, 31);
000084  f308081e          SSAT     r8,#31,r8
;;;147    
;;;148        /* get result in 1.31 format */
;;;149        out1 = out1 << 1;
000088  ea4f0c46          LSL      r12,r6,#1
;;;150        out2 = out2 << 1;
00008c  006d              LSLS     r5,r5,#1
;;;151        out3 = out3 << 1;
00008e  007e              LSLS     r6,r7,#1
;;;152        out4 = out4 << 1;
000090  ea4f0748          LSL      r7,r8,#1
;;;153    
;;;154        /* store the result to destination buffer */
;;;155        *pCmplxDst++ = out1;
000094  f8c2c010          STR      r12,[r2,#0x10]
;;;156        *pCmplxDst++ = out2;
000098  6155              STR      r5,[r2,#0x14]
;;;157        *pCmplxDst++ = out3;
00009a  6196              STR      r6,[r2,#0x18]
;;;158        *pCmplxDst++ = out4;
00009c  61d7              STR      r7,[r2,#0x1c]
00009e  3220              ADDS     r2,r2,#0x20
;;;159    
;;;160        /* Decrement the numSamples loop counter */
;;;161        blkCnt--;
0000a0  1e64              SUBS     r4,r4,#1
                  |L1.162|
0000a2  2c00              CMP      r4,#0                 ;88
0000a4  d1b0              BNE      |L1.8|
;;;162      }
;;;163    
;;;164      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;165       ** No loop unrolling is used. */
;;;166      blkCnt = numSamples % 0x4u;
0000a6  f0030303          AND      r3,r3,#3
;;;167    
;;;168      while(blkCnt > 0u)
0000aa  e011              B        |L1.208|
                  |L1.172|
;;;169      {
;;;170        /* C[2 * i] = A[2 * i] * B[i].            */
;;;171        /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;172        /* read real input from complex input buffer */
;;;173        inA1 = *pSrcCmplx++;
0000ac  6806              LDR      r6,[r0,#0]
;;;174        inA2 = *pSrcCmplx++;
0000ae  6845              LDR      r5,[r0,#4]
0000b0  3008              ADDS     r0,r0,#8
;;;175        /* read input from real input bufer */
;;;176        inB1 = *pSrcReal++;
0000b2  c910              LDM      r1!,{r4}
;;;177    
;;;178        /* multiply complex input with real input */
;;;179        out1 = ((q63_t) inA1 * inB1) >> 32;
0000b4  fb56f604          SMMUL    r6,r6,r4
;;;180        out2 = ((q63_t) inA2 * inB1) >> 32;
0000b8  fb55f504          SMMUL    r5,r5,r4
;;;181    
;;;182        /* sature the result */
;;;183        out1 = __SSAT(out1, 31);
0000bc  f306041e          SSAT     r4,#31,r6
;;;184        out2 = __SSAT(out2, 31);
0000c0  f305051e          SSAT     r5,#31,r5
;;;185    
;;;186        /* get result in 1.31 format */
;;;187        out1 = out1 << 1;
0000c4  0064              LSLS     r4,r4,#1
;;;188        out2 = out2 << 1;
0000c6  006d              LSLS     r5,r5,#1
;;;189    
;;;190        /* store the result to destination buffer */
;;;191        *pCmplxDst++ = out1;
0000c8  6014              STR      r4,[r2,#0]
;;;192        *pCmplxDst++ = out2;
0000ca  6055              STR      r5,[r2,#4]
0000cc  3208              ADDS     r2,r2,#8
;;;193    
;;;194        /* Decrement the numSamples loop counter */
;;;195        blkCnt--;
0000ce  1e5b              SUBS     r3,r3,#1
                  |L1.208|
0000d0  2b00              CMP      r3,#0                 ;168
0000d2  d1eb              BNE      |L1.172|
;;;196      }
;;;197    
;;;198    #else
;;;199    
;;;200      /* Run the below code for Cortex-M0 */
;;;201    
;;;202      while(numSamples > 0u)
;;;203      {
;;;204        /* realOut = realA * realB.            */
;;;205        /* imagReal = imagA * realB.               */
;;;206        inA1 = *pSrcReal++;
;;;207        /* store the result in the destination buffer. */
;;;208        *pCmplxDst++ =
;;;209          (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
;;;210        *pCmplxDst++ =
;;;211          (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
;;;212    
;;;213        /* Decrement the numSamples loop counter */
;;;214        numSamples--;
;;;215      }
;;;216    
;;;217    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;218    
;;;219    }
0000d4  e8bd83f0          POP      {r4-r9,pc}
;;;220    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mult_real_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REVSH|
#line 144
|__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____RRX|
#line 300
|__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
