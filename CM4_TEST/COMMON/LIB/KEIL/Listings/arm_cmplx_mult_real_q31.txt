; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mult_real_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mult_real_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cmplx_mult_real_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mult_real_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_mult_real_q31||, CODE, READONLY, ALIGN=2

                  arm_cmplx_mult_real_q31 PROC
;;;66     
;;;67     void arm_cmplx_mult_real_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;68       q31_t * pSrcCmplx,
;;;69       q31_t * pSrcReal,
;;;70       q31_t * pCmplxDst,
;;;71       uint32_t numSamples)
;;;72     {
;;;73       q31_t inA1;                                    /* Temporary variable to store input value */
;;;74     
;;;75     #ifndef ARM_MATH_CM0_FAMILY
;;;76     
;;;77       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;78       uint32_t blkCnt;                               /* loop counters */
;;;79       q31_t inA2, inA3, inA4;                        /* Temporary variables to hold input data */
;;;80       q31_t inB1, inB2;                              /* Temporary variabels to hold input data */
;;;81       q31_t out1, out2, out3, out4;                  /* Temporary variables to hold output data */
;;;82     
;;;83       /* loop Unrolling */
;;;84       blkCnt = numSamples >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e043              B        |L1.144|
                  |L1.8|
000008  e8f07802          LDRD     r7,r8,[r0],#8         ;72
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C[2 * i] = A[2 * i] * B[i].            */
;;;91         /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;92         /* read real input from complex input buffer */
;;;93         inA1 = *pSrcCmplx++;
;;;94         inA2 = *pSrcCmplx++;
00000c  46c2              MOV      r10,r8
00000e  e8f15602          LDRD     r5,r6,[r1],#8
000012  e8f0c802          LDRD     r12,r8,[r0],#8
;;;95         /* read input from real input bufer */
;;;96         inB1 = *pSrcReal++;
;;;97         inB2 = *pSrcReal++;
;;;98         /* read imaginary input from complex input buffer */
;;;99         inA3 = *pSrcCmplx++;
;;;100        inA4 = *pSrcCmplx++;
;;;101    
;;;102        /* multiply complex input with real input */
;;;103        out1 = ((q63_t) inA1 * inB1) >> 32;
000016  fb57f705          SMMUL    r7,r7,r5
;;;104        out2 = ((q63_t) inA2 * inB1) >> 32;
00001a  fb5af505          SMMUL    r5,r10,r5
;;;105        out3 = ((q63_t) inA3 * inB2) >> 32;
00001e  fb5cfc06          SMMUL    r12,r12,r6
;;;106        out4 = ((q63_t) inA4 * inB2) >> 32;
000022  fb58f606          SMMUL    r6,r8,r6
;;;107    
;;;108        /* sature the result */
;;;109        out1 = __SSAT(out1, 31);
000026  f307071e          SSAT     r7,#31,r7
;;;110        out2 = __SSAT(out2, 31);
00002a  f305051e          SSAT     r5,#31,r5
;;;111        out3 = __SSAT(out3, 31);
;;;112        out4 = __SSAT(out4, 31);
;;;113    
;;;114        /* get result in 1.31 format */
;;;115        out1 = out1 << 1;
00002e  007f              LSLS     r7,r7,#1
;;;116        out2 = out2 << 1;
000030  006d              LSLS     r5,r5,#1
;;;117        out3 = out3 << 1;
;;;118        out4 = out4 << 1;
000032  e8e27502          STRD     r7,r5,[r2],#8
000036  f30c0c1e          SSAT     r12,#31,r12           ;111
00003a  f306061e          SSAT     r6,#31,r6             ;112
00003e  ea4f0c4c          LSL      r12,r12,#1            ;117
000042  0076              LSLS     r6,r6,#1
000044  e8e2c602          STRD     r12,r6,[r2],#8
000048  e8f08704          LDRD     r8,r7,[r0],#0x10
00004c  e8f16502          LDRD     r6,r5,[r1],#8
;;;119    
;;;120        /* store the result to destination buffer */
;;;121        *pCmplxDst++ = out1;
;;;122        *pCmplxDst++ = out2;
;;;123        *pCmplxDst++ = out3;
;;;124        *pCmplxDst++ = out4;
;;;125    
;;;126        /* read real input from complex input buffer */
;;;127        inA1 = *pSrcCmplx++;
;;;128        inA2 = *pSrcCmplx++;
;;;129        /* read input from real input bufer */
;;;130        inB1 = *pSrcReal++;
;;;131        inB2 = *pSrcReal++;
;;;132        /* read imaginary input from complex input buffer */
;;;133        inA3 = *pSrcCmplx++;
000050  f850cc08          LDR      r12,[r0,#-8]
;;;134        inA4 = *pSrcCmplx++;
000054  f8509c04          LDR      r9,[r0,#-4]
;;;135    
;;;136        /* multiply complex input with real input */
;;;137        out1 = ((q63_t) inA1 * inB1) >> 32;
000058  fb58f806          SMMUL    r8,r8,r6
;;;138        out2 = ((q63_t) inA2 * inB1) >> 32;
00005c  fb57f606          SMMUL    r6,r7,r6
;;;139        out3 = ((q63_t) inA3 * inB2) >> 32;
000060  fb5cf705          SMMUL    r7,r12,r5
;;;140        out4 = ((q63_t) inA4 * inB2) >> 32;
000064  fb59f505          SMMUL    r5,r9,r5
;;;141    
;;;142        /* sature the result */
;;;143        out1 = __SSAT(out1, 31);
000068  f3080c1e          SSAT     r12,#31,r8
;;;144        out2 = __SSAT(out2, 31);
;;;145        out3 = __SSAT(out3, 31);
;;;146        out4 = __SSAT(out4, 31);
00006c  f305081e          SSAT     r8,#31,r5
000070  f306061e          SSAT     r6,#31,r6             ;144
;;;147    
;;;148        /* get result in 1.31 format */
;;;149        out1 = out1 << 1;
000074  ea4f054c          LSL      r5,r12,#1
;;;150        out2 = out2 << 1;
000078  ea4f0c46          LSL      r12,r6,#1
00007c  f307071e          SSAT     r7,#31,r7             ;145
;;;151        out3 = out3 << 1;
;;;152        out4 = out4 << 1;
000080  e8e25c04          STRD     r5,r12,[r2],#0x10
000084  007e              LSLS     r6,r7,#1              ;151
000086  ea4f0748          LSL      r7,r8,#1
00008a  e9426702          STRD     r6,r7,[r2,#-8]
00008e  1e64              SUBS     r4,r4,#1
                  |L1.144|
000090  2c00              CMP      r4,#0                 ;88
000092  d1b9              BNE      |L1.8|
;;;153    
;;;154        /* store the result to destination buffer */
;;;155        *pCmplxDst++ = out1;
;;;156        *pCmplxDst++ = out2;
;;;157        *pCmplxDst++ = out3;
;;;158        *pCmplxDst++ = out4;
;;;159    
;;;160        /* Decrement the numSamples loop counter */
;;;161        blkCnt--;
;;;162      }
;;;163    
;;;164      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;165       ** No loop unrolling is used. */
;;;166      blkCnt = numSamples % 0x4u;
000094  f0030303          AND      r3,r3,#3
;;;167    
;;;168      while(blkCnt > 0u)
000098  e010              B        |L1.188|
00009a  bf00              NOP      
                  |L1.156|
00009c  e8f05602          LDRD     r5,r6,[r0],#8
;;;169      {
;;;170        /* C[2 * i] = A[2 * i] * B[i].            */
;;;171        /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
;;;172        /* read real input from complex input buffer */
;;;173        inA1 = *pSrcCmplx++;
;;;174        inA2 = *pSrcCmplx++;
;;;175        /* read input from real input bufer */
;;;176        inB1 = *pSrcReal++;
0000a0  c910              LDM      r1!,{r4}
;;;177    
;;;178        /* multiply complex input with real input */
;;;179        out1 = ((q63_t) inA1 * inB1) >> 32;
0000a2  fb55f504          SMMUL    r5,r5,r4
;;;180        out2 = ((q63_t) inA2 * inB1) >> 32;
0000a6  fb56f604          SMMUL    r6,r6,r4
;;;181    
;;;182        /* sature the result */
;;;183        out1 = __SSAT(out1, 31);
0000aa  f305041e          SSAT     r4,#31,r5
;;;184        out2 = __SSAT(out2, 31);
0000ae  f306051e          SSAT     r5,#31,r6
;;;185    
;;;186        /* get result in 1.31 format */
;;;187        out1 = out1 << 1;
0000b2  0066              LSLS     r6,r4,#1
;;;188        out2 = out2 << 1;
0000b4  006c              LSLS     r4,r5,#1
0000b6  e8e26402          STRD     r6,r4,[r2],#8
0000ba  1e5b              SUBS     r3,r3,#1
                  |L1.188|
0000bc  2b00              CMP      r3,#0                 ;168
0000be  d1ed              BNE      |L1.156|
;;;189    
;;;190        /* store the result to destination buffer */
;;;191        *pCmplxDst++ = out1;
;;;192        *pCmplxDst++ = out2;
;;;193    
;;;194        /* Decrement the numSamples loop counter */
;;;195        blkCnt--;
;;;196      }
;;;197    
;;;198    #else
;;;199    
;;;200      /* Run the below code for Cortex-M0 */
;;;201    
;;;202      while(numSamples > 0u)
;;;203      {
;;;204        /* realOut = realA * realB.            */
;;;205        /* imagReal = imagA * realB.               */
;;;206        inA1 = *pSrcReal++;
;;;207        /* store the result in the destination buffer. */
;;;208        *pCmplxDst++ =
;;;209          (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
;;;210        *pCmplxDst++ =
;;;211          (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
;;;212    
;;;213        /* Decrement the numSamples loop counter */
;;;214        numSamples--;
;;;215      }
;;;216    
;;;217    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;218    
;;;219    }
0000c0  e8bd87f0          POP      {r4-r10,pc}
;;;220    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mult_real_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REVSH|
#line 144
|__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____RRX|
#line 300
|__asm___25_arm_cmplx_mult_real_q31_c_e13cbe3c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
