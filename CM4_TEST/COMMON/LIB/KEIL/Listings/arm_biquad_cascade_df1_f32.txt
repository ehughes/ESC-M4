; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_biquad_cascade_df1_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_biquad_cascade_df1_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_biquad_cascade_df1_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_biquad_cascade_df1_f32.c]
                          THUMB

                          AREA ||i.arm_biquad_cascade_df1_f32||, CODE, READONLY, ALIGN=2

                  arm_biquad_cascade_df1_f32 PROC
;;;177    
;;;178    void arm_biquad_cascade_df1_f32(
000000  b5f0              PUSH     {r4-r7,lr}
;;;179      const arm_biquad_casd_df1_inst_f32 * S,
;;;180      float32_t * pSrc,
;;;181      float32_t * pDst,
;;;182      uint32_t blockSize)
;;;183    {
;;;184      float32_t *pIn = pSrc;                         /*  source pointer            */
;;;185      float32_t *pOut = pDst;                        /*  destination pointer       */
;;;186      float32_t *pState = S->pState;                 /*  pState pointer            */
;;;187      float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
;;;188      float32_t acc;                                 /*  Simulates the accumulator */
;;;189      float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
;;;190      float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
;;;191      float32_t Xn;                                  /*  temporary input           */
;;;192      uint32_t sample, stage = S->numStages;         /*  loop counters             */
000002  e9d05601          LDRD     r5,r6,[r0,#4]
;;;193    
;;;194    
;;;195    #ifndef ARM_MATH_CM0_FAMILY
;;;196    
;;;197      /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;198    
;;;199      do
;;;200      {
;;;201        /* Reading the coefficients */
;;;202        b0 = *pCoeffs++;
;;;203        b1 = *pCoeffs++;
;;;204        b2 = *pCoeffs++;
;;;205        a1 = *pCoeffs++;
;;;206        a2 = *pCoeffs++;
;;;207    
;;;208        /* Reading the pState values */
;;;209        Xn1 = pState[0];
;;;210        Xn2 = pState[1];
;;;211        Yn1 = pState[2];
;;;212        Yn2 = pState[3];
;;;213    
;;;214        /* Apply loop unrolling and compute 4 output values simultaneously. */
;;;215        /*      The variable acc hold output values that are being computed:    
;;;216         *    
;;;217         *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
;;;218         *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
;;;219         *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
;;;220         *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
;;;221         */
;;;222    
;;;223        sample = blockSize >> 2u;
000006  f8d07000          LDR.W    r7,[r0,#0]
00000a  4614              MOV      r4,r2                 ;185
00000c  ea4f0c93          LSR      r12,r3,#2
                  |L1.16|
000010  edd63a00          VLDR     s7,[r6,#0]            ;202
000014  ed963a01          VLDR     s6,[r6,#4]            ;203
000018  edd62a02          VLDR     s5,[r6,#8]            ;204
00001c  ed962a03          VLDR     s4,[r6,#0xc]          ;205
000020  edd65a04          VLDR     s11,[r6,#0x10]        ;206
000024  edd50a00          VLDR     s1,[r5,#0]            ;209
000028  edd51a01          VLDR     s3,[r5,#4]            ;210
00002c  ed950a02          VLDR     s0,[r5,#8]            ;211
000030  ed951a03          VLDR     s2,[r5,#0xc]          ;212
000034  4660              MOV      r0,r12                ;212
000036  3614              ADDS     r6,r6,#0x14           ;212
;;;224    
;;;225        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;226         ** a second loop below computes the remaining 1 to 3 samples. */
;;;227        while(sample > 0u)
000038  e03b              B        |L1.178|
;;;228        {
;;;229          /* Read the first input */
;;;230          Xn = *pIn++;
00003a  bf00              NOP      
                  |L1.60|
00003c  ed915a00          VLDR     s10,[r1,#0]
;;;231    
;;;232          /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
;;;233          Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
;;;234    
;;;235          /* Store the result in the accumulator in the destination buffer. */
;;;236          *pOut++ = Yn2;
;;;237    
;;;238          /* Every time after the output is computed state should be updated. */
;;;239          /* The states should be updated as:  */
;;;240          /* Xn2 = Xn1    */
;;;241          /* Xn1 = Xn     */
;;;242          /* Yn2 = Yn1    */
;;;243          /* Yn1 = acc   */
;;;244    
;;;245          /* Read the second input */
;;;246          Xn2 = *pIn++;
;;;247    
;;;248          /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
;;;249          Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
;;;250    
;;;251          /* Store the result in the accumulator in the destination buffer. */
;;;252          *pOut++ = Yn1;
;;;253    
;;;254          /* Every time after the output is computed state should be updated. */
;;;255          /* The states should be updated as:  */
;;;256          /* Xn2 = Xn1    */
;;;257          /* Xn1 = Xn     */
;;;258          /* Yn2 = Yn1    */
;;;259          /* Yn1 = acc   */
;;;260    
;;;261          /* Read the third input */
;;;262          Xn1 = *pIn++;
;;;263    
;;;264          /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
;;;265          Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
;;;266    
;;;267          /* Store the result in the accumulator in the destination buffer. */
;;;268          *pOut++ = Yn2;
;;;269    
;;;270          /* Every time after the output is computed state should be updated. */
;;;271          /* The states should be updated as: */
;;;272          /* Xn2 = Xn1    */
;;;273          /* Xn1 = Xn     */
;;;274          /* Yn2 = Yn1    */
;;;275          /* Yn1 = acc   */
;;;276    
;;;277          /* Read the forth input */
;;;278          Xn = *pIn++;
;;;279    
;;;280          /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
;;;281          Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
;;;282    
;;;283          /* Store the result in the accumulator in the destination buffer. */
;;;284          *pOut++ = Yn1;
000040  1e40              SUBS     r0,r0,#1
000042  ee234a85          VMUL.F32 s8,s7,s10             ;233
000046  ee034a20          VMLA.F32 s8,s6,s1              ;233
00004a  ee024aa1          VMLA.F32 s8,s5,s3              ;233
00004e  ee024a00          VMLA.F32 s8,s4,s0              ;233
000052  ee054a81          VMLA.F32 s8,s11,s2             ;233
000056  ed844a00          VSTR     s8,[r4,#0]            ;236
00005a  ed916a01          VLDR     s12,[r1,#4]           ;246
00005e  ee634a86          VMUL.F32 s9,s7,s12             ;249
000062  ee434a05          VMLA.F32 s9,s6,s10             ;249
000066  ee424aa0          VMLA.F32 s9,s5,s1              ;249
00006a  ee424a04          VMLA.F32 s9,s4,s8              ;249
00006e  ee454a80          VMLA.F32 s9,s11,s0             ;249
000072  edc44a01          VSTR     s9,[r4,#4]            ;252
000076  edd11a02          VLDR     s3,[r1,#8]            ;262
00007a  ee231aa1          VMUL.F32 s2,s7,s3              ;265
00007e  ee031a06          VMLA.F32 s2,s6,s12             ;265
000082  ee021a85          VMLA.F32 s2,s5,s10             ;265
000086  ee021a24          VMLA.F32 s2,s4,s9              ;265
00008a  ee051a84          VMLA.F32 s2,s11,s8             ;265
00008e  ed841a02          VSTR     s2,[r4,#8]            ;268
000092  edd10a03          VLDR     s1,[r1,#0xc]          ;278
000096  3110              ADDS     r1,r1,#0x10
000098  ee230aa0          VMUL.F32 s0,s7,s1              ;281
00009c  ee030a21          VMLA.F32 s0,s6,s3              ;281
0000a0  ee020a86          VMLA.F32 s0,s5,s12             ;281
0000a4  ee020a01          VMLA.F32 s0,s4,s2              ;281
0000a8  ee050aa4          VMLA.F32 s0,s11,s9             ;281
0000ac  ed840a03          VSTR     s0,[r4,#0xc]
0000b0  3410              ADDS     r4,r4,#0x10
                  |L1.178|
0000b2  2800              CMP      r0,#0                 ;227
0000b4  d1c2              BNE      |L1.60|
;;;285    
;;;286          /* Every time after the output is computed state should be updated. */
;;;287          /* The states should be updated as:  */
;;;288          /* Xn2 = Xn1    */
;;;289          /* Xn1 = Xn     */
;;;290          /* Yn2 = Yn1    */
;;;291          /* Yn1 = acc   */
;;;292          Xn2 = Xn1;
;;;293          Xn1 = Xn;
;;;294    
;;;295          /* decrement the loop counter */
;;;296          sample--;
;;;297    
;;;298        }
;;;299    
;;;300        /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;301         ** No loop unrolling is used. */
;;;302        sample = blockSize & 0x3u;
0000b6  f0030003          AND      r0,r3,#3
;;;303    
;;;304        while(sample > 0u)
0000ba  e016              B        |L1.234|
                  |L1.188|
;;;305        {
;;;306          /* Read the input */
;;;307          Xn = *pIn++;
0000bc  ecf14a01          VLDM     r1!,{s9}
;;;308    
;;;309          /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
;;;310          acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
;;;311    
;;;312          /* Store the result in the accumulator in the destination buffer. */
;;;313          *pOut++ = acc;
;;;314    
;;;315          /* Every time after the output is computed state should be updated. */
;;;316          /* The states should be updated as:    */
;;;317          /* Xn2 = Xn1    */
;;;318          /* Xn1 = Xn     */
;;;319          /* Yn2 = Yn1    */
;;;320          /* Yn1 = acc   */
;;;321          Xn2 = Xn1;
;;;322          Xn1 = Xn;
;;;323          Yn2 = Yn1;
;;;324          Yn1 = acc;
0000c0  1e40              SUBS     r0,r0,#1
0000c2  ee234aa4          VMUL.F32 s8,s7,s9              ;310
0000c6  ee034a20          VMLA.F32 s8,s6,s1              ;310
0000ca  ee024aa1          VMLA.F32 s8,s5,s3              ;310
0000ce  eef01a60          VMOV.F32 s3,s1                 ;321
0000d2  eef00a64          VMOV.F32 s1,s9                 ;322
0000d6  ee024a00          VMLA.F32 s8,s4,s0              ;310
0000da  ee054a81          VMLA.F32 s8,s11,s2             ;310
0000de  eeb01a40          VMOV.F32 s2,s0                 ;323
0000e2  eca44a01          VSTM     r4!,{s8}              ;313
0000e6  eeb00a44          VMOV.F32 s0,s8
                  |L1.234|
0000ea  2800              CMP      r0,#0                 ;304
0000ec  d1e6              BNE      |L1.188|
;;;325    
;;;326          /* decrement the loop counter */
;;;327          sample--;
;;;328    
;;;329        }
;;;330    
;;;331        /*  Store the updated state variables back into the pState array */
;;;332        *pState++ = Xn1;
0000ee  edc50a00          VSTR     s1,[r5,#0]
;;;333        *pState++ = Xn2;
0000f2  edc51a01          VSTR     s3,[r5,#4]
;;;334        *pState++ = Yn1;
0000f6  ed850a02          VSTR     s0,[r5,#8]
;;;335        *pState++ = Yn2;
0000fa  ed851a03          VSTR     s2,[r5,#0xc]
;;;336    
;;;337        /*  The first stage goes from the input buffer to the output buffer. */
;;;338        /*  Subsequent numStages  occur in-place in the output buffer */
;;;339        pIn = pDst;
0000fe  4611              MOV      r1,r2
;;;340    
;;;341        /* Reset the output pointer */
;;;342        pOut = pDst;
000100  3510              ADDS     r5,r5,#0x10
000102  460c              MOV      r4,r1
000104  1e7f              SUBS     r7,r7,#1
;;;343    
;;;344        /* decrement the loop counter */
;;;345        stage--;
;;;346    
;;;347      } while(stage > 0u);
000106  d183              BNE      |L1.16|
;;;348    
;;;349    #else
;;;350    
;;;351      /* Run the below code for Cortex-M0 */
;;;352    
;;;353      do
;;;354      {
;;;355        /* Reading the coefficients */
;;;356        b0 = *pCoeffs++;
;;;357        b1 = *pCoeffs++;
;;;358        b2 = *pCoeffs++;
;;;359        a1 = *pCoeffs++;
;;;360        a2 = *pCoeffs++;
;;;361    
;;;362        /* Reading the pState values */
;;;363        Xn1 = pState[0];
;;;364        Xn2 = pState[1];
;;;365        Yn1 = pState[2];
;;;366        Yn2 = pState[3];
;;;367    
;;;368        /*      The variables acc holds the output value that is computed:        
;;;369         *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]        
;;;370         */
;;;371    
;;;372        sample = blockSize;
;;;373    
;;;374        while(sample > 0u)
;;;375        {
;;;376          /* Read the input */
;;;377          Xn = *pIn++;
;;;378    
;;;379          /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
;;;380          acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
;;;381    
;;;382          /* Store the result in the accumulator in the destination buffer. */
;;;383          *pOut++ = acc;
;;;384    
;;;385          /* Every time after the output is computed state should be updated. */
;;;386          /* The states should be updated as:    */
;;;387          /* Xn2 = Xn1    */
;;;388          /* Xn1 = Xn     */
;;;389          /* Yn2 = Yn1    */
;;;390          /* Yn1 = acc   */
;;;391          Xn2 = Xn1;
;;;392          Xn1 = Xn;
;;;393          Yn2 = Yn1;
;;;394          Yn1 = acc;
;;;395    
;;;396          /* decrement the loop counter */
;;;397          sample--;
;;;398        }
;;;399    
;;;400        /*  Store the updated state variables back into the pState array */
;;;401        *pState++ = Xn1;
;;;402        *pState++ = Xn2;
;;;403        *pState++ = Yn1;
;;;404        *pState++ = Yn2;
;;;405    
;;;406        /*  The first stage goes from the input buffer to the output buffer. */
;;;407        /*  Subsequent numStages  occur in-place in the output buffer */
;;;408        pIn = pDst;
;;;409    
;;;410        /* Reset the output pointer */
;;;411        pOut = pDst;
;;;412    
;;;413        /* decrement the loop counter */
;;;414        stage--;
;;;415    
;;;416      } while(stage > 0u);
;;;417    
;;;418    #endif /*   #ifndef ARM_MATH_CM0_FAMILY         */
;;;419    
;;;420    }
000108  bdf0              POP      {r4-r7,pc}
;;;421    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_biquad_cascade_df1_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___28_arm_biquad_cascade_df1_f32_c_50ec4510____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___28_arm_biquad_cascade_df1_f32_c_50ec4510____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___28_arm_biquad_cascade_df1_f32_c_50ec4510____REVSH|
#line 144
|__asm___28_arm_biquad_cascade_df1_f32_c_50ec4510____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___28_arm_biquad_cascade_df1_f32_c_50ec4510____RRX|
#line 300
|__asm___28_arm_biquad_cascade_df1_f32_c_50ec4510____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
