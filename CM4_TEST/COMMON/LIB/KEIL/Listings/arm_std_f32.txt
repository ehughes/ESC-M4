; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_std_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_std_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_std_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_std_f32.c]
                          THUMB

                          AREA ||i.arm_std_f32||, CODE, READONLY, ALIGN=2

                  arm_std_f32 PROC
;;;79     
;;;80     void arm_std_f32(
000000  eddf2a33          VLDR     s5,|L1.208|
;;;81       float32_t * pSrc,
;;;82       uint32_t blockSize,
;;;83       float32_t * pResult)
;;;84     {
;;;85       float32_t sum = 0.0f;                          /* Temporary result storage */
000004  eef00a62          VMOV.F32 s1,s5
;;;86       float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
000008  eeb00a60          VMOV.F32 s0,s1
;;;87       float32_t in;                                  /* input value */
;;;88       uint32_t blkCnt;                               /* loop counter */
;;;89        
;;;90     #ifndef ARM_MATH_CM0_FAMILY
;;;91     
;;;92       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;93     
;;;94       float32_t meanOfSquares, mean, squareOfMean;
;;;95     
;;;96     	if(blockSize == 1)
00000c  2901              CMP      r1,#1
00000e  d001              BEQ      |L1.20|
;;;97     	{
;;;98     		*pResult = 0;
;;;99     		return;
;;;100    	}
;;;101    
;;;102      /*loop Unrolling */
;;;103      blkCnt = blockSize >> 2u;
000010  088b              LSRS     r3,r1,#2
;;;104    
;;;105      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;106       ** a second loop below computes the remaining 1 to 3 samples. */
;;;107      while(blkCnt > 0u)
000012  e01f              B        |L1.84|
                  |L1.20|
000014  edc22a00          VSTR     s5,[r2,#0]            ;98
;;;108      {
;;;109        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;110        /* Compute Sum of squares of the input samples    
;;;111         * and then store the result in a temporary variable, sum. */
;;;112        in = *pSrc++;
;;;113        sum += in;
;;;114        sumOfSquares += in * in;
;;;115        in = *pSrc++;
;;;116        sum += in;
;;;117        sumOfSquares += in * in;
;;;118        in = *pSrc++;
;;;119        sum += in;
;;;120        sumOfSquares += in * in;
;;;121        in = *pSrc++;
;;;122        sum += in;
;;;123        sumOfSquares += in * in;
;;;124    
;;;125        /* Decrement the loop counter */
;;;126        blkCnt--;
;;;127      }
;;;128    
;;;129      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;130       ** No loop unrolling is used. */
;;;131      blkCnt = blockSize % 0x4u;
;;;132    
;;;133      while(blkCnt > 0u)
;;;134      {
;;;135        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;136        /* Compute Sum of squares of the input samples    
;;;137         * and then store the result in a temporary variable, sum. */
;;;138        in = *pSrc++;
;;;139        sum += in;
;;;140        sumOfSquares += in * in;
;;;141    
;;;142        /* Decrement the loop counter */
;;;143        blkCnt--;
;;;144      }
;;;145    
;;;146      /* Compute Mean of squares of the input samples    
;;;147       * and then store the result in a temporary variable, meanOfSquares. */
;;;148      meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
;;;149    
;;;150      /* Compute mean of all input values */
;;;151      mean = sum / (float32_t) blockSize;
;;;152    
;;;153      /* Compute square of mean */
;;;154      squareOfMean = (mean * mean) * (((float32_t) blockSize) /
;;;155                                      ((float32_t) blockSize - 1.0f));
;;;156    
;;;157      /* Compute standard deviation and then store the result to the destination */
;;;158      arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
;;;159    
;;;160    #else
;;;161    
;;;162      /* Run the below code for Cortex-M0 */
;;;163    
;;;164      float32_t squareOfSum;                         /* Square of Sum */
;;;165      float32_t var;                                 /* Temporary varaince storage */
;;;166    
;;;167    	if(blockSize == 1)
;;;168    	{
;;;169    		*pResult = 0;
;;;170    		return;
;;;171    	}
;;;172    
;;;173      /* Loop over blockSize number of values */
;;;174      blkCnt = blockSize;
;;;175    
;;;176      while(blkCnt > 0u)
;;;177      {
;;;178        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;179        /* Compute Sum of squares of the input samples     
;;;180         * and then store the result in a temporary variable, sumOfSquares. */
;;;181        in = *pSrc++;
;;;182        sumOfSquares += in * in;
;;;183    
;;;184        /* C = (A[0] + A[1] + ... + A[blockSize-1]) */
;;;185        /* Compute Sum of the input samples     
;;;186         * and then store the result in a temporary variable, sum. */
;;;187        sum += in;
;;;188    
;;;189        /* Decrement the loop counter */
;;;190        blkCnt--;
;;;191      }
;;;192    
;;;193      /* Compute the square of sum */
;;;194      squareOfSum = ((sum * sum) / (float32_t) blockSize);
;;;195    
;;;196      /* Compute the variance */
;;;197      var = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));
;;;198    
;;;199      /* Compute standard deviation and then store the result to the destination */
;;;200      arm_sqrt_f32(var, pResult);
;;;201    
;;;202    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;203    
;;;204    }
000018  4770              BX       lr
                  |L1.26|
00001a  ecb01a01          VLDM     r0!,{s2}              ;112
00001e  ee302a81          VADD.F32 s4,s1,s2              ;113
000022  eef01a40          VMOV.F32 s3,s0                 ;114
000026  ee411a01          VMLA.F32 s3,s2,s2              ;114
00002a  ecf00a01          VLDM     r0!,{s1}              ;115
00002e  ee321a20          VADD.F32 s2,s4,s1              ;116
000032  ee401aa0          VMLA.F32 s3,s1,s1              ;117
000036  ecb00a01          VLDM     r0!,{s0}              ;118
00003a  ee710a00          VADD.F32 s1,s2,s0              ;119
00003e  ee401a00          VMLA.F32 s3,s0,s0              ;120
000042  ecb00a01          VLDM     r0!,{s0}              ;121
000046  ee700a80          VADD.F32 s1,s1,s0              ;122
00004a  ee401a00          VMLA.F32 s3,s0,s0              ;123
00004e  eeb00a61          VMOV.F32 s0,s3                 ;123
000052  1e5b              SUBS     r3,r3,#1              ;126
                  |L1.84|
000054  2b00              CMP      r3,#0                 ;107
000056  d1e0              BNE      |L1.26|
000058  f0010303          AND      r3,r1,#3              ;131
00005c  e006              B        |L1.108|
                  |L1.94|
00005e  ecb01a01          VLDM     r0!,{s2}              ;138
000062  ee700a81          VADD.F32 s1,s1,s2              ;139
000066  ee010a01          VMLA.F32 s0,s2,s2              ;140
00006a  1e5b              SUBS     r3,r3,#1              ;143
                  |L1.108|
00006c  2b00              CMP      r3,#0                 ;133
00006e  d1f6              BNE      |L1.94|
000070  ee011a10          VMOV     s2,r1                 ;148
000074  eef71a00          VMOV.F32 s3,#1.00000000        ;148
000078  eeb81a41          VCVT.F32.U32 s2,s2                 ;148
00007c  ee312a61          VSUB.F32 s4,s2,s3              ;148
000080  ee801a02          VDIV.F32 s2,s0,s4              ;148
000084  ee001a10          VMOV     s0,r1                 ;151
000088  eeb82a40          VCVT.F32.U32 s4,s0                 ;151
00008c  ee800a82          VDIV.F32 s0,s1,s4              ;151
000090  ee001a90          VMOV     s1,r1                 ;154
000094  eef80a60          VCVT.F32.U32 s1,s1                 ;154
000098  ee701ae1          VSUB.F32 s3,s1,s3              ;154
00009c  ee001a90          VMOV     s1,r1                 ;154
0000a0  eeb82a60          VCVT.F32.U32 s4,s1                 ;154
0000a4  eec20a21          VDIV.F32 s1,s4,s3              ;154
0000a8  ee200a00          VMUL.F32 s0,s0,s0              ;154
0000ac  ee200a80          VMUL.F32 s0,s1,s0              ;154
0000b0  ee310a40          VSUB.F32 s0,s2,s0              ;158
0000b4  eeb50ac0          VCMPE.F32 s0,#0.0               ;158
0000b8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;158
0000bc  dd04              BLE      |L1.200|
0000be  eef10ac0          VSQRT.F32 s1,s0                 ;158
0000c2  edc20a00          VSTR     s1,[r2,#0]            ;158
0000c6  4770              BX       lr
                  |L1.200|
0000c8  edc22a00          VSTR     s5,[r2,#0]
0000cc  4770              BX       lr
;;;205    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L1.208|
0000d0  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_std_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_f32_c_eb42e212____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_std_f32_c_eb42e212____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_f32_c_eb42e212____REVSH|
#line 144
|__asm___13_arm_std_f32_c_eb42e212____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_f32_c_eb42e212____RRX|
#line 300
|__asm___13_arm_std_f32_c_eb42e212____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
