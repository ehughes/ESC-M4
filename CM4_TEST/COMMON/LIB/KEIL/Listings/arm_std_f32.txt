; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_std_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_std_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_std_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_std_f32.c]
                          THUMB

                          AREA ||i.arm_std_f32||, CODE, READONLY, ALIGN=2

                  arm_std_f32 PROC
;;;79     
;;;80     void arm_std_f32(
000000  eddf1a30          VLDR     s3,|L1.196|
;;;81       float32_t * pSrc,
;;;82       uint32_t blockSize,
;;;83       float32_t * pResult)
;;;84     {
;;;85       float32_t sum = 0.0f;                          /* Temporary result storage */
;;;86       float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
;;;87       float32_t in;                                  /* input value */
;;;88       uint32_t blkCnt;                               /* loop counter */
;;;89        
;;;90     #ifndef ARM_MATH_CM0_FAMILY
;;;91     
;;;92       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;93     
;;;94       float32_t meanOfSquares, mean, squareOfMean;
;;;95     
;;;96     	if(blockSize == 1)
000004  2901              CMP      r1,#1
000006  eeb00a61          VMOV.F32 s0,s3                 ;85
00000a  eef00a40          VMOV.F32 s1,s0                 ;85
00000e  d056              BEQ      |L1.190|
;;;97     	{
;;;98     		*pResult = 0;
;;;99     		return;
;;;100    	}
;;;101    
;;;102      /*loop Unrolling */
;;;103      blkCnt = blockSize >> 2u;
000010  088b              LSRS     r3,r1,#2
;;;104    
;;;105      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;106       ** a second loop below computes the remaining 1 to 3 samples. */
;;;107      while(blkCnt > 0u)
000012  e019              B        |L1.72|
                  |L1.20|
;;;108      {
;;;109        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;110        /* Compute Sum of squares of the input samples    
;;;111         * and then store the result in a temporary variable, sum. */
;;;112        in = *pSrc++;
000014  ed901a00          VLDR     s2,[r0,#0]
;;;113        sum += in;
;;;114        sumOfSquares += in * in;
000018  ee010a01          VMLA.F32 s0,s2,s2
00001c  ee302a81          VADD.F32 s4,s1,s2              ;113
;;;115        in = *pSrc++;
000020  edd00a01          VLDR     s1,[r0,#4]
;;;116        sum += in;
000024  ee321a20          VADD.F32 s2,s4,s1
;;;117        sumOfSquares += in * in;
000028  ee000aa0          VMLA.F32 s0,s1,s1
;;;118        in = *pSrc++;
00002c  edd00a02          VLDR     s1,[r0,#8]
;;;119        sum += in;
000030  ee312a20          VADD.F32 s4,s2,s1
;;;120        sumOfSquares += in * in;
;;;121        in = *pSrc++;
000034  ed901a03          VLDR     s2,[r0,#0xc]
000038  ee000aa0          VMLA.F32 s0,s1,s1              ;120
;;;122        sum += in;
;;;123        sumOfSquares += in * in;
00003c  3010              ADDS     r0,r0,#0x10
00003e  ee720a01          VADD.F32 s1,s4,s2              ;122
000042  1e5b              SUBS     r3,r3,#1
000044  ee010a01          VMLA.F32 s0,s2,s2
                  |L1.72|
000048  2b00              CMP      r3,#0                 ;107
00004a  d1e3              BNE      |L1.20|
;;;124    
;;;125        /* Decrement the loop counter */
;;;126        blkCnt--;
;;;127      }
;;;128    
;;;129      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;130       ** No loop unrolling is used. */
;;;131      blkCnt = blockSize % 0x4u;
00004c  f0010303          AND      r3,r1,#3
;;;132    
;;;133      while(blkCnt > 0u)
000050  e007              B        |L1.98|
;;;134      {
;;;135        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;136        /* Compute Sum of squares of the input samples    
;;;137         * and then store the result in a temporary variable, sum. */
;;;138        in = *pSrc++;
000052  bf00              NOP      
                  |L1.84|
000054  ecb01a01          VLDM     r0!,{s2}
;;;139        sum += in;
;;;140        sumOfSquares += in * in;
000058  1e5b              SUBS     r3,r3,#1
00005a  ee010a01          VMLA.F32 s0,s2,s2
00005e  ee700a81          VADD.F32 s1,s1,s2              ;139
                  |L1.98|
000062  2b00              CMP      r3,#0                 ;133
000064  d1f6              BNE      |L1.84|
;;;141    
;;;142        /* Decrement the loop counter */
;;;143        blkCnt--;
;;;144      }
;;;145    
;;;146      /* Compute Mean of squares of the input samples    
;;;147       * and then store the result in a temporary variable, meanOfSquares. */
;;;148      meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
000066  ee011a10          VMOV     s2,r1
00006a  eeb72a00          VMOV.F32 s4,#1.00000000
00006e  eeb81a41          VCVT.F32.U32 s2,s2
000072  ee712a42          VSUB.F32 s5,s2,s4
000076  ee801a22          VDIV.F32 s2,s0,s5
;;;149    
;;;150      /* Compute mean of all input values */
;;;151      mean = sum / (float32_t) blockSize;
00007a  ee001a10          VMOV     s0,r1
00007e  eeb80a40          VCVT.F32.U32 s0,s0
000082  eec02a80          VDIV.F32 s5,s1,s0
;;;152    
;;;153      /* Compute square of mean */
;;;154      squareOfMean = (mean * mean) * (((float32_t) blockSize) /
000086  ee001a10          VMOV     s0,r1
00008a  eeb80a40          VCVT.F32.U32 s0,s0
00008e  ee700a42          VSUB.F32 s1,s0,s4
000092  ee001a10          VMOV     s0,r1
000096  eeb82a40          VCVT.F32.U32 s4,s0
00009a  ee820a20          VDIV.F32 s0,s4,s1
00009e  ee620aa2          VMUL.F32 s1,s5,s5
0000a2  ee200a20          VMUL.F32 s0,s0,s1
;;;155                                      ((float32_t) blockSize - 1.0f));
;;;156    
;;;157      /* Compute standard deviation and then store the result to the destination */
;;;158      arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
0000a6  ee310a40          VSUB.F32 s0,s2,s0
0000aa  eeb50ac0          VCMPE.F32 s0,#0.0
0000ae  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000b2  dd04              BLE      |L1.190|
0000b4  eef10ac0          VSQRT.F32 s1,s0
0000b8  edc20a00          VSTR     s1,[r2,#0]
;;;159    
;;;160    #else
;;;161    
;;;162      /* Run the below code for Cortex-M0 */
;;;163    
;;;164      float32_t squareOfSum;                         /* Square of Sum */
;;;165      float32_t var;                                 /* Temporary varaince storage */
;;;166    
;;;167    	if(blockSize == 1)
;;;168    	{
;;;169    		*pResult = 0;
;;;170    		return;
;;;171    	}
;;;172    
;;;173      /* Loop over blockSize number of values */
;;;174      blkCnt = blockSize;
;;;175    
;;;176      while(blkCnt > 0u)
;;;177      {
;;;178        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;179        /* Compute Sum of squares of the input samples     
;;;180         * and then store the result in a temporary variable, sumOfSquares. */
;;;181        in = *pSrc++;
;;;182        sumOfSquares += in * in;
;;;183    
;;;184        /* C = (A[0] + A[1] + ... + A[blockSize-1]) */
;;;185        /* Compute Sum of the input samples     
;;;186         * and then store the result in a temporary variable, sum. */
;;;187        sum += in;
;;;188    
;;;189        /* Decrement the loop counter */
;;;190        blkCnt--;
;;;191      }
;;;192    
;;;193      /* Compute the square of sum */
;;;194      squareOfSum = ((sum * sum) / (float32_t) blockSize);
;;;195    
;;;196      /* Compute the variance */
;;;197      var = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));
;;;198    
;;;199      /* Compute standard deviation and then store the result to the destination */
;;;200      arm_sqrt_f32(var, pResult);
;;;201    
;;;202    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;203    
;;;204    }
0000bc  4770              BX       lr
                  |L1.190|
0000be  edc21a00          VSTR     s3,[r2,#0]
0000c2  4770              BX       lr
;;;205    
                          ENDP

                  |L1.196|
0000c4  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_std_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_f32_c_eb42e212____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_std_f32_c_eb42e212____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_f32_c_eb42e212____REVSH|
#line 144
|__asm___13_arm_std_f32_c_eb42e212____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_f32_c_eb42e212____RRX|
#line 300
|__asm___13_arm_std_f32_c_eb42e212____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
