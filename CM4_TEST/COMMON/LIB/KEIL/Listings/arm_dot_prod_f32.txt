; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_dot_prod_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_dot_prod_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_dot_prod_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_dot_prod_f32.c]
                          THUMB

                          AREA ||i.arm_dot_prod_f32||, CODE, READONLY, ALIGN=2

                  arm_dot_prod_f32 PROC
;;;74     
;;;75     void arm_dot_prod_f32(
000000  b510              PUSH     {r4,lr}
;;;76       float32_t * pSrcA,
;;;77       float32_t * pSrcB,
;;;78       uint32_t blockSize,
;;;79       float32_t * result)
;;;80     {
;;;81       float32_t sum = 0.0f;                          /* Temporary result storage */
000002  ed9f0a18          VLDR     s0,|L1.100|
;;;82       uint32_t blkCnt;                               /* loop counter */
;;;83     
;;;84     
;;;85     #ifndef ARM_MATH_CM0_FAMILY
;;;86     
;;;87     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
000006  0894              LSRS     r4,r2,#2
000008  e01b              B        |L1.66|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;92        ** a second loop below computes the remaining 1 to 3 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;96         /* Calculate dot product and then store the result in a temporary buffer */
;;;97         sum += (*pSrcA++) * (*pSrcB++);
00000a  bf00              NOP      
                  |L1.12|
00000c  edd00a00          VLDR     s1,[r0,#0]
000010  ed911a00          VLDR     s2,[r1,#0]
000014  ee000a81          VMLA.F32 s0,s1,s2
;;;98         sum += (*pSrcA++) * (*pSrcB++);
000018  edd00a01          VLDR     s1,[r0,#4]
00001c  ed911a01          VLDR     s2,[r1,#4]
000020  ee000a81          VMLA.F32 s0,s1,s2
;;;99         sum += (*pSrcA++) * (*pSrcB++);
000024  edd00a02          VLDR     s1,[r0,#8]
000028  ed911a02          VLDR     s2,[r1,#8]
00002c  ee000a81          VMLA.F32 s0,s1,s2
;;;100        sum += (*pSrcA++) * (*pSrcB++);
000030  edd00a03          VLDR     s1,[r0,#0xc]
000034  ed911a03          VLDR     s2,[r1,#0xc]
000038  3010              ADDS     r0,r0,#0x10
00003a  3110              ADDS     r1,r1,#0x10
00003c  1e64              SUBS     r4,r4,#1
00003e  ee000a81          VMLA.F32 s0,s1,s2
                  |L1.66|
000042  2c00              CMP      r4,#0                 ;93
000044  d1e2              BNE      |L1.12|
;;;101    
;;;102        /* Decrement the loop counter */
;;;103        blkCnt--;
;;;104      }
;;;105    
;;;106      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;107       ** No loop unrolling is used. */
;;;108      blkCnt = blockSize % 0x4u;
000046  f0020203          AND      r2,r2,#3
;;;109    
;;;110    #else
;;;111    
;;;112      /* Run the below code for Cortex-M0 */
;;;113    
;;;114      /* Initialize blkCnt with number of samples */
;;;115      blkCnt = blockSize;
;;;116    
;;;117    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;118    
;;;119    
;;;120      while(blkCnt > 0u)
00004a  e006              B        |L1.90|
                  |L1.76|
;;;121      {
;;;122        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;123        /* Calculate dot product and then store the result in a temporary buffer. */
;;;124        sum += (*pSrcA++) * (*pSrcB++);
00004c  ecf00a01          VLDM     r0!,{s1}
000050  1e52              SUBS     r2,r2,#1
000052  ecb11a01          VLDM     r1!,{s2}
000056  ee000a81          VMLA.F32 s0,s1,s2
                  |L1.90|
00005a  2a00              CMP      r2,#0                 ;120
00005c  d1f6              BNE      |L1.76|
;;;125    
;;;126        /* Decrement the loop counter */
;;;127        blkCnt--;
;;;128      }
;;;129      /* Store the result back in the destination buffer */
;;;130      *result = sum;
00005e  ed830a00          VSTR     s0,[r3,#0]
;;;131    }
000062  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L1.100|
000064  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_dot_prod_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_f32_c_db9b1fc2____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_dot_prod_f32_c_db9b1fc2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_f32_c_db9b1fc2____REVSH|
#line 144
|__asm___18_arm_dot_prod_f32_c_db9b1fc2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_f32_c_db9b1fc2____RRX|
#line 300
|__asm___18_arm_dot_prod_f32_c_db9b1fc2____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
