; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_var_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_var_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_var_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_var_f32.c]
                          THUMB

                          AREA ||i.arm_var_f32||, CODE, READONLY, ALIGN=2

                  arm_var_f32 PROC
;;;79     
;;;80     void arm_var_f32(
000000  ed9f0a2b          VLDR     s0,|L1.176|
;;;81       float32_t * pSrc,
;;;82       uint32_t blockSize,
;;;83       float32_t * pResult)
;;;84     {
;;;85     
;;;86       float32_t sum = 0.0f;                          /* Temporary result storage */
;;;87       float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
;;;88       float32_t in;                                  /* input value */
;;;89       uint32_t blkCnt;                               /* loop counter */
;;;90       
;;;91     #ifndef ARM_MATH_CM0_FAMILY
;;;92        
;;;93       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;94     
;;;95       float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */
;;;96     
;;;97     	if(blockSize == 1)
000004  2901              CMP      r1,#1
000006  eef00a40          VMOV.F32 s1,s0                 ;86
00000a  d001              BEQ      |L1.16|
;;;98     	{
;;;99     		*pResult = 0;
;;;100    		return;
;;;101    	}
;;;102    
;;;103      /*loop Unrolling */
;;;104      blkCnt = blockSize >> 2u;
00000c  088b              LSRS     r3,r1,#2
;;;105    
;;;106      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;107       ** a second loop below computes the remaining 1 to 3 samples. */
;;;108      while(blkCnt > 0u)
00000e  e01d              B        |L1.76|
                  |L1.16|
000010  ed820a00          VSTR     s0,[r2,#0]            ;99
;;;109      {
;;;110        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;111        /* Compute Sum of squares of the input samples    
;;;112         * and then store the result in a temporary variable, sum. */
;;;113        in = *pSrc++;
;;;114        sum += in;
;;;115        sumOfSquares += in * in;
;;;116        in = *pSrc++;
;;;117        sum += in;
;;;118        sumOfSquares += in * in;
;;;119        in = *pSrc++;
;;;120        sum += in;
;;;121        sumOfSquares += in * in;
;;;122        in = *pSrc++;
;;;123        sum += in;
;;;124        sumOfSquares += in * in;
;;;125    
;;;126        /* Decrement the loop counter */
;;;127        blkCnt--;
;;;128      }
;;;129    
;;;130      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;131       ** No loop unrolling is used. */
;;;132      blkCnt = blockSize % 0x4u;
;;;133    
;;;134      while(blkCnt > 0u)
;;;135      {
;;;136        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;137        /* Compute Sum of squares of the input samples    
;;;138         * and then store the result in a temporary variable, sum. */
;;;139        in = *pSrc++;
;;;140        sum += in;
;;;141        sumOfSquares += in * in;
;;;142    
;;;143        /* Decrement the loop counter */
;;;144        blkCnt--;
;;;145      }
;;;146    
;;;147      /* Compute Mean of squares of the input samples    
;;;148       * and then store the result in a temporary variable, meanOfSquares. */
;;;149      meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
;;;150    
;;;151      /* Compute mean of all input values */
;;;152      mean = sum / (float32_t) blockSize;
;;;153    
;;;154      /* Compute square of mean */
;;;155      squareOfMean = (mean * mean) * (((float32_t) blockSize) /
;;;156                                      ((float32_t) blockSize - 1.0f));
;;;157    
;;;158      /* Compute variance and then store the result to the destination */
;;;159      *pResult = meanOfSquares - squareOfMean;
;;;160    
;;;161    #else
;;;162    
;;;163      /* Run the below code for Cortex-M0 */
;;;164      float32_t squareOfSum;                         /* Square of Sum */
;;;165    
;;;166    	if(blockSize == 1)
;;;167    	{
;;;168    		*pResult = 0;
;;;169    		return;
;;;170    	}
;;;171    
;;;172      /* Loop over blockSize number of values */
;;;173      blkCnt = blockSize;
;;;174    
;;;175      while(blkCnt > 0u)
;;;176      {
;;;177        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;178        /* Compute Sum of squares of the input samples     
;;;179         * and then store the result in a temporary variable, sumOfSquares. */
;;;180        in = *pSrc++;
;;;181        sumOfSquares += in * in;
;;;182    
;;;183        /* C = (A[0] + A[1] + ... + A[blockSize-1]) */
;;;184        /* Compute Sum of the input samples     
;;;185         * and then store the result in a temporary variable, sum. */
;;;186        sum += in;
;;;187    
;;;188        /* Decrement the loop counter */
;;;189        blkCnt--;
;;;190      }
;;;191    
;;;192      /* Compute the square of sum */
;;;193      squareOfSum = ((sum * sum) / (float32_t) blockSize);
;;;194    
;;;195      /* Compute the variance */
;;;196      *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));
;;;197    
;;;198    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;199    
;;;200    }
000014  4770              BX       lr
000016  bf00              NOP                            ;113
                  |L1.24|
000018  ed901a00          VLDR     s2,[r0,#0]            ;113
00001c  ee010a01          VMLA.F32 s0,s2,s2              ;115
000020  ee701a81          VADD.F32 s3,s1,s2              ;114
000024  edd00a01          VLDR     s1,[r0,#4]            ;116
000028  ee311aa0          VADD.F32 s2,s3,s1              ;117
00002c  ee000aa0          VMLA.F32 s0,s1,s1              ;118
000030  edd00a02          VLDR     s1,[r0,#8]            ;119
000034  ee711a20          VADD.F32 s3,s2,s1              ;120
000038  ed901a03          VLDR     s2,[r0,#0xc]          ;122
00003c  ee000aa0          VMLA.F32 s0,s1,s1              ;121
000040  3010              ADDS     r0,r0,#0x10           ;124
000042  ee710a81          VADD.F32 s1,s3,s2              ;123
000046  1e5b              SUBS     r3,r3,#1              ;124
000048  ee010a01          VMLA.F32 s0,s2,s2              ;124
                  |L1.76|
00004c  2b00              CMP      r3,#0                 ;108
00004e  d1e3              BNE      |L1.24|
000050  f0010303          AND      r3,r1,#3              ;132
000054  e007              B        |L1.102|
000056  bf00              NOP                            ;139
                  |L1.88|
000058  ecb01a01          VLDM     r0!,{s2}              ;139
00005c  1e5b              SUBS     r3,r3,#1              ;141
00005e  ee010a01          VMLA.F32 s0,s2,s2              ;141
000062  ee700a81          VADD.F32 s1,s1,s2              ;140
                  |L1.102|
000066  2b00              CMP      r3,#0                 ;134
000068  d1f6              BNE      |L1.88|
00006a  ee011a10          VMOV     s2,r1                 ;149
00006e  eef81a41          VCVT.F32.U32 s3,s2                 ;149
000072  eeb71a00          VMOV.F32 s2,#1.00000000        ;149
000076  ee312ac1          VSUB.F32 s4,s3,s2              ;149
00007a  eec01a02          VDIV.F32 s3,s0,s4              ;149
00007e  ee001a10          VMOV     s0,r1                 ;152
000082  eeb82a40          VCVT.F32.U32 s4,s0                 ;152
000086  ee800a82          VDIV.F32 s0,s1,s4              ;152
00008a  ee001a90          VMOV     s1,r1                 ;155
00008e  eef80a60          VCVT.F32.U32 s1,s1                 ;155
000092  ee301ac1          VSUB.F32 s2,s1,s2              ;155
000096  ee001a90          VMOV     s1,r1                 ;155
00009a  eeb82a60          VCVT.F32.U32 s4,s1                 ;155
00009e  eec20a01          VDIV.F32 s1,s4,s2              ;155
0000a2  ee200a00          VMUL.F32 s0,s0,s0              ;155
0000a6  ee200a80          VMUL.F32 s0,s1,s0              ;155
0000aa  ee310ac0          VSUB.F32 s0,s3,s0              ;159
0000ae  e7af              B        |L1.16|
;;;201    
                          ENDP

                  |L1.176|
0000b0  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_var_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_var_f32_c_05c13cbf____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_var_f32_c_05c13cbf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_var_f32_c_05c13cbf____REVSH|
#line 144
|__asm___13_arm_var_f32_c_05c13cbf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_var_f32_c_05c13cbf____RRX|
#line 300
|__asm___13_arm_var_f32_c_05c13cbf____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
