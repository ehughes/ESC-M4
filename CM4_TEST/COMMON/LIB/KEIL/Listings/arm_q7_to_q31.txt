; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_q7_to_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_q7_to_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_q7_to_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_q7_to_q31.c]
                          THUMB

                          AREA ||i.arm_q7_to_q31||, CODE, READONLY, ALIGN=1

                  arm_q7_to_q31 PROC
;;;69     
;;;70     void arm_q7_to_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;71       q7_t * pSrc,
;;;72       q31_t * pDst,
;;;73       uint32_t blockSize)
;;;74     {
;;;75       q7_t *pIn = pSrc;                              /* Src pointer */
;;;76       uint32_t blkCnt;                               /* loop counter */
;;;77     
;;;78     #ifndef ARM_MATH_CM0_FAMILY
;;;79     
;;;80       q31_t in;
;;;81     
;;;82       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83     
;;;84       /*loop Unrolling */
;;;85       blkCnt = blockSize >> 2u;
000002  0894              LSRS     r4,r2,#2
;;;86     
;;;87       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;88        ** a second loop below computes the remaining 1 to 3 samples. */
;;;89       while(blkCnt > 0u)
;;;90       {
;;;91         /* C = (q31_t) A << 24 */
;;;92         /* convert from q7 to q31 and then store the results in the destination buffer */
;;;93         in = *__SIMD32(pIn)++;
;;;94     
;;;95     #ifndef ARM_MATH_BIG_ENDIAN
;;;96     
;;;97         *pDst++ = (__ROR(in, 8)) & 0xFF000000;
000004  f04f457f          MOV      r5,#0xff000000
000008  e00f              B        |L1.42|
                  |L1.10|
00000a  f8503b04          LDR      r3,[r0],#4            ;93
00000e  ea052633          AND      r6,r5,r3,ROR #8
000012  600e              STR      r6,[r1,#0]
;;;98         *pDst++ = (__ROR(in, 16)) & 0xFF000000;
000014  ea054633          AND      r6,r5,r3,ROR #16
000018  604e              STR      r6,[r1,#4]
;;;99         *pDst++ = (__ROR(in, 24)) & 0xFF000000;
00001a  ea056633          AND      r6,r5,r3,ROR #24
00001e  608e              STR      r6,[r1,#8]
;;;100        *pDst++ = (in & 0xFF000000);
000020  f003437f          AND      r3,r3,#0xff000000
000024  60cb              STR      r3,[r1,#0xc]
000026  3110              ADDS     r1,r1,#0x10
;;;101    
;;;102    #else
;;;103    
;;;104        *pDst++ = (in & 0xFF000000);
;;;105        *pDst++ = (__ROR(in, 24)) & 0xFF000000;
;;;106        *pDst++ = (__ROR(in, 16)) & 0xFF000000;
;;;107        *pDst++ = (__ROR(in, 8)) & 0xFF000000;
;;;108    
;;;109    #endif //              #ifndef ARM_MATH_BIG_ENDIAN
;;;110    
;;;111        /* Decrement the loop counter */
;;;112        blkCnt--;
000028  1e64              SUBS     r4,r4,#1
                  |L1.42|
00002a  2c00              CMP      r4,#0                 ;89
00002c  d1ed              BNE      |L1.10|
;;;113      }
;;;114    
;;;115      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;116       ** No loop unrolling is used. */
;;;117      blkCnt = blockSize % 0x4u;
00002e  f0020203          AND      r2,r2,#3
;;;118    
;;;119    #else
;;;120    
;;;121      /* Run the below code for Cortex-M0 */
;;;122    
;;;123      /* Loop over blockSize number of values */
;;;124      blkCnt = blockSize;
;;;125    
;;;126    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;127    
;;;128      while(blkCnt > 0u)
000032  e004              B        |L1.62|
                  |L1.52|
;;;129      {
;;;130        /* C = (q31_t) A << 24 */
;;;131        /* convert from q7 to q31 and then store the results in the destination buffer */
;;;132        *pDst++ = (q31_t) * pIn++ << 24;
000034  f8103b01          LDRB     r3,[r0],#1
000038  061b              LSLS     r3,r3,#24
00003a  c108              STM      r1!,{r3}
;;;133    
;;;134        /* Decrement the loop counter */
;;;135        blkCnt--;
00003c  1e52              SUBS     r2,r2,#1
                  |L1.62|
00003e  2a00              CMP      r2,#0                 ;128
000040  d1f8              BNE      |L1.52|
;;;136      }
;;;137    
;;;138    }
000042  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_q7_to_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q7_to_q31_c_924b9fb6____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_q7_to_q31_c_924b9fb6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q7_to_q31_c_924b9fb6____REVSH|
#line 144
|__asm___15_arm_q7_to_q31_c_924b9fb6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q7_to_q31_c_924b9fb6____RRX|
#line 300
|__asm___15_arm_q7_to_q31_c_924b9fb6____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
