; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_fast_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_fast_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_fir_decimate_fast_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_fast_q15.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_fast_q15||, CODE, READONLY, ALIGN=2

                  arm_fir_decimate_fast_q15 PROC
;;;79     
;;;80     void arm_fir_decimate_fast_q15(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;81       const arm_fir_decimate_instance_q15 * S,
;;;82       q15_t * pSrc,
;;;83       q15_t * pDst,
;;;84       uint32_t blockSize)
;;;85     {
000004  e9d04201          LDRD     r4,r2,[r0,#4]
000008  b090              SUB      sp,sp,#0x40
;;;86       q15_t *pState = S->pState;                     /* State pointer */
;;;87       q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
;;;88       q15_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;89       q15_t *px;                                     /* Temporary pointer for state buffer */
;;;90       q15_t *pb;                                     /* Temporary pointer coefficient buffer */
;;;91       q31_t x0, x1, c0, c1;                          /* Temporary variables to hold state and coefficient values */
;;;92       q31_t sum0;                                    /* Accumulators */
;;;93       q31_t acc0, acc1;
;;;94       q15_t *px0, *px1;
;;;95       uint32_t blkCntN3;
;;;96       uint32_t numTaps = S->numTaps;                 /* Number of taps */
;;;97       uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
;;;98     
;;;99     
;;;100      /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;101      /* pStateCurnt points to the location where the new input data should be written */
;;;102      pStateCurnt = S->pState + (numTaps - 1u);
00000a  f06f0501          MVN      r5,#1
00000e  940d              STR      r4,[sp,#0x34]         ;96
000010  7804              LDRB     r4,[r0,#0]            ;97
000012  f8b0e002          LDRH     lr,[r0,#2]            ;96
000016  fbb3f3f4          UDIV     r3,r3,r4              ;97
00001a  eb05044e          ADD      r4,r5,lr,LSL #1
00001e  1916              ADDS     r6,r2,r4
;;;103    
;;;104    
;;;105      /* Total number of output samples to be computed */
;;;106      blkCnt = outBlockSize / 2;
000020  085c              LSRS     r4,r3,#1
;;;107      blkCntN3 = outBlockSize - (2 * blkCnt);
000022  940f              STR      r4,[sp,#0x3c]
000024  4264              RSBS     r4,r4,#0
000026  eb030344          ADD      r3,r3,r4,LSL #1
;;;108    
;;;109    
;;;110      while(blkCnt > 0u)
00002a  930a              STR      r3,[sp,#0x28]
00002c  9b0f              LDR      r3,[sp,#0x3c]         ;85
00002e  e056              B        |L1.222|
                  |L1.48|
;;;111      {
;;;112        /* Copy decimation factor number of new input samples into the state buffer */
;;;113        i = 2 * S->M;
000030  7803              LDRB     r3,[r0,#0]
000032  005b              LSLS     r3,r3,#1
                  |L1.52|
;;;114    
;;;115        do
;;;116        {
;;;117          *pStateCurnt++ = *pSrc++;
000034  f8314b02          LDRH     r4,[r1],#2
000038  f8264b02          STRH     r4,[r6],#2
00003c  1e5b              SUBS     r3,r3,#1
;;;118    
;;;119        } while(--i);
00003e  d1f9              BNE      |L1.52|
;;;120    
;;;121        /* Set accumulator to zero */
;;;122        acc0 = 0;
;;;123        acc1 = 0;
;;;124    
;;;125        /* Initialize state pointer */
;;;126        px0 = pState;
;;;127    
;;;128        px1 = pState + S->M;
000040  7804              LDRB     r4,[r0,#0]
000042  469a              MOV      r10,r3                ;122
000044  eb020544          ADD      r5,r2,r4,LSL #1
;;;129    
;;;130    
;;;131        /* Initialize coeff pointer */
;;;132        pb = pCoeffs;
000048  9407              STR      r4,[sp,#0x1c]
00004a  46d1              MOV      r9,r10                ;123
00004c  4613              MOV      r3,r2                 ;126
;;;133    
;;;134        /* Loop unrolling.  Process 4 taps at a time. */
;;;135        tapCnt = numTaps >> 2;
00004e  ea4f079e          LSR      r7,lr,#2
;;;136    
;;;137        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;138         ** Repeat until we've computed numTaps-4 coefficients. */
;;;139        while(tapCnt > 0u)
000052  9c0d              LDR      r4,[sp,#0x34]
000054  e01c              B        |L1.144|
;;;140        {
;;;141          /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
;;;142          c0 = *__SIMD32(pb)++;
000056  bf00              NOP      
                  |L1.88|
000058  f8547b04          LDR      r7,[r4],#4
;;;143    
;;;144          /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
;;;145          x0 = *__SIMD32(px0)++;
00005c  f853cb04          LDR      r12,[r3],#4
;;;146    
;;;147          x1 = *__SIMD32(px1)++;
000060  f8558b04          LDR      r8,[r5],#4
;;;148    
;;;149          /* Perform the multiply-accumulate */
;;;150          acc0 = __SMLAD(x0, c0, acc0);
000064  fb2caa07          SMLAD    r10,r12,r7,r10
;;;151    
;;;152          acc1 = __SMLAD(x1, c0, acc1);
000068  fb289c07          SMLAD    r12,r8,r7,r9
;;;153    
;;;154          /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
;;;155          c0 = *__SIMD32(pb)++;
00006c  f8cdc00c          STR      r12,[sp,#0xc]
000070  f8cd8018          STR      r8,[sp,#0x18]
000074  f8547b04          LDR      r7,[r4],#4
;;;156    
;;;157          /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
;;;158          x0 = *__SIMD32(px0)++;
000078  f853cb04          LDR      r12,[r3],#4
;;;159    
;;;160          x1 = *__SIMD32(px1)++;
00007c  f8559b04          LDR      r9,[r5],#4
;;;161    
;;;162          /* Perform the multiply-accumulate */
;;;163          acc0 = __SMLAD(x0, c0, acc0);
000080  fb2caa07          SMLAD    r10,r12,r7,r10
;;;164    
;;;165          acc1 = __SMLAD(x1, c0, acc1);
000084  f8ddc00c          LDR      r12,[sp,#0xc]
000088  fb29c907          SMLAD    r9,r9,r7,r12
;;;166    
;;;167          /* Decrement the loop counter */
;;;168          tapCnt--;
00008c  f1ab0701          SUB      r7,r11,#1
                  |L1.144|
000090  ea5f0b07          MOVS     r11,r7                ;135
000094  d1e0              BNE      |L1.88|
;;;169        }
;;;170    
;;;171        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;172        tapCnt = numTaps % 0x4u;
000096  f00e0703          AND      r7,lr,#3
;;;173    
;;;174        while(tapCnt > 0u)
00009a  e00d              B        |L1.184|
                  |L1.156|
;;;175        {
;;;176          /* Read coefficients */
;;;177          c0 = *pb++;
00009c  f9347b02          LDRSH    r7,[r4],#2
;;;178    
;;;179          /* Fetch 1 state variable */
;;;180          x0 = *px0++;
0000a0  f933cb02          LDRSH    r12,[r3],#2
;;;181    
;;;182          x1 = *px1++;
0000a4  f9358b02          LDRSH    r8,[r5],#2
;;;183    
;;;184          /* Perform the multiply-accumulate */
;;;185          acc0 = __SMLAD(x0, c0, acc0);
0000a8  fb2caa07          SMLAD    r10,r12,r7,r10
;;;186          acc1 = __SMLAD(x1, c0, acc1);
0000ac  fb289907          SMLAD    r9,r8,r7,r9
;;;187    
;;;188          /* Decrement the loop counter */
;;;189          tapCnt--;
0000b0  f1ab0701          SUB      r7,r11,#1
0000b4  f8cd8018          STR      r8,[sp,#0x18]
                  |L1.184|
0000b8  ea5f0b07          MOVS     r11,r7                ;172
0000bc  d1ee              BNE      |L1.156|
;;;190        }
;;;191    
;;;192        /* Advance the state pointer by the decimation factor       
;;;193         * to process the next group of decimation factor number samples */
;;;194        pState = pState + S->M * 2;
0000be  9b07              LDR      r3,[sp,#0x1c]
;;;195    
;;;196        /* Store filter output, smlad returns the values in 2.14 format */
;;;197        /* so downsacle by 15 to get output in 1.15 */
;;;198        *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
0000c0  f32a34cf          SSAT     r4,#16,r10,ASR #15
0000c4  eb020283          ADD      r2,r2,r3,LSL #2       ;194
0000c8  9b12              LDR      r3,[sp,#0x48]
0000ca  801c              STRH     r4,[r3,#0]
;;;199        *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
0000cc  9b12              LDR      r3,[sp,#0x48]
0000ce  f32934cf          SSAT     r4,#16,r9,ASR #15
0000d2  805c              STRH     r4,[r3,#2]
0000d4  1d1b              ADDS     r3,r3,#4
;;;200    
;;;201        /* Decrement the loop counter */
;;;202        blkCnt--;
0000d6  9312              STR      r3,[sp,#0x48]
0000d8  9b0f              LDR      r3,[sp,#0x3c]
0000da  1e5b              SUBS     r3,r3,#1
0000dc  930f              STR      r3,[sp,#0x3c]
                  |L1.222|
0000de  2b00              CMP      r3,#0                 ;110
0000e0  d1a6              BNE      |L1.48|
;;;203      }
;;;204    
;;;205    
;;;206    
;;;207      while(blkCntN3 > 0u)
;;;208      {
;;;209        /* Copy decimation factor number of new input samples into the state buffer */
;;;210        i = S->M;
;;;211    
;;;212        do
;;;213        {
;;;214          *pStateCurnt++ = *pSrc++;
;;;215    
;;;216        } while(--i);
;;;217    
;;;218        /*Set sum to zero */
;;;219        sum0 = 0;
;;;220    
;;;221        /* Initialize state pointer */
;;;222        px = pState;
;;;223    
;;;224        /* Initialize coeff pointer */
;;;225        pb = pCoeffs;
;;;226    
;;;227        /* Loop unrolling.  Process 4 taps at a time. */
;;;228        tapCnt = numTaps >> 2;
;;;229    
;;;230        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;231         ** Repeat until we've computed numTaps-4 coefficients. */
;;;232        while(tapCnt > 0u)
;;;233        {
;;;234          /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
;;;235          c0 = *__SIMD32(pb)++;
;;;236    
;;;237          /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
;;;238          x0 = *__SIMD32(px)++;
;;;239    
;;;240          /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
;;;241          c1 = *__SIMD32(pb)++;
;;;242    
;;;243          /* Perform the multiply-accumulate */
;;;244          sum0 = __SMLAD(x0, c0, sum0);
;;;245    
;;;246          /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
;;;247          x0 = *__SIMD32(px)++;
;;;248    
;;;249          /* Perform the multiply-accumulate */
;;;250          sum0 = __SMLAD(x0, c1, sum0);
;;;251    
;;;252          /* Decrement the loop counter */
;;;253          tapCnt--;
;;;254        }
;;;255    
;;;256        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;257        tapCnt = numTaps % 0x4u;
;;;258    
;;;259        while(tapCnt > 0u)
;;;260        {
;;;261          /* Read coefficients */
;;;262          c0 = *pb++;
;;;263    
;;;264          /* Fetch 1 state variable */
;;;265          x0 = *px++;
;;;266    
;;;267          /* Perform the multiply-accumulate */
;;;268          sum0 = __SMLAD(x0, c0, sum0);
;;;269    
;;;270          /* Decrement the loop counter */
;;;271          tapCnt--;
;;;272        }
;;;273    
;;;274        /* Advance the state pointer by the decimation factor       
;;;275         * to process the next group of decimation factor number samples */
;;;276        pState = pState + S->M;
;;;277    
;;;278        /* Store filter output, smlad returns the values in 2.14 format */
;;;279        /* so downsacle by 15 to get output in 1.15 */
;;;280        *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
;;;281    
;;;282        /* Decrement the loop counter */
;;;283        blkCntN3--;
0000e2  9b0a              LDR      r3,[sp,#0x28]
0000e4  e034              B        |L1.336|
                  |L1.230|
0000e6  7803              LDRB     r3,[r0,#0]            ;210
                  |L1.232|
0000e8  f8314b02          LDRH     r4,[r1],#2            ;214
0000ec  f8264b02          STRH     r4,[r6],#2            ;214
0000f0  1e5b              SUBS     r3,r3,#1              ;214
0000f2  d1f9              BNE      |L1.232|
0000f4  2500              MOVS     r5,#0                 ;219
0000f6  4614              MOV      r4,r2                 ;222
0000f8  ea4f079e          LSR      r7,lr,#2              ;228
0000fc  9b0d              LDR      r3,[sp,#0x34]         ;232
0000fe  e00c              B        |L1.282|
                  |L1.256|
000100  f8539b04          LDR      r9,[r3],#4            ;235
000104  f854cb04          LDR      r12,[r4],#4           ;238
000108  f853ab04          LDR      r10,[r3],#4           ;241
00010c  fb2c5509          SMLAD    r5,r12,r9,r5          ;244
000110  f854cb04          LDR      r12,[r4],#4           ;247
000114  fb2c550a          SMLAD    r5,r12,r10,r5         ;250
000118  1e7f              SUBS     r7,r7,#1              ;250
                  |L1.282|
00011a  2f00              CMP      r7,#0                 ;232
00011c  d1f0              BNE      |L1.256|
00011e  f00e0703          AND      r7,lr,#3              ;257
000122  e006              B        |L1.306|
                  |L1.292|
000124  f933cb02          LDRSH    r12,[r3],#2           ;262
000128  f9348b02          LDRSH    r8,[r4],#2            ;265
00012c  fb28550c          SMLAD    r5,r8,r12,r5          ;268
000130  1e7f              SUBS     r7,r7,#1              ;268
                  |L1.306|
000132  2f00              CMP      r7,#0                 ;259
000134  d1f6              BNE      |L1.292|
000136  7803              LDRB     r3,[r0,#0]            ;276
000138  f32534cf          SSAT     r4,#16,r5,ASR #15     ;280
00013c  eb020243          ADD      r2,r2,r3,LSL #1       ;276
000140  9b12              LDR      r3,[sp,#0x48]         ;280
000142  801c              STRH     r4,[r3,#0]            ;280
000144  9b12              LDR      r3,[sp,#0x48]         ;280
000146  1c9b              ADDS     r3,r3,#2              ;280
000148  9312              STR      r3,[sp,#0x48]
00014a  9b0a              LDR      r3,[sp,#0x28]
00014c  1e5b              SUBS     r3,r3,#1
00014e  930a              STR      r3,[sp,#0x28]
                  |L1.336|
000150  2b00              CMP      r3,#0                 ;207
000152  d1c8              BNE      |L1.230|
;;;284      }
;;;285    
;;;286      /* Processing is complete.       
;;;287       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
;;;288       ** This prepares the state buffer for the next function call. */
;;;289    
;;;290      /* Points to the start of the state buffer */
;;;291      pStateCurnt = S->pState;
;;;292    
;;;293      i = (numTaps - 1u) >> 2u;
000154  f1ae0301          SUB      r3,lr,#1
000158  6880              LDR      r0,[r0,#8]            ;291
00015a  0899              LSRS     r1,r3,#2
;;;294    
;;;295      /* copy data */
;;;296      while(i > 0u)
00015c  e009              B        |L1.370|
;;;297      {
;;;298        *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
00015e  bf00              NOP      
                  |L1.352|
000160  f8524b04          LDR      r4,[r2],#4
000164  f8404b04          STR      r4,[r0],#4
;;;299        *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
000168  f8524b04          LDR      r4,[r2],#4
00016c  f8404b04          STR      r4,[r0],#4
000170  1e49              SUBS     r1,r1,#1
                  |L1.370|
000172  2900              CMP      r1,#0                 ;296
000174  d1f4              BNE      |L1.352|
;;;300    
;;;301        /* Decrement the loop counter */
;;;302        i--;
;;;303      }
;;;304    
;;;305      i = (numTaps - 1u) % 0x04u;
000176  f0030103          AND      r1,r3,#3
;;;306    
;;;307      /* copy data */
;;;308      while(i > 0u)
00017a  e004              B        |L1.390|
                  |L1.380|
;;;309      {
;;;310        *pStateCurnt++ = *pState++;
00017c  f8323b02          LDRH     r3,[r2],#2
000180  f8203b02          STRH     r3,[r0],#2
000184  1e49              SUBS     r1,r1,#1
                  |L1.390|
000186  2900              CMP      r1,#0                 ;308
000188  d1f8              BNE      |L1.380|
;;;311    
;;;312        /* Decrement the loop counter */
;;;313        i--;
;;;314      }
;;;315    }
00018a  b014              ADD      sp,sp,#0x50
00018c  e8bd8ff0          POP      {r4-r11,pc}
;;;316    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_fast_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REVSH|
#line 144
|__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____RRX|
#line 300
|__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
