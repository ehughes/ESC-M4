; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_fast_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_fast_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fir_decimate_fast_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_fast_q15.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_fast_q15||, CODE, READONLY, ALIGN=1

                  arm_fir_decimate_fast_q15 PROC
;;;79     
;;;80     void arm_fir_decimate_fast_q15(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;81       const arm_fir_decimate_instance_q15 * S,
;;;82       q15_t * pSrc,
;;;83       q15_t * pDst,
;;;84       uint32_t blockSize)
;;;85     {
000004  b089              SUB      sp,sp,#0x24
;;;86       q15_t *pState = S->pState;                     /* State pointer */
000006  6884              LDR      r4,[r0,#8]
;;;87       q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000008  6845              LDR      r5,[r0,#4]
00000a  9506              STR      r5,[sp,#0x18]
;;;88       q15_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;89       q15_t *px;                                     /* Temporary pointer for state buffer */
;;;90       q15_t *pb;                                     /* Temporary pointer coefficient buffer */
;;;91       q31_t x0, x1, c0, c1;                          /* Temporary variables to hold state and coefficient values */
;;;92       q31_t sum0;                                    /* Accumulators */
;;;93       q31_t acc0, acc1;
;;;94       q15_t *px0, *px1;
;;;95       uint32_t blkCntN3;
;;;96       uint32_t numTaps = S->numTaps;                 /* Number of taps */
00000c  f8b0a002          LDRH     r10,[r0,#2]
;;;97       uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
000010  7805              LDRB     r5,[r0,#0]
000012  fbb3f3f5          UDIV     r3,r3,r5
;;;98     
;;;99     
;;;100      /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;101      /* pStateCurnt points to the location where the new input data should be written */
;;;102      pStateCurnt = S->pState + (numTaps - 1u);
000016  f1aa0501          SUB      r5,r10,#1
00001a  eb040745          ADD      r7,r4,r5,LSL #1
00001e  9508              STR      r5,[sp,#0x20]
;;;103    
;;;104    
;;;105      /* Total number of output samples to be computed */
;;;106      blkCnt = outBlockSize / 2;
000020  085d              LSRS     r5,r3,#1
000022  9500              STR      r5,[sp,#0]
;;;107      blkCntN3 = outBlockSize - (2 * blkCnt);
000024  9d00              LDR      r5,[sp,#0]
000026  426d              RSBS     r5,r5,#0
000028  eb030345          ADD      r3,r3,r5,LSL #1
00002c  9301              STR      r3,[sp,#4]
00002e  e062              B        |L1.246|
                  |L1.48|
;;;108    
;;;109    
;;;110      while(blkCnt > 0u)
;;;111      {
;;;112        /* Copy decimation factor number of new input samples into the state buffer */
;;;113        i = 2 * S->M;
000030  7803              LDRB     r3,[r0,#0]
000032  005b              LSLS     r3,r3,#1
                  |L1.52|
;;;114    
;;;115        do
;;;116        {
;;;117          *pStateCurnt++ = *pSrc++;
000034  f8315b02          LDRH     r5,[r1],#2
000038  f8275b02          STRH     r5,[r7],#2
;;;118    
;;;119        } while(--i);
00003c  1e5b              SUBS     r3,r3,#1
00003e  d1f9              BNE      |L1.52|
;;;120    
;;;121        /* Set accumulator to zero */
;;;122        acc0 = 0;
000040  469c              MOV      r12,r3
;;;123        acc1 = 0;
000042  4698              MOV      r8,r3
;;;124    
;;;125        /* Initialize state pointer */
;;;126        px0 = pState;
000044  4623              MOV      r3,r4
;;;127    
;;;128        px1 = pState + S->M;
000046  7805              LDRB     r5,[r0,#0]
000048  9507              STR      r5,[sp,#0x1c]
00004a  eb040645          ADD      r6,r4,r5,LSL #1
;;;129    
;;;130    
;;;131        /* Initialize coeff pointer */
;;;132        pb = pCoeffs;
00004e  9d06              LDR      r5,[sp,#0x18]
;;;133    
;;;134        /* Loop unrolling.  Process 4 taps at a time. */
;;;135        tapCnt = numTaps >> 2;
000050  ea4f099a          LSR      r9,r10,#2
;;;136    
;;;137        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;138         ** Repeat until we've computed numTaps-4 coefficients. */
;;;139        while(tapCnt > 0u)
000054  e025              B        |L1.162|
                  |L1.86|
;;;140        {
;;;141          /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
;;;142          c0 = *__SIMD32(pb)++;
000056  f855bb04          LDR      r11,[r5],#4
;;;143    
;;;144          /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
;;;145          x0 = *__SIMD32(px0)++;
00005a  f853eb04          LDR      lr,[r3],#4
00005e  f8cde014          STR      lr,[sp,#0x14]
;;;146    
;;;147          x1 = *__SIMD32(px1)++;
000062  f856eb04          LDR      lr,[r6],#4
000066  f8cde010          STR      lr,[sp,#0x10]
;;;148    
;;;149          /* Perform the multiply-accumulate */
;;;150          acc0 = __SMLAD(x0, c0, acc0);
00006a  f8dde014          LDR      lr,[sp,#0x14]
00006e  fb2ece0b          SMLAD    lr,lr,r11,r12
000072  f8cde00c          STR      lr,[sp,#0xc]
;;;151    
;;;152          acc1 = __SMLAD(x1, c0, acc1);
000076  f8dde010          LDR      lr,[sp,#0x10]
00007a  fb2e8e0b          SMLAD    lr,lr,r11,r8
00007e  f8cde008          STR      lr,[sp,#8]
;;;153    
;;;154          /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
;;;155          c0 = *__SIMD32(pb)++;
000082  f8558b04          LDR      r8,[r5],#4
;;;156    
;;;157          /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
;;;158          x0 = *__SIMD32(px0)++;
000086  f853cb04          LDR      r12,[r3],#4
;;;159    
;;;160          x1 = *__SIMD32(px1)++;
00008a  f856bb04          LDR      r11,[r6],#4
;;;161    
;;;162          /* Perform the multiply-accumulate */
;;;163          acc0 = __SMLAD(x0, c0, acc0);
00008e  f8dde00c          LDR      lr,[sp,#0xc]
000092  fb2cec08          SMLAD    r12,r12,r8,lr
;;;164    
;;;165          acc1 = __SMLAD(x1, c0, acc1);
000096  f8dde008          LDR      lr,[sp,#8]
00009a  fb2be808          SMLAD    r8,r11,r8,lr
;;;166    
;;;167          /* Decrement the loop counter */
;;;168          tapCnt--;
00009e  f1a90901          SUB      r9,r9,#1
                  |L1.162|
0000a2  f1b90f00          CMP      r9,#0                 ;139
0000a6  d1d6              BNE      |L1.86|
;;;169        }
;;;170    
;;;171        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;172        tapCnt = numTaps % 0x4u;
0000a8  f00a0903          AND      r9,r10,#3
;;;173    
;;;174        while(tapCnt > 0u)
0000ac  e013              B        |L1.214|
                  |L1.174|
;;;175        {
;;;176          /* Read coefficients */
;;;177          c0 = *pb++;
0000ae  f935bb02          LDRSH    r11,[r5],#2
;;;178    
;;;179          /* Fetch 1 state variable */
;;;180          x0 = *px0++;
0000b2  f933eb02          LDRSH    lr,[r3],#2
0000b6  f8cde014          STR      lr,[sp,#0x14]
;;;181    
;;;182          x1 = *px1++;
0000ba  f936eb02          LDRSH    lr,[r6],#2
0000be  f8cde010          STR      lr,[sp,#0x10]
;;;183    
;;;184          /* Perform the multiply-accumulate */
;;;185          acc0 = __SMLAD(x0, c0, acc0);
0000c2  f8dde014          LDR      lr,[sp,#0x14]
0000c6  fb2ecc0b          SMLAD    r12,lr,r11,r12
;;;186          acc1 = __SMLAD(x1, c0, acc1);
0000ca  f8dde010          LDR      lr,[sp,#0x10]
0000ce  fb2e880b          SMLAD    r8,lr,r11,r8
;;;187    
;;;188          /* Decrement the loop counter */
;;;189          tapCnt--;
0000d2  f1a90901          SUB      r9,r9,#1
                  |L1.214|
0000d6  f1b90f00          CMP      r9,#0                 ;174
0000da  d1e8              BNE      |L1.174|
;;;190        }
;;;191    
;;;192        /* Advance the state pointer by the decimation factor       
;;;193         * to process the next group of decimation factor number samples */
;;;194        pState = pState + S->M * 2;
0000dc  9b07              LDR      r3,[sp,#0x1c]
0000de  eb040483          ADD      r4,r4,r3,LSL #2
;;;195    
;;;196        /* Store filter output, smlad returns the values in 2.14 format */
;;;197        /* so downsacle by 15 to get output in 1.15 */
;;;198        *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
0000e2  f32c33cf          SSAT     r3,#16,r12,ASR #15
0000e6  8013              STRH     r3,[r2,#0]
;;;199        *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
0000e8  f32833cf          SSAT     r3,#16,r8,ASR #15
0000ec  8053              STRH     r3,[r2,#2]
0000ee  1d12              ADDS     r2,r2,#4
;;;200    
;;;201        /* Decrement the loop counter */
;;;202        blkCnt--;
0000f0  9b00              LDR      r3,[sp,#0]
0000f2  1e5b              SUBS     r3,r3,#1
0000f4  9300              STR      r3,[sp,#0]
                  |L1.246|
0000f6  9b00              LDR      r3,[sp,#0]            ;110
0000f8  2b00              CMP      r3,#0                 ;110
0000fa  d199              BNE      |L1.48|
0000fc  e035              B        |L1.362|
                  |L1.254|
;;;203      }
;;;204    
;;;205    
;;;206    
;;;207      while(blkCntN3 > 0u)
;;;208      {
;;;209        /* Copy decimation factor number of new input samples into the state buffer */
;;;210        i = S->M;
0000fe  7803              LDRB     r3,[r0,#0]
                  |L1.256|
;;;211    
;;;212        do
;;;213        {
;;;214          *pStateCurnt++ = *pSrc++;
000100  f8315b02          LDRH     r5,[r1],#2
000104  f8275b02          STRH     r5,[r7],#2
;;;215    
;;;216        } while(--i);
000108  1e5b              SUBS     r3,r3,#1
00010a  d1f9              BNE      |L1.256|
;;;217    
;;;218        /*Set sum to zero */
;;;219        sum0 = 0;
00010c  2600              MOVS     r6,#0
;;;220    
;;;221        /* Initialize state pointer */
;;;222        px = pState;
00010e  4623              MOV      r3,r4
;;;223    
;;;224        /* Initialize coeff pointer */
;;;225        pb = pCoeffs;
000110  9d06              LDR      r5,[sp,#0x18]
;;;226    
;;;227        /* Loop unrolling.  Process 4 taps at a time. */
;;;228        tapCnt = numTaps >> 2;
000112  ea4f0c9a          LSR      r12,r10,#2
;;;229    
;;;230        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;231         ** Repeat until we've computed numTaps-4 coefficients. */
;;;232        while(tapCnt > 0u)
000116  e00d              B        |L1.308|
                  |L1.280|
;;;233        {
;;;234          /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
;;;235          c0 = *__SIMD32(pb)++;
000118  f855bb04          LDR      r11,[r5],#4
;;;236    
;;;237          /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
;;;238          x0 = *__SIMD32(px)++;
00011c  f8d39000          LDR      r9,[r3,#0]
;;;239    
;;;240          /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
;;;241          c1 = *__SIMD32(pb)++;
000120  f8558b04          LDR      r8,[r5],#4
;;;242    
;;;243          /* Perform the multiply-accumulate */
;;;244          sum0 = __SMLAD(x0, c0, sum0);
000124  fb29690b          SMLAD    r9,r9,r11,r6
;;;245    
;;;246          /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
;;;247          x0 = *__SIMD32(px)++;
000128  685e              LDR      r6,[r3,#4]
00012a  3308              ADDS     r3,r3,#8
;;;248    
;;;249          /* Perform the multiply-accumulate */
;;;250          sum0 = __SMLAD(x0, c1, sum0);
00012c  fb269608          SMLAD    r6,r6,r8,r9
;;;251    
;;;252          /* Decrement the loop counter */
;;;253          tapCnt--;
000130  f1ac0c01          SUB      r12,r12,#1
                  |L1.308|
000134  f1bc0f00          CMP      r12,#0                ;232
000138  d1ee              BNE      |L1.280|
;;;254        }
;;;255    
;;;256        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;257        tapCnt = numTaps % 0x4u;
00013a  f00a0c03          AND      r12,r10,#3
;;;258    
;;;259        while(tapCnt > 0u)
00013e  e007              B        |L1.336|
                  |L1.320|
;;;260        {
;;;261          /* Read coefficients */
;;;262          c0 = *pb++;
000140  f9359b02          LDRSH    r9,[r5],#2
;;;263    
;;;264          /* Fetch 1 state variable */
;;;265          x0 = *px++;
000144  f9338b02          LDRSH    r8,[r3],#2
;;;266    
;;;267          /* Perform the multiply-accumulate */
;;;268          sum0 = __SMLAD(x0, c0, sum0);
000148  fb286609          SMLAD    r6,r8,r9,r6
;;;269    
;;;270          /* Decrement the loop counter */
;;;271          tapCnt--;
00014c  f1ac0c01          SUB      r12,r12,#1
                  |L1.336|
000150  f1bc0f00          CMP      r12,#0                ;259
000154  d1f4              BNE      |L1.320|
;;;272        }
;;;273    
;;;274        /* Advance the state pointer by the decimation factor       
;;;275         * to process the next group of decimation factor number samples */
;;;276        pState = pState + S->M;
000156  7803              LDRB     r3,[r0,#0]
000158  eb040443          ADD      r4,r4,r3,LSL #1
;;;277    
;;;278        /* Store filter output, smlad returns the values in 2.14 format */
;;;279        /* so downsacle by 15 to get output in 1.15 */
;;;280        *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
00015c  f32633cf          SSAT     r3,#16,r6,ASR #15
000160  f8223b02          STRH     r3,[r2],#2
;;;281    
;;;282        /* Decrement the loop counter */
;;;283        blkCntN3--;
000164  9b01              LDR      r3,[sp,#4]
000166  1e5b              SUBS     r3,r3,#1
000168  9301              STR      r3,[sp,#4]
                  |L1.362|
00016a  9b01              LDR      r3,[sp,#4]            ;207
00016c  2b00              CMP      r3,#0                 ;207
00016e  d1c6              BNE      |L1.254|
;;;284      }
;;;285    
;;;286      /* Processing is complete.       
;;;287       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
;;;288       ** This prepares the state buffer for the next function call. */
;;;289    
;;;290      /* Points to the start of the state buffer */
;;;291      pStateCurnt = S->pState;
000170  6880              LDR      r0,[r0,#8]
;;;292    
;;;293      i = (numTaps - 1u) >> 2u;
000172  9908              LDR      r1,[sp,#0x20]
000174  0889              LSRS     r1,r1,#2
;;;294    
;;;295      /* copy data */
;;;296      while(i > 0u)
000176  e006              B        |L1.390|
                  |L1.376|
;;;297      {
;;;298        *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
000178  6822              LDR      r2,[r4,#0]
00017a  6002              STR      r2,[r0,#0]
;;;299        *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
00017c  6862              LDR      r2,[r4,#4]
00017e  3408              ADDS     r4,r4,#8
000180  6042              STR      r2,[r0,#4]
000182  3008              ADDS     r0,r0,#8
;;;300    
;;;301        /* Decrement the loop counter */
;;;302        i--;
000184  1e49              SUBS     r1,r1,#1
                  |L1.390|
000186  2900              CMP      r1,#0                 ;296
000188  d1f6              BNE      |L1.376|
;;;303      }
;;;304    
;;;305      i = (numTaps - 1u) % 0x04u;
00018a  9908              LDR      r1,[sp,#0x20]
00018c  f0010103          AND      r1,r1,#3
;;;306    
;;;307      /* copy data */
;;;308      while(i > 0u)
000190  e004              B        |L1.412|
                  |L1.402|
;;;309      {
;;;310        *pStateCurnt++ = *pState++;
000192  f8342b02          LDRH     r2,[r4],#2
000196  f8202b02          STRH     r2,[r0],#2
;;;311    
;;;312        /* Decrement the loop counter */
;;;313        i--;
00019a  1e49              SUBS     r1,r1,#1
                  |L1.412|
00019c  2900              CMP      r1,#0                 ;308
00019e  d1f8              BNE      |L1.402|
;;;314      }
;;;315    }
0001a0  b009              ADD      sp,sp,#0x24
0001a2  e8bd8ff0          POP      {r4-r11,pc}
;;;316    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_fast_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REVSH|
#line 144
|__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____RRX|
#line 300
|__asm___27_arm_fir_decimate_fast_q15_c_c6d9438e____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
