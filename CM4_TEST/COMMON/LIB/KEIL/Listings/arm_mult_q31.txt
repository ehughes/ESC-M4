; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mult_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mult_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mult_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_mult_q31.c]
                          THUMB

                          AREA ||i.arm_mult_q31||, CODE, READONLY, ALIGN=1

                  arm_mult_q31 PROC
;;;65     
;;;66     void arm_mult_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;67       q31_t * pSrcA,
;;;68       q31_t * pSrcB,
;;;69       q31_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counters */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q31_t inA1, inA2, inA3, inA4;                  /* temporary input variables */
;;;78       q31_t inB1, inB2, inB3, inB4;                  /* temporary input variables */
;;;79       q31_t out1, out2, out3, out4;                  /* temporary output variables */
;;;80     
;;;81       /* loop Unrolling */
;;;82       blkCnt = blockSize >> 2u;
000004  089c              LSRS     r4,r3,#2
000006  e029              B        |L1.92|
                  |L1.8|
;;;83     
;;;84       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;85        ** a second loop below computes the remaining 1 to 3 samples. */
;;;86       while(blkCnt > 0u)
;;;87       {
;;;88         /* C = A * B */
;;;89         /* Multiply the inputs and then store the results in the destination buffer. */
;;;90         inA1 = *pSrcA++;
000008  f8d0a000          LDR      r10,[r0,#0]
;;;91         inA2 = *pSrcA++;
00000c  6845              LDR      r5,[r0,#4]
;;;92         inA3 = *pSrcA++;
00000e  6886              LDR      r6,[r0,#8]
;;;93         inA4 = *pSrcA++;
000010  68c7              LDR      r7,[r0,#0xc]
000012  3010              ADDS     r0,r0,#0x10
;;;94         inB1 = *pSrcB++;
000014  f851bb04          LDR      r11,[r1],#4
;;;95         inB2 = *pSrcB++;
000018  f851cb04          LDR      r12,[r1],#4
;;;96         inB3 = *pSrcB++;
00001c  f8518b04          LDR      r8,[r1],#4
;;;97         inB4 = *pSrcB++;
000020  f8519b04          LDR      r9,[r1],#4
;;;98     
;;;99         out1 = ((q63_t) inA1 * inB1) >> 32;
000024  fb5afa0b          SMMUL    r10,r10,r11
;;;100        out2 = ((q63_t) inA2 * inB2) >> 32;
000028  fb55f50c          SMMUL    r5,r5,r12
;;;101        out3 = ((q63_t) inA3 * inB3) >> 32;
00002c  fb56f608          SMMUL    r6,r6,r8
;;;102        out4 = ((q63_t) inA4 * inB4) >> 32;
000030  fb57fc09          SMMUL    r12,r7,r9
;;;103    
;;;104        out1 = __SSAT(out1, 31);
000034  f30a081e          SSAT     r8,#31,r10
;;;105        out2 = __SSAT(out2, 31);
000038  f305051e          SSAT     r5,#31,r5
;;;106        out3 = __SSAT(out3, 31);
00003c  f306071e          SSAT     r7,#31,r6
;;;107        out4 = __SSAT(out4, 31);
000040  f30c061e          SSAT     r6,#31,r12
;;;108    
;;;109        *pDst++ = out1 << 1u;
000044  ea4f0c48          LSL      r12,r8,#1
000048  f8c2c000          STR      r12,[r2,#0]
;;;110        *pDst++ = out2 << 1u;
00004c  006d              LSLS     r5,r5,#1
00004e  6055              STR      r5,[r2,#4]
;;;111        *pDst++ = out3 << 1u;
000050  007d              LSLS     r5,r7,#1
000052  6095              STR      r5,[r2,#8]
;;;112        *pDst++ = out4 << 1u;
000054  0075              LSLS     r5,r6,#1
000056  60d5              STR      r5,[r2,#0xc]
000058  3210              ADDS     r2,r2,#0x10
;;;113    
;;;114        /* Decrement the blockSize loop counter */
;;;115        blkCnt--;
00005a  1e64              SUBS     r4,r4,#1
                  |L1.92|
00005c  2c00              CMP      r4,#0                 ;86
00005e  d1d3              BNE      |L1.8|
;;;116      }
;;;117    
;;;118      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;119       ** No loop unrolling is used. */
;;;120      blkCnt = blockSize % 0x4u;
000060  f0030303          AND      r3,r3,#3
;;;121      
;;;122      while(blkCnt > 0u)
000064  e008              B        |L1.120|
                  |L1.102|
;;;123      {
;;;124        /* C = A * B */
;;;125        /* Multiply the inputs and then store the results in the destination buffer. */
;;;126        inA1 = *pSrcA++;
000066  c810              LDM      r0!,{r4}
;;;127        inB1 = *pSrcB++;
000068  c920              LDM      r1!,{r5}
;;;128        out1 = ((q63_t) inA1 * inB1) >> 32;
00006a  fb54f405          SMMUL    r4,r4,r5
;;;129        out1 = __SSAT(out1, 31);
00006e  f304041e          SSAT     r4,#31,r4
;;;130        *pDst++ = out1 << 1u;
000072  0064              LSLS     r4,r4,#1
000074  c210              STM      r2!,{r4}
;;;131    
;;;132        /* Decrement the blockSize loop counter */
;;;133        blkCnt--;
000076  1e5b              SUBS     r3,r3,#1
                  |L1.120|
000078  2b00              CMP      r3,#0                 ;122
00007a  d1f4              BNE      |L1.102|
;;;134      }
;;;135    
;;;136    #else
;;;137    
;;;138      /* Run the below code for Cortex-M0 */
;;;139    
;;;140      /* Initialize blkCnt with number of samples */
;;;141      blkCnt = blockSize;
;;;142    
;;;143    
;;;144      while(blkCnt > 0u)
;;;145      {
;;;146        /* C = A * B */
;;;147        /* Multiply the inputs and then store the results in the destination buffer. */
;;;148        *pDst++ =
;;;149          (q31_t) clip_q63_to_q31(((q63_t) (*pSrcA++) * (*pSrcB++)) >> 31);
;;;150    
;;;151        /* Decrement the blockSize loop counter */
;;;152        blkCnt--;
;;;153      }
;;;154      
;;;155    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;156    }
00007c  e8bd8ff0          POP      {r4-r11,pc}
;;;157    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_mult_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_q31_c_02acb70c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_mult_q31_c_02acb70c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_q31_c_02acb70c____REVSH|
#line 144
|__asm___14_arm_mult_q31_c_02acb70c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mult_q31_c_02acb70c____RRX|
#line 300
|__asm___14_arm_mult_q31_c_02acb70c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
