; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_std_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_std_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_std_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_std_q15.c]
                          THUMB

                          AREA ||i.arm_std_q15||, CODE, READONLY, ALIGN=1

                  arm_std_q15 PROC
;;;72     
;;;73     void arm_std_q15(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74       q15_t * pSrc,
;;;75       uint32_t blockSize,
;;;76       q15_t * pResult)
;;;77     {
000004  4603              MOV      r3,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;78       q31_t sum = 0;                                 /* Accumulator */
00000a  2400              MOVS     r4,#0
;;;79       q31_t meanOfSquares, squareOfMean;             /* square of mean and mean of square */
;;;80       uint32_t blkCnt;                               /* loop counter */
;;;81       q63_t sumOfSquares = 0;                        /* Accumulator */
00000c  2000              MOVS     r0,#0
00000e  4601              MOV      r1,r0
;;;82        
;;;83     #ifndef ARM_MATH_CM0_FAMILY
;;;84     
;;;85       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;86     
;;;87       q31_t in;                                      /* input value */
;;;88       q15_t in1;                                     /* input value */
;;;89     
;;;90     	if(blockSize == 1)
000010  2200              MOVS     r2,#0
000012  2d01              CMP      r5,#1
000014  d001              BEQ      |L1.26|
;;;91     	{
;;;92     		*pResult = 0;
;;;93     		return;
;;;94     	}
;;;95     
;;;96       /*loop Unrolling */
;;;97       blkCnt = blockSize >> 2u;
000016  08af              LSRS     r7,r5,#2
;;;98     
;;;99       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;100       ** a second loop below computes the remaining 1 to 3 samples. */
;;;101      while(blkCnt > 0u)
000018  e012              B        |L1.64|
                  |L1.26|
00001a  8032              STRH     r2,[r6,#0]            ;92
;;;102      {
;;;103        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
;;;104        /* Compute Sum of squares of the input samples    
;;;105         * and then store the result in a temporary variable, sum. */
;;;106        in = *__SIMD32(pSrc)++;
;;;107        sum += ((in << 16) >> 16);
;;;108        sum += (in >> 16);
;;;109        sumOfSquares = __SMLALD(in, in, sumOfSquares);
;;;110        in = *__SIMD32(pSrc)++;
;;;111        sum += ((in << 16) >> 16);
;;;112        sum += (in >> 16);
;;;113        sumOfSquares = __SMLALD(in, in, sumOfSquares);
;;;114    
;;;115        /* Decrement the loop counter */
;;;116        blkCnt--;
;;;117      }
;;;118    
;;;119      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;120       ** No loop unrolling is used. */
;;;121      blkCnt = blockSize % 0x4u;
;;;122    
;;;123      while(blkCnt > 0u)
;;;124      {
;;;125        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;126        /* Compute Sum of squares of the input samples    
;;;127         * and then store the result in a temporary variable, sum. */
;;;128        in1 = *pSrc++;
;;;129        sumOfSquares = __SMLALD(in1, in1, sumOfSquares);
;;;130        sum += in1;
;;;131    
;;;132        /* Decrement the loop counter */
;;;133        blkCnt--;
;;;134      }
;;;135    
;;;136      /* Compute Mean of squares of the input samples    
;;;137       * and then store the result in a temporary variable, meanOfSquares. */
;;;138      meanOfSquares = (q31_t)(sumOfSquares / (q63_t)(blockSize - 1));
;;;139    
;;;140      /* Compute square of mean */
;;;141      squareOfMean = (q31_t) ((q63_t)sum * sum / (q63_t)(blockSize * (blockSize - 1)));
;;;142    
;;;143      /* mean of the squares minus the square of the mean. */
;;;144      /* Compute standard deviation and store the result to the destination */
;;;145      arm_sqrt_q15(__SSAT((meanOfSquares - squareOfMean) >> 15, 16u), pResult);
;;;146    
;;;147    #else
;;;148    
;;;149      /* Run the below code for Cortex-M0 */
;;;150      q15_t in;                                      /* input value */
;;;151    
;;;152    	if(blockSize == 1)
;;;153    	{
;;;154    		*pResult = 0;
;;;155    		return;
;;;156    	}
;;;157    
;;;158      /* Loop over blockSize number of values */
;;;159      blkCnt = blockSize;
;;;160    
;;;161      while(blkCnt > 0u)
;;;162      {
;;;163        /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
;;;164        /* Compute Sum of squares of the input samples     
;;;165         * and then store the result in a temporary variable, sumOfSquares. */
;;;166        in = *pSrc++;
;;;167        sumOfSquares += (in * in);
;;;168    
;;;169        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;170        /* Compute sum of all input values and then store the result in a temporary variable, sum. */
;;;171        sum += in;
;;;172    
;;;173        /* Decrement the loop counter */
;;;174        blkCnt--;
;;;175      }
;;;176    
;;;177      /* Compute Mean of squares of the input samples     
;;;178       * and then store the result in a temporary variable, meanOfSquares. */
;;;179      meanOfSquares = (q31_t)(sumOfSquares / (q63_t)(blockSize - 1));
;;;180    
;;;181      /* Compute square of mean */
;;;182      squareOfMean = (q31_t) ((q63_t)sum * sum / (q63_t)(blockSize * (blockSize - 1)));
;;;183    
;;;184      /* mean of the squares minus the square of the mean. */
;;;185      /* Compute standard deviation and store the result to the destination */
;;;186      arm_sqrt_q15(__SSAT((meanOfSquares - squareOfMean) >> 15, 16u), pResult);
;;;187    
;;;188    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;189    
;;;190    
;;;191    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  681a              LDR      r2,[r3,#0]            ;106
000022  fa04f482          SXTAH    r4,r4,r2              ;107
000026  eb044422          ADD      r4,r4,r2,ASR #16      ;108
00002a  fbc201c2          SMLALD   r0,r1,r2,r2           ;109
00002e  685a              LDR      r2,[r3,#4]            ;110
000030  3308              ADDS     r3,r3,#8              ;110
000032  fa04f482          SXTAH    r4,r4,r2              ;111
000036  eb044422          ADD      r4,r4,r2,ASR #16      ;112
00003a  fbc201c2          SMLALD   r0,r1,r2,r2           ;113
00003e  1e7f              SUBS     r7,r7,#1              ;116
                  |L1.64|
000040  2f00              CMP      r7,#0                 ;101
000042  d1ed              BNE      |L1.32|
000044  f0050703          AND      r7,r5,#3              ;121
000048  e005              B        |L1.86|
                  |L1.74|
00004a  f9332b02          LDRSH    r2,[r3],#2            ;128
00004e  fbc201c2          SMLALD   r0,r1,r2,r2           ;129
000052  4414              ADD      r4,r4,r2              ;130
000054  1e7f              SUBS     r7,r7,#1              ;133
                  |L1.86|
000056  2f00              CMP      r7,#0                 ;123
000058  d1f7              BNE      |L1.74|
00005a  1e6f              SUBS     r7,r5,#1              ;138
00005c  463a              MOV      r2,r7                 ;138
00005e  2300              MOVS     r3,#0                 ;138
000060  f7fffffe          BL       __aeabi_ldivmod
000064  4680              MOV      r8,r0                 ;138
000066  fb840104          SMULL    r0,r1,r4,r4           ;141
00006a  fb05f207          MUL      r2,r5,r7              ;141
00006e  2300              MOVS     r3,#0                 ;141
000070  f7fffffe          BL       __aeabi_ldivmod
000074  eba80000          SUB      r0,r8,r0              ;145
000078  4631              MOV      r1,r6                 ;145
00007a  e8bd41f0          POP      {r4-r8,lr}            ;145
00007e  f32030cf          SSAT     r0,#16,r0,ASR #15     ;145
000082  f7ffbffe          B.W      arm_sqrt_q15
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_std_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q15_c_5e79a0c6____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_std_q15_c_5e79a0c6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q15_c_5e79a0c6____REVSH|
#line 144
|__asm___13_arm_std_q15_c_5e79a0c6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_std_q15_c_5e79a0c6____RRX|
#line 300
|__asm___13_arm_std_q15_c_5e79a0c6____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
