; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_scale_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_scale_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_scale_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_scale_q15.c]
                          THUMB

                          AREA ||i.arm_scale_q15||, CODE, READONLY, ALIGN=1

                  arm_scale_q15 PROC
;;;67     
;;;68     void arm_scale_q15(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;69       q15_t * pSrc,
;;;70       q15_t scaleFract,
;;;71       int8_t shift,
;;;72       q15_t * pDst,
;;;73       uint32_t blockSize)
;;;74     {
000004  f8ddc018          LDR      r12,[sp,#0x18]
;;;75       int8_t kShift = 15 - shift;                    /* shift to apply after scaling */
000008  f1c2020f          RSB      r2,r2,#0xf
00000c  b252              SXTB     r2,r2
;;;76       uint32_t blkCnt;                               /* loop counter */
;;;77     
;;;78     #ifndef ARM_MATH_CM0_FAMILY
;;;79     
;;;80     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;81       q15_t in1, in2, in3, in4;
;;;82       q31_t inA1, inA2;                              /* Temporary variables */
;;;83       q31_t out1, out2, out3, out4;
;;;84     
;;;85     
;;;86       /*loop Unrolling */
;;;87       blkCnt = blockSize >> 2u;
00000e  ea4f049c          LSR      r4,r12,#2
000012  e021              B        |L1.88|
                  |L1.20|
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93         /* Reading 2 inputs from memory */
;;;94         inA1 = *__SIMD32(pSrc)++;
000014  6806              LDR      r6,[r0,#0]
;;;95         inA2 = *__SIMD32(pSrc)++;
000016  6845              LDR      r5,[r0,#4]
000018  3008              ADDS     r0,r0,#8
;;;96     
;;;97         /* C = A * scale */
;;;98         /* Scale the inputs and then store the 2 results in the destination buffer        
;;;99          * in single cycle by packing the outputs */
;;;100        out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
00001a  ea4f4826          ASR      r8,r6,#16
00001e  fb08f801          MUL      r8,r8,r1
;;;101        out2 = (q31_t) ((q15_t) inA1 * scaleFract);
000022  b236              SXTH     r6,r6
000024  434e              MULS     r6,r1,r6
;;;102        out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
000026  142f              ASRS     r7,r5,#16
000028  434f              MULS     r7,r1,r7
;;;103        out4 = (q31_t) ((q15_t) inA2 * scaleFract);
00002a  b22d              SXTH     r5,r5
00002c  434d              MULS     r5,r1,r5
;;;104    
;;;105        /* apply shifting */
;;;106        out1 = out1 >> kShift;
00002e  fa48f802          ASR      r8,r8,r2
;;;107        out2 = out2 >> kShift;
000032  4116              ASRS     r6,r6,r2
;;;108        out3 = out3 >> kShift;
000034  4117              ASRS     r7,r7,r2
;;;109        out4 = out4 >> kShift;
000036  4115              ASRS     r5,r5,r2
;;;110    
;;;111        /* saturate the output */
;;;112        in1 = (q15_t) (__SSAT(out1, 16));
000038  f308080f          SSAT     r8,#16,r8
;;;113        in2 = (q15_t) (__SSAT(out2, 16));
00003c  f306060f          SSAT     r6,#16,r6
;;;114        in3 = (q15_t) (__SSAT(out3, 16));
000040  f307070f          SSAT     r7,#16,r7
;;;115        in4 = (q15_t) (__SSAT(out4, 16));
000044  f305050f          SSAT     r5,#16,r5
;;;116    
;;;117        /* store the result to destination */
;;;118        *__SIMD32(pDst)++ = __PKHBT(in2, in1, 16);
000048  eac64608          PKHBT    r6,r6,r8,LSL #16
00004c  601e              STR      r6,[r3,#0]
;;;119        *__SIMD32(pDst)++ = __PKHBT(in4, in3, 16);
00004e  eac54507          PKHBT    r5,r5,r7,LSL #16
000052  605d              STR      r5,[r3,#4]
000054  3308              ADDS     r3,r3,#8
;;;120    
;;;121        /* Decrement the loop counter */
;;;122        blkCnt--;
000056  1e64              SUBS     r4,r4,#1
                  |L1.88|
000058  2c00              CMP      r4,#0                 ;91
00005a  d1db              BNE      |L1.20|
;;;123      }
;;;124    
;;;125      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;126       ** No loop unrolling is used. */
;;;127      blkCnt = blockSize % 0x4u;
00005c  f00c0403          AND      r4,r12,#3
;;;128    
;;;129      while(blkCnt > 0u)
000060  e008              B        |L1.116|
                  |L1.98|
;;;130      {
;;;131        /* C = A * scale */
;;;132        /* Scale the input and then store the result in the destination buffer. */
;;;133        *pDst++ = (q15_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 16));
000062  f9305b02          LDRSH    r5,[r0],#2
000066  434d              MULS     r5,r1,r5
000068  4115              ASRS     r5,r5,r2
00006a  f305050f          SSAT     r5,#16,r5
00006e  f8235b02          STRH     r5,[r3],#2
;;;134    
;;;135        /* Decrement the loop counter */
;;;136        blkCnt--;
000072  1e64              SUBS     r4,r4,#1
                  |L1.116|
000074  2c00              CMP      r4,#0                 ;129
000076  d1f4              BNE      |L1.98|
;;;137      }
;;;138    
;;;139    #else
;;;140    
;;;141      /* Run the below code for Cortex-M0 */
;;;142    
;;;143      /* Initialize blkCnt with number of samples */
;;;144      blkCnt = blockSize;
;;;145    
;;;146      while(blkCnt > 0u)
;;;147      {
;;;148        /* C = A * scale */
;;;149        /* Scale the input and then store the result in the destination buffer. */
;;;150        *pDst++ = (q15_t) (__SSAT(((q31_t) * pSrc++ * scaleFract) >> kShift, 16));
;;;151    
;;;152        /* Decrement the loop counter */
;;;153        blkCnt--;
;;;154      }
;;;155    
;;;156    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;157    
;;;158    }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;159    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_scale_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_q15_c_05e3aacf____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_scale_q15_c_05e3aacf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_q15_c_05e3aacf____REVSH|
#line 144
|__asm___15_arm_scale_q15_c_05e3aacf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_q15_c_05e3aacf____RRX|
#line 300
|__asm___15_arm_scale_q15_c_05e3aacf____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
