; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_scale_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_scale_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_scale_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_scale_q31.c]
                          THUMB

                          AREA ||i.arm_scale_q31||, CODE, READONLY, ALIGN=1

                  arm_scale_q31 PROC
;;;66     
;;;67     void arm_scale_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;68       q31_t * pSrc,
;;;69       q31_t scaleFract,
;;;70       int8_t shift,
;;;71       q31_t * pDst,
;;;72       uint32_t blockSize)
;;;73     {
000004  1c52              ADDS     r2,r2,#1
;;;74       int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
000006  b252              SXTB     r2,r2
;;;75       int8_t sign = (kShift & 0x80);
000008  f0020480          AND      r4,r2,#0x80
00000c  b265              SXTB     r5,r4
;;;76       uint32_t blkCnt;                               /* loop counter */
;;;77       q31_t in, out;
;;;78     
;;;79     #ifndef ARM_MATH_CM0_FAMILY
;;;80     
;;;81     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;82     
;;;83       q31_t in1, in2, in3, in4;                      /* temporary input variables */
;;;84       q31_t out1, out2, out3, out4;                  /* temporary output variabels */
;;;85     
;;;86     
;;;87       /*loop Unrolling */
;;;88       blkCnt = blockSize >> 2u;
00000e  9c09              LDR      r4,[sp,#0x24]
000010  ea5f0b05          MOVS     r11,r5                ;75
000014  ea4f0494          LSR      r4,r4,#2
;;;89     
;;;90       if(sign == 0u)
;;;91       {
;;;92         /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
;;;93          ** a second loop below computes the remaining 1 to 3 samples. */
;;;94         while(blkCnt > 0u)
;;;95         {
;;;96           /* read four inputs from source */
;;;97           in1 = *pSrc;
;;;98           in2 = *(pSrc + 1);
;;;99           in3 = *(pSrc + 2);
;;;100          in4 = *(pSrc + 3);
;;;101    
;;;102          /* multiply input with scaler value */
;;;103          in1 = ((q63_t) in1 * scaleFract) >> 32;
;;;104          in2 = ((q63_t) in2 * scaleFract) >> 32;
;;;105          in3 = ((q63_t) in3 * scaleFract) >> 32;
;;;106          in4 = ((q63_t) in4 * scaleFract) >> 32;
;;;107    
;;;108          /* apply shifting */
;;;109          out1 = in1 << kShift;
;;;110          out2 = in2 << kShift;
;;;111    
;;;112          /* saturate the results. */
;;;113          if(in1 != (out1 >> kShift))
;;;114            out1 = 0x7FFFFFFF ^ (in1 >> 31);
000018  f06f4e00          MVN      lr,#0x80000000
00001c  d033              BEQ      |L1.134|
00001e  e04f              B        |L1.192|
                  |L1.32|
000020  e8901060          LDM      r0,{r5,r6,r12}        ;100
000024  fb55f501          SMMUL    r5,r5,r1              ;103
000028  fb56f701          SMMUL    r7,r6,r1              ;104
00002c  fb5cf901          SMMUL    r9,r12,r1             ;105
000030  f8d0800c          LDR      r8,[r0,#0xc]          ;106
000034  fb58fa01          SMMUL    r10,r8,r1             ;106
000038  fa05fc02          LSL      r12,r5,r2             ;109
00003c  fa07f602          LSL      r6,r7,r2              ;110
000040  fa4cf802          ASR      r8,r12,r2             ;113
000044  45a8              CMP      r8,r5                 ;113
000046  d001              BEQ      |L1.76|
000048  ea8e7ce5          EOR      r12,lr,r5,ASR #31
                  |L1.76|
;;;115    
;;;116          if(in2 != (out2 >> kShift))
00004c  fa46f502          ASR      r5,r6,r2
000050  42bd              CMP      r5,r7
000052  d001              BEQ      |L1.88|
;;;117            out2 = 0x7FFFFFFF ^ (in2 >> 31);
000054  ea8e76e7          EOR      r6,lr,r7,ASR #31
                  |L1.88|
;;;118    
;;;119          out3 = in3 << kShift;
;;;120          out4 = in4 << kShift;
000058  e9c3c600          STRD     r12,r6,[r3,#0]
00005c  fa09f702          LSL      r7,r9,r2              ;119
000060  fa0af502          LSL      r5,r10,r2
;;;121    
;;;122          *pDst = out1;
;;;123          *(pDst + 1) = out2;
;;;124    
;;;125          if(in3 != (out3 >> kShift))
000064  fa47f602          ASR      r6,r7,r2
000068  454e              CMP      r6,r9
00006a  d001              BEQ      |L1.112|
;;;126            out3 = 0x7FFFFFFF ^ (in3 >> 31);
00006c  ea8e77e9          EOR      r7,lr,r9,ASR #31
                  |L1.112|
;;;127    
;;;128          if(in4 != (out4 >> kShift))
000070  fa45f602          ASR      r6,r5,r2
000074  4556              CMP      r6,r10
000076  d001              BEQ      |L1.124|
;;;129            out4 = 0x7FFFFFFF ^ (in4 >> 31);
000078  ea8e75ea          EOR      r5,lr,r10,ASR #31
                  |L1.124|
00007c  e9c37502          STRD     r7,r5,[r3,#8]
000080  3010              ADDS     r0,r0,#0x10
000082  3310              ADDS     r3,r3,#0x10
000084  1e64              SUBS     r4,r4,#1
                  |L1.134|
000086  2c00              CMP      r4,#0                 ;94
000088  d1ca              BNE      |L1.32|
00008a  e01b              B        |L1.196|
                  |L1.140|
00008c  e8f0c502          LDRD     r12,r5,[r0],#8        ;94
;;;130    
;;;131          /* Store result destination */
;;;132          *(pDst + 2) = out3;
;;;133          *(pDst + 3) = out4;
;;;134    
;;;135          /* Update pointers to process next sampels */
;;;136          pSrc += 4u;
;;;137          pDst += 4u;
;;;138    
;;;139          /* Decrement the loop counter */
;;;140          blkCnt--;
;;;141        }
;;;142    
;;;143      }
;;;144      else
;;;145      {
;;;146        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
;;;147         ** a second loop below computes the remaining 1 to 3 samples. */
;;;148        while(blkCnt > 0u)
;;;149        {
;;;150          /* read four inputs from source */
;;;151          in1 = *pSrc;
;;;152          in2 = *(pSrc + 1);
;;;153          in3 = *(pSrc + 2);
;;;154          in4 = *(pSrc + 3);
;;;155    
;;;156          /* multiply input with scaler value */
;;;157          in1 = ((q63_t) in1 * scaleFract) >> 32;
000090  fb5cfc01          SMMUL    r12,r12,r1
;;;158          in2 = ((q63_t) in2 * scaleFract) >> 32;
000094  fb55f501          SMMUL    r5,r5,r1
000098  e8f06702          LDRD     r6,r7,[r0],#8
;;;159          in3 = ((q63_t) in3 * scaleFract) >> 32;
00009c  fb56f601          SMMUL    r6,r6,r1
;;;160          in4 = ((q63_t) in4 * scaleFract) >> 32;
0000a0  fb57f701          SMMUL    r7,r7,r1
;;;161    
;;;162          /* apply shifting */
;;;163          out1 = in1 >> -kShift;
0000a4  f1c20800          RSB      r8,r2,#0
0000a8  fa4cfc08          ASR      r12,r12,r8
;;;164          out2 = in2 >> -kShift;
0000ac  fa45f508          ASR      r5,r5,r8
;;;165    
;;;166          out3 = in3 >> -kShift;
0000b0  fa46f608          ASR      r6,r6,r8
;;;167          out4 = in4 >> -kShift;
0000b4  fa47f708          ASR      r7,r7,r8
;;;168    
;;;169          /* Store result destination */
;;;170          *pDst = out1;
0000b8  f843cb04          STR      r12,[r3],#4
0000bc  1e64              SUBS     r4,r4,#1
0000be  c3e0              STM      r3!,{r5-r7}
                  |L1.192|
0000c0  2c00              CMP      r4,#0                 ;148
0000c2  d1e3              BNE      |L1.140|
                  |L1.196|
;;;171          *(pDst + 1) = out2;
;;;172    
;;;173          *(pDst + 2) = out3;
;;;174          *(pDst + 3) = out4;
;;;175    
;;;176          /* Update pointers to process next sampels */
;;;177          pSrc += 4u;
;;;178          pDst += 4u;
;;;179    
;;;180          /* Decrement the loop counter */
;;;181          blkCnt--;
;;;182        }
;;;183      }
;;;184      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.       
;;;185       ** No loop unrolling is used. */
;;;186      blkCnt = blockSize % 0x4u;
0000c4  9c09              LDR      r4,[sp,#0x24]
;;;187    
;;;188    #else
;;;189    
;;;190      /* Run the below code for Cortex-M0 */
;;;191    
;;;192      /* Initialize blkCnt with number of samples */
;;;193      blkCnt = blockSize;
;;;194    
;;;195    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;196    
;;;197      if(sign == 0)
0000c6  f1bb0f00          CMP      r11,#0
0000ca  f0040403          AND      r4,r4,#3              ;186
0000ce  d017              BEQ      |L1.256|
0000d0  4255              RSBS     r5,r2,#0              ;163
                  |L1.210|
;;;198      {
;;;199    	  while(blkCnt > 0u)
;;;200    	  {
;;;201    		/* C = A * scale */
;;;202    		/* Scale the input and then store the result in the destination buffer. */
;;;203    		in = *pSrc++;
;;;204    		in = ((q63_t) in * scaleFract) >> 32;
;;;205    
;;;206    		out = in << kShift;
;;;207    		
;;;208    		if(in != (out >> kShift))
;;;209    			out = 0x7FFFFFFF ^ (in >> 31);
;;;210    
;;;211    		*pDst++ = out;
;;;212    
;;;213    		/* Decrement the loop counter */
;;;214    		blkCnt--;
;;;215    	  }
;;;216      }
;;;217      else
;;;218      {
;;;219    	  while(blkCnt > 0u)
0000d2  2c00              CMP      r4,#0
0000d4  d017              BEQ      |L1.262|
;;;220    	  {
;;;221    		/* C = A * scale */
;;;222    		/* Scale the input and then store the result in the destination buffer. */
;;;223    		in = *pSrc++;
0000d6  c804              LDM      r0!,{r2}
;;;224    		in = ((q63_t) in * scaleFract) >> 32;
0000d8  fb52f201          SMMUL    r2,r2,r1
;;;225    
;;;226    		out = in >> -kShift;
0000dc  412a              ASRS     r2,r2,r5
;;;227    
;;;228    		*pDst++ = out;
0000de  c304              STM      r3!,{r2}
0000e0  1e64              SUBS     r4,r4,#1
;;;229    
;;;230    		/* Decrement the loop counter */
;;;231    		blkCnt--;
0000e2  e7f6              B        |L1.210|
                  |L1.228|
0000e4  c820              LDM      r0!,{r5}              ;203
0000e6  fb55f601          SMMUL    r6,r5,r1              ;204
0000ea  fa06f502          LSL      r5,r6,r2              ;206
0000ee  fa45fc02          ASR      r12,r5,r2             ;208
0000f2  45b4              CMP      r12,r6                ;208
0000f4  d001              BEQ      |L1.250|
0000f6  ea8775e6          EOR      r5,r7,r6,ASR #31      ;209
                  |L1.250|
0000fa  c320              STM      r3!,{r5}              ;211
0000fc  1e64              SUBS     r4,r4,#1              ;211
0000fe  e000              B        |L1.258|
                  |L1.256|
000100  4677              MOV      r7,lr                 ;114
                  |L1.258|
000102  2c00              CMP      r4,#0                 ;199
000104  d1ee              BNE      |L1.228|
                  |L1.262|
;;;232    	  }
;;;233      
;;;234      }
;;;235    }
000106  e8bd8ff0          POP      {r4-r11,pc}
;;;236    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_scale_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_q31_c_30b80c54____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_scale_q31_c_30b80c54____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_q31_c_30b80c54____REVSH|
#line 144
|__asm___15_arm_scale_q31_c_30b80c54____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_q31_c_30b80c54____RRX|
#line 300
|__asm___15_arm_scale_q31_c_30b80c54____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
