; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix2_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix2_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_cfft_radix2_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix2_q31.c]
                          THUMB

                          AREA ||i.arm_cfft_radix2_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix2_q31 PROC
;;;79     
;;;80     void arm_cfft_radix2_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;81     const arm_cfft_radix2_instance_q31 * S,
;;;82     q31_t * pSrc)
;;;83     {
000002  4604              MOV      r4,r0
;;;84     
;;;85        if(S->ifftFlag == 1u)
000004  7880              LDRB     r0,[r0,#2]
000006  460d              MOV      r5,r1                 ;83
;;;86        {
;;;87           arm_radix2_butterfly_inverse_q31(pSrc, S->fftLen,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;85
00000e  2801              CMP      r0,#1                 ;85
;;;88           S->pTwiddle, S->twidCoefModifier);
;;;89        }
;;;90        else
;;;91        {
;;;92           arm_radix2_butterfly_q31(pSrc, S->fftLen,
000010  4628              MOV      r0,r5
000012  d009              BEQ      |L1.40|
000014  f7fffffe          BL       arm_radix2_butterfly_q31
                  |L1.24|
;;;93           S->pTwiddle, S->twidCoefModifier);
;;;94        }
;;;95     
;;;96        arm_bitreversal_q31(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
000018  89e2              LDRH     r2,[r4,#0xe]
00001a  8821              LDRH     r1,[r4,#0]
00001c  4628              MOV      r0,r5
00001e  68a3              LDR      r3,[r4,#8]
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      arm_bitreversal_q31
                  |L1.40|
000028  f7fffffe          BL       arm_radix2_butterfly_inverse_q31
00002c  e7f4              B        |L1.24|
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.arm_radix2_butterfly_inverse_q31||, CODE, READONLY, ALIGN=1

                  arm_radix2_butterfly_inverse_q31 PROC
;;;230    
;;;231    void arm_radix2_butterfly_inverse_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;232    q31_t * pSrc,
;;;233    uint32_t fftLen,
;;;234    q31_t * pCoef,
;;;235    uint16_t twidCoefModifier)
;;;236    {
000004  4696              MOV      lr,r2
;;;237    
;;;238       unsigned i, j, k, l;
;;;239       unsigned n1, n2, ia;
;;;240       q31_t xt, yt, cosVal, sinVal;
;;;241       q31_t p0, p1;
;;;242    
;;;243       //N = fftLen; 
;;;244       n2 = fftLen;
;;;245    
;;;246       n1 = n2;
;;;247       n2 = n2 >> 1;
000006  084a              LSRS     r2,r1,#1
;;;248       ia = 0;
000008  2400              MOVS     r4,#0
00000a  b085              SUB      sp,sp,#0x14           ;236
;;;249    
;;;250       // loop for groups 
;;;251       for (i = 0; i < n2; i++)
00000c  4623              MOV      r3,r4
00000e  e033              B        |L2.120|
                  |L2.16|
;;;252       {
;;;253          cosVal = pCoef[ia * 2];
;;;254          sinVal = pCoef[(ia * 2) + 1];
000010  eb0e05c4          ADD      r5,lr,r4,LSL #3
000014  f85e9034          LDR      r9,[lr,r4,LSL #3]     ;253
;;;255          ia = ia + twidCoefModifier;
000018  f8d5b004          LDR      r11,[r5,#4]
00001c  9d08              LDR      r5,[sp,#0x20]
;;;256    
;;;257          l = i + n2;
;;;258          xt = (pSrc[2 * i] >> 1u) - (pSrc[2 * l] >> 1u);
00001e  f8506033          LDR      r6,[r0,r3,LSL #3]
000022  442c              ADD      r4,r4,r5              ;255
000024  189d              ADDS     r5,r3,r2              ;257
000026  1077              ASRS     r7,r6,#1
000028  f850c035          LDR      r12,[r0,r5,LSL #3]
;;;259          pSrc[2 * i] = ((pSrc[2 * i] >> 1u) + (pSrc[2 * l] >> 1u)) >> 1u;
;;;260          
;;;261          yt = (pSrc[2 * i + 1] >> 1u) - (pSrc[2 * l + 1] >> 1u);
00002c  eb0008c3          ADD      r8,r0,r3,LSL #3
000030  eb07066c          ADD      r6,r7,r12,ASR #1      ;259
000034  1076              ASRS     r6,r6,#1              ;259
000036  f8406033          STR      r6,[r0,r3,LSL #3]     ;259
00003a  eba70a6c          SUB      r10,r7,r12,ASR #1     ;258
00003e  f8d87004          LDR      r7,[r8,#4]
000042  eb0006c5          ADD      r6,r0,r5,LSL #3
000046  9600              STR      r6,[sp,#0]
000048  6876              LDR      r6,[r6,#4]
00004a  ea4f0c67          ASR      r12,r7,#1
00004e  ebac0c66          SUB      r12,r12,r6,ASR #1
;;;262          pSrc[2 * i + 1] =
000052  1076              ASRS     r6,r6,#1
000054  eb060667          ADD      r6,r6,r7,ASR #1
000058  1076              ASRS     r6,r6,#1
;;;263            ((pSrc[2 * l + 1] >> 1u) + (pSrc[2 * i + 1] >> 1u)) >> 1u;
;;;264    
;;;265          mult_32x32_keep32_R(p0, xt, cosVal);
00005a  f8c86004          STR      r6,[r8,#4]
00005e  fb5af619          SMMULR   r6,r10,r9
;;;266          mult_32x32_keep32_R(p1, yt, cosVal);
000062  fb5cf819          SMMULR   r8,r12,r9
;;;267          multSub_32x32_keep32_R(p0, yt, sinVal);
000066  fb6c6c1b          SMMLSR   r12,r12,r11,r6
;;;268          multAcc_32x32_keep32_R(p1, xt, sinVal);
00006a  fb5a871b          SMMLAR   r7,r10,r11,r8
;;;269          
;;;270          pSrc[2u * l] = p0;
00006e  f840c035          STR      r12,[r0,r5,LSL #3]
;;;271          pSrc[2u * l + 1u] = p1;
000072  9e00              LDR      r6,[sp,#0]
000074  1c5b              ADDS     r3,r3,#1
000076  6077              STR      r7,[r6,#4]
                  |L2.120|
000078  4615              MOV      r5,r2                 ;251
00007a  4293              CMP      r3,r2                 ;251
00007c  d3c8              BCC      |L2.16|
;;;272       }                             // groups loop end 
;;;273    
;;;274       twidCoefModifier = twidCoefModifier << 1u;
00007e  9b08              LDR      r3,[sp,#0x20]
000080  f64f74ff          MOV      r4,#0xffff
000084  ea040343          AND      r3,r4,r3,LSL #1
000088  9308              STR      r3,[sp,#0x20]
00008a  462b              MOV      r3,r5
;;;275    
;;;276       // loop for stage 
;;;277       for (k = fftLen / 2; k > 2; k = k >> 1)
00008c  e050              B        |L2.304|
                  |L2.142|
;;;278       {
;;;279          n1 = n2;
;;;280          n2 = n2 >> 1;
00008e  9201              STR      r2,[sp,#4]
000090  0852              LSRS     r2,r2,#1
;;;281          ia = 0;
000092  2500              MOVS     r5,#0
;;;282    
;;;283          // loop for groups 
;;;284          for (j = 0; j < n2; j++)
000094  462c              MOV      r4,r5
000096  e041              B        |L2.284|
                  |L2.152|
;;;285          {
;;;286             cosVal = pCoef[ia * 2];
;;;287             sinVal = pCoef[(ia * 2) + 1];
000098  eb0e03c5          ADD      r3,lr,r5,LSL #3
00009c  f85ea035          LDR      r10,[lr,r5,LSL #3]    ;286
;;;288             ia = ia + twidCoefModifier;
0000a0  f8d3b004          LDR      r11,[r3,#4]
0000a4  9b08              LDR      r3,[sp,#0x20]
0000a6  441d              ADD      r5,r5,r3
;;;289    
;;;290             // loop for butterfly 
;;;291             for (i = j; i < fftLen; i += n1)
0000a8  4623              MOV      r3,r4
0000aa  e034              B        |L2.278|
                  |L2.172|
;;;292             {
;;;293                l = i + n2;
0000ac  189e              ADDS     r6,r3,r2
;;;294                xt = pSrc[2 * i] - pSrc[2 * l];
0000ae  f8507033          LDR      r7,[r0,r3,LSL #3]
0000b2  f8508036          LDR      r8,[r0,r6,LSL #3]
;;;295                pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]) >> 1u;
;;;296          
;;;297                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000b6  eb000cc3          ADD      r12,r0,r3,LSL #3
0000ba  eba70908          SUB      r9,r7,r8              ;294
0000be  4447              ADD      r7,r7,r8              ;295
0000c0  107f              ASRS     r7,r7,#1              ;295
0000c2  f8407033          STR      r7,[r0,r3,LSL #3]     ;295
0000c6  f8cdc00c          STR      r12,[sp,#0xc]
0000ca  eb0007c6          ADD      r7,r0,r6,LSL #3
0000ce  f8dc8004          LDR      r8,[r12,#4]
0000d2  9702              STR      r7,[sp,#8]
0000d4  f8d7c004          LDR      r12,[r7,#4]
0000d8  eba8070c          SUB      r7,r8,r12
;;;298                pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]) >> 1u;
0000dc  44c4              ADD      r12,r12,r8
0000de  ea4f086c          ASR      r8,r12,#1
0000e2  f8ddc00c          LDR      r12,[sp,#0xc]
;;;299    
;;;300                mult_32x32_keep32_R(p0, xt, cosVal);
0000e6  f8cc8004          STR      r8,[r12,#4]
0000ea  fb59fc1a          SMMULR   r12,r9,r10
;;;301                mult_32x32_keep32_R(p1, yt, cosVal);
0000ee  fb57f81a          SMMULR   r8,r7,r10
0000f2  e9cd8c03          STRD     r8,r12,[sp,#0xc]
;;;302                multSub_32x32_keep32_R(p0, yt, sinVal);
0000f6  f8ddc010          LDR      r12,[sp,#0x10]
0000fa  fb67c71b          SMMLSR   r7,r7,r11,r12
;;;303                multAcc_32x32_keep32_R(p1, xt, sinVal);
0000fe  f8dd800c          LDR      r8,[sp,#0xc]
000102  9704              STR      r7,[sp,#0x10]
000104  fb598c1b          SMMLAR   r12,r9,r11,r8
;;;304                
;;;305                pSrc[2u * l] = p0;
000108  f8407036          STR      r7,[r0,r6,LSL #3]
;;;306                pSrc[2u * l + 1u] = p1;
00010c  9f02              LDR      r7,[sp,#8]
00010e  f8c7c004          STR      r12,[r7,#4]           ;291
000112  9e01              LDR      r6,[sp,#4]            ;291
000114  4433              ADD      r3,r3,r6              ;291
                  |L2.278|
000116  428b              CMP      r3,r1                 ;291
000118  d3c8              BCC      |L2.172|
00011a  1c64              ADDS     r4,r4,#1              ;291
                  |L2.284|
00011c  4294              CMP      r4,r2                 ;284
00011e  d3bb              BCC      |L2.152|
;;;307             }                         // butterfly loop end 
;;;308    
;;;309          }                           // groups loop end 
;;;310    
;;;311          twidCoefModifier = twidCoefModifier << 1u;
000120  9b08              LDR      r3,[sp,#0x20]
000122  f64f74ff          MOV      r4,#0xffff
000126  ea040343          AND      r3,r4,r3,LSL #1
00012a  9308              STR      r3,[sp,#0x20]         ;277
00012c  9b00              LDR      r3,[sp,#0]            ;277
00012e  085b              LSRS     r3,r3,#1              ;277
                  |L2.304|
000130  9300              STR      r3,[sp,#0]            ;277
000132  2b02              CMP      r3,#2                 ;277
000134  d8ab              BHI      |L2.142|
;;;312       }                             // stages loop end 
;;;313    
;;;314       n1 = n2;
;;;315       n2 = n2 >> 1;
000136  0855              LSRS     r5,r2,#1
;;;316       ia = 0;
;;;317    
;;;318       cosVal = pCoef[ia * 2];
;;;319       sinVal = pCoef[(ia * 2) + 1];
;;;320       ia = ia + twidCoefModifier;
;;;321    
;;;322       // loop for butterfly 
;;;323       for (i = 0; i < fftLen; i += n1)
000138  2300              MOVS     r3,#0
00013a  e038              B        |L2.430|
                  |L2.316|
;;;324       {
;;;325          l = i + n2;
00013c  195c              ADDS     r4,r3,r5
;;;326          xt = pSrc[2 * i] - pSrc[2 * l];
00013e  f8507033          LDR      r7,[r0,r3,LSL #3]
000142  f850c034          LDR      r12,[r0,r4,LSL #3]
;;;327          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
;;;328    
;;;329          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000146  eb0009c4          ADD      r9,r0,r4,LSL #3
00014a  eb07060c          ADD      r6,r7,r12             ;327
00014e  eba70a0c          SUB      r10,r7,r12            ;326
000152  f8406033          STR      r6,[r0,r3,LSL #3]     ;327
000156  eb000cc3          ADD      r12,r0,r3,LSL #3
00015a  f8d96004          LDR      r6,[r9,#4]
00015e  f8dc7004          LDR      r7,[r12,#4]
;;;330          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
;;;331    
;;;332          pSrc[2u * l] = xt;
;;;333    
;;;334          pSrc[2u * l + 1u] = yt;
;;;335    
;;;336          i += n1;
000162  4413              ADD      r3,r3,r2
000164  eba70806          SUB      r8,r7,r6              ;329
000168  443e              ADD      r6,r6,r7              ;330
00016a  f8cc6004          STR      r6,[r12,#4]           ;332
00016e  f840a034          STR      r10,[r0,r4,LSL #3]    ;332
;;;337          l = i + n2;
000172  195c              ADDS     r4,r3,r5
;;;338    
;;;339          xt = pSrc[2 * i] - pSrc[2 * l];
000174  f8c98004          STR      r8,[r9,#4]
000178  f850c033          LDR      r12,[r0,r3,LSL #3]
00017c  f8507034          LDR      r7,[r0,r4,LSL #3]
;;;340          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
;;;341    
;;;342          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000180  eb0009c3          ADD      r9,r0,r3,LSL #3
000184  eb0c0607          ADD      r6,r12,r7             ;340
000188  ebac0a07          SUB      r10,r12,r7            ;339
00018c  f8406033          STR      r6,[r0,r3,LSL #3]     ;340
000190  eb0007c4          ADD      r7,r0,r4,LSL #3
000194  f8d9c004          LDR      r12,[r9,#4]
000198  687e              LDR      r6,[r7,#4]
00019a  4413              ADD      r3,r3,r2              ;323
00019c  ebac0806          SUB      r8,r12,r6
;;;343          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
0001a0  44b4              ADD      r12,r12,r6
;;;344    
;;;345          pSrc[2u * l] = xt;
0001a2  f8c9c004          STR      r12,[r9,#4]
0001a6  f840a034          STR      r10,[r0,r4,LSL #3]
0001aa  f8c78004          STR      r8,[r7,#4]            ;323
                  |L2.430|
0001ae  428b              CMP      r3,r1                 ;323
0001b0  d3c4              BCC      |L2.316|
;;;346    
;;;347          pSrc[2u * l + 1u] = yt;
;;;348    
;;;349       }                             // butterfly loop end 
;;;350    
;;;351    }
0001b2  b009              ADD      sp,sp,#0x24
0001b4  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i.arm_radix2_butterfly_q31||, CODE, READONLY, ALIGN=1

                  arm_radix2_butterfly_q31 PROC
;;;102    
;;;103    void arm_radix2_butterfly_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;104    q31_t * pSrc,
;;;105    uint32_t fftLen,
;;;106    q31_t * pCoef,
;;;107    uint16_t twidCoefModifier)
;;;108    {
000004  b084              SUB      sp,sp,#0x10
000006  469a              MOV      r10,r3
;;;109    
;;;110       unsigned i, j, k, l, m;
;;;111       unsigned n1, n2, ia;
;;;112       q31_t xt, yt, cosVal, sinVal;
;;;113       q31_t p0, p1;
;;;114    
;;;115       //N = fftLen; 
;;;116       n2 = fftLen;
;;;117    
;;;118       n1 = n2;
;;;119       n2 = n2 >> 1;
000008  9905              LDR      r1,[sp,#0x14]
00000a  0849              LSRS     r1,r1,#1
;;;120       ia = 0;
00000c  2300              MOVS     r3,#0
;;;121    
;;;122       // loop for groups 
;;;123       for (i = 0; i < n2; i++)
00000e  461a              MOV      r2,r3
000010  e034              B        |L3.124|
                  |L3.18|
;;;124       {
;;;125          cosVal = pCoef[ia * 2];
000012  9c06              LDR      r4,[sp,#0x18]
;;;126          sinVal = pCoef[(ia * 2) + 1];
;;;127          ia = ia + twidCoefModifier;
;;;128    
;;;129          l = i + n2;
;;;130          xt = (pSrc[2 * i] >> 1u) - (pSrc[2 * l] >> 1u);
000014  f8506032          LDR      r6,[r0,r2,LSL #3]
;;;131          pSrc[2 * i] = ((pSrc[2 * i] >> 1u) + (pSrc[2 * l] >> 1u)) >> 1u;
;;;132          
;;;133          yt = (pSrc[2 * i + 1] >> 1u) - (pSrc[2 * l + 1] >> 1u);
000018  eb000bc2          ADD      r11,r0,r2,LSL #3
00001c  f8545033          LDR      r5,[r4,r3,LSL #3]     ;125
000020  eb0404c3          ADD      r4,r4,r3,LSL #3       ;126
000024  1076              ASRS     r6,r6,#1              ;130
000026  f8d49004          LDR      r9,[r4,#4]            ;129
00002a  1854              ADDS     r4,r2,r1              ;129
00002c  eb000ec4          ADD      lr,r0,r4,LSL #3
000030  f850c034          LDR      r12,[r0,r4,LSL #3]    ;130
000034  4453              ADD      r3,r3,r10             ;127
000036  eba6086c          SUB      r8,r6,r12,ASR #1      ;130
00003a  eb06066c          ADD      r6,r6,r12,ASR #1      ;131
00003e  1076              ASRS     r6,r6,#1              ;131
000040  f8406032          STR      r6,[r0,r2,LSL #3]     ;131
000044  f8dbc004          LDR      r12,[r11,#4]
000048  f8de7004          LDR      r7,[lr,#4]
00004c  ea4f066c          ASR      r6,r12,#1
000050  eba60667          SUB      r6,r6,r7,ASR #1
;;;134          pSrc[2 * i + 1] =
000054  107f              ASRS     r7,r7,#1
000056  eb07076c          ADD      r7,r7,r12,ASR #1
00005a  ea4f0c67          ASR      r12,r7,#1
;;;135            ((pSrc[2 * l + 1] >> 1u) + (pSrc[2 * i + 1] >> 1u)) >> 1u;
;;;136    
;;;137          mult_32x32_keep32_R(p0, xt, cosVal);
00005e  fb58f715          SMMULR   r7,r8,r5
;;;138          mult_32x32_keep32_R(p1, yt, cosVal);
000062  fb56f515          SMMULR   r5,r6,r5
;;;139          multAcc_32x32_keep32_R(p0, yt, sinVal); 
000066  fb567619          SMMLAR   r6,r6,r9,r7
;;;140          multSub_32x32_keep32_R(p1, xt, sinVal);
00006a  fb685519          SMMLSR   r5,r8,r9,r5
;;;141          
;;;142          pSrc[2u * l] = p0;
00006e  f8cbc004          STR      r12,[r11,#4]
000072  f8406034          STR      r6,[r0,r4,LSL #3]
;;;143          pSrc[2u * l + 1u] = p1;
000076  1c52              ADDS     r2,r2,#1
000078  f8ce5004          STR      r5,[lr,#4]
                  |L3.124|
00007c  460c              MOV      r4,r1                 ;123
00007e  428a              CMP      r2,r1                 ;123
000080  d3c7              BCC      |L3.18|
;;;144    
;;;145       }                             // groups loop end 
;;;146    
;;;147       twidCoefModifier <<= 1u;
000082  f64f73ff          MOV      r3,#0xffff
000086  ea03024a          AND      r2,r3,r10,LSL #1
00008a  9207              STR      r2,[sp,#0x1c]
00008c  4622              MOV      r2,r4
;;;148    
;;;149       // loop for stage 
;;;150       for (k = fftLen / 2; k > 2; k = k >> 1)
00008e  e04d              B        |L3.300|
                  |L3.144|
;;;151       {
;;;152          n1 = n2;
;;;153          n2 = n2 >> 1;
000090  9101              STR      r1,[sp,#4]
000092  0849              LSRS     r1,r1,#1
;;;154          ia = 0;
000094  2200              MOVS     r2,#0
;;;155    
;;;156          // loop for groups 
;;;157          for (j = 0; j < n2; j++)
000096  9202              STR      r2,[sp,#8]
000098  e03d              B        |L3.278|
                  |L3.154|
;;;158          {
;;;159             cosVal = pCoef[ia * 2];
00009a  9b02              LDR      r3,[sp,#8]
00009c  9a06              LDR      r2,[sp,#0x18]
;;;160             sinVal = pCoef[(ia * 2) + 1];
;;;161             ia = ia + twidCoefModifier;
;;;162    
;;;163             // loop for butterfly 
;;;164             i = j;
;;;165             m = fftLen / n1;
00009e  9c05              LDR      r4,[sp,#0x14]
0000a0  f8527033          LDR      r7,[r2,r3,LSL #3]     ;159
0000a4  eb0202c3          ADD      r2,r2,r3,LSL #3       ;160
0000a8  f8d29004          LDR      r9,[r2,#4]            ;161
0000ac  461a              MOV      r2,r3                 ;161
0000ae  9b07              LDR      r3,[sp,#0x1c]         ;161
0000b0  441a              ADD      r2,r2,r3              ;161
0000b2  9b01              LDR      r3,[sp,#4]
0000b4  9202              STR      r2,[sp,#8]            ;164
0000b6  fbb4f4f3          UDIV     r4,r4,r3
0000ba  4652              MOV      r2,r10                ;164
                  |L3.188|
;;;166             do
;;;167             {
;;;168                l = i + n2;
0000bc  1853              ADDS     r3,r2,r1
;;;169                xt = pSrc[2 * i] - pSrc[2 * l];
0000be  f8506032          LDR      r6,[r0,r2,LSL #3]
0000c2  f850c033          LDR      r12,[r0,r3,LSL #3]
;;;170                pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]) >> 1u;
;;;171                
;;;172                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000c6  eb000bc2          ADD      r11,r0,r2,LSL #3
0000ca  eba6050c          SUB      r5,r6,r12             ;169
0000ce  4466              ADD      r6,r6,r12             ;170
0000d0  1076              ASRS     r6,r6,#1              ;170
0000d2  f8406032          STR      r6,[r0,r2,LSL #3]     ;170
0000d6  eb0006c3          ADD      r6,r0,r3,LSL #3
0000da  f8db8004          LDR      r8,[r11,#4]
0000de  9603              STR      r6,[sp,#0xc]
0000e0  f8d6c004          LDR      r12,[r6,#4]
0000e4  eba8060c          SUB      r6,r8,r12
;;;173                pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]) >> 1u;
0000e8  44c4              ADD      r12,r12,r8
0000ea  ea4f086c          ASR      r8,r12,#1
;;;174    
;;;175                mult_32x32_keep32_R(p0, xt, cosVal);
0000ee  f8cb8004          STR      r8,[r11,#4]
0000f2  fb55fb17          SMMULR   r11,r5,r7
;;;176                mult_32x32_keep32_R(p1, yt, cosVal);
0000f6  fb56fe17          SMMULR   lr,r6,r7
;;;177                multAcc_32x32_keep32_R(p0, yt, sinVal);
0000fa  fb56b619          SMMLAR   r6,r6,r9,r11
;;;178                multSub_32x32_keep32_R(p1, xt, sinVal);
0000fe  fb65e519          SMMLSR   r5,r5,r9,lr
;;;179                
;;;180                pSrc[2u * l] = p0;
000102  f8406033          STR      r6,[r0,r3,LSL #3]
;;;181                pSrc[2u * l + 1u] = p1;
000106  9e03              LDR      r6,[sp,#0xc]
;;;182                i += n1;
000108  1e64              SUBS     r4,r4,#1
00010a  6075              STR      r5,[r6,#4]
00010c  9b01              LDR      r3,[sp,#4]
00010e  441a              ADD      r2,r2,r3
;;;183                m--;
;;;184             } while( m > 0);                   // butterfly loop end 
000110  d1d4              BNE      |L3.188|
000112  f10a0201          ADD      r2,r10,#1             ;157
                  |L3.278|
000116  4692              MOV      r10,r2                ;157
000118  428a              CMP      r2,r1                 ;157
00011a  d3be              BCC      |L3.154|
;;;185    
;;;186          }                           // groups loop end 
;;;187    
;;;188          twidCoefModifier <<= 1u;
00011c  9a07              LDR      r2,[sp,#0x1c]
00011e  f64f73ff          MOV      r3,#0xffff
000122  ea030242          AND      r2,r3,r2,LSL #1
000126  9207              STR      r2,[sp,#0x1c]         ;150
000128  9a00              LDR      r2,[sp,#0]            ;150
00012a  0852              LSRS     r2,r2,#1              ;150
                  |L3.300|
00012c  9200              STR      r2,[sp,#0]            ;150
00012e  2a02              CMP      r2,#2                 ;150
000130  d8ae              BHI      |L3.144|
;;;189       }                             // stages loop end 
;;;190    
;;;191       n1 = n2;
;;;192       n2 = n2 >> 1;
000132  084c              LSRS     r4,r1,#1
;;;193       ia = 0;
;;;194    
;;;195       cosVal = pCoef[ia * 2];
;;;196       sinVal = pCoef[(ia * 2) + 1];
;;;197       ia = ia + twidCoefModifier;
;;;198    
;;;199       // loop for butterfly 
;;;200       for (i = 0; i < fftLen; i += n1)
000134  2200              MOVS     r2,#0
000136  e035              B        |L3.420|
                  |L3.312|
;;;201       {
;;;202          l = i + n2;
000138  1913              ADDS     r3,r2,r4
;;;203          xt = pSrc[2 * i] - pSrc[2 * l];
00013a  f8506032          LDR      r6,[r0,r2,LSL #3]
00013e  f8505033          LDR      r5,[r0,r3,LSL #3]
;;;204          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
;;;205    
;;;206          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000142  eb000cc2          ADD      r12,r0,r2,LSL #3
000146  eba60905          SUB      r9,r6,r5              ;203
00014a  4435              ADD      r5,r5,r6              ;204
00014c  f8405032          STR      r5,[r0,r2,LSL #3]     ;204
000150  eb0006c3          ADD      r6,r0,r3,LSL #3
000154  f8dc7004          LDR      r7,[r12,#4]
000158  6875              LDR      r5,[r6,#4]
;;;207          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
;;;208    
;;;209          pSrc[2u * l] = xt;
;;;210    
;;;211          pSrc[2u * l + 1u] = yt;
;;;212    
;;;213          i += n1;
00015a  440a              ADD      r2,r2,r1
00015c  eba70805          SUB      r8,r7,r5              ;206
000160  443d              ADD      r5,r5,r7              ;207
000162  f8cc5004          STR      r5,[r12,#4]           ;209
000166  f8409033          STR      r9,[r0,r3,LSL #3]     ;209
;;;214          l = i + n2;
00016a  1913              ADDS     r3,r2,r4
;;;215    
;;;216          xt = pSrc[2 * i] - pSrc[2 * l];
00016c  f8c68004          STR      r8,[r6,#4]
000170  f8506032          LDR      r6,[r0,r2,LSL #3]
000174  f8505033          LDR      r5,[r0,r3,LSL #3]
;;;217          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
;;;218    
;;;219          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000178  eb000cc2          ADD      r12,r0,r2,LSL #3
00017c  eba60905          SUB      r9,r6,r5              ;216
000180  4435              ADD      r5,r5,r6              ;217
000182  f8405032          STR      r5,[r0,r2,LSL #3]     ;217
000186  eb0006c3          ADD      r6,r0,r3,LSL #3
00018a  f8dc7004          LDR      r7,[r12,#4]
00018e  6875              LDR      r5,[r6,#4]
000190  440a              ADD      r2,r2,r1              ;200
000192  eba70805          SUB      r8,r7,r5
;;;220          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
000196  443d              ADD      r5,r5,r7
;;;221    
;;;222          pSrc[2u * l] = xt;
000198  f8cc5004          STR      r5,[r12,#4]
00019c  f8409033          STR      r9,[r0,r3,LSL #3]
0001a0  f8c68004          STR      r8,[r6,#4]            ;200
                  |L3.420|
0001a4  9b05              LDR      r3,[sp,#0x14]         ;200
0001a6  429a              CMP      r2,r3                 ;200
0001a8  d3c6              BCC      |L3.312|
;;;223    
;;;224          pSrc[2u * l + 1u] = yt;
;;;225    
;;;226       }                             // butterfly loop end 
;;;227    
;;;228    }
0001aa  b008              ADD      sp,sp,#0x20
0001ac  e8bd8ff0          POP      {r4-r11,pc}
;;;229    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix2_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_q31_c_6421718b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix2_q31_c_6421718b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_q31_c_6421718b____REVSH|
#line 144
|__asm___21_arm_cfft_radix2_q31_c_6421718b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_q31_c_6421718b____RRX|
#line 300
|__asm___21_arm_cfft_radix2_q31_c_6421718b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
