; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cfft_radix2_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cfft_radix2_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cfft_radix2_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_cfft_radix2_q31.c]
                          THUMB

                          AREA ||i.arm_cfft_radix2_q31||, CODE, READONLY, ALIGN=1

                  arm_cfft_radix2_q31 PROC
;;;79     
;;;80     void arm_cfft_radix2_q31(
000000  b570              PUSH     {r4-r6,lr}
;;;81     const arm_cfft_radix2_instance_q31 * S,
;;;82     q31_t * pSrc)
;;;83     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;84     
;;;85        if(S->ifftFlag == 1u)
000006  78a0              LDRB     r0,[r4,#2]
;;;86        {
;;;87           arm_radix2_butterfly_inverse_q31(pSrc, S->fftLen,
000008  8821              LDRH     r1,[r4,#0]
00000a  89a3              LDRH     r3,[r4,#0xc]
00000c  6862              LDR      r2,[r4,#4]            ;85
00000e  2801              CMP      r0,#1                 ;85
000010  d00a              BEQ      |L1.40|
;;;88           S->pTwiddle, S->twidCoefModifier);
;;;89        }
;;;90        else
;;;91        {
;;;92           arm_radix2_butterfly_q31(pSrc, S->fftLen,
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       arm_radix2_butterfly_q31
                  |L1.24|
;;;93           S->pTwiddle, S->twidCoefModifier);
;;;94        }
;;;95     
;;;96        arm_bitreversal_q31(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
000018  89e2              LDRH     r2,[r4,#0xe]
00001a  8821              LDRH     r1,[r4,#0]
00001c  4628              MOV      r0,r5
00001e  68a3              LDR      r3,[r4,#8]
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      arm_bitreversal_q31
                  |L1.40|
000028  4628              MOV      r0,r5                 ;87
00002a  f7fffffe          BL       arm_radix2_butterfly_inverse_q31
00002e  e7f3              B        |L1.24|
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.arm_radix2_butterfly_inverse_q31||, CODE, READONLY, ALIGN=1

                  arm_radix2_butterfly_inverse_q31 PROC
;;;230    
;;;231    void arm_radix2_butterfly_inverse_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;232    q31_t * pSrc,
;;;233    uint32_t fftLen,
;;;234    q31_t * pCoef,
;;;235    uint16_t twidCoefModifier)
;;;236    {
000004  b084              SUB      sp,sp,#0x10
;;;237    
;;;238       unsigned i, j, k, l;
;;;239       unsigned n1, n2, ia;
;;;240       q31_t xt, yt, cosVal, sinVal;
;;;241       q31_t p0, p1;
;;;242    
;;;243       //N = fftLen; 
;;;244       n2 = fftLen;
000006  9905              LDR      r1,[sp,#0x14]
;;;245    
;;;246       n1 = n2;
;;;247       n2 = n2 >> 1;
000008  084b              LSRS     r3,r1,#1
;;;248       ia = 0;
00000a  2400              MOVS     r4,#0
;;;249    
;;;250       // loop for groups 
;;;251       for (i = 0; i < n2; i++)
00000c  2100              MOVS     r1,#0
00000e  e037              B        |L2.128|
                  |L2.16|
;;;252       {
;;;253          cosVal = pCoef[ia * 2];
000010  f852c034          LDR      r12,[r2,r4,LSL #3]
;;;254          sinVal = pCoef[(ia * 2) + 1];
000014  f04f0b01          MOV      r11,#1
000018  eb0b0544          ADD      r5,r11,r4,LSL #1
00001c  f8528025          LDR      r8,[r2,r5,LSL #2]
;;;255          ia = ia + twidCoefModifier;
000020  9d07              LDR      r5,[sp,#0x1c]
000022  442c              ADD      r4,r4,r5
;;;256    
;;;257          l = i + n2;
000024  18cd              ADDS     r5,r1,r3
;;;258          xt = (pSrc[2 * i] >> 1u) - (pSrc[2 * l] >> 1u);
000026  f8506031          LDR      r6,[r0,r1,LSL #3]
00002a  f8509035          LDR      r9,[r0,r5,LSL #3]
00002e  1077              ASRS     r7,r6,#1
000030  eba70669          SUB      r6,r7,r9,ASR #1
;;;259          pSrc[2 * i] = ((pSrc[2 * i] >> 1u) + (pSrc[2 * l] >> 1u)) >> 1u;
000034  eb070769          ADD      r7,r7,r9,ASR #1
000038  107f              ASRS     r7,r7,#1
00003a  f8407031          STR      r7,[r0,r1,LSL #3]
;;;260          
;;;261          yt = (pSrc[2 * i + 1] >> 1u) - (pSrc[2 * l + 1] >> 1u);
00003e  eb0b0941          ADD      r9,r11,r1,LSL #1
000042  eb0b0b45          ADD      r11,r11,r5,LSL #1
000046  f850a029          LDR      r10,[r0,r9,LSL #2]
00004a  f850e02b          LDR      lr,[r0,r11,LSL #2]
00004e  ea4f076a          ASR      r7,r10,#1
000052  eba7076e          SUB      r7,r7,lr,ASR #1
;;;262          pSrc[2 * i + 1] =
000056  ea4f0e6e          ASR      lr,lr,#1
00005a  eb0e0a6a          ADD      r10,lr,r10,ASR #1
00005e  ea4f0a6a          ASR      r10,r10,#1
000062  f840a029          STR      r10,[r0,r9,LSL #2]
;;;263            ((pSrc[2 * l + 1] >> 1u) + (pSrc[2 * i + 1] >> 1u)) >> 1u;
;;;264    
;;;265          mult_32x32_keep32_R(p0, xt, cosVal);
000066  fb56f91c          SMMULR   r9,r6,r12
;;;266          mult_32x32_keep32_R(p1, yt, cosVal);
00006a  fb57fc1c          SMMULR   r12,r7,r12
;;;267          multSub_32x32_keep32_R(p0, yt, sinVal);
00006e  fb679718          SMMLSR   r7,r7,r8,r9
;;;268          multAcc_32x32_keep32_R(p1, xt, sinVal);
000072  fb56c618          SMMLAR   r6,r6,r8,r12
;;;269          
;;;270          pSrc[2u * l] = p0;
000076  f8407035          STR      r7,[r0,r5,LSL #3]
;;;271          pSrc[2u * l + 1u] = p1;
00007a  f840602b          STR      r6,[r0,r11,LSL #2]
00007e  1c49              ADDS     r1,r1,#1              ;251
                  |L2.128|
000080  4299              CMP      r1,r3                 ;251
000082  d3c5              BCC      |L2.16|
;;;272       }                             // groups loop end 
;;;273    
;;;274       twidCoefModifier = twidCoefModifier << 1u;
000084  9907              LDR      r1,[sp,#0x1c]
000086  f64f74ff          MOV      r4,#0xffff
00008a  ea040941          AND      r9,r4,r1,LSL #1
;;;275    
;;;276       // loop for stage 
;;;277       for (k = fftLen / 2; k > 2; k = k >> 1)
00008e  9301              STR      r3,[sp,#4]
000090  e04e              B        |L2.304|
                  |L2.146|
;;;278       {
;;;279          n1 = n2;
000092  9300              STR      r3,[sp,#0]
;;;280          n2 = n2 >> 1;
000094  085b              LSRS     r3,r3,#1
;;;281          ia = 0;
000096  2600              MOVS     r6,#0
;;;282    
;;;283          // loop for groups 
;;;284          for (j = 0; j < n2; j++)
000098  2500              MOVS     r5,#0
00009a  e040              B        |L2.286|
                  |L2.156|
;;;285          {
;;;286             cosVal = pCoef[ia * 2];
00009c  f852c036          LDR      r12,[r2,r6,LSL #3]
;;;287             sinVal = pCoef[(ia * 2) + 1];
0000a0  2101              MOVS     r1,#1
0000a2  eb010146          ADD      r1,r1,r6,LSL #1
0000a6  f8528021          LDR      r8,[r2,r1,LSL #2]
;;;288             ia = ia + twidCoefModifier;
0000aa  444e              ADD      r6,r6,r9
;;;289    
;;;290             // loop for butterfly 
;;;291             for (i = j; i < fftLen; i += n1)
0000ac  4629              MOV      r1,r5
0000ae  e032              B        |L2.278|
                  |L2.176|
;;;292             {
;;;293                l = i + n2;
0000b0  18cc              ADDS     r4,r1,r3
;;;294                xt = pSrc[2 * i] - pSrc[2 * l];
0000b2  f850a031          LDR      r10,[r0,r1,LSL #3]
0000b6  f850b034          LDR      r11,[r0,r4,LSL #3]
0000ba  ebaa070b          SUB      r7,r10,r11
;;;295                pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]) >> 1u;
0000be  44da              ADD      r10,r10,r11
0000c0  ea4f0a6a          ASR      r10,r10,#1
0000c4  f840a031          STR      r10,[r0,r1,LSL #3]
;;;296          
;;;297                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000c8  f04f0b01          MOV      r11,#1
0000cc  eb0b0a41          ADD      r10,r11,r1,LSL #1
0000d0  f8cda00c          STR      r10,[sp,#0xc]
0000d4  f850a02a          LDR      r10,[r0,r10,LSL #2]
0000d8  eb0b0b44          ADD      r11,r11,r4,LSL #1
0000dc  f8cdb008          STR      r11,[sp,#8]
0000e0  f850e02b          LDR      lr,[r0,r11,LSL #2]
0000e4  ebaa0b0e          SUB      r11,r10,lr
;;;298                pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]) >> 1u;
0000e8  44f2              ADD      r10,r10,lr
0000ea  ea4f0e6a          ASR      lr,r10,#1
0000ee  f8dda00c          LDR      r10,[sp,#0xc]
0000f2  f840e02a          STR      lr,[r0,r10,LSL #2]
;;;299    
;;;300                mult_32x32_keep32_R(p0, xt, cosVal);
0000f6  fb57fa1c          SMMULR   r10,r7,r12
;;;301                mult_32x32_keep32_R(p1, yt, cosVal);
0000fa  fb5bfe1c          SMMULR   lr,r11,r12
;;;302                multSub_32x32_keep32_R(p0, yt, sinVal);
0000fe  fb6baa18          SMMLSR   r10,r11,r8,r10
;;;303                multAcc_32x32_keep32_R(p1, xt, sinVal);
000102  fb57e718          SMMLAR   r7,r7,r8,lr
;;;304                
;;;305                pSrc[2u * l] = p0;
000106  f840a034          STR      r10,[r0,r4,LSL #3]
;;;306                pSrc[2u * l + 1u] = p1;
00010a  f8ddb008          LDR      r11,[sp,#8]
00010e  f840702b          STR      r7,[r0,r11,LSL #2]
000112  9c00              LDR      r4,[sp,#0]            ;291
000114  4421              ADD      r1,r1,r4              ;291
                  |L2.278|
000116  9c05              LDR      r4,[sp,#0x14]         ;291
000118  42a1              CMP      r1,r4                 ;291
00011a  d3c9              BCC      |L2.176|
00011c  1c6d              ADDS     r5,r5,#1              ;284
                  |L2.286|
00011e  429d              CMP      r5,r3                 ;284
000120  d3bc              BCC      |L2.156|
;;;307             }                         // butterfly loop end 
;;;308    
;;;309          }                           // groups loop end 
;;;310    
;;;311          twidCoefModifier = twidCoefModifier << 1u;
000122  f64f71ff          MOV      r1,#0xffff
000126  ea010949          AND      r9,r1,r9,LSL #1
00012a  9901              LDR      r1,[sp,#4]            ;277
00012c  0849              LSRS     r1,r1,#1              ;277
00012e  9101              STR      r1,[sp,#4]            ;277
                  |L2.304|
000130  9901              LDR      r1,[sp,#4]            ;277
000132  2902              CMP      r1,#2                 ;277
000134  d8ad              BHI      |L2.146|
;;;312       }                             // stages loop end 
;;;313    
;;;314       n1 = n2;
;;;315       n2 = n2 >> 1;
000136  085f              LSRS     r7,r3,#1
;;;316       ia = 0;
;;;317    
;;;318       cosVal = pCoef[ia * 2];
;;;319       sinVal = pCoef[(ia * 2) + 1];
000138  f04f0c01          MOV      r12,#1
;;;320       ia = ia + twidCoefModifier;
;;;321    
;;;322       // loop for butterfly 
;;;323       for (i = 0; i < fftLen; i += n1)
00013c  2100              MOVS     r1,#0
00013e  e037              B        |L2.432|
                  |L2.320|
;;;324       {
;;;325          l = i + n2;
000140  19ca              ADDS     r2,r1,r7
;;;326          xt = pSrc[2 * i] - pSrc[2 * l];
000142  f8504031          LDR      r4,[r0,r1,LSL #3]
000146  f8505032          LDR      r5,[r0,r2,LSL #3]
00014a  eba40905          SUB      r9,r4,r5
;;;327          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
00014e  442c              ADD      r4,r4,r5
000150  f8404031          STR      r4,[r0,r1,LSL #3]
;;;328    
;;;329          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000154  eb0c0841          ADD      r8,r12,r1,LSL #1
000158  eb0c0542          ADD      r5,r12,r2,LSL #1
00015c  f8504028          LDR      r4,[r0,r8,LSL #2]
000160  f8506025          LDR      r6,[r0,r5,LSL #2]
000164  eba40a06          SUB      r10,r4,r6
;;;330          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
000168  4434              ADD      r4,r4,r6
00016a  f8404028          STR      r4,[r0,r8,LSL #2]
;;;331    
;;;332          pSrc[2u * l] = xt;
00016e  f8409032          STR      r9,[r0,r2,LSL #3]
;;;333    
;;;334          pSrc[2u * l + 1u] = yt;
000172  f840a025          STR      r10,[r0,r5,LSL #2]
;;;335    
;;;336          i += n1;
000176  4419              ADD      r1,r1,r3
;;;337          l = i + n2;
000178  19ca              ADDS     r2,r1,r7
;;;338    
;;;339          xt = pSrc[2 * i] - pSrc[2 * l];
00017a  f8504031          LDR      r4,[r0,r1,LSL #3]
00017e  f8505032          LDR      r5,[r0,r2,LSL #3]
000182  eba40905          SUB      r9,r4,r5
;;;340          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
000186  442c              ADD      r4,r4,r5
000188  f8404031          STR      r4,[r0,r1,LSL #3]
;;;341    
;;;342          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
00018c  eb0c0841          ADD      r8,r12,r1,LSL #1
000190  eb0c0542          ADD      r5,r12,r2,LSL #1
000194  f8504028          LDR      r4,[r0,r8,LSL #2]
000198  f8506025          LDR      r6,[r0,r5,LSL #2]
00019c  eba40a06          SUB      r10,r4,r6
;;;343          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
0001a0  4434              ADD      r4,r4,r6
0001a2  f8404028          STR      r4,[r0,r8,LSL #2]
;;;344    
;;;345          pSrc[2u * l] = xt;
0001a6  f8409032          STR      r9,[r0,r2,LSL #3]
;;;346    
;;;347          pSrc[2u * l + 1u] = yt;
0001aa  f840a025          STR      r10,[r0,r5,LSL #2]
0001ae  4419              ADD      r1,r1,r3              ;323
                  |L2.432|
0001b0  9a05              LDR      r2,[sp,#0x14]         ;323
0001b2  4291              CMP      r1,r2                 ;323
0001b4  d3c4              BCC      |L2.320|
;;;348    
;;;349       }                             // butterfly loop end 
;;;350    
;;;351    }
0001b6  b008              ADD      sp,sp,#0x20
0001b8  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i.arm_radix2_butterfly_q31||, CODE, READONLY, ALIGN=1

                  arm_radix2_butterfly_q31 PROC
;;;102    
;;;103    void arm_radix2_butterfly_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;104    q31_t * pSrc,
;;;105    uint32_t fftLen,
;;;106    q31_t * pCoef,
;;;107    uint16_t twidCoefModifier)
;;;108    {
000004  b084              SUB      sp,sp,#0x10
;;;109    
;;;110       unsigned i, j, k, l, m;
;;;111       unsigned n1, n2, ia;
;;;112       q31_t xt, yt, cosVal, sinVal;
;;;113       q31_t p0, p1;
;;;114    
;;;115       //N = fftLen; 
;;;116       n2 = fftLen;
000006  9905              LDR      r1,[sp,#0x14]
;;;117    
;;;118       n1 = n2;
;;;119       n2 = n2 >> 1;
000008  084b              LSRS     r3,r1,#1
;;;120       ia = 0;
00000a  2400              MOVS     r4,#0
;;;121    
;;;122       // loop for groups 
;;;123       for (i = 0; i < n2; i++)
00000c  2100              MOVS     r1,#0
00000e  e037              B        |L3.128|
                  |L3.16|
;;;124       {
;;;125          cosVal = pCoef[ia * 2];
000010  f852c034          LDR      r12,[r2,r4,LSL #3]
;;;126          sinVal = pCoef[(ia * 2) + 1];
000014  f04f0b01          MOV      r11,#1
000018  eb0b0544          ADD      r5,r11,r4,LSL #1
00001c  f8528025          LDR      r8,[r2,r5,LSL #2]
;;;127          ia = ia + twidCoefModifier;
000020  9d07              LDR      r5,[sp,#0x1c]
000022  442c              ADD      r4,r4,r5
;;;128    
;;;129          l = i + n2;
000024  18cd              ADDS     r5,r1,r3
;;;130          xt = (pSrc[2 * i] >> 1u) - (pSrc[2 * l] >> 1u);
000026  f8506031          LDR      r6,[r0,r1,LSL #3]
00002a  f8509035          LDR      r9,[r0,r5,LSL #3]
00002e  1077              ASRS     r7,r6,#1
000030  eba70669          SUB      r6,r7,r9,ASR #1
;;;131          pSrc[2 * i] = ((pSrc[2 * i] >> 1u) + (pSrc[2 * l] >> 1u)) >> 1u;
000034  eb070769          ADD      r7,r7,r9,ASR #1
000038  107f              ASRS     r7,r7,#1
00003a  f8407031          STR      r7,[r0,r1,LSL #3]
;;;132          
;;;133          yt = (pSrc[2 * i + 1] >> 1u) - (pSrc[2 * l + 1] >> 1u);
00003e  eb0b0941          ADD      r9,r11,r1,LSL #1
000042  eb0b0b45          ADD      r11,r11,r5,LSL #1
000046  f850a029          LDR      r10,[r0,r9,LSL #2]
00004a  f850e02b          LDR      lr,[r0,r11,LSL #2]
00004e  ea4f076a          ASR      r7,r10,#1
000052  eba7076e          SUB      r7,r7,lr,ASR #1
;;;134          pSrc[2 * i + 1] =
000056  ea4f0e6e          ASR      lr,lr,#1
00005a  eb0e0a6a          ADD      r10,lr,r10,ASR #1
00005e  ea4f0a6a          ASR      r10,r10,#1
000062  f840a029          STR      r10,[r0,r9,LSL #2]
;;;135            ((pSrc[2 * l + 1] >> 1u) + (pSrc[2 * i + 1] >> 1u)) >> 1u;
;;;136    
;;;137          mult_32x32_keep32_R(p0, xt, cosVal);
000066  fb56f91c          SMMULR   r9,r6,r12
;;;138          mult_32x32_keep32_R(p1, yt, cosVal);
00006a  fb57fc1c          SMMULR   r12,r7,r12
;;;139          multAcc_32x32_keep32_R(p0, yt, sinVal); 
00006e  fb579718          SMMLAR   r7,r7,r8,r9
;;;140          multSub_32x32_keep32_R(p1, xt, sinVal);
000072  fb66c618          SMMLSR   r6,r6,r8,r12
;;;141          
;;;142          pSrc[2u * l] = p0;
000076  f8407035          STR      r7,[r0,r5,LSL #3]
;;;143          pSrc[2u * l + 1u] = p1;
00007a  f840602b          STR      r6,[r0,r11,LSL #2]
00007e  1c49              ADDS     r1,r1,#1              ;123
                  |L3.128|
000080  4299              CMP      r1,r3                 ;123
000082  d3c5              BCC      |L3.16|
;;;144    
;;;145       }                             // groups loop end 
;;;146    
;;;147       twidCoefModifier <<= 1u;
000084  9907              LDR      r1,[sp,#0x1c]
000086  f64f74ff          MOV      r4,#0xffff
00008a  ea040141          AND      r1,r4,r1,LSL #1
00008e  9107              STR      r1,[sp,#0x1c]
;;;148    
;;;149       // loop for stage 
;;;150       for (k = fftLen / 2; k > 2; k = k >> 1)
000090  9301              STR      r3,[sp,#4]
000092  e055              B        |L3.320|
                  |L3.148|
;;;151       {
;;;152          n1 = n2;
000094  9300              STR      r3,[sp,#0]
;;;153          n2 = n2 >> 1;
000096  085b              LSRS     r3,r3,#1
;;;154          ia = 0;
000098  2700              MOVS     r7,#0
;;;155    
;;;156          // loop for groups 
;;;157          for (j = 0; j < n2; j++)
00009a  2600              MOVS     r6,#0
00009c  e045              B        |L3.298|
                  |L3.158|
;;;158          {
;;;159             cosVal = pCoef[ia * 2];
00009e  f8528037          LDR      r8,[r2,r7,LSL #3]
;;;160             sinVal = pCoef[(ia * 2) + 1];
0000a2  f04f0c01          MOV      r12,#1
0000a6  eb0c0147          ADD      r1,r12,r7,LSL #1
0000aa  f8529021          LDR      r9,[r2,r1,LSL #2]
;;;161             ia = ia + twidCoefModifier;
0000ae  9907              LDR      r1,[sp,#0x1c]
0000b0  440f              ADD      r7,r7,r1
;;;162    
;;;163             // loop for butterfly 
;;;164             i = j;
0000b2  4631              MOV      r1,r6
;;;165             m = fftLen / n1;
0000b4  9d00              LDR      r5,[sp,#0]
0000b6  9c05              LDR      r4,[sp,#0x14]
0000b8  fbb4f5f5          UDIV     r5,r4,r5
                  |L3.188|
;;;166             do
;;;167             {
;;;168                l = i + n2;
0000bc  18cc              ADDS     r4,r1,r3
;;;169                xt = pSrc[2 * i] - pSrc[2 * l];
0000be  f850a031          LDR      r10,[r0,r1,LSL #3]
0000c2  f850b034          LDR      r11,[r0,r4,LSL #3]
0000c6  ebaa0c0b          SUB      r12,r10,r11
;;;170                pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]) >> 1u;
0000ca  44da              ADD      r10,r10,r11
0000cc  ea4f0a6a          ASR      r10,r10,#1
0000d0  f840a031          STR      r10,[r0,r1,LSL #3]
;;;171                
;;;172                yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0000d4  f04f0a01          MOV      r10,#1
0000d8  eb0a0e41          ADD      lr,r10,r1,LSL #1
0000dc  f8cde00c          STR      lr,[sp,#0xc]
0000e0  f850e02e          LDR      lr,[r0,lr,LSL #2]
0000e4  eb0a0a44          ADD      r10,r10,r4,LSL #1
0000e8  f8cda008          STR      r10,[sp,#8]
0000ec  f850a02a          LDR      r10,[r0,r10,LSL #2]
0000f0  ebae0b0a          SUB      r11,lr,r10
;;;173                pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]) >> 1u;
0000f4  44f2              ADD      r10,r10,lr
0000f6  f8dde00c          LDR      lr,[sp,#0xc]
0000fa  ea4f0a6a          ASR      r10,r10,#1
0000fe  f840a02e          STR      r10,[r0,lr,LSL #2]
;;;174    
;;;175                mult_32x32_keep32_R(p0, xt, cosVal);
000102  fb5cfa18          SMMULR   r10,r12,r8
;;;176                mult_32x32_keep32_R(p1, yt, cosVal);
000106  fb5bfe18          SMMULR   lr,r11,r8
;;;177                multAcc_32x32_keep32_R(p0, yt, sinVal);
00010a  fb5baa19          SMMLAR   r10,r11,r9,r10
;;;178                multSub_32x32_keep32_R(p1, xt, sinVal);
00010e  fb6cec19          SMMLSR   r12,r12,r9,lr
;;;179                
;;;180                pSrc[2u * l] = p0;
000112  f840a034          STR      r10,[r0,r4,LSL #3]
;;;181                pSrc[2u * l + 1u] = p1;
000116  f8dda008          LDR      r10,[sp,#8]
00011a  f840c02a          STR      r12,[r0,r10,LSL #2]
;;;182                i += n1;
00011e  9c00              LDR      r4,[sp,#0]
000120  4421              ADD      r1,r1,r4
;;;183                m--;
000122  1e6d              SUBS     r5,r5,#1
;;;184             } while( m > 0);                   // butterfly loop end 
000124  2d00              CMP      r5,#0
000126  d1c9              BNE      |L3.188|
000128  1c76              ADDS     r6,r6,#1              ;157
                  |L3.298|
00012a  429e              CMP      r6,r3                 ;157
00012c  d3b7              BCC      |L3.158|
;;;185    
;;;186          }                           // groups loop end 
;;;187    
;;;188          twidCoefModifier <<= 1u;
00012e  9907              LDR      r1,[sp,#0x1c]
000130  f64f74ff          MOV      r4,#0xffff
000134  ea040141          AND      r1,r4,r1,LSL #1
000138  9107              STR      r1,[sp,#0x1c]
00013a  9901              LDR      r1,[sp,#4]            ;150
00013c  0849              LSRS     r1,r1,#1              ;150
00013e  9101              STR      r1,[sp,#4]            ;150
                  |L3.320|
000140  9901              LDR      r1,[sp,#4]            ;150
000142  2902              CMP      r1,#2                 ;150
000144  d8a6              BHI      |L3.148|
;;;189       }                             // stages loop end 
;;;190    
;;;191       n1 = n2;
;;;192       n2 = n2 >> 1;
000146  ea4f0c53          LSR      r12,r3,#1
;;;193       ia = 0;
;;;194    
;;;195       cosVal = pCoef[ia * 2];
;;;196       sinVal = pCoef[(ia * 2) + 1];
00014a  f04f0801          MOV      r8,#1
;;;197       ia = ia + twidCoefModifier;
;;;198    
;;;199       // loop for butterfly 
;;;200       for (i = 0; i < fftLen; i += n1)
00014e  2100              MOVS     r1,#0
000150  e039              B        |L3.454|
                  |L3.338|
;;;201       {
;;;202          l = i + n2;
000152  eb01020c          ADD      r2,r1,r12
;;;203          xt = pSrc[2 * i] - pSrc[2 * l];
000156  f8504031          LDR      r4,[r0,r1,LSL #3]
00015a  f8505032          LDR      r5,[r0,r2,LSL #3]
00015e  eba40905          SUB      r9,r4,r5
;;;204          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
000162  442c              ADD      r4,r4,r5
000164  f8404031          STR      r4,[r0,r1,LSL #3]
;;;205    
;;;206          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
000168  eb080741          ADD      r7,r8,r1,LSL #1
00016c  eb080542          ADD      r5,r8,r2,LSL #1
000170  f8504027          LDR      r4,[r0,r7,LSL #2]
000174  f8506025          LDR      r6,[r0,r5,LSL #2]
000178  eba40a06          SUB      r10,r4,r6
;;;207          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
00017c  4434              ADD      r4,r4,r6
00017e  f8404027          STR      r4,[r0,r7,LSL #2]
;;;208    
;;;209          pSrc[2u * l] = xt;
000182  f8409032          STR      r9,[r0,r2,LSL #3]
;;;210    
;;;211          pSrc[2u * l + 1u] = yt;
000186  f840a025          STR      r10,[r0,r5,LSL #2]
;;;212    
;;;213          i += n1;
00018a  4419              ADD      r1,r1,r3
;;;214          l = i + n2;
00018c  eb01020c          ADD      r2,r1,r12
;;;215    
;;;216          xt = pSrc[2 * i] - pSrc[2 * l];
000190  f8504031          LDR      r4,[r0,r1,LSL #3]
000194  f8505032          LDR      r5,[r0,r2,LSL #3]
000198  eba40905          SUB      r9,r4,r5
;;;217          pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
00019c  442c              ADD      r4,r4,r5
00019e  f8404031          STR      r4,[r0,r1,LSL #3]
;;;218    
;;;219          yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
0001a2  eb080641          ADD      r6,r8,r1,LSL #1
0001a6  eb080542          ADD      r5,r8,r2,LSL #1
0001aa  f8504026          LDR      r4,[r0,r6,LSL #2]
0001ae  f8507025          LDR      r7,[r0,r5,LSL #2]
0001b2  eba40a07          SUB      r10,r4,r7
;;;220          pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
0001b6  443c              ADD      r4,r4,r7
0001b8  f8404026          STR      r4,[r0,r6,LSL #2]
;;;221    
;;;222          pSrc[2u * l] = xt;
0001bc  f8409032          STR      r9,[r0,r2,LSL #3]
;;;223    
;;;224          pSrc[2u * l + 1u] = yt;
0001c0  f840a025          STR      r10,[r0,r5,LSL #2]
0001c4  4419              ADD      r1,r1,r3              ;200
                  |L3.454|
0001c6  9a05              LDR      r2,[sp,#0x14]         ;200
0001c8  4291              CMP      r1,r2                 ;200
0001ca  d3c2              BCC      |L3.338|
;;;225    
;;;226       }                             // butterfly loop end 
;;;227    
;;;228    }
0001cc  b008              ADD      sp,sp,#0x20
0001ce  e8bd8ff0          POP      {r4-r11,pc}
;;;229    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_cfft_radix2_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_q31_c_6421718b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___21_arm_cfft_radix2_q31_c_6421718b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_q31_c_6421718b____REVSH|
#line 144
|__asm___21_arm_cfft_radix2_q31_c_6421718b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_arm_cfft_radix2_q31_c_6421718b____RRX|
#line 300
|__asm___21_arm_cfft_radix2_q31_c_6421718b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
