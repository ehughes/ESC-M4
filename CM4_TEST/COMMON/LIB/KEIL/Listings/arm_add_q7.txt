; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_add_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_add_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_add_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_add_q7.c]
                          THUMB

                          AREA ||i.arm_add_q7||, CODE, READONLY, ALIGN=1

                  arm_add_q7 PROC
;;;65     
;;;66     void arm_add_q7(
000000  b570              PUSH     {r4-r6,lr}
;;;67       q7_t * pSrcA,
;;;68       q7_t * pSrcB,
;;;69       q7_t * pDst,
;;;70       uint32_t blockSize)
;;;71     {
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77     
;;;78     
;;;79       /*loop Unrolling */
;;;80       blkCnt = blockSize >> 2u;
000002  089c              LSRS     r4,r3,#2
000004  e008              B        |L1.24|
                  |L1.6|
;;;81     
;;;82       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;83        ** a second loop below computes the remaining 1 to 3 samples. */
;;;84       while(blkCnt > 0u)
;;;85       {
;;;86         /* C = A + B */
;;;87         /* Add and then store the results in the destination buffer. */
;;;88         *__SIMD32(pDst)++ = __QADD8(*__SIMD32(pSrcA)++, *__SIMD32(pSrcB)++);
000006  f8505b04          LDR      r5,[r0],#4
00000a  f8516b04          LDR      r6,[r1],#4
00000e  fa85f516          QADD8    r5,r5,r6
000012  f8425b04          STR      r5,[r2],#4
;;;89     
;;;90         /* Decrement the loop counter */
;;;91         blkCnt--;
000016  1e64              SUBS     r4,r4,#1
                  |L1.24|
000018  2c00              CMP      r4,#0                 ;84
00001a  d1f4              BNE      |L1.6|
;;;92       }
;;;93     
;;;94       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;95        ** No loop unrolling is used. */
;;;96       blkCnt = blockSize % 0x4u;
00001c  f0030303          AND      r3,r3,#3
;;;97     
;;;98       while(blkCnt > 0u)
000020  e009              B        |L1.54|
                  |L1.34|
;;;99       {
;;;100        /* C = A + B */
;;;101        /* Add and then store the results in the destination buffer. */
;;;102        *pDst++ = (q7_t) __SSAT(*pSrcA++ + *pSrcB++, 8);
000022  f9104b01          LDRSB    r4,[r0],#1
000026  f9115b01          LDRSB    r5,[r1],#1
00002a  442c              ADD      r4,r4,r5
00002c  f3040407          SSAT     r4,#8,r4
000030  f8024b01          STRB     r4,[r2],#1
;;;103    
;;;104        /* Decrement the loop counter */
;;;105        blkCnt--;
000034  1e5b              SUBS     r3,r3,#1
                  |L1.54|
000036  2b00              CMP      r3,#0                 ;98
000038  d1f3              BNE      |L1.34|
;;;106      }
;;;107    
;;;108    #else
;;;109    
;;;110      /* Run the below code for Cortex-M0 */
;;;111    
;;;112    
;;;113    
;;;114      /* Initialize blkCnt with number of samples */
;;;115      blkCnt = blockSize;
;;;116    
;;;117      while(blkCnt > 0u)
;;;118      {
;;;119        /* C = A + B */
;;;120        /* Add and then store the results in the destination buffer. */
;;;121        *pDst++ = (q7_t) __SSAT((q15_t) * pSrcA++ + *pSrcB++, 8);
;;;122    
;;;123        /* Decrement the loop counter */
;;;124        blkCnt--;
;;;125      }
;;;126    
;;;127    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;128    
;;;129    
;;;130    }
00003a  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_add_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_add_q7_c_6fae294c____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___12_arm_add_q7_c_6fae294c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_add_q7_c_6fae294c____REVSH|
#line 144
|__asm___12_arm_add_q7_c_6fae294c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_add_q7_c_6fae294c____RRX|
#line 300
|__asm___12_arm_add_q7_c_6fae294c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
