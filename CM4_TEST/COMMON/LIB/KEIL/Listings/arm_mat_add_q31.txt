; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_add_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_add_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_mat_add_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_add_q31.c]
                          THUMB

                          AREA ||i.arm_mat_add_q31||, CODE, READONLY, ALIGN=1

                  arm_mat_add_q31 PROC
;;;65     
;;;66     arm_status arm_mat_add_q31(
000000  b5f0              PUSH     {r4-r7,lr}
;;;67       const arm_matrix_instance_q31 * pSrcA,
;;;68       const arm_matrix_instance_q31 * pSrcB,
;;;69       arm_matrix_instance_q31 * pDst)
;;;70     {
;;;71       q31_t *pIn1 = pSrcA->pData;                    /* input data matrix pointer A */
;;;72       q31_t *pIn2 = pSrcB->pData;                    /* input data matrix pointer B */
000002  6843              LDR      r3,[r0,#4]
;;;73       q31_t *pOut = pDst->pData;                     /* output data matrix pointer */
;;;74       q31_t inA1, inB1;                              /* temporary variables */
;;;75     
;;;76     #ifndef ARM_MATH_CM0_FAMILY
;;;77     
;;;78       q31_t inA2, inB2;                              /* temporary variables */
;;;79       q31_t out1, out2;                              /* temporary variables */
;;;80     
;;;81     #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;82     
;;;83       uint32_t numSamples;                           /* total number of elements in the matrix  */
;;;84       uint32_t blkCnt;                               /* loop counters */
;;;85       arm_status status;                             /* status of matrix addition */
;;;86     
;;;87     #ifdef ARM_MATH_MATRIX_CHECK
;;;88       /* Check for matrix mismatch condition */
;;;89       if((pSrcA->numRows != pSrcB->numRows) ||
;;;90          (pSrcA->numCols != pSrcB->numCols) ||
;;;91          (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
;;;92       {
;;;93         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;94         status = ARM_MATH_SIZE_MISMATCH;
;;;95       }
;;;96       else
;;;97     #endif
;;;98       {
;;;99         /* Total number of samples in the input matrix */
;;;100        numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
000004  8804              LDRH     r4,[r0,#0]
000006  8840              LDRH     r0,[r0,#2]
000008  6849              LDR      r1,[r1,#4]            ;72
00000a  4344              MULS     r4,r0,r4
00000c  6852              LDR      r2,[r2,#4]            ;73
;;;101    
;;;102    #ifndef ARM_MATH_CM0_FAMILY
;;;103    
;;;104        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;105    
;;;106        /* Loop Unrolling */
;;;107        blkCnt = numSamples >> 2u;
00000e  08a0              LSRS     r0,r4,#2
000010  e019              B        |L1.70|
                  |L1.18|
;;;108    
;;;109    
;;;110        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;111         ** a second loop below computes the remaining 1 to 3 samples. */
;;;112        while(blkCnt > 0u)
;;;113        {
;;;114          /* C(m,n) = A(m,n) + B(m,n) */
;;;115          /* Add, saturate and then store the results in the destination buffer. */
;;;116          /* Read values from source A */
;;;117          inA1 = pIn1[0];
000012  cb40              LDM      r3!,{r6}
;;;118    
;;;119          /* Read values from source B */
;;;120          inB1 = pIn2[0];
000014  c920              LDM      r1!,{r5}
;;;121    
;;;122          /* Read values from source A */
;;;123          inA2 = pIn1[1];
000016  cb80              LDM      r3!,{r7}
;;;124    
;;;125          /* Add and saturate */
;;;126          out1 = __QADD(inA1, inB1);
000018  fa85f686          QADD     r6,r6,r5
;;;127    
;;;128          /* Read values from source B */
;;;129          inB2 = pIn2[1];
00001c  f851cb04          LDR      r12,[r1],#4
;;;130    
;;;131          /* Read values from source A */
;;;132          inA1 = pIn1[2];
000020  f8535b08          LDR      r5,[r3],#8
;;;133    
;;;134          /* Add and saturate */
;;;135          out2 = __QADD(inA2, inB2);
000024  fa8cf787          QADD     r7,r7,r12
;;;136    
;;;137          /* Read values from source B */
;;;138          inB1 = pIn2[2];
000028  f851cb08          LDR      r12,[r1],#8
00002c  e8e26702          STRD     r6,r7,[r2],#8
;;;139    
;;;140          /* Store result in destination */
;;;141          pOut[0] = out1;
;;;142          pOut[1] = out2;
;;;143    
;;;144          /* Read values from source A */
;;;145          inA2 = pIn1[3];
000030  f8536c04          LDR      r6,[r3,#-4]
;;;146    
;;;147          /* Read values from source B */
;;;148          inB2 = pIn2[3];
000034  f8517c04          LDR      r7,[r1,#-4]
;;;149    
;;;150          /* Add and saturate */
;;;151          out1 = __QADD(inA1, inB1);
000038  fa8cf585          QADD     r5,r5,r12
;;;152          out2 = __QADD(inA2, inB2);
00003c  fa87f686          QADD     r6,r6,r7
000040  e8e25602          STRD     r5,r6,[r2],#8
000044  1e40              SUBS     r0,r0,#1
                  |L1.70|
000046  2800              CMP      r0,#0                 ;112
000048  d1e3              BNE      |L1.18|
;;;153    
;;;154          /* Store result in destination */
;;;155          pOut[2] = out1;
;;;156          pOut[3] = out2;
;;;157    
;;;158          /* update pointers to process next sampels */
;;;159          pIn1 += 4u;
;;;160          pIn2 += 4u;
;;;161          pOut += 4u;
;;;162    
;;;163          /* Decrement the loop counter */
;;;164          blkCnt--;
;;;165        }
;;;166    
;;;167        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.      
;;;168         ** No loop unrolling is used. */
;;;169        blkCnt = numSamples % 0x4u;
00004a  f0040003          AND      r0,r4,#3
;;;170    
;;;171    #else
;;;172    
;;;173        /* Run the below code for Cortex-M0 */
;;;174    
;;;175        /* Initialize blkCnt with number of samples */
;;;176        blkCnt = numSamples;
;;;177    
;;;178    
;;;179    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;180    
;;;181        while(blkCnt > 0u)
00004e  e005              B        |L1.92|
                  |L1.80|
;;;182        {
;;;183          /* C(m,n) = A(m,n) + B(m,n) */
;;;184          /* Add, saturate and then store the results in the destination buffer. */
;;;185          inA1 = *pIn1++;
000050  cb10              LDM      r3!,{r4}
;;;186          inB1 = *pIn2++;
000052  c920              LDM      r1!,{r5}
;;;187    
;;;188          inA1 = __QADD(inA1, inB1);
000054  fa85f484          QADD     r4,r4,r5
;;;189    
;;;190          /* Decrement the loop counter */
;;;191          blkCnt--;
;;;192    
;;;193          *pOut++ = inA1;
000058  c210              STM      r2!,{r4}
00005a  1e40              SUBS     r0,r0,#1
                  |L1.92|
00005c  2800              CMP      r0,#0                 ;181
00005e  d1f7              BNE      |L1.80|
;;;194    
;;;195        }
;;;196    
;;;197        /* set status as ARM_MATH_SUCCESS */
;;;198        status = ARM_MATH_SUCCESS;
;;;199      }
;;;200    
;;;201      /* Return to application */
;;;202      return (status);
;;;203    }
000060  bdf0              POP      {r4-r7,pc}
;;;204    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_add_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_q31_c_15f5f192____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___17_arm_mat_add_q31_c_15f5f192____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_q31_c_15f5f192____REVSH|
#line 144
|__asm___17_arm_mat_add_q31_c_15f5f192____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_q31_c_15f5f192____RRX|
#line 300
|__asm___17_arm_mat_add_q31_c_15f5f192____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
