; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_scale_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_scale_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_scale_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_scale_f32.c]
                          THUMB

                          AREA ||i.arm_scale_f32||, CODE, READONLY, ALIGN=1

                  arm_scale_f32 PROC
;;;88     
;;;89     void arm_scale_f32(
000000  0893              LSRS     r3,r2,#2
;;;90       float32_t * pSrc,
;;;91       float32_t scale,
;;;92       float32_t * pDst,
;;;93       uint32_t blockSize)
;;;94     {
000002  e01a              B        |L1.58|
                  |L1.4|
;;;95       uint32_t blkCnt;                               /* loop counter */
;;;96     #ifndef ARM_MATH_CM0_FAMILY
;;;97     
;;;98     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;99       float32_t in1, in2, in3, in4;                  /* temporary variabels */
;;;100    
;;;101      /*loop Unrolling */
;;;102      blkCnt = blockSize >> 2u;
;;;103    
;;;104      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;105       ** a second loop below computes the remaining 1 to 3 samples. */
;;;106      while(blkCnt > 0u)
;;;107      {
;;;108        /* C = A * scale */
;;;109        /* Scale the input and then store the results in the destination buffer. */
;;;110        /* read input samples from source */
;;;111        in1 = *pSrc;
000004  edd00a00          VLDR     s1,[r0,#0]
;;;112        in2 = *(pSrc + 1);
000008  ed901a01          VLDR     s2,[r0,#4]
;;;113    
;;;114        /* multiply with scaling factor */
;;;115        in1 = in1 * scale;
00000c  ee600a80          VMUL.F32 s1,s1,s0
;;;116    
;;;117        /* read input sample from source */
;;;118        in3 = *(pSrc + 2);
000010  ed902a02          VLDR     s4,[r0,#8]
;;;119    
;;;120        /* multiply with scaling factor */
;;;121        in2 = in2 * scale;
000014  ee211a00          VMUL.F32 s2,s2,s0
;;;122    
;;;123        /* read input sample from source */
;;;124        in4 = *(pSrc + 3);
000018  edd01a03          VLDR     s3,[r0,#0xc]
;;;125    
;;;126        /* multiply with scaling factor */
;;;127        in3 = in3 * scale;
00001c  ee222a00          VMUL.F32 s4,s4,s0
;;;128        in4 = in4 * scale;
000020  ee611a80          VMUL.F32 s3,s3,s0
;;;129        /* store the result to destination */
;;;130        *pDst = in1;
000024  edc10a00          VSTR     s1,[r1,#0]
;;;131        *(pDst + 1) = in2;
000028  ed811a01          VSTR     s2,[r1,#4]
;;;132        *(pDst + 2) = in3;
00002c  ed812a02          VSTR     s4,[r1,#8]
;;;133        *(pDst + 3) = in4;
000030  edc11a03          VSTR     s3,[r1,#0xc]
;;;134    
;;;135        /* update pointers to process next samples */
;;;136        pSrc += 4u;
000034  3010              ADDS     r0,r0,#0x10
;;;137        pDst += 4u;
000036  3110              ADDS     r1,r1,#0x10
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
000038  1e5b              SUBS     r3,r3,#1
                  |L1.58|
00003a  2b00              CMP      r3,#0                 ;106
00003c  d1e2              BNE      |L1.4|
;;;141      }
;;;142    
;;;143      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
;;;144       ** No loop unrolling is used. */
;;;145      blkCnt = blockSize % 0x4u;
00003e  f0020203          AND      r2,r2,#3
;;;146    
;;;147    #else
;;;148    
;;;149      /* Run the below code for Cortex-M0 */
;;;150    
;;;151      /* Initialize blkCnt with number of samples */
;;;152      blkCnt = blockSize;
;;;153    
;;;154    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;155    
;;;156      while(blkCnt > 0u)
000042  e006              B        |L1.82|
                  |L1.68|
;;;157      {
;;;158        /* C = A * scale */
;;;159        /* Scale the input and then store the result in the destination buffer. */
;;;160        *pDst++ = (*pSrc++) * scale;
000044  ecf00a01          VLDM     r0!,{s1}
000048  ee600a80          VMUL.F32 s1,s1,s0
00004c  ece10a01          VSTM     r1!,{s1}
;;;161    
;;;162        /* Decrement the loop counter */
;;;163        blkCnt--;
000050  1e52              SUBS     r2,r2,#1
                  |L1.82|
000052  2a00              CMP      r2,#0                 ;156
000054  d1f6              BNE      |L1.68|
;;;164      }
;;;165    }
000056  4770              BX       lr
;;;166    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_scale_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_f32_c_b0d8e81b____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_scale_f32_c_b0d8e81b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_f32_c_b0d8e81b____REVSH|
#line 144
|__asm___15_arm_scale_f32_c_b0d8e81b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_scale_f32_c_b0d8e81b____RRX|
#line 300
|__asm___15_arm_scale_f32_c_b0d8e81b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
