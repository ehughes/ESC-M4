; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_dot_prod_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_dot_prod_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_dot_prod_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_dot_prod_f32.c]
                          THUMB

                          AREA ||i.arm_cmplx_dot_prod_f32||, CODE, READONLY, ALIGN=2

                  arm_cmplx_dot_prod_f32 PROC
;;;87     
;;;88     void arm_cmplx_dot_prod_f32(
000000  b530              PUSH     {r4,r5,lr}
;;;89       float32_t * pSrcA,
;;;90       float32_t * pSrcB,
;;;91       uint32_t numSamples,
;;;92       float32_t * realResult,
;;;93       float32_t * imagResult)
;;;94     {
000002  9d03              LDR      r5,[sp,#0xc]
;;;95       float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result storage */
000004  ed9f0a35          VLDR     s0,|L1.220|
000008  eef00a40          VMOV.F32 s1,s0
;;;96       float32_t a0,b0,c0,d0;
;;;97     
;;;98     #ifndef ARM_MATH_CM0_FAMILY
;;;99     
;;;100      /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;101      uint32_t blkCnt;                               /* loop counter */
;;;102    
;;;103      /*loop Unrolling */
;;;104      blkCnt = numSamples >> 2u;
00000c  0894              LSRS     r4,r2,#2
00000e  e048              B        |L1.162|
                  |L1.16|
;;;105    
;;;106      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;107       ** a second loop below computes the remaining 1 to 3 samples. */
;;;108      while(blkCnt > 0u)
;;;109      {
;;;110          a0 = *pSrcA++;
000010  ecb01a01          VLDM     r0!,{s2}
;;;111          b0 = *pSrcA++;
000014  ecf01a01          VLDM     r0!,{s3}
;;;112          c0 = *pSrcB++;
000018  ecb12a01          VLDM     r1!,{s4}
;;;113          d0 = *pSrcB++;  
00001c  ecf12a01          VLDM     r1!,{s5}
;;;114      
;;;115          real_sum += a0 * c0;
000020  eeb03a40          VMOV.F32 s6,s0
000024  ee013a02          VMLA.F32 s6,s2,s4
;;;116          imag_sum += a0 * d0;
000028  eef03a60          VMOV.F32 s7,s1
00002c  ee413a22          VMLA.F32 s7,s2,s5
;;;117          real_sum -= b0 * d0;
000030  ee013ae2          VMLS.F32 s6,s3,s5
;;;118          imag_sum += b0 * c0;
000034  ee413a82          VMLA.F32 s7,s3,s4
;;;119        
;;;120          a0 = *pSrcA++;
000038  ecb00a01          VLDM     r0!,{s0}
;;;121          b0 = *pSrcA++;
00003c  ecf00a01          VLDM     r0!,{s1}
;;;122          c0 = *pSrcB++;
000040  ecb11a01          VLDM     r1!,{s2}
;;;123          d0 = *pSrcB++; 
000044  ecf11a01          VLDM     r1!,{s3}
;;;124      
;;;125          real_sum += a0 * c0;
000048  ee003a01          VMLA.F32 s6,s0,s2
;;;126          imag_sum += a0 * d0;
00004c  ee403a21          VMLA.F32 s7,s0,s3
;;;127          real_sum -= b0 * d0;
000050  ee003ae1          VMLS.F32 s6,s1,s3
;;;128          imag_sum += b0 * c0;
000054  ee403a81          VMLA.F32 s7,s1,s2
;;;129          
;;;130          a0 = *pSrcA++;
000058  ecf00a01          VLDM     r0!,{s1}
;;;131          b0 = *pSrcA++;
00005c  ecb02a01          VLDM     r0!,{s4}
;;;132          c0 = *pSrcB++;
000060  ecb11a01          VLDM     r1!,{s2}
;;;133          d0 = *pSrcB++;  
000064  ecf11a01          VLDM     r1!,{s3}
;;;134      
;;;135          real_sum += a0 * c0;
000068  ee003a81          VMLA.F32 s6,s1,s2
;;;136          imag_sum += a0 * d0;
00006c  ee403aa1          VMLA.F32 s7,s1,s3
;;;137          real_sum -= b0 * d0;
000070  ee023a61          VMLS.F32 s6,s4,s3
;;;138          imag_sum += b0 * c0;
000074  ee423a01          VMLA.F32 s7,s4,s2
;;;139        
;;;140          a0 = *pSrcA++;
000078  ecb02a01          VLDM     r0!,{s4}
;;;141          b0 = *pSrcA++;
00007c  ecf00a01          VLDM     r0!,{s1}
;;;142          c0 = *pSrcB++;
000080  ecb11a01          VLDM     r1!,{s2}
;;;143          d0 = *pSrcB++; 
000084  ecf11a01          VLDM     r1!,{s3}
;;;144      
;;;145          real_sum += a0 * c0;
000088  ee023a01          VMLA.F32 s6,s4,s2
;;;146          imag_sum += a0 * d0;
00008c  ee423a21          VMLA.F32 s7,s4,s3
;;;147          real_sum -= b0 * d0;
000090  eeb00a43          VMOV.F32 s0,s6
000094  ee000ae1          VMLS.F32 s0,s1,s3
;;;148          imag_sum += b0 * c0;
000098  ee403a81          VMLA.F32 s7,s1,s2
00009c  eef00a63          VMOV.F32 s1,s7
;;;149    
;;;150          /* Decrement the loop counter */
;;;151          blkCnt--;
0000a0  1e64              SUBS     r4,r4,#1
                  |L1.162|
0000a2  2c00              CMP      r4,#0                 ;108
0000a4  d1b4              BNE      |L1.16|
;;;152      }
;;;153    
;;;154      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;155       ** No loop unrolling is used. */
;;;156      blkCnt = numSamples & 0x3u;
0000a6  f0020203          AND      r2,r2,#3
;;;157    
;;;158      while(blkCnt > 0u)
0000aa  e010              B        |L1.206|
                  |L1.172|
;;;159      {
;;;160          a0 = *pSrcA++;
0000ac  ecb02a01          VLDM     r0!,{s4}
;;;161          b0 = *pSrcA++;
0000b0  ecb01a01          VLDM     r0!,{s2}
;;;162          c0 = *pSrcB++;
0000b4  ecf11a01          VLDM     r1!,{s3}
;;;163          d0 = *pSrcB++;  
0000b8  ecf12a01          VLDM     r1!,{s5}
;;;164      
;;;165          real_sum += a0 * c0;
0000bc  ee020a21          VMLA.F32 s0,s4,s3
;;;166          imag_sum += a0 * d0;
0000c0  ee420a22          VMLA.F32 s1,s4,s5
;;;167          real_sum -= b0 * d0;
0000c4  ee010a62          VMLS.F32 s0,s2,s5
;;;168          imag_sum += b0 * c0;
0000c8  ee410a21          VMLA.F32 s1,s2,s3
;;;169    
;;;170          /* Decrement the loop counter */
;;;171          blkCnt--;
0000cc  1e52              SUBS     r2,r2,#1
                  |L1.206|
0000ce  2a00              CMP      r2,#0                 ;158
0000d0  d1ec              BNE      |L1.172|
;;;172      }
;;;173    
;;;174    #else
;;;175    
;;;176      /* Run the below code for Cortex-M0 */
;;;177    
;;;178      while(numSamples > 0u)
;;;179      {
;;;180          a0 = *pSrcA++;
;;;181          b0 = *pSrcA++;
;;;182          c0 = *pSrcB++;
;;;183          d0 = *pSrcB++;  
;;;184      
;;;185          real_sum += a0 * c0;
;;;186          imag_sum += a0 * d0;
;;;187          real_sum -= b0 * d0;
;;;188          imag_sum += b0 * c0;
;;;189    
;;;190          /* Decrement the loop counter */
;;;191          numSamples--;
;;;192      }
;;;193    
;;;194    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;195    
;;;196      /* Store the real and imaginary results in the destination buffers */
;;;197      *realResult = real_sum;
0000d2  ed830a00          VSTR     s0,[r3,#0]
;;;198      *imagResult = imag_sum;
0000d6  edc50a00          VSTR     s1,[r5,#0]
;;;199    }
0000da  bd30              POP      {r4,r5,pc}
;;;200    
                          ENDP

                  |L1.220|
0000dc  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_dot_prod_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_f32_c_ed20674d____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___24_arm_cmplx_dot_prod_f32_c_ed20674d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_f32_c_ed20674d____REVSH|
#line 144
|__asm___24_arm_cmplx_dot_prod_f32_c_ed20674d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_arm_cmplx_dot_prod_f32_c_ed20674d____RRX|
#line 300
|__asm___24_arm_cmplx_dot_prod_f32_c_ed20674d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
