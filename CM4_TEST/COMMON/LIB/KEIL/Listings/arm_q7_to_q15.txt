; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_q7_to_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_q7_to_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_q7_to_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\SupportFunctions\arm_q7_to_q15.c]
                          THUMB

                          AREA ||i.arm_q7_to_q15||, CODE, READONLY, ALIGN=2

                  arm_q7_to_q15 PROC
;;;72     
;;;73     void arm_q7_to_q15(
000000  b570              PUSH     {r4-r6,lr}
;;;74       q7_t * pSrc,
;;;75       q15_t * pDst,
;;;76       uint32_t blockSize)
;;;77     {
;;;78       q7_t *pIn = pSrc;                              /* Src pointer */
;;;79       uint32_t blkCnt;                               /* loop counter */
;;;80     
;;;81     #ifndef ARM_MATH_CM0_FAMILY
;;;82       q31_t in;
;;;83       q31_t in1, in2;
;;;84       q31_t out1, out2;
;;;85     
;;;86       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;87     
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
000002  0893              LSRS     r3,r2,#2
000004  e016              B        |L1.52|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;92        ** a second loop below computes the remaining 1 to 3 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* C = (q15_t) A << 8 */
;;;96         /* convert from q7 to q15 and then store the results in the destination buffer */
;;;97         in = *__SIMD32(pIn)++;
000006  bf00              NOP      
                  |L1.8|
000008  f8504b04          LDR      r4,[r0],#4
;;;98     
;;;99         /* rotatate in by 8 and extend two q7_t values to q15_t values */
;;;100        in1 = __SXTB16(__ROR(in, 8));
00000c  fa2ff694          SXTB16   r6,r4,ROR #8
;;;101    
;;;102        /* extend remainig two q7_t values to q15_t values */
;;;103        in2 = __SXTB16(in);
000010  fa2ff584          SXTB16   r5,r4
;;;104    
;;;105        in1 = in1 << 8u;
000014  0234              LSLS     r4,r6,#8
;;;106        in2 = in2 << 8u;
000016  022d              LSLS     r5,r5,#8
;;;107    
;;;108        in1 = in1 & 0xFF00FF00;
;;;109        in2 = in2 & 0xFF00FF00;
000018  f00525ff          AND      r5,r5,#0xff00ff00
00001c  f00424ff          AND      r4,r4,#0xff00ff00     ;108
;;;110    
;;;111    #ifndef ARM_MATH_BIG_ENDIAN
;;;112    
;;;113        out2 = __PKHTB(in1, in2, 16);
000020  0c2e              LSRS     r6,r5,#16
000022  eac60604          PKHBT    r6,r6,r4
;;;114        out1 = __PKHBT(in2, in1, 16);
000026  eac54404          PKHBT    r4,r5,r4,LSL #16
;;;115    
;;;116    #else
;;;117    
;;;118        out1 = __PKHTB(in1, in2, 16);
;;;119        out2 = __PKHBT(in2, in1, 16);
;;;120    
;;;121    #endif
;;;122    
;;;123        *__SIMD32(pDst)++ = out1;
00002a  f8414b04          STR      r4,[r1],#4
;;;124        *__SIMD32(pDst)++ = out2;
00002e  1e5b              SUBS     r3,r3,#1
000030  f8416b04          STR      r6,[r1],#4
                  |L1.52|
000034  2b00              CMP      r3,#0                 ;93
000036  d1e7              BNE      |L1.8|
;;;125    
;;;126        /* Decrement the loop counter */
;;;127        blkCnt--;
;;;128      }
;;;129    
;;;130      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;131       ** No loop unrolling is used. */
;;;132      blkCnt = blockSize % 0x4u;
000038  f0020203          AND      r2,r2,#3
;;;133    
;;;134    #else
;;;135    
;;;136      /* Run the below code for Cortex-M0 */
;;;137    
;;;138      /* Loop over blockSize number of values */
;;;139      blkCnt = blockSize;
;;;140    
;;;141    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;142    
;;;143      while(blkCnt > 0u)
00003c  e006              B        |L1.76|
;;;144      {
;;;145        /* C = (q15_t) A << 8 */
;;;146        /* convert from q7 to q15 and then store the results in the destination buffer */
;;;147        *pDst++ = (q15_t) * pIn++ << 8;
00003e  bf00              NOP      
                  |L1.64|
000040  f8103b01          LDRB     r3,[r0],#1
000044  021b              LSLS     r3,r3,#8
000046  f8213b02          STRH     r3,[r1],#2
00004a  1e52              SUBS     r2,r2,#1
                  |L1.76|
00004c  2a00              CMP      r2,#0                 ;143
00004e  d1f7              BNE      |L1.64|
;;;148    
;;;149        /* Decrement the loop counter */
;;;150        blkCnt--;
;;;151      }
;;;152    
;;;153    }
000050  bd70              POP      {r4-r6,pc}
;;;154    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\SupportFunctions\\arm_q7_to_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q7_to_q15_c_a710392d____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_q7_to_q15_c_a710392d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q7_to_q15_c_a710392d____REVSH|
#line 144
|__asm___15_arm_q7_to_q15_c_a710392d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_q7_to_q15_c_a710392d____RRX|
#line 300
|__asm___15_arm_q7_to_q15_c_a710392d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
