; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_mag_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_q15.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_q15||, CODE, READONLY, ALIGN=1

                  arm_cmplx_mag_q15 PROC
;;;64     
;;;65     void arm_cmplx_mag_q15(
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;66       q15_t * pSrc,
;;;67       q15_t * pDst,
;;;68       uint32_t numSamples)
;;;69     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4693              MOV      r11,r2
;;;70       q31_t acc0, acc1;                              /* Accumulators */
;;;71     
;;;72     #ifndef ARM_MATH_CM0_FAMILY
;;;73     
;;;74       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;75       uint32_t blkCnt;                               /* loop counter */
;;;76       q31_t in1, in2, in3, in4;
;;;77       q31_t acc2, acc3;
;;;78     
;;;79     
;;;80       /*loop Unrolling */
;;;81       blkCnt = numSamples >> 2u;
00000a  ea4f069b          LSR      r6,r11,#2
00000e  e026              B        |L1.94|
                  |L1.16|
;;;82     
;;;83       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;84        ** a second loop below computes the remaining 1 to 3 samples. */
;;;85       while(blkCnt > 0u)
;;;86       {
;;;87     
;;;88         /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
;;;89         in1 = *__SIMD32(pSrc)++;
000010  682b              LDR      r3,[r5,#0]
;;;90         in2 = *__SIMD32(pSrc)++;
000012  686a              LDR      r2,[r5,#4]
;;;91         in3 = *__SIMD32(pSrc)++;
000014  68a9              LDR      r1,[r5,#8]
;;;92         in4 = *__SIMD32(pSrc)++;
000016  68e8              LDR      r0,[r5,#0xc]
000018  3510              ADDS     r5,r5,#0x10
;;;93     
;;;94         acc0 = __SMUAD(in1, in1);
00001a  fb23f303          SMUAD    r3,r3,r3
;;;95         acc1 = __SMUAD(in2, in2);
00001e  fb22f802          SMUAD    r8,r2,r2
;;;96         acc2 = __SMUAD(in3, in3);
000022  fb21f901          SMUAD    r9,r1,r1
;;;97         acc3 = __SMUAD(in4, in4);
000026  fb20fa00          SMUAD    r10,r0,r0
;;;98     
;;;99         /* store the result in 2.14 format in the destination buffer. */
;;;100        arm_sqrt_q15((q15_t) ((acc0) >> 17), pDst++);
00002a  4621              MOV      r1,r4
00002c  1ca4              ADDS     r4,r4,#2
00002e  1458              ASRS     r0,r3,#17
000030  f7fffffe          BL       arm_sqrt_q15
;;;101        arm_sqrt_q15((q15_t) ((acc1) >> 17), pDst++);
000034  1ca7              ADDS     r7,r4,#2
000036  ea4f4068          ASR      r0,r8,#17
00003a  4621              MOV      r1,r4
00003c  f7fffffe          BL       arm_sqrt_q15
;;;102        arm_sqrt_q15((q15_t) ((acc2) >> 17), pDst++);
000040  f1070802          ADD      r8,r7,#2
000044  4639              MOV      r1,r7
000046  ea4f4069          ASR      r0,r9,#17
00004a  f7fffffe          BL       arm_sqrt_q15
;;;103        arm_sqrt_q15((q15_t) ((acc3) >> 17), pDst++);
00004e  f1080402          ADD      r4,r8,#2
000052  4641              MOV      r1,r8
000054  ea4f406a          ASR      r0,r10,#17
000058  f7fffffe          BL       arm_sqrt_q15
;;;104    
;;;105        /* Decrement the loop counter */
;;;106        blkCnt--;
00005c  1e76              SUBS     r6,r6,#1
                  |L1.94|
00005e  2e00              CMP      r6,#0                 ;85
000060  d1d6              BNE      |L1.16|
;;;107      }
;;;108    
;;;109      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;110       ** No loop unrolling is used. */
;;;111      blkCnt = numSamples % 0x4u;
000062  f00b0603          AND      r6,r11,#3
;;;112    
;;;113      while(blkCnt > 0u)
000066  e009              B        |L1.124|
                  |L1.104|
;;;114      {
;;;115        /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
;;;116        in1 = *__SIMD32(pSrc)++;
000068  f8550b04          LDR      r0,[r5],#4
;;;117        acc0 = __SMUAD(in1, in1);
00006c  fb20f000          SMUAD    r0,r0,r0
;;;118    
;;;119        /* store the result in 2.14 format in the destination buffer. */
;;;120        arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
000070  4621              MOV      r1,r4
000072  1ca4              ADDS     r4,r4,#2
000074  1440              ASRS     r0,r0,#17
000076  f7fffffe          BL       arm_sqrt_q15
;;;121    
;;;122        /* Decrement the loop counter */
;;;123        blkCnt--;
00007a  1e76              SUBS     r6,r6,#1
                  |L1.124|
00007c  2e00              CMP      r6,#0                 ;113
00007e  d1f3              BNE      |L1.104|
;;;124      }
;;;125    
;;;126    #else
;;;127    
;;;128      /* Run the below code for Cortex-M0 */
;;;129      q15_t real, imag;                              /* Temporary variables to hold input values */
;;;130    
;;;131      while(numSamples > 0u)
;;;132      {
;;;133        /* out = sqrt(real * real + imag * imag) */
;;;134        real = *pSrc++;
;;;135        imag = *pSrc++;
;;;136    
;;;137        acc0 = (real * real);
;;;138        acc1 = (imag * imag);
;;;139    
;;;140        /* store the result in 2.14 format in the destination buffer. */
;;;141        arm_sqrt_q15((q15_t) (((q63_t) acc0 + acc1) >> 17), pDst++);
;;;142    
;;;143        /* Decrement the loop counter */
;;;144        numSamples--;
;;;145      }
;;;146    
;;;147    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;148    
;;;149    }
000080  e8bd9ff0          POP      {r4-r12,pc}
;;;150    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_q15_c_09edda57____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_cmplx_mag_q15_c_09edda57____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_q15_c_09edda57____REVSH|
#line 144
|__asm___19_arm_cmplx_mag_q15_c_09edda57____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_q15_c_09edda57____RRX|
#line 300
|__asm___19_arm_cmplx_mag_q15_c_09edda57____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
