; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_partial_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_partial_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_partial_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_partial_q31.c]
                          THUMB

                          AREA ||i.arm_conv_partial_q31||, CODE, READONLY, ALIGN=2

                  arm_conv_partial_q31 PROC
;;;65     
;;;66     arm_status arm_conv_partial_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;67       q31_t * pSrcA,
;;;68       uint32_t srcALen,
;;;69       q31_t * pSrcB,
;;;70       uint32_t srcBLen,
;;;71       q31_t * pDst,
;;;72       uint32_t firstIndex,
;;;73       uint32_t numPoints)
;;;74     {
000004  b095              SUB      sp,sp,#0x54
000006  e9dd1423          LDRD     r1,r4,[sp,#0x8c]
;;;75     
;;;76     
;;;77     #ifndef ARM_MATH_CM0_FAMILY
;;;78     
;;;79       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;80     
;;;81       q31_t *pIn1;                                   /* inputA pointer               */
;;;82       q31_t *pIn2;                                   /* inputB pointer               */
;;;83       q31_t *pOut = pDst;                            /* output pointer               */
;;;84       q31_t *px;                                     /* Intermediate inputA pointer  */
;;;85       q31_t *py;                                     /* Intermediate inputB pointer  */
;;;86       q31_t *pSrc1, *pSrc2;                          /* Intermediate pointers        */
;;;87       q63_t sum, acc0, acc1, acc2;                   /* Accumulator                  */
;;;88       q31_t x0, x1, x2, c0;
;;;89       uint32_t j, k, count, check, blkCnt;
;;;90       int32_t blockSize1, blockSize2, blockSize3;    /* loop counter                 */
;;;91       arm_status status;                             /* status of Partial convolution */
;;;92     
;;;93     
;;;94       /* Check for range of output samples to be calculated */
;;;95       if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
00000a  9f16              LDR      r7,[sp,#0x58]
00000c  190d              ADDS     r5,r1,r4
00000e  441f              ADD      r7,r7,r3
000010  1e7f              SUBS     r7,r7,#1
000012  9e22              LDR      r6,[sp,#0x88]
000014  42bd              CMP      r5,r7
000016  d904              BLS      |L1.34|
;;;96       {
;;;97         /* Set status as ARM_MATH_ARGUMENT_ERROR */
;;;98         status = ARM_MATH_ARGUMENT_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L1.28|
;;;99       }
;;;100      else
;;;101      {
;;;102    
;;;103        /* The algorithm implementation is based on the lengths of the inputs. */
;;;104        /* srcB is always made to slide across srcA. */
;;;105        /* So srcBLen is always considered as shorter or equal to srcALen */
;;;106        if(srcALen >= srcBLen)
;;;107        {
;;;108          /* Initialization of inputA pointer */
;;;109          pIn1 = pSrcA;
;;;110    
;;;111          /* Initialization of inputB pointer */
;;;112          pIn2 = pSrcB;
;;;113        }
;;;114        else
;;;115        {
;;;116          /* Initialization of inputA pointer */
;;;117          pIn1 = pSrcB;
;;;118    
;;;119          /* Initialization of inputB pointer */
;;;120          pIn2 = pSrcA;
;;;121    
;;;122          /* srcBLen is always considered as shorter or equal to srcALen */
;;;123          j = srcBLen;
;;;124          srcBLen = srcALen;
;;;125          srcALen = j;
;;;126        }
;;;127    
;;;128        /* Conditions to check which loopCounter holds    
;;;129         * the first and last indices of the output samples to be calculated. */
;;;130        check = firstIndex + numPoints;
;;;131        blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
;;;132        blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;
;;;133        blockSize1 = (((int32_t) srcBLen - 1) - (int32_t) firstIndex);
;;;134        blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
;;;135                                         (int32_t) numPoints) : 0;
;;;136        blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
;;;137                                        (int32_t) firstIndex);
;;;138        blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
;;;139    
;;;140        /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;141        /* The function is internally    
;;;142         * divided into three stages according to the number of multiplications that has to be    
;;;143         * taken place between inputA samples and inputB samples. In the first stage of the    
;;;144         * algorithm, the multiplications increase by one for every iteration.    
;;;145         * In the second stage of the algorithm, srcBLen number of multiplications are done.    
;;;146         * In the third stage of the algorithm, the multiplications decrease by one    
;;;147         * for every iteration. */
;;;148    
;;;149        /* Set the output pointer to point to the firstIndex    
;;;150         * of the output sample to be calculated. */
;;;151        pOut = pDst + firstIndex;
;;;152    
;;;153        /* --------------------------    
;;;154         * Initializations of stage1    
;;;155         * -------------------------*/
;;;156    
;;;157        /* sum = x[0] * y[0]    
;;;158         * sum = x[0] * y[1] + x[1] * y[0]    
;;;159         * ....    
;;;160         * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]    
;;;161         */
;;;162    
;;;163        /* In this stage the MAC operations are increased by 1 for every iteration.    
;;;164           The count variable holds the number of MAC operations performed.    
;;;165           Since the partial convolution starts from firstIndex    
;;;166           Number of Macs to be performed is firstIndex + 1 */
;;;167        count = 1u + firstIndex;
;;;168    
;;;169        /* Working pointer of inputA */
;;;170        px = pIn1;
;;;171    
;;;172        /* Working pointer of inputB */
;;;173        pSrc2 = pIn2 + firstIndex;
;;;174        py = pSrc2;
;;;175    
;;;176        /* ------------------------    
;;;177         * Stage1 process    
;;;178         * ----------------------*/
;;;179    
;;;180        /* The first loop starts here */
;;;181        while(blockSize1 > 0)
;;;182        {
;;;183          /* Accumulator is made zero for every iteration */
;;;184          sum = 0;
;;;185    
;;;186          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;187          k = count >> 2u;
;;;188    
;;;189          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;190           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;191          while(k > 0u)
;;;192          {
;;;193            /* x[0] * y[srcBLen - 1] */
;;;194            sum += (q63_t) * px++ * (*py--);
;;;195            /* x[1] * y[srcBLen - 2] */
;;;196            sum += (q63_t) * px++ * (*py--);
;;;197            /* x[2] * y[srcBLen - 3] */
;;;198            sum += (q63_t) * px++ * (*py--);
;;;199            /* x[3] * y[srcBLen - 4] */
;;;200            sum += (q63_t) * px++ * (*py--);
;;;201    
;;;202            /* Decrement the loop counter */
;;;203            k--;
;;;204          }
;;;205    
;;;206          /* If the count is not a multiple of 4, compute any remaining MACs here.    
;;;207           ** No loop unrolling is used. */
;;;208          k = count % 0x4u;
;;;209    
;;;210          while(k > 0u)
;;;211          {
;;;212            /* Perform the multiply-accumulate */
;;;213            sum += (q63_t) * px++ * (*py--);
;;;214    
;;;215            /* Decrement the loop counter */
;;;216            k--;
;;;217          }
;;;218    
;;;219          /* Store the result in the accumulator in the destination buffer. */
;;;220          *pOut++ = (q31_t) (sum >> 31);
;;;221    
;;;222          /* Update the inputA and inputB pointers for next MAC calculation */
;;;223          py = ++pSrc2;
;;;224          px = pIn1;
;;;225    
;;;226          /* Increment the MAC count */
;;;227          count++;
;;;228    
;;;229          /* Decrement the loop counter */
;;;230          blockSize1--;
;;;231        }
;;;232    
;;;233        /* --------------------------    
;;;234         * Initializations of stage2    
;;;235         * ------------------------*/
;;;236    
;;;237        /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]    
;;;238         * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]    
;;;239         * ....    
;;;240         * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]    
;;;241         */
;;;242    
;;;243        /* Working pointer of inputA */
;;;244        if((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
;;;245        {
;;;246          px = pIn1 + firstIndex - srcBLen + 1;
;;;247        }
;;;248        else
;;;249        {
;;;250          px = pIn1;
;;;251        }
;;;252    
;;;253        /* Working pointer of inputB */
;;;254        pSrc2 = pIn2 + (srcBLen - 1u);
;;;255        py = pSrc2;
;;;256    
;;;257        /* count is index by which the pointer pIn1 to be incremented */
;;;258        count = 0u;
;;;259    
;;;260        /* -------------------    
;;;261         * Stage2 process    
;;;262         * ------------------*/
;;;263    
;;;264        /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.    
;;;265         * So, to loop unroll over blockSize2,    
;;;266         * srcBLen should be greater than or equal to 4 */
;;;267        if(srcBLen >= 4u)
;;;268        {
;;;269          /* Loop unroll over blkCnt */
;;;270    
;;;271          blkCnt = blockSize2 / 3;
;;;272          while(blkCnt > 0u)
;;;273          {
;;;274            /* Set all accumulators to zero */
;;;275            acc0 = 0;
;;;276            acc1 = 0;
;;;277            acc2 = 0;
;;;278    
;;;279            /* read x[0], x[1] samples */
;;;280            x0 = *(px++);
;;;281            x1 = *(px++);
;;;282    
;;;283            /* Apply loop unrolling and compute 3 MACs simultaneously. */
;;;284            k = srcBLen / 3;
;;;285    
;;;286            /* First part of the processing with loop unrolling.  Compute 3 MACs at a time.        
;;;287             ** a second loop below computes MACs for the remaining 1 to 2 samples. */
;;;288            do
;;;289            {
;;;290              /* Read y[srcBLen - 1] sample */
;;;291              c0 = *(py);
;;;292    
;;;293              /* Read x[2] sample */
;;;294              x2 = *(px);
;;;295    
;;;296              /* Perform the multiply-accumulates */
;;;297              /* acc0 +=  x[0] * y[srcBLen - 1] */
;;;298              acc0 += (q63_t) x0 *c0;
;;;299              /* acc1 +=  x[1] * y[srcBLen - 1] */
;;;300              acc1 += (q63_t) x1 *c0;
;;;301              /* acc2 +=  x[2] * y[srcBLen - 1] */
;;;302              acc2 += (q63_t) x2 *c0;
;;;303    
;;;304              /* Read y[srcBLen - 2] sample */
;;;305              c0 = *(py - 1u);
;;;306    
;;;307              /* Read x[3] sample */
;;;308              x0 = *(px + 1u);
;;;309    
;;;310              /* Perform the multiply-accumulate */
;;;311              /* acc0 +=  x[1] * y[srcBLen - 2] */
;;;312              acc0 += (q63_t) x1 *c0;
;;;313              /* acc1 +=  x[2] * y[srcBLen - 2] */
;;;314              acc1 += (q63_t) x2 *c0;
;;;315              /* acc2 +=  x[3] * y[srcBLen - 2] */
;;;316              acc2 += (q63_t) x0 *c0;
;;;317    
;;;318              /* Read y[srcBLen - 3] sample */
;;;319              c0 = *(py - 2u);
;;;320    
;;;321              /* Read x[4] sample */
;;;322              x1 = *(px + 2u);
;;;323    
;;;324              /* Perform the multiply-accumulates */
;;;325              /* acc0 +=  x[2] * y[srcBLen - 3] */
;;;326              acc0 += (q63_t) x2 *c0;
;;;327              /* acc1 +=  x[3] * y[srcBLen - 2] */
;;;328              acc1 += (q63_t) x0 *c0;
;;;329              /* acc2 +=  x[4] * y[srcBLen - 2] */
;;;330              acc2 += (q63_t) x1 *c0;
;;;331    
;;;332    
;;;333              px += 3u;
;;;334    
;;;335              py -= 3u;
;;;336    
;;;337            } while(--k);
;;;338    
;;;339            /* If the srcBLen is not a multiple of 3, compute any remaining MACs here.        
;;;340             ** No loop unrolling is used. */
;;;341            k = srcBLen - (3 * (srcBLen / 3));
;;;342    
;;;343            while(k > 0u)
;;;344            {
;;;345              /* Read y[srcBLen - 5] sample */
;;;346              c0 = *(py--);
;;;347    
;;;348              /* Read x[7] sample */
;;;349              x2 = *(px++);
;;;350    
;;;351              /* Perform the multiply-accumulates */
;;;352              /* acc0 +=  x[4] * y[srcBLen - 5] */
;;;353              acc0 += (q63_t) x0 *c0;
;;;354              /* acc1 +=  x[5] * y[srcBLen - 5] */
;;;355              acc1 += (q63_t) x1 *c0;
;;;356              /* acc2 +=  x[6] * y[srcBLen - 5] */
;;;357              acc2 += (q63_t) x2 *c0;
;;;358    
;;;359              /* Reuse the present samples for the next MAC */
;;;360              x0 = x1;
;;;361              x1 = x2;
;;;362    
;;;363              /* Decrement the loop counter */
;;;364              k--;
;;;365            }
;;;366    
;;;367            /* Store the result in the accumulator in the destination buffer. */
;;;368            *pOut++ = (q31_t) (acc0 >> 31);
;;;369            *pOut++ = (q31_t) (acc1 >> 31);
;;;370            *pOut++ = (q31_t) (acc2 >> 31);
;;;371    
;;;372            /* Increment the pointer pIn1 index, count by 3 */
;;;373            count += 3u;
;;;374    
;;;375            /* Update the inputA and inputB pointers for next MAC calculation */
;;;376            px = pIn1 + count;
;;;377            py = pSrc2;
;;;378    
;;;379            /* Decrement the loop counter */
;;;380            blkCnt--;
;;;381          }
;;;382    
;;;383          /* If the blockSize2 is not a multiple of 3, compute any remaining output samples here.        
;;;384           ** No loop unrolling is used. */
;;;385          blkCnt = blockSize2 - 3 * (blockSize2 / 3);
;;;386    
;;;387          while(blkCnt > 0u)
;;;388          {
;;;389            /* Accumulator is made zero for every iteration */
;;;390            sum = 0;
;;;391    
;;;392            /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;393            k = srcBLen >> 2u;
;;;394    
;;;395            /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;396             ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;397            while(k > 0u)
;;;398            {
;;;399              /* Perform the multiply-accumulates */
;;;400              sum += (q63_t) * px++ * (*py--);
;;;401              sum += (q63_t) * px++ * (*py--);
;;;402              sum += (q63_t) * px++ * (*py--);
;;;403              sum += (q63_t) * px++ * (*py--);
;;;404    
;;;405              /* Decrement the loop counter */
;;;406              k--;
;;;407            }
;;;408    
;;;409            /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.    
;;;410             ** No loop unrolling is used. */
;;;411            k = srcBLen % 0x4u;
;;;412    
;;;413            while(k > 0u)
;;;414            {
;;;415              /* Perform the multiply-accumulate */
;;;416              sum += (q63_t) * px++ * (*py--);
;;;417    
;;;418              /* Decrement the loop counter */
;;;419              k--;
;;;420            }
;;;421    
;;;422            /* Store the result in the accumulator in the destination buffer. */
;;;423            *pOut++ = (q31_t) (sum >> 31);
;;;424    
;;;425            /* Increment the MAC count */
;;;426            count++;
;;;427    
;;;428            /* Update the inputA and inputB pointers for next MAC calculation */
;;;429            px = pIn1 + count;
;;;430            py = pSrc2;
;;;431    
;;;432            /* Decrement the loop counter */
;;;433            blkCnt--;
;;;434          }
;;;435        }
;;;436        else
;;;437        {
;;;438          /* If the srcBLen is not a multiple of 4,    
;;;439           * the blockSize2 loop cannot be unrolled by 4 */
;;;440          blkCnt = (uint32_t) blockSize2;
;;;441    
;;;442          while(blkCnt > 0u)
;;;443          {
;;;444            /* Accumulator is made zero for every iteration */
;;;445            sum = 0;
;;;446    
;;;447            /* srcBLen number of MACS should be performed */
;;;448            k = srcBLen;
;;;449    
;;;450            while(k > 0u)
;;;451            {
;;;452              /* Perform the multiply-accumulate */
;;;453              sum += (q63_t) * px++ * (*py--);
;;;454    
;;;455              /* Decrement the loop counter */
;;;456              k--;
;;;457            }
;;;458    
;;;459            /* Store the result in the accumulator in the destination buffer. */
;;;460            *pOut++ = (q31_t) (sum >> 31);
;;;461    
;;;462            /* Increment the MAC count */
;;;463            count++;
;;;464    
;;;465            /* Update the inputA and inputB pointers for next MAC calculation */
;;;466            px = pIn1 + count;
;;;467            py = pSrc2;
;;;468    
;;;469            /* Decrement the loop counter */
;;;470            blkCnt--;
;;;471          }
;;;472        }
;;;473    
;;;474    
;;;475        /* --------------------------    
;;;476         * Initializations of stage3    
;;;477         * -------------------------*/
;;;478    
;;;479        /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]    
;;;480         * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]    
;;;481         * ....    
;;;482         * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]    
;;;483         * sum +=  x[srcALen-1] * y[srcBLen-1]    
;;;484         */
;;;485    
;;;486        /* In this stage the MAC operations are decreased by 1 for every iteration.    
;;;487           The blockSize3 variable holds the number of MAC operations performed */
;;;488        count = srcBLen - 1u;
;;;489    
;;;490        /* Working pointer of inputA */
;;;491        pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
;;;492        px = pSrc1;
;;;493    
;;;494        /* Working pointer of inputB */
;;;495        pSrc2 = pIn2 + (srcBLen - 1u);
;;;496        py = pSrc2;
;;;497    
;;;498        /* -------------------    
;;;499         * Stage3 process    
;;;500         * ------------------*/
;;;501    
;;;502        while(blockSize3 > 0)
;;;503        {
;;;504          /* Accumulator is made zero for every iteration */
;;;505          sum = 0;
;;;506    
;;;507          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;508          k = count >> 2u;
;;;509    
;;;510          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.    
;;;511           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;512          while(k > 0u)
;;;513          {
;;;514            sum += (q63_t) * px++ * (*py--);
;;;515            sum += (q63_t) * px++ * (*py--);
;;;516            sum += (q63_t) * px++ * (*py--);
;;;517            sum += (q63_t) * px++ * (*py--);
;;;518    
;;;519            /* Decrement the loop counter */
;;;520            k--;
;;;521          }
;;;522    
;;;523          /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.    
;;;524           ** No loop unrolling is used. */
;;;525          k = count % 0x4u;
;;;526    
;;;527          while(k > 0u)
;;;528          {
;;;529            /* Perform the multiply-accumulate */
;;;530            sum += (q63_t) * px++ * (*py--);
;;;531    
;;;532            /* Decrement the loop counter */
;;;533            k--;
;;;534          }
;;;535    
;;;536          /* Store the result in the accumulator in the destination buffer. */
;;;537          *pOut++ = (q31_t) (sum >> 31);
;;;538    
;;;539          /* Update the inputA and inputB pointers for next MAC calculation */
;;;540          px = ++pSrc1;
;;;541          py = pSrc2;
;;;542    
;;;543          /* Decrement the MAC count */
;;;544          count--;
;;;545    
;;;546          /* Decrement the loop counter */
;;;547          blockSize3--;
;;;548    
;;;549        }
;;;550    
;;;551        /* set status as ARM_MATH_SUCCESS */
;;;552        status = ARM_MATH_SUCCESS;
;;;553      }
;;;554    
;;;555      /* Return to application */
;;;556      return (status);
;;;557    
;;;558    #else
;;;559    
;;;560      /* Run the below code for Cortex-M0 */
;;;561    
;;;562      q31_t *pIn1 = pSrcA;                           /* inputA pointer */
;;;563      q31_t *pIn2 = pSrcB;                           /* inputB pointer */
;;;564      q63_t sum;                                     /* Accumulator */
;;;565      uint32_t i, j;                                 /* loop counters */
;;;566      arm_status status;                             /* status of Partial convolution */
;;;567    
;;;568      /* Check for range of output samples to be calculated */
;;;569      if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
;;;570      {
;;;571        /* Set status as ARM_ARGUMENT_ERROR */
;;;572        status = ARM_MATH_ARGUMENT_ERROR;
;;;573      }
;;;574      else
;;;575      {
;;;576        /* Loop to calculate convolution for output length number of values */
;;;577        for (i = firstIndex; i <= (firstIndex + numPoints - 1); i++)
;;;578        {
;;;579          /* Initialize sum with zero to carry on MAC operations */
;;;580          sum = 0;
;;;581    
;;;582          /* Loop to perform MAC operations according to convolution equation */
;;;583          for (j = 0; j <= i; j++)
;;;584          {
;;;585            /* Check the array limitations */
;;;586            if(((i - j) < srcBLen) && (j < srcALen))
;;;587            {
;;;588              /* z[i] += x[i-j] * y[j] */
;;;589              sum += ((q63_t) pIn1[j] * (pIn2[i - j]));
;;;590            }
;;;591          }
;;;592    
;;;593          /* Store the output in the destination buffer */
;;;594          pDst[i] = (q31_t) (sum >> 31u);
;;;595        }
;;;596        /* set status as ARM_SUCCESS as there are no argument errors */
;;;597        status = ARM_MATH_SUCCESS;
;;;598      }
;;;599      return (status);
;;;600    
;;;601    #endif /*    #ifndef ARM_MATH_CM0_FAMILY      */
;;;602    
;;;603    }
00001c  b019              ADD      sp,sp,#0x64
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.34|
000022  9f16              LDR      r7,[sp,#0x58]         ;106
000024  429f              CMP      r7,r3                 ;106
000026  d303              BCC      |L1.48|
000028  9012              STR      r0,[sp,#0x48]         ;131
00002a  4693              MOV      r11,r2                ;112
00002c  4638              MOV      r0,r7                 ;131
00002e  e004              B        |L1.58|
                  |L1.48|
000030  4683              MOV      r11,r0                ;120
000032  4618              MOV      r0,r3                 ;123
000034  463b              MOV      r3,r7                 ;124
000036  9212              STR      r2,[sp,#0x48]         ;125
000038  9016              STR      r0,[sp,#0x58]         ;125
                  |L1.58|
00003a  4285              CMP      r5,r0                 ;131
00003c  dd01              BLE      |L1.66|
00003e  1a28              SUBS     r0,r5,r0              ;131
000040  e000              B        |L1.68|
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;131
                  |L1.68|
000044  9a16              LDR      r2,[sp,#0x58]         ;132
000046  1e52              SUBS     r2,r2,#1              ;132
000048  4291              CMP      r1,r2                 ;132
00004a  dd02              BLE      |L1.82|
00004c  1a42              SUBS     r2,r0,r1              ;132
00004e  9816              LDR      r0,[sp,#0x58]         ;132
000050  4410              ADD      r0,r0,r2              ;132
                  |L1.82|
000052  900a              STR      r0,[sp,#0x28]         ;133
000054  1a58              SUBS     r0,r3,r1              ;133
000056  1e40              SUBS     r0,r0,#1              ;133
000058  2800              CMP      r0,#0                 ;134
00005a  dd04              BLE      |L1.102|
00005c  1e5a              SUBS     r2,r3,#1              ;134
00005e  4295              CMP      r5,r2                 ;134
000060  d902              BLS      |L1.104|
000062  4604              MOV      r4,r0                 ;134
000064  e000              B        |L1.104|
                  |L1.102|
000066  2400              MOVS     r4,#0                 ;135
                  |L1.104|
000068  980a              LDR      r0,[sp,#0x28]         ;136
00006a  46a2              MOV      r10,r4                ;135
00006c  4450              ADD      r0,r0,r10             ;136
00006e  4408              ADD      r0,r0,r1              ;136
000070  1a28              SUBS     r0,r5,r0              ;136
000072  2800              CMP      r0,#0                 ;138
000074  dc00              BGT      |L1.120|
000076  2000              MOVS     r0,#0                 ;138
                  |L1.120|
000078  9011              STR      r0,[sp,#0x44]         ;151
00007a  eb060081          ADD      r0,r6,r1,LSL #2       ;151
00007e  9001              STR      r0,[sp,#4]            ;170
000080  eb0b0281          ADD      r2,r11,r1,LSL #2      ;173
000084  f1010e01          ADD      lr,r1,#1              ;167
000088  9812              LDR      r0,[sp,#0x48]         ;173
00008a  920b              STR      r2,[sp,#0x2c]         ;181
00008c  e049              B        |L1.290|
                  |L1.142|
00008e  2700              MOVS     r7,#0                 ;181
000090  463c              MOV      r4,r7                 ;181
000092  ea4f059e          LSR      r5,lr,#2              ;187
000096  e024              B        |L1.226|
                  |L1.152|
000098  6806              LDR      r6,[r0,#0]            ;194
00009a  f8d2c000          LDR      r12,[r2,#0]           ;194
00009e  fb86c60c          SMULL    r12,r6,r6,r12         ;194
0000a2  eb1c0807          ADDS     r8,r12,r7             ;194
0000a6  4166              ADCS     r6,r6,r4              ;194
0000a8  f8527c04          LDR      r7,[r2,#-4]           ;196
0000ac  6844              LDR      r4,[r0,#4]            ;196
0000ae  f852cc08          LDR      r12,[r2,#-8]          ;198
0000b2  fb847407          SMULL    r7,r4,r4,r7           ;196
0000b6  eb170808          ADDS     r8,r7,r8              ;196
0000ba  6887              LDR      r7,[r0,#8]            ;198
0000bc  4174              ADCS     r4,r4,r6              ;196
0000be  fb876c0c          SMULL    r6,r12,r7,r12         ;198
0000c2  eb160808          ADDS     r8,r6,r8              ;198
0000c6  eb4c0c04          ADC      r12,r12,r4            ;198
0000ca  f8526c0c          LDR      r6,[r2,#-0xc]         ;200
0000ce  68c4              LDR      r4,[r0,#0xc]          ;200
0000d0  3010              ADDS     r0,r0,#0x10           ;200
0000d2  fb847406          SMULL    r7,r4,r4,r6           ;200
0000d6  3a10              SUBS     r2,r2,#0x10           ;200
0000d8  eb170708          ADDS     r7,r7,r8              ;200
0000dc  eb44040c          ADC      r4,r4,r12             ;200
0000e0  1e6d              SUBS     r5,r5,#1              ;200
                  |L1.226|
0000e2  2d00              CMP      r5,#0                 ;191
0000e4  d1d8              BNE      |L1.152|
0000e6  f00e0503          AND      r5,lr,#3              ;208
0000ea  e008              B        |L1.254|
                  |L1.236|
0000ec  c840              LDM      r0!,{r6}              ;213
0000ee  f852c904          LDR      r12,[r2],#-4          ;213
0000f2  fb86c60c          SMULL    r12,r6,r6,r12         ;213
0000f6  eb1c0707          ADDS     r7,r12,r7             ;213
0000fa  4174              ADCS     r4,r4,r6              ;213
0000fc  1e6d              SUBS     r5,r5,#1              ;213
                  |L1.254|
0000fe  2d00              CMP      r5,#0                 ;210
000100  d1f4              BNE      |L1.236|
000102  9a01              LDR      r2,[sp,#4]            ;220
000104  0ff8              LSRS     r0,r7,#31             ;220
000106  ea400044          ORR      r0,r0,r4,LSL #1       ;220
00010a  6010              STR      r0,[r2,#0]            ;220
00010c  9801              LDR      r0,[sp,#4]            ;220
00010e  f10e0e01          ADD      lr,lr,#1              ;227
000112  1d00              ADDS     r0,r0,#4              ;220
000114  9001              STR      r0,[sp,#4]            ;223
000116  9a0b              LDR      r2,[sp,#0x2c]         ;223
000118  9812              LDR      r0,[sp,#0x48]         ;230
00011a  1d12              ADDS     r2,r2,#4              ;223
00011c  920b              STR      r2,[sp,#0x2c]         ;224
00011e  f1aa0a01          SUB      r10,r10,#1            ;230
                  |L1.290|
000122  f1ba0f00          CMP      r10,#0                ;181
000126  dcb2              BGT      |L1.142|
000128  1aca              SUBS     r2,r1,r3              ;244
00012a  1c52              ADDS     r2,r2,#1              ;244
00012c  2a00              CMP      r2,#0                 ;244
00012e  dd04              BLE      |L1.314|
000130  eb000081          ADD      r0,r0,r1,LSL #2       ;246
000134  eba00083          SUB      r0,r0,r3,LSL #2       ;246
000138  1d00              ADDS     r0,r0,#4              ;246
                  |L1.314|
00013a  eb0b0183          ADD      r1,r11,r3,LSL #2      ;254
00013e  9114              STR      r1,[sp,#0x50]         ;254
000140  1f09              SUBS     r1,r1,#4              ;254
000142  2200              MOVS     r2,#0                 ;258
000144  9213              STR      r2,[sp,#0x4c]         ;267
000146  910b              STR      r1,[sp,#0x2c]         ;267
000148  2b04              CMP      r3,#4                 ;267
00014a  d37c              BCC      |L1.582|
00014c  9c11              LDR      r4,[sp,#0x44]         ;271
00014e  2203              MOVS     r2,#3                 ;271
000150  fb94f4f2          SDIV     r4,r4,r2              ;271
000154  4622              MOV      r2,r4                 ;272
000156  9410              STR      r4,[sp,#0x40]         ;272
000158  e08f              B        |L1.634|
00015a  bf00              NOP                            ;272
                  |L1.348|
00015c  f04f0c00          MOV      r12,#0                ;272
000160  2403              MOVS     r4,#3                 ;284
000162  fbb3f4f4          UDIV     r4,r3,r4              ;284
000166  f8cdc014          STR      r12,[sp,#0x14]        ;277
00016a  e8f06202          LDRD     r6,r2,[r0],#8         ;277
00016e  46e2              MOV      r10,r12               ;275
000170  46e6              MOV      lr,r12                ;276
000172  46e1              MOV      r9,r12                ;277
000174  46e3              MOV      r11,r12               ;277
000176  940f              STR      r4,[sp,#0x3c]         ;284
                  |L1.376|
000178  f8517904          LDR      r7,[r1],#-4           ;291
00017c  4654              MOV      r4,r10                ;298
00017e  fbc6c407          SMLAL    r12,r4,r6,r7          ;298
000182  46a2              MOV      r10,r4                ;298
000184  9d05              LDR      r5,[sp,#0x14]         ;300
000186  4674              MOV      r4,lr                 ;300
000188  fbc24507          SMLAL    r4,r5,r2,r7           ;300
00018c  f8508b04          LDR      r8,[r0],#4            ;294
000190  9505              STR      r5,[sp,#0x14]         ;302
000192  46a6              MOV      lr,r4                 ;300
000194  464c              MOV      r4,r9                 ;302
000196  465d              MOV      r5,r11                ;302
000198  fbc84507          SMLAL    r4,r5,r8,r7           ;302
00019c  46a1              MOV      r9,r4                 ;302
00019e  f8517904          LDR      r7,[r1],#-4           ;305
0001a2  4654              MOV      r4,r10                ;312
0001a4  fbc2c407          SMLAL    r12,r4,r2,r7          ;312
0001a8  46ab              MOV      r11,r5                ;302
0001aa  46a2              MOV      r10,r4                ;312
0001ac  9d05              LDR      r5,[sp,#0x14]         ;314
0001ae  4674              MOV      r4,lr                 ;314
0001b0  fbc84507          SMLAL    r4,r5,r8,r7           ;314
0001b4  c840              LDM      r0!,{r6}              ;308
0001b6  9505              STR      r5,[sp,#0x14]         ;316
0001b8  46a6              MOV      lr,r4                 ;314
0001ba  464c              MOV      r4,r9                 ;316
0001bc  465d              MOV      r5,r11                ;316
0001be  fbc64507          SMLAL    r4,r5,r6,r7           ;316
0001c2  46a1              MOV      r9,r4                 ;316
0001c4  f8517904          LDR      r7,[r1],#-4           ;319
0001c8  4654              MOV      r4,r10                ;326
0001ca  fbc8c407          SMLAL    r12,r4,r8,r7          ;326
0001ce  46ab              MOV      r11,r5                ;316
0001d0  46a2              MOV      r10,r4                ;326
0001d2  9d05              LDR      r5,[sp,#0x14]         ;328
0001d4  4674              MOV      r4,lr                 ;328
0001d6  fbc64507          SMLAL    r4,r5,r6,r7           ;328
0001da  c804              LDM      r0!,{r2}              ;322
0001dc  46a6              MOV      lr,r4                 ;328
0001de  9505              STR      r5,[sp,#0x14]         ;330
0001e0  464c              MOV      r4,r9                 ;330
0001e2  465d              MOV      r5,r11                ;330
0001e4  fbc24507          SMLAL    r4,r5,r2,r7           ;330
0001e8  46a1              MOV      r9,r4                 ;330
0001ea  9c0f              LDR      r4,[sp,#0x3c]         ;337
0001ec  46ab              MOV      r11,r5                ;330
0001ee  1e64              SUBS     r4,r4,#1              ;337
0001f0  940f              STR      r4,[sp,#0x3c]         ;337
0001f2  d1c1              BNE      |L1.376|
0001f4  2403              MOVS     r4,#3                 ;341
0001f6  fbb3f4f4          UDIV     r4,r3,r4              ;341
0001fa  eba40484          SUB      r4,r4,r4,LSL #2       ;341
0001fe  441c              ADD      r4,r4,r3              ;341
000200  e017              B        |L1.562|
000202  bf00              NOP                            ;346
                  |L1.516|
000204  f8514904          LDR      r4,[r1],#-4           ;346
000208  4655              MOV      r5,r10                ;353
00020a  fbc6c504          SMLAL    r12,r5,r6,r4          ;353
00020e  46aa              MOV      r10,r5                ;353
000210  9e05              LDR      r6,[sp,#0x14]         ;355
000212  4675              MOV      r5,lr                 ;355
000214  fbc25604          SMLAL    r5,r6,r2,r4           ;355
000218  c880              LDM      r0!,{r7}              ;349
00021a  46ae              MOV      lr,r5                 ;355
00021c  9605              STR      r6,[sp,#0x14]         ;357
00021e  464d              MOV      r5,r9                 ;357
000220  465e              MOV      r6,r11                ;357
000222  fbc75604          SMLAL    r5,r6,r7,r4           ;357
000226  46b3              MOV      r11,r6                ;357
000228  4616              MOV      r6,r2                 ;360
00022a  46a9              MOV      r9,r5                 ;357
00022c  463a              MOV      r2,r7                 ;361
00022e  f1a80401          SUB      r4,r8,#1              ;364
                  |L1.562|
000232  ea5f0804          MOVS     r8,r4                 ;341
000236  d1e5              BNE      |L1.516|
000238  9901              LDR      r1,[sp,#4]            ;368
00023a  ea4f70dc          LSR      r0,r12,#31            ;368
00023e  ea40004a          ORR      r0,r0,r10,LSL #1      ;368
000242  6008              STR      r0,[r1,#0]            ;368
000244  e000              B        |L1.584|
                  |L1.582|
000246  e070              B        |L1.810|
                  |L1.584|
000248  9a05              LDR      r2,[sp,#0x14]         ;369
00024a  9801              LDR      r0,[sp,#4]            ;369
00024c  ea4f71de          LSR      r1,lr,#31             ;369
000250  ea410142          ORR      r1,r1,r2,LSL #1       ;369
000254  6041              STR      r1,[r0,#4]            ;370
000256  ea4f71d9          LSR      r1,r9,#31             ;370
00025a  ea41014b          ORR      r1,r1,r11,LSL #1      ;370
00025e  6081              STR      r1,[r0,#8]            ;370
000260  300c              ADDS     r0,r0,#0xc            ;370
000262  9001              STR      r0,[sp,#4]            ;373
000264  9813              LDR      r0,[sp,#0x4c]         ;373
000266  9a10              LDR      r2,[sp,#0x40]         ;380
000268  1cc0              ADDS     r0,r0,#3              ;373
00026a  9013              STR      r0,[sp,#0x4c]         ;373
00026c  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;373
000270  eb000081          ADD      r0,r0,r1,LSL #2       ;376
000274  1e52              SUBS     r2,r2,#1              ;380
000276  990b              LDR      r1,[sp,#0x2c]         ;380
000278  9210              STR      r2,[sp,#0x40]         ;380
                  |L1.634|
00027a  2a00              CMP      r2,#0                 ;272
00027c  f47faf6e          BNE      |L1.348|
000280  9a11              LDR      r2,[sp,#0x44]         ;385
000282  2403              MOVS     r4,#3                 ;385
000284  fb92f2f4          SDIV     r2,r2,r4              ;385
000288  eba20482          SUB      r4,r2,r2,LSL #2       ;385
00028c  9a11              LDR      r2,[sp,#0x44]         ;385
00028e  4422              ADD      r2,r2,r4              ;385
000290  e047              B        |L1.802|
                  |L1.658|
000292  2500              MOVS     r5,#0                 ;387
000294  462e              MOV      r6,r5                 ;387
000296  089c              LSRS     r4,r3,#2              ;393
000298  e022              B        |L1.736|
                  |L1.666|
00029a  6802              LDR      r2,[r0,#0]            ;400
00029c  f8d1c000          LDR      r12,[r1,#0]           ;400
0002a0  f1a1070c          SUB      r7,r1,#0xc
0002a4  fb82c20c          SMULL    r12,r2,r2,r12         ;400
0002a8  eb1c0505          ADDS     r5,r12,r5             ;400
0002ac  4172              ADCS     r2,r2,r6              ;400
0002ae  f851cc04          LDR      r12,[r1,#-4]          ;401
0002b2  6846              LDR      r6,[r0,#4]            ;401
0002b4  683f              LDR      r7,[r7,#0]            ;403
0002b6  fb86c60c          SMULL    r12,r6,r6,r12         ;401
0002ba  eb1c0505          ADDS     r5,r12,r5             ;401
0002be  4156              ADCS     r6,r6,r2              ;401
0002c0  f851cc08          LDR      r12,[r1,#-8]          ;402
0002c4  6882              LDR      r2,[r0,#8]            ;402
0002c6  fb82c20c          SMULL    r12,r2,r2,r12         ;402
0002ca  eb1c0505          ADDS     r5,r12,r5             ;402
0002ce  4172              ADCS     r2,r2,r6              ;402
0002d0  68c6              LDR      r6,[r0,#0xc]          ;403
0002d2  3010              ADDS     r0,r0,#0x10           ;403
0002d4  fb867607          SMULL    r7,r6,r6,r7           ;403
0002d8  3910              SUBS     r1,r1,#0x10           ;403
0002da  197d              ADDS     r5,r7,r5              ;403
0002dc  4156              ADCS     r6,r6,r2              ;403
0002de  1e64              SUBS     r4,r4,#1              ;403
                  |L1.736|
0002e0  2c00              CMP      r4,#0                 ;397
0002e2  d1da              BNE      |L1.666|
0002e4  f0030203          AND      r2,r3,#3              ;411
0002e8  e007              B        |L1.762|
                  |L1.746|
0002ea  c810              LDM      r0!,{r4}              ;416
0002ec  f8517904          LDR      r7,[r1],#-4           ;416
0002f0  fb847407          SMULL    r7,r4,r4,r7           ;416
0002f4  197d              ADDS     r5,r7,r5              ;416
0002f6  4166              ADCS     r6,r6,r4              ;416
0002f8  1e52              SUBS     r2,r2,#1              ;416
                  |L1.762|
0002fa  2a00              CMP      r2,#0                 ;413
0002fc  d1f5              BNE      |L1.746|
0002fe  9901              LDR      r1,[sp,#4]            ;423
000300  0fe8              LSRS     r0,r5,#31             ;423
000302  ea400046          ORR      r0,r0,r6,LSL #1       ;423
000306  6008              STR      r0,[r1,#0]            ;423
000308  9801              LDR      r0,[sp,#4]            ;423
00030a  f1a80201          SUB      r2,r8,#1              ;433
00030e  1d00              ADDS     r0,r0,#4              ;423
000310  9001              STR      r0,[sp,#4]            ;426
000312  9813              LDR      r0,[sp,#0x4c]         ;426
000314  1c40              ADDS     r0,r0,#1              ;426
000316  9013              STR      r0,[sp,#0x4c]         ;426
000318  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;426
00031c  eb000081          ADD      r0,r0,r1,LSL #2       ;429
000320  990b              LDR      r1,[sp,#0x2c]         ;433
                  |L1.802|
000322  ea5f0802          MOVS     r8,r2                 ;385
000326  d1b4              BNE      |L1.658|
000328  e023              B        |L1.882|
                  |L1.810|
00032a  9e11              LDR      r6,[sp,#0x44]         ;442
00032c  e01f              B        |L1.878|
                  |L1.814|
00032e  2400              MOVS     r4,#0                 ;442
000330  4622              MOV      r2,r4                 ;442
000332  461d              MOV      r5,r3                 ;448
000334  e008              B        |L1.840|
                  |L1.822|
000336  c880              LDM      r0!,{r7}              ;453
000338  f851c904          LDR      r12,[r1],#-4          ;453
00033c  fb87c70c          SMULL    r12,r7,r7,r12         ;453
000340  eb1c0404          ADDS     r4,r12,r4             ;453
000344  417a              ADCS     r2,r2,r7              ;453
000346  1e6d              SUBS     r5,r5,#1              ;453
                  |L1.840|
000348  2d00              CMP      r5,#0                 ;450
00034a  d1f4              BNE      |L1.822|
00034c  9901              LDR      r1,[sp,#4]            ;460
00034e  0fe0              LSRS     r0,r4,#31             ;460
000350  ea400042          ORR      r0,r0,r2,LSL #1       ;460
000354  6008              STR      r0,[r1,#0]            ;460
000356  9801              LDR      r0,[sp,#4]            ;460
000358  1d00              ADDS     r0,r0,#4              ;460
00035a  9001              STR      r0,[sp,#4]            ;463
00035c  9813              LDR      r0,[sp,#0x4c]         ;463
00035e  1c40              ADDS     r0,r0,#1              ;463
000360  9013              STR      r0,[sp,#0x4c]         ;463
000362  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;463
000366  eb000081          ADD      r0,r0,r1,LSL #2       ;466
00036a  990b              LDR      r1,[sp,#0x2c]         ;467
00036c  1e76              SUBS     r6,r6,#1              ;467
                  |L1.878|
00036e  2e00              CMP      r6,#0                 ;442
000370  d1dd              BNE      |L1.814|
                  |L1.882|
000372  9916              LDR      r1,[sp,#0x58]         ;491
000374  9812              LDR      r0,[sp,#0x48]         ;491
000376  9a14              LDR      r2,[sp,#0x50]         ;492
000378  eb000081          ADD      r0,r0,r1,LSL #2       ;491
00037c  1e5c              SUBS     r4,r3,#1              ;488
00037e  eba00883          SUB      r8,r0,r3,LSL #2       ;491
000382  f1080804          ADD      r8,r8,#4              ;491
000386  1f12              SUBS     r2,r2,#4              ;492
000388  4640              MOV      r0,r8                 ;492
00038a  4691              MOV      r9,r2                 ;495
00038c  990a              LDR      r1,[sp,#0x28]         ;502
00038e  e045              B        |L1.1052|
                  |L1.912|
000390  2600              MOVS     r6,#0                 ;502
000392  4631              MOV      r1,r6                 ;502
000394  08a5              LSRS     r5,r4,#2              ;508
000396  e022              B        |L1.990|
                  |L1.920|
000398  6803              LDR      r3,[r0,#0]            ;514
00039a  f8d2c000          LDR      r12,[r2,#0]           ;514
00039e  f1a2070c          SUB      r7,r2,#0xc
0003a2  fb83c30c          SMULL    r12,r3,r3,r12         ;514
0003a6  eb1c0606          ADDS     r6,r12,r6             ;514
0003aa  414b              ADCS     r3,r3,r1              ;514
0003ac  f852cc04          LDR      r12,[r2,#-4]          ;515
0003b0  6841              LDR      r1,[r0,#4]            ;515
0003b2  683f              LDR      r7,[r7,#0]            ;517
0003b4  fb81c10c          SMULL    r12,r1,r1,r12         ;515
0003b8  eb1c0606          ADDS     r6,r12,r6             ;515
0003bc  4159              ADCS     r1,r1,r3              ;515
0003be  f852cc08          LDR      r12,[r2,#-8]          ;516
0003c2  6883              LDR      r3,[r0,#8]            ;516
0003c4  fb83c30c          SMULL    r12,r3,r3,r12         ;516
0003c8  eb1c0606          ADDS     r6,r12,r6             ;516
0003cc  414b              ADCS     r3,r3,r1              ;516
0003ce  68c1              LDR      r1,[r0,#0xc]          ;517
0003d0  3010              ADDS     r0,r0,#0x10           ;517
0003d2  fb817107          SMULL    r7,r1,r1,r7           ;517
0003d6  3a10              SUBS     r2,r2,#0x10           ;517
0003d8  19be              ADDS     r6,r7,r6              ;517
0003da  4159              ADCS     r1,r1,r3              ;517
0003dc  1e6d              SUBS     r5,r5,#1              ;517
                  |L1.990|
0003de  2d00              CMP      r5,#0                 ;512
0003e0  d1da              BNE      |L1.920|
0003e2  f0040303          AND      r3,r4,#3              ;525
0003e6  e007              B        |L1.1016|
                  |L1.1000|
0003e8  c820              LDM      r0!,{r5}              ;530
0003ea  f8527904          LDR      r7,[r2],#-4           ;530
0003ee  fb857507          SMULL    r7,r5,r5,r7           ;530
0003f2  19be              ADDS     r6,r7,r6              ;530
0003f4  4169              ADCS     r1,r1,r5              ;530
0003f6  1e5b              SUBS     r3,r3,#1              ;530
                  |L1.1016|
0003f8  2b00              CMP      r3,#0                 ;527
0003fa  d1f5              BNE      |L1.1000|
0003fc  0ff0              LSRS     r0,r6,#31             ;537
0003fe  ea400041          ORR      r0,r0,r1,LSL #1       ;537
000402  9901              LDR      r1,[sp,#4]            ;537
000404  464a              MOV      r2,r9                 ;541
000406  6008              STR      r0,[r1,#0]            ;537
000408  9801              LDR      r0,[sp,#4]            ;537
00040a  990a              LDR      r1,[sp,#0x28]         ;547
00040c  1d00              ADDS     r0,r0,#4              ;537
00040e  9001              STR      r0,[sp,#4]            ;540
000410  1e49              SUBS     r1,r1,#1              ;547
000412  f1080004          ADD      r0,r8,#4              ;540
000416  4680              MOV      r8,r0                 ;540
000418  1e64              SUBS     r4,r4,#1              ;547
00041a  910a              STR      r1,[sp,#0x28]         ;547
                  |L1.1052|
00041c  2900              CMP      r1,#0                 ;502
00041e  dcb7              BGT      |L1.912|
000420  2000              MOVS     r0,#0                 ;552
000422  e5fb              B        |L1.28|
;;;604    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_partial_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_conv_partial_q31_c_105a42e8____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___22_arm_conv_partial_q31_c_105a42e8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_conv_partial_q31_c_105a42e8____REVSH|
#line 144
|__asm___22_arm_conv_partial_q31_c_105a42e8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_conv_partial_q31_c_105a42e8____RRX|
#line 300
|__asm___22_arm_conv_partial_q31_c_105a42e8____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
