; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_power_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_power_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_power_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_power_f32.c]
                          THUMB

                          AREA ||i.arm_power_f32||, CODE, READONLY, ALIGN=2

                  arm_power_f32 PROC
;;;75     
;;;76     void arm_power_f32(
000000  ed9f0a12          VLDR     s0,|L1.76|
;;;77       float32_t * pSrc,
;;;78       uint32_t blockSize,
;;;79       float32_t * pResult)
;;;80     {
;;;81       float32_t sum = 0.0f;                          /* accumulator */
;;;82       float32_t in;                                  /* Temporary variable to store input value */
;;;83       uint32_t blkCnt;                               /* loop counter */
;;;84     
;;;85     #ifndef ARM_MATH_CM0_FAMILY
;;;86     
;;;87       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;88     
;;;89       /*loop Unrolling */
;;;90       blkCnt = blockSize >> 2u;
000004  088b              LSRS     r3,r1,#2
000006  e011              B        |L1.44|
                  |L1.8|
;;;91     
;;;92       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;93        ** a second loop below computes the remaining 1 to 3 samples. */
;;;94       while(blkCnt > 0u)
;;;95       {
;;;96         /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;97         /* Compute Power and then store the result in a temporary variable, sum. */
;;;98         in = *pSrc++;
000008  edd00a00          VLDR     s1,[r0,#0]
;;;99         sum += in * in;
00000c  ee000aa0          VMLA.F32 s0,s1,s1
;;;100        in = *pSrc++;
000010  edd00a01          VLDR     s1,[r0,#4]
;;;101        sum += in * in;
000014  ee000aa0          VMLA.F32 s0,s1,s1
;;;102        in = *pSrc++;
000018  edd00a02          VLDR     s1,[r0,#8]
;;;103        sum += in * in;
00001c  ee000aa0          VMLA.F32 s0,s1,s1
;;;104        in = *pSrc++;
000020  edd00a03          VLDR     s1,[r0,#0xc]
;;;105        sum += in * in;
000024  3010              ADDS     r0,r0,#0x10
000026  1e5b              SUBS     r3,r3,#1
000028  ee000aa0          VMLA.F32 s0,s1,s1
                  |L1.44|
00002c  2b00              CMP      r3,#0                 ;94
00002e  d1eb              BNE      |L1.8|
;;;106    
;;;107        /* Decrement the loop counter */
;;;108        blkCnt--;
;;;109      }
;;;110    
;;;111      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;112       ** No loop unrolling is used. */
;;;113      blkCnt = blockSize % 0x4u;
000030  f0010103          AND      r1,r1,#3
;;;114    
;;;115    
;;;116    #else
;;;117    
;;;118      /* Run the below code for Cortex-M0 */
;;;119    
;;;120      /* Loop over blockSize number of values */
;;;121      blkCnt = blockSize;
;;;122    
;;;123    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;124    
;;;125    
;;;126      while(blkCnt > 0u)
000034  e005              B        |L1.66|
;;;127      {
;;;128        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;129        /* compute power and then store the result in a temporary variable, sum. */
;;;130        in = *pSrc++;
000036  bf00              NOP      
                  |L1.56|
000038  ecf00a01          VLDM     r0!,{s1}
;;;131        sum += in * in;
00003c  1e49              SUBS     r1,r1,#1
00003e  ee000aa0          VMLA.F32 s0,s1,s1
                  |L1.66|
000042  2900              CMP      r1,#0                 ;126
000044  d1f8              BNE      |L1.56|
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
;;;135      }
;;;136    
;;;137      /* Store the result to the destination */
;;;138      *pResult = sum;
000046  ed820a00          VSTR     s0,[r2,#0]
;;;139    }
00004a  4770              BX       lr
;;;140    
                          ENDP

                  |L1.76|
00004c  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_power_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_f32_c_2f3b723f____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___15_arm_power_f32_c_2f3b723f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_f32_c_2f3b723f____REVSH|
#line 144
|__asm___15_arm_power_f32_c_2f3b723f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_arm_power_f32_c_2f3b723f____RRX|
#line 300
|__asm___15_arm_power_f32_c_2f3b723f____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
