; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_min_q7.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_min_q7.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_min_q7.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_min_q7.c]
                          THUMB

                          AREA ||i.arm_min_q7||, CODE, READONLY, ALIGN=2

                  arm_min_q7 PROC
;;;62     
;;;63     void arm_min_q7(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;64       q7_t * pSrc,
;;;65       uint32_t blockSize,
;;;66       q7_t * pResult,
;;;67       uint32_t * pIndex)
;;;68     {
000004  4699              MOV      r9,r3
;;;69     #ifndef ARM_MATH_CM0_FAMILY
;;;70     
;;;71       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;72     
;;;73       q7_t minVal1, minVal2, out;                    /* Temporary variables to store the output value. */
;;;74       uint32_t blkCnt, outIndex, count;              /* loop counter */
;;;75     
;;;76       /* Initialise the count value. */
;;;77       count = 0u;
000006  2400              MOVS     r4,#0
;;;78       /* Initialise the index value to zero. */
;;;79       outIndex = 0u;
;;;80       /* Load first input value that act as reference value for comparision */
;;;81       out = *pSrc++;
;;;82     
;;;83       /* Loop unrolling */
;;;84       blkCnt = (blockSize - 1u) >> 2u;
000008  f1a10c01          SUB      r12,r1,#1
00000c  4625              MOV      r5,r4                 ;79
00000e  f9103b01          LDRSB    r3,[r0],#1            ;81
000012  ea4f069c          LSR      r6,r12,#2
000016  e019              B        |L1.76|
                  |L1.24|
;;;85     
;;;86       while(blkCnt > 0)
;;;87       {
;;;88         /* Initialize minVal to the next consecutive values one by one */
;;;89         minVal1 = *pSrc++;
000018  f9107b01          LDRSB    r7,[r0],#1
;;;90         minVal2 = *pSrc++;
00001c  f9108b01          LDRSB    r8,[r0],#1
;;;91     
;;;92         /* compare for the minimum value */
;;;93         if(out > minVal1)
000020  42bb              CMP      r3,r7
000022  dd01              BLE      |L1.40|
;;;94         {
;;;95           /* Update the minimum value and its index */
;;;96           out = minVal1;
000024  463b              MOV      r3,r7
;;;97           outIndex = count + 1u;
000026  1c65              ADDS     r5,r4,#1
                  |L1.40|
;;;98         }
;;;99     
;;;100        minVal1 = *pSrc++;
000028  f9107b01          LDRSB    r7,[r0],#1
;;;101    
;;;102        /* compare for the minimum value */
;;;103        if(out > minVal2)
00002c  4543              CMP      r3,r8
00002e  dd01              BLE      |L1.52|
;;;104        {
;;;105          /* Update the minimum value and its index */
;;;106          out = minVal2;
000030  4643              MOV      r3,r8
;;;107          outIndex = count + 2u;
000032  1ca5              ADDS     r5,r4,#2
                  |L1.52|
;;;108        }
;;;109    
;;;110        minVal2 = *pSrc++;
000034  f9108b01          LDRSB    r8,[r0],#1
;;;111    
;;;112        /* compare for the minimum value */
;;;113        if(out > minVal1)
000038  42bb              CMP      r3,r7
00003a  dd01              BLE      |L1.64|
;;;114        {
;;;115          /* Update the minimum value and its index */
;;;116          out = minVal1;
00003c  463b              MOV      r3,r7
;;;117          outIndex = count + 3u;
00003e  1ce5              ADDS     r5,r4,#3
                  |L1.64|
;;;118        }
;;;119    
;;;120        /* compare for the minimum value */
;;;121        if(out > minVal2)
000040  4543              CMP      r3,r8
000042  dd01              BLE      |L1.72|
;;;122        {
;;;123          /* Update the minimum value and its index */
;;;124          out = minVal2;
000044  4643              MOV      r3,r8
;;;125          outIndex = count + 4u;
000046  1d25              ADDS     r5,r4,#4
                  |L1.72|
000048  1d24              ADDS     r4,r4,#4
00004a  1e76              SUBS     r6,r6,#1
                  |L1.76|
00004c  2e00              CMP      r6,#0                 ;86
00004e  d1e3              BNE      |L1.24|
;;;126        }
;;;127    
;;;128        count += 4u;
;;;129    
;;;130        blkCnt--;
;;;131      }
;;;132    
;;;133      /* if (blockSize - 1u ) is not multiple of 4 */
;;;134      blkCnt = (blockSize - 1u) % 4u;
000050  f00c0403          AND      r4,r12,#3
;;;135    
;;;136    #else
;;;137    
;;;138      /* Run the below code for Cortex-M0 */
;;;139    
;;;140      q7_t minVal1, out;                             /* Temporary variables to store the output value. */
;;;141      uint32_t blkCnt, outIndex;                     /* loop counter */
;;;142    
;;;143      /* Initialise the index value to zero. */
;;;144      outIndex = 0u;
;;;145      /* Load first input value that act as reference value for comparision */
;;;146      out = *pSrc++;
;;;147    
;;;148      blkCnt = (blockSize - 1u);
;;;149    
;;;150    #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;151    
;;;152      while(blkCnt > 0)
000054  e007              B        |L1.102|
;;;153      {
;;;154        /* Initialize minVal to the next consecutive values one by one */
;;;155        minVal1 = *pSrc++;
000056  bf00              NOP      
                  |L1.88|
000058  f9106b01          LDRSB    r6,[r0],#1
;;;156    
;;;157        /* compare for the minimum value */
;;;158        if(out > minVal1)
00005c  42b3              CMP      r3,r6
00005e  dd01              BLE      |L1.100|
;;;159        {
;;;160          /* Update the minimum value and it's index */
;;;161          out = minVal1;
000060  4633              MOV      r3,r6
;;;162          outIndex = blockSize - blkCnt;
000062  1b0d              SUBS     r5,r1,r4
                  |L1.100|
000064  1e64              SUBS     r4,r4,#1
                  |L1.102|
000066  2c00              CMP      r4,#0                 ;152
000068  d1f6              BNE      |L1.88|
;;;163        }
;;;164    
;;;165        blkCnt--;
;;;166    
;;;167      }
;;;168    
;;;169      /* Store the minimum value and its index into destination pointers */
;;;170      *pResult = out;
00006a  7013              STRB     r3,[r2,#0]
;;;171      *pIndex = outIndex;
00006c  f8c95000          STR      r5,[r9,#0]
;;;172    
;;;173    
;;;174    }
000070  e8bd83f0          POP      {r4-r9,pc}
;;;175    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_min_q7.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_min_q7_c_8f41cde2____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___12_arm_min_q7_c_8f41cde2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_min_q7_c_8f41cde2____REVSH|
#line 144
|__asm___12_arm_min_q7_c_8f41cde2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_arm_min_q7_c_8f41cde2____RRX|
#line 300
|__asm___12_arm_min_q7_c_8f41cde2____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
