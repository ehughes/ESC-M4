; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_dot_prod_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_dot_prod_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_dot_prod_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_dot_prod_q15.c]
                          THUMB

                          AREA ||i.arm_dot_prod_q15||, CODE, READONLY, ALIGN=1

                  arm_dot_prod_q15 PROC
;;;68     
;;;69     void arm_dot_prod_q15(
000000  b5f0              PUSH     {r4-r7,lr}
;;;70       q15_t * pSrcA,
;;;71       q15_t * pSrcB,
;;;72       uint32_t blockSize,
;;;73       q63_t * result)
;;;74     {
;;;75       q63_t sum = 0;                                 /* Temporary result storage */
000002  2400              MOVS     r4,#0
000004  4625              MOV      r5,r4
;;;76       uint32_t blkCnt;                               /* loop counter */
;;;77     
;;;78     #ifndef ARM_MATH_CM0_FAMILY
;;;79     
;;;80     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;81     
;;;82     
;;;83       /*loop Unrolling */
;;;84       blkCnt = blockSize >> 2u;
000006  0896              LSRS     r6,r2,#2
000008  e00b              B        |L1.34|
                  |L1.10|
;;;85     
;;;86       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;87        ** a second loop below computes the remaining 1 to 3 samples. */
;;;88       while(blkCnt > 0u)
;;;89       {
;;;90         /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;91         /* Calculate dot product and then store the result in a temporary buffer. */
;;;92         sum = __SMLALD(*__SIMD32(pSrcA)++, *__SIMD32(pSrcB)++, sum);
00000a  6807              LDR      r7,[r0,#0]
00000c  f851cb04          LDR      r12,[r1],#4
000010  fbc745cc          SMLALD   r4,r5,r7,r12
;;;93         sum = __SMLALD(*__SIMD32(pSrcA)++, *__SIMD32(pSrcB)++, sum);
000014  6847              LDR      r7,[r0,#4]
000016  f851cb04          LDR      r12,[r1],#4
00001a  3008              ADDS     r0,r0,#8
00001c  fbc745cc          SMLALD   r4,r5,r7,r12
;;;94     
;;;95         /* Decrement the loop counter */
;;;96         blkCnt--;
000020  1e76              SUBS     r6,r6,#1
                  |L1.34|
000022  2e00              CMP      r6,#0                 ;88
000024  d1f1              BNE      |L1.10|
;;;97       }
;;;98     
;;;99       /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;100       ** No loop unrolling is used. */
;;;101      blkCnt = blockSize % 0x4u;
000026  f0020203          AND      r2,r2,#3
;;;102    
;;;103      while(blkCnt > 0u)
00002a  e006              B        |L1.58|
                  |L1.44|
;;;104      {
;;;105        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;106        /* Calculate dot product and then store the results in a temporary buffer. */
;;;107        sum = __SMLALD(*pSrcA++, *pSrcB++, sum);
00002c  f9307b02          LDRSH    r7,[r0],#2
000030  f9316b02          LDRSH    r6,[r1],#2
000034  fbc745c6          SMLALD   r4,r5,r7,r6
;;;108    
;;;109        /* Decrement the loop counter */
;;;110        blkCnt--;
000038  1e52              SUBS     r2,r2,#1
                  |L1.58|
00003a  2a00              CMP      r2,#0                 ;103
00003c  d1f6              BNE      |L1.44|
;;;111      }
;;;112    
;;;113    
;;;114    #else
;;;115    
;;;116      /* Run the below code for Cortex-M0 */
;;;117    
;;;118      /* Initialize blkCnt with number of samples */
;;;119      blkCnt = blockSize;
;;;120    
;;;121      while(blkCnt > 0u)
;;;122      {
;;;123        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;124        /* Calculate dot product and then store the results in a temporary buffer. */
;;;125        sum += (q63_t) ((q31_t) * pSrcA++ * *pSrcB++);
;;;126    
;;;127        /* Decrement the loop counter */
;;;128        blkCnt--;
;;;129      }
;;;130    
;;;131    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;132    
;;;133      /* Store the result in the destination buffer in 34.30 format */
;;;134      *result = sum;
00003e  c330              STM      r3!,{r4,r5}
;;;135    
;;;136    }
000040  bdf0              POP      {r4-r7,pc}
;;;137    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_dot_prod_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q15_c_6ea05d16____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_dot_prod_q15_c_6ea05d16____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q15_c_6ea05d16____REVSH|
#line 144
|__asm___18_arm_dot_prod_q15_c_6ea05d16____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q15_c_6ea05d16____RRX|
#line 300
|__asm___18_arm_dot_prod_q15_c_6ea05d16____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
