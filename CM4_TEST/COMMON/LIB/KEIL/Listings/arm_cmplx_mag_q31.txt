; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_mag_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_mag_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_mag_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_mag_q31.c]
                          THUMB

                          AREA ||i.arm_cmplx_mag_q31||, CODE, READONLY, ALIGN=1

                  arm_cmplx_mag_q31 PROC
;;;64     
;;;65     void arm_cmplx_mag_q31(
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;66       q31_t * pSrc,
;;;67       q31_t * pDst,
;;;68       uint32_t numSamples)
;;;69     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;70       q31_t real, imag;                              /* Temporary variables to hold input values */
;;;71       q31_t acc0, acc1;                              /* Accumulators */
;;;72       uint32_t blkCnt;                               /* loop counter */
;;;73     
;;;74     #ifndef ARM_MATH_CM0_FAMILY
;;;75     
;;;76       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;77       q31_t real1, real2, imag1, imag2;              /* Temporary variables to hold input values */
;;;78       q31_t out1, out2, out3, out4;                  /* Accumulators */
;;;79       q63_t mul1, mul2, mul3, mul4;                  /* Temporary variables */
;;;80     
;;;81     
;;;82       /*loop Unrolling */
;;;83       blkCnt = numSamples >> 2u;
000008  9802              LDR      r0,[sp,#8]
00000a  ea4f0890          LSR      r8,r0,#2
00000e  e03a              B        |L1.134|
                  |L1.16|
;;;84     
;;;85       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;86        ** a second loop below computes the remaining 1 to 3 samples. */
;;;87       while(blkCnt > 0u)
;;;88       {
;;;89         /* read complex input from source buffer */
;;;90         real1 = pSrc[0];
000010  6833              LDR      r3,[r6,#0]
;;;91         imag1 = pSrc[1];
000012  6872              LDR      r2,[r6,#4]
;;;92         real2 = pSrc[2];
000014  68b1              LDR      r1,[r6,#8]
;;;93         imag2 = pSrc[3];
000016  68f0              LDR      r0,[r6,#0xc]
;;;94     
;;;95         /* calculate power of input values */
;;;96         mul1 = (q63_t) real1 *real1;
000018  fb833503          SMULL    r3,r5,r3,r3
;;;97         mul2 = (q63_t) imag1 *imag1;
00001c  fb823202          SMULL    r3,r2,r2,r2
;;;98         mul3 = (q63_t) real2 *real2;
000020  fb811301          SMULL    r1,r3,r1,r1
;;;99         mul4 = (q63_t) imag2 *imag2;
000024  fb800400          SMULL    r0,r4,r0,r0
;;;100    
;;;101        /* get the result to 3.29 format */
;;;102        out1 = (q31_t) (mul1 >> 33);
000028  1068              ASRS     r0,r5,#1
;;;103        out2 = (q31_t) (mul2 >> 33);
00002a  1051              ASRS     r1,r2,#1
;;;104        out3 = (q31_t) (mul3 >> 33);
00002c  105a              ASRS     r2,r3,#1
;;;105        out4 = (q31_t) (mul4 >> 33);
00002e  1063              ASRS     r3,r4,#1
;;;106    
;;;107        /* add real and imaginary accumulators */
;;;108        out1 = out1 + out2;
000030  4408              ADD      r0,r0,r1
;;;109        out3 = out3 + out4;
000032  eb020b03          ADD      r11,r2,r3
;;;110    
;;;111        /* read complex input from source buffer */
;;;112        real1 = pSrc[4];
000036  6935              LDR      r5,[r6,#0x10]
;;;113        imag1 = pSrc[5];
000038  f8d6a014          LDR      r10,[r6,#0x14]
;;;114        real2 = pSrc[6];
00003c  f8d69018          LDR      r9,[r6,#0x18]
;;;115        imag2 = pSrc[7];
000040  69f4              LDR      r4,[r6,#0x1c]
;;;116    
;;;117        /* calculate square root */
;;;118        arm_sqrt_q31(out1, &pDst[0]);
000042  4639              MOV      r1,r7
000044  f7fffffe          BL       arm_sqrt_q31
;;;119    
;;;120        /* calculate power of input values */
;;;121        mul1 = (q63_t) real1 *real1;
000048  fb850505          SMULL    r0,r5,r5,r5
;;;122    
;;;123        /* calculate square root */
;;;124        arm_sqrt_q31(out3, &pDst[1]);
00004c  1d39              ADDS     r1,r7,#4
00004e  4658              MOV      r0,r11
000050  f7fffffe          BL       arm_sqrt_q31
;;;125    
;;;126        /* calculate power of input values */
;;;127        mul2 = (q63_t) imag1 *imag1;
000054  fb8a020a          SMULL    r0,r2,r10,r10
;;;128        mul3 = (q63_t) real2 *real2;
000058  fb890309          SMULL    r0,r3,r9,r9
;;;129        mul4 = (q63_t) imag2 *imag2;
00005c  fb840404          SMULL    r0,r4,r4,r4
;;;130    
;;;131        /* get the result to 3.29 format */
;;;132        out1 = (q31_t) (mul1 >> 33);
000060  1069              ASRS     r1,r5,#1
;;;133        out2 = (q31_t) (mul2 >> 33);
000062  1050              ASRS     r0,r2,#1
;;;134        out3 = (q31_t) (mul3 >> 33);
000064  105a              ASRS     r2,r3,#1
;;;135        out4 = (q31_t) (mul4 >> 33);
000066  1063              ASRS     r3,r4,#1
;;;136    
;;;137        /* add real and imaginary accumulators */
;;;138        out1 = out1 + out2;
000068  4408              ADD      r0,r0,r1
;;;139        out3 = out3 + out4;
00006a  18d4              ADDS     r4,r2,r3
;;;140    
;;;141        /* calculate square root */
;;;142        arm_sqrt_q31(out1, &pDst[2]);
00006c  f1070108          ADD      r1,r7,#8
000070  f7fffffe          BL       arm_sqrt_q31
;;;143    
;;;144        /* increment destination by 8 to process next samples */
;;;145        pSrc += 8u;
000074  3620              ADDS     r6,r6,#0x20
;;;146    
;;;147        /* calculate square root */
;;;148        arm_sqrt_q31(out3, &pDst[3]);
000076  f107010c          ADD      r1,r7,#0xc
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       arm_sqrt_q31
;;;149    
;;;150        /* increment destination by 4 to process next samples */
;;;151        pDst += 4u;
000080  3710              ADDS     r7,r7,#0x10
;;;152    
;;;153        /* Decrement the loop counter */
;;;154        blkCnt--;
000082  f1a80801          SUB      r8,r8,#1
                  |L1.134|
000086  f1b80f00          CMP      r8,#0                 ;87
00008a  d1c1              BNE      |L1.16|
;;;155      }
;;;156    
;;;157      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
;;;158       ** No loop unrolling is used. */
;;;159      blkCnt = numSamples % 0x4u;
00008c  9802              LDR      r0,[sp,#8]
00008e  f0000403          AND      r4,r0,#3
;;;160    
;;;161    #else
;;;162    
;;;163      /* Run the below code for Cortex-M0 */
;;;164      blkCnt = numSamples;
;;;165    
;;;166    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;167    
;;;168      while(blkCnt > 0u)
000092  e00e              B        |L1.178|
                  |L1.148|
;;;169      {
;;;170        /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
;;;171        real = *pSrc++;
000094  6830              LDR      r0,[r6,#0]
;;;172        imag = *pSrc++;
000096  6871              LDR      r1,[r6,#4]
000098  3608              ADDS     r6,r6,#8
;;;173        acc0 = (q31_t) (((q63_t) real * real) >> 33);
00009a  fb802000          SMULL    r2,r0,r0,r0
00009e  1042              ASRS     r2,r0,#1
;;;174        acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
0000a0  fb811001          SMULL    r1,r0,r1,r1
0000a4  1040              ASRS     r0,r0,#1
;;;175        /* store the result in 2.30 format in the destination buffer. */
;;;176        arm_sqrt_q31(acc0 + acc1, pDst++);
0000a6  4639              MOV      r1,r7
0000a8  1d3f              ADDS     r7,r7,#4
0000aa  4410              ADD      r0,r0,r2
0000ac  f7fffffe          BL       arm_sqrt_q31
;;;177    
;;;178        /* Decrement the loop counter */
;;;179        blkCnt--;
0000b0  1e64              SUBS     r4,r4,#1
                  |L1.178|
0000b2  2c00              CMP      r4,#0                 ;168
0000b4  d1ee              BNE      |L1.148|
;;;180      }
;;;181    }
0000b6  e8bd8ffe          POP      {r1-r11,pc}
;;;182    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_mag_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_q31_c_3cb67ccc____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_cmplx_mag_q31_c_3cb67ccc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_q31_c_3cb67ccc____REVSH|
#line 144
|__asm___19_arm_cmplx_mag_q31_c_3cb67ccc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_cmplx_mag_q31_c_3cb67ccc____RRX|
#line 300
|__asm___19_arm_cmplx_mag_q31_c_3cb67ccc____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
