; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_lms_norm_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_lms_norm_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_lms_norm_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_lms_norm_q31.c]
                          THUMB

                          AREA ||i.arm_lms_norm_q31||, CODE, READONLY, ALIGN=1

                  arm_lms_norm_q31 PROC
;;;79     
;;;80     void arm_lms_norm_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;81       arm_lms_norm_instance_q31 * S,
;;;82       q31_t * pSrc,
;;;83       q31_t * pRef,
;;;84       q31_t * pOut,
;;;85       q31_t * pErr,
;;;86       uint32_t blockSize)
;;;87     {
000004  4606              MOV      r6,r0
000006  b093              SUB      sp,sp,#0x4c
000008  e9d67001          LDRD     r7,r0,[r6,#4]
;;;88       q31_t *pState = S->pState;                     /* State pointer */
;;;89       q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
00000c  9921              LDR      r1,[sp,#0x84]
;;;90       q31_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;91       q31_t *px, *pb;                                /* Temporary pointers for state and coefficient buffers */
;;;92       q31_t mu = S->mu;                              /* Adaptive factor */
00000e  900d              STR      r0,[sp,#0x34]
000010  68f0              LDR      r0,[r6,#0xc]
;;;93       uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
000012  900c              STR      r0,[sp,#0x30]
000014  f8b6a000          LDRH     r10,[r6,#0]
;;;94       uint32_t tapCnt, blkCnt;                       /* Loop counters */
;;;95       q63_t energy;                                  /* Energy of the input */
;;;96       q63_t acc;                                     /* Accumulator */
;;;97       q31_t e = 0, d = 0;                            /* error, reference data sample */
;;;98       q31_t w = 0, in;                               /* weight factor and state */
;;;99       q31_t x0;                                      /* temporary variable to hold input sample */
;;;100    //  uint32_t shift = 32u - ((uint32_t) S->postShift + 1u);        /* Shift to be applied to the output */      
;;;101      q31_t errorXmu, oneByEnergy;                   /* Temporary variables to store error and mu product and reciprocal of energy */
;;;102      q31_t postShift;                               /* Post shift to be applied to weight after reciprocal calculation */
;;;103      q31_t coef;                                    /* Temporary variable for coef */
;;;104      q31_t acc_l, acc_h;                            /*  temporary input */
;;;105      uint32_t uShift = ((uint32_t) S->postShift + 1u);
000018  7c30              LDRB     r0,[r6,#0x10]
;;;106      uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
;;;107    
;;;108      energy = S->energy;
;;;109      x0 = S->x0;
;;;110    
;;;111      /* S->pState points to buffer which contains previous frame (numTaps - 1) samples */
;;;112      /* pStateCurnt points to the location where the new input data should be written */
;;;113      pStateCurnt = &(S->pState[(numTaps - 1u)]);
00001a  f06f0203          MVN      r2,#3
00001e  1c40              ADDS     r0,r0,#1              ;105
000020  900a              STR      r0,[sp,#0x28]         ;106
000022  f1c00020          RSB      r0,r0,#0x20           ;106
000026  900b              STR      r0,[sp,#0x2c]         ;108
000028  e9d6b006          LDRD     r11,r0,[r6,#0x18]
00002c  eb02028a          ADD      r2,r2,r10,LSL #2
000030  443a              ADD      r2,r2,r7
000032  9208              STR      r2,[sp,#0x20]
                  |L1.52|
;;;114    
;;;115      /* Loop over blockSize number of values */
;;;116      blkCnt = blockSize;
;;;117    
;;;118    
;;;119    #ifndef ARM_MATH_CM0_FAMILY
;;;120    
;;;121      /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;122    
;;;123      while(blkCnt > 0u)
000034  910f              STR      r1,[sp,#0x3c]
000036  2900              CMP      r1,#0
000038  d079              BEQ      |L1.302|
;;;124      {
;;;125    
;;;126        /* Copy the new input sample into the state buffer */
;;;127        *pStateCurnt++ = *pSrc;
00003a  9914              LDR      r1,[sp,#0x50]
00003c  9a08              LDR      r2,[sp,#0x20]
;;;128    
;;;129        /* Initialize pState pointer */
;;;130        px = pState;
;;;131    
;;;132        /* Initialize coeff pointer */
;;;133        pb = (pCoeffs);
;;;134    
;;;135        /* Read the sample from input buffer */
;;;136        in = *pSrc++;
;;;137    
;;;138        /* Update the energy calculation */
;;;139        energy = (q31_t) ((((q63_t) energy << 32) -
00003e  fb800500          SMULL    r0,r5,r0,r0
000042  6809              LDR      r1,[r1,#0]            ;127
000044  6011              STR      r1,[r2,#0]            ;127
000046  9908              LDR      r1,[sp,#0x20]         ;127
000048  9c14              LDR      r4,[sp,#0x50]         ;136
00004a  1d09              ADDS     r1,r1,#4              ;127
00004c  9b14              LDR      r3,[sp,#0x50]         ;136
00004e  1d24              ADDS     r4,r4,#4              ;136
000050  9108              STR      r1,[sp,#0x20]         ;133
000052  eb100c00          ADDS     r12,r0,r0
000056  681b              LDR      r3,[r3,#0]            ;136
000058  416d              ADCS     r5,r5,r5
00005a  f04f0800          MOV      r8,#0
00005e  ebb80c0c          SUBS     r12,r8,r12
000062  eb6b0005          SBC      r0,r11,r5
;;;140                           (((q63_t) x0 * x0) << 1)) >> 32);
;;;141        energy = (q31_t) (((((q63_t) in * in) << 1) + (energy << 32)) >> 32);
000066  fb835303          SMULL    r5,r3,r3,r3
00006a  196d              ADDS     r5,r5,r5
00006c  9414              STR      r4,[sp,#0x50]         ;139
00006e  415b              ADCS     r3,r3,r3
000070  eb150408          ADDS     r4,r5,r8
000074  eb430b00          ADC      r11,r3,r0
000078  990d              LDR      r1,[sp,#0x34]         ;136
;;;142    
;;;143        /* Set the accumulator to zero */
;;;144        acc = 0;
;;;145    
;;;146        /* Loop unrolling.  Process 4 taps at a time. */
;;;147        tapCnt = numTaps >> 2;
00007a  ea4f059a          LSR      r5,r10,#2
00007e  463a              MOV      r2,r7                 ;130
000080  4643              MOV      r3,r8                 ;141
000082  4640              MOV      r0,r8                 ;141
;;;148    
;;;149        while(tapCnt > 0u)
000084  9503              STR      r5,[sp,#0xc]
000086  e021              B        |L1.204|
                  |L1.136|
;;;150        {
;;;151          /* Perform the multiply-accumulate */
;;;152          acc += ((q63_t) (*px++)) * (*pb++);
000088  6814              LDR      r4,[r2,#0]
00008a  f851cb04          LDR      r12,[r1],#4
00008e  fb84c40c          SMULL    r12,r4,r4,r12
000092  eb1c0303          ADDS     r3,r12,r3
000096  4144              ADCS     r4,r4,r0
;;;153          acc += ((q63_t) (*px++)) * (*pb++);
000098  6850              LDR      r0,[r2,#4]
00009a  f851cb04          LDR      r12,[r1],#4
00009e  fb80c00c          SMULL    r12,r0,r0,r12
0000a2  eb1c0303          ADDS     r3,r12,r3
0000a6  4160              ADCS     r0,r0,r4
;;;154          acc += ((q63_t) (*px++)) * (*pb++);
0000a8  6894              LDR      r4,[r2,#8]
0000aa  f851cb04          LDR      r12,[r1],#4
0000ae  fb84c40c          SMULL    r12,r4,r4,r12
0000b2  eb1c0303          ADDS     r3,r12,r3
0000b6  4144              ADCS     r4,r4,r0
;;;155          acc += ((q63_t) (*px++)) * (*pb++);
0000b8  68d0              LDR      r0,[r2,#0xc]
0000ba  f851cb04          LDR      r12,[r1],#4
0000be  3210              ADDS     r2,r2,#0x10
0000c0  fb80c00c          SMULL    r12,r0,r0,r12
0000c4  eb1c0303          ADDS     r3,r12,r3
0000c8  4160              ADCS     r0,r0,r4
0000ca  1e6d              SUBS     r5,r5,#1
                  |L1.204|
0000cc  2d00              CMP      r5,#0                 ;149
0000ce  d1db              BNE      |L1.136|
;;;156    
;;;157          /* Decrement the loop counter */
;;;158          tapCnt--;
;;;159        }
;;;160    
;;;161        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;162        tapCnt = numTaps % 0x4u;
0000d0  f00a0403          AND      r4,r10,#3
;;;163    
;;;164        while(tapCnt > 0u)
0000d4  9402              STR      r4,[sp,#8]
0000d6  e008              B        |L1.234|
                  |L1.216|
;;;165        {
;;;166          /* Perform the multiply-accumulate */
;;;167          acc += ((q63_t) (*px++)) * (*pb++);
0000d8  ca20              LDM      r2!,{r5}
0000da  f851cb04          LDR      r12,[r1],#4
0000de  fb85c50c          SMULL    r12,r5,r5,r12
0000e2  eb1c0303          ADDS     r3,r12,r3
0000e6  4168              ADCS     r0,r0,r5
0000e8  1e64              SUBS     r4,r4,#1
                  |L1.234|
0000ea  2c00              CMP      r4,#0                 ;164
0000ec  d1f4              BNE      |L1.216|
;;;168    
;;;169          /* Decrement the loop counter */
;;;170          tapCnt--;
;;;171        }
;;;172    
;;;173        /* Converting the result to 1.31 format */
;;;174        /* Calc lower part of acc */
;;;175        acc_l = acc & 0xffffffff;
;;;176    
;;;177        /* Calc upper part of acc */
;;;178        acc_h = (acc >> 32) & 0xffffffff;
;;;179    
;;;180        acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
0000ee  990b              LDR      r1,[sp,#0x2c]
0000f0  40cb              LSRS     r3,r3,r1
0000f2  990a              LDR      r1,[sp,#0x28]
0000f4  4088              LSLS     r0,r0,r1
0000f6  4303              ORRS     r3,r3,r0
;;;181    
;;;182        /* Store the result from accumulator into the destination buffer. */
;;;183        *pOut++ = (q31_t) acc;
0000f8  9816              LDR      r0,[sp,#0x58]
0000fa  6003              STR      r3,[r0,#0]
0000fc  9816              LDR      r0,[sp,#0x58]
;;;184    
;;;185        /* Compute and store error */
;;;186        d = *pRef++;
0000fe  9a15              LDR      r2,[sp,#0x54]
000100  1d00              ADDS     r0,r0,#4              ;183
000102  9016              STR      r0,[sp,#0x58]
000104  9815              LDR      r0,[sp,#0x54]
000106  1d12              ADDS     r2,r2,#4
000108  6800              LDR      r0,[r0,#0]
;;;187        e = d - (q31_t) acc;
;;;188        *pErr++ = e;
00010a  9215              STR      r2,[sp,#0x54]
00010c  9a20              LDR      r2,[sp,#0x80]
00010e  1ac0              SUBS     r0,r0,r3              ;187
000110  9000              STR      r0,[sp,#0]
000112  6010              STR      r0,[r2,#0]
000114  9820              LDR      r0,[sp,#0x80]
;;;189    
;;;190        /* Calculates the reciprocal of energy */
;;;191        postShift = arm_recip_q31(energy + DELTA_Q31,
000116  f44f7280          MOV      r2,#0x100
00011a  1d00              ADDS     r0,r0,#4              ;188
00011c  9020              STR      r0,[sp,#0x80]
00011e  eb1b0502          ADDS     r5,r11,r2
000122  6972              LDR      r2,[r6,#0x14]
000124  2d00              CMP      r5,#0
000126  dd03              BLE      |L1.304|
000128  fab5f085          CLZ      r0,r5
00012c  e003              B        |L1.310|
                  |L1.302|
00012e  e089              B        |L1.580|
                  |L1.304|
000130  4268              RSBS     r0,r5,#0
000132  fab0f080          CLZ      r0,r0
                  |L1.310|
000136  1e40              SUBS     r0,r0,#1
000138  4085              LSLS     r5,r5,r0
00013a  9005              STR      r0,[sp,#0x14]
00013c  f3c56005          UBFX     r0,r5,#24,#6
000140  46c1              MOV      r9,r8
000142  f8520020          LDR      r0,[r2,r0,LSL #2]
000146  2400              MOVS     r4,#0
000148  ea4f78e5          ASR      r8,r5,#31
                  |L1.332|
00014c  fba53c00          UMULL    r3,r12,r5,r0
000150  fb08c100          MLA      r1,r8,r0,r12
000154  fb051109          MLA      r1,r5,r9,r1
000158  004a              LSLS     r2,r1,#1
00015a  ea4271d3          ORR      r1,r2,r3,LSR #31
00015e  f06f4200          MVN      r2,#0x80000000
000162  1a51              SUBS     r1,r2,r1
000164  fba00101          UMULL    r0,r1,r0,r1
000168  0f80              LSRS     r0,r0,#30
00016a  ea400081          ORR      r0,r0,r1,LSL #2
00016e  1789              ASRS     r1,r1,#30
000170  f7fffffe          BL       clip_q63_to_q31
000174  1c64              ADDS     r4,r4,#1
000176  2c02              CMP      r4,#2
000178  d3e8              BCC      |L1.332|
;;;192                                  &oneByEnergy, &S->recipTable[0]);
;;;193    
;;;194        /* Calculation of product of (e * mu) */
;;;195        errorXmu = (q31_t) (((q63_t) e * mu) >> 31);
00017a  9b0c              LDR      r3,[sp,#0x30]
00017c  9900              LDR      r1,[sp,#0]
;;;196    
;;;197        /* Weighting factor for the normalized version */
;;;198        w = clip_q63_to_q31(((q63_t) errorXmu * oneByEnergy) >> (31 - postShift));
00017e  9a05              LDR      r2,[sp,#0x14]
000180  fb811303          SMULL    r1,r3,r1,r3           ;195
000184  0fc9              LSRS     r1,r1,#31             ;195
000186  ea410143          ORR      r1,r1,r3,LSL #1       ;195
00018a  fb810100          SMULL    r0,r1,r1,r0
00018e  1c52              ADDS     r2,r2,#1
000190  f1c2021f          RSB      r2,r2,#0x1f
000194  f7fffffe          BL       __aeabi_lasr
000198  f7fffffe          BL       clip_q63_to_q31
00019c  4680              MOV      r8,r0
;;;199    
;;;200        /* Initialize pState pointer */
;;;201        px = pState;
00019e  463c              MOV      r4,r7
;;;202    
;;;203        /* Initialize coeff pointer */
;;;204        pb = (pCoeffs);
;;;205    
;;;206        /* Loop unrolling.  Process 4 taps at a time. */
;;;207        tapCnt = numTaps >> 2;
;;;208    
;;;209        /* Update filter coefficients */
;;;210        while(tapCnt > 0u)
0001a0  f8dd900c          LDR      r9,[sp,#0xc]
0001a4  9d0d              LDR      r5,[sp,#0x34]
0001a6  e033              B        |L1.528|
                  |L1.424|
;;;211        {
;;;212          /* Perform the multiply-accumulate */
;;;213    
;;;214          /* coef is in 2.30 format */
;;;215          coef = (q31_t) (((q63_t) w * (*px++)) >> (32));
0001a8  6821              LDR      r1,[r4,#0]
0001aa  fb58f001          SMMUL    r0,r8,r1
;;;216          /* get coef in 1.31 format by left shifting */
;;;217          *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
0001ae  0040              LSLS     r0,r0,#1
0001b0  682a              LDR      r2,[r5,#0]
0001b2  17c3              ASRS     r3,r0,#31
0001b4  1810              ADDS     r0,r2,r0
0001b6  eb4371e2          ADC      r1,r3,r2,ASR #31
0001ba  f7fffffe          BL       clip_q63_to_q31
;;;218          /* update coefficient buffer to next coefficient */
;;;219          pb++;
;;;220    
;;;221          coef = (q31_t) (((q63_t) w * (*px++)) >> (32));
0001be  6028              STR      r0,[r5,#0]
0001c0  6861              LDR      r1,[r4,#4]
0001c2  fb58f001          SMMUL    r0,r8,r1
;;;222          *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
0001c6  0040              LSLS     r0,r0,#1
0001c8  686a              LDR      r2,[r5,#4]
0001ca  17c3              ASRS     r3,r0,#31
0001cc  1810              ADDS     r0,r2,r0
0001ce  eb4371e2          ADC      r1,r3,r2,ASR #31
0001d2  f7fffffe          BL       clip_q63_to_q31
;;;223          pb++;
;;;224    
;;;225          coef = (q31_t) (((q63_t) w * (*px++)) >> (32));
0001d6  6068              STR      r0,[r5,#4]
0001d8  68a1              LDR      r1,[r4,#8]
0001da  fb58f001          SMMUL    r0,r8,r1
;;;226          *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
0001de  0040              LSLS     r0,r0,#1
0001e0  68aa              LDR      r2,[r5,#8]
0001e2  17c3              ASRS     r3,r0,#31
0001e4  1810              ADDS     r0,r2,r0
0001e6  eb4371e2          ADC      r1,r3,r2,ASR #31
0001ea  f7fffffe          BL       clip_q63_to_q31
;;;227          pb++;
;;;228    
;;;229          coef = (q31_t) (((q63_t) w * (*px++)) >> (32));
0001ee  60a8              STR      r0,[r5,#8]
0001f0  68e1              LDR      r1,[r4,#0xc]
0001f2  fb58f001          SMMUL    r0,r8,r1
;;;230          *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
0001f6  0040              LSLS     r0,r0,#1
0001f8  68ea              LDR      r2,[r5,#0xc]
0001fa  17c3              ASRS     r3,r0,#31
0001fc  3410              ADDS     r4,r4,#0x10
0001fe  1810              ADDS     r0,r2,r0
000200  eb4371e2          ADC      r1,r3,r2,ASR #31
000204  f7fffffe          BL       clip_q63_to_q31
;;;231          pb++;
;;;232    
;;;233          /* Decrement the loop counter */
;;;234          tapCnt--;
000208  60e8              STR      r0,[r5,#0xc]
00020a  f1a90901          SUB      r9,r9,#1
00020e  3510              ADDS     r5,r5,#0x10
                  |L1.528|
000210  f1b90f00          CMP      r9,#0                 ;210
000214  d1c8              BNE      |L1.424|
;;;235        }
;;;236    
;;;237        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;238        tapCnt = numTaps % 0x4u;
;;;239    
;;;240        while(tapCnt > 0u)
000216  9802              LDR      r0,[sp,#8]
000218  e00d              B        |L1.566|
                  |L1.538|
;;;241        {
;;;242          /* Perform the multiply-accumulate */
;;;243          coef = (q31_t) (((q63_t) w * (*px++)) >> (32));
00021a  cc02              LDM      r4!,{r1}
00021c  fb58f001          SMMUL    r0,r8,r1
;;;244          *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
000220  0040              LSLS     r0,r0,#1
000222  682a              LDR      r2,[r5,#0]
000224  17c3              ASRS     r3,r0,#31
000226  1810              ADDS     r0,r2,r0
000228  eb4371e2          ADC      r1,r3,r2,ASR #31
00022c  f7fffffe          BL       clip_q63_to_q31
000230  c501              STM      r5!,{r0}
;;;245          pb++;
;;;246    
;;;247          /* Decrement the loop counter */
;;;248          tapCnt--;
000232  f1a90001          SUB      r0,r9,#1
                  |L1.566|
000236  ea5f0900          MOVS     r9,r0                 ;238
00023a  d1ee              BNE      |L1.538|
;;;249        }
;;;250    
;;;251        /* Read the sample from state buffer */
;;;252        x0 = *pState;
;;;253    
;;;254        /* Advance state pointer by 1 for the next sample */
;;;255        pState = pState + 1;
;;;256    
;;;257        /* Decrement the loop counter */
;;;258        blkCnt--;
00023c  990f              LDR      r1,[sp,#0x3c]
00023e  cf01              LDM      r7!,{r0}              ;252
000240  1e49              SUBS     r1,r1,#1
000242  e6f7              B        |L1.52|
                  |L1.580|
000244  e9c6b006          STRD     r11,r0,[r6,#0x18]
;;;259      }
;;;260    
;;;261      /* Save energy and x0 values for the next frame */
;;;262      S->energy = (q31_t) energy;
;;;263      S->x0 = x0;
;;;264    
;;;265      /* Processing is complete. Now copy the last numTaps - 1 samples to the    
;;;266         satrt of the state buffer. This prepares the state buffer for the    
;;;267         next function call. */
;;;268    
;;;269      /* Points to the start of the pState buffer */
;;;270      pStateCurnt = S->pState;
;;;271    
;;;272      /* Loop unrolling for (numTaps - 1u) samples copy */
;;;273      tapCnt = (numTaps - 1u) >> 2u;
000248  f1aa0201          SUB      r2,r10,#1
00024c  0891              LSRS     r1,r2,#2
;;;274    
;;;275      /* copy data */
;;;276      while(tapCnt > 0u)
00024e  6870              LDR      r0,[r6,#4]
000250  e00c              B        |L1.620|
                  |L1.594|
;;;277      {
;;;278        *pStateCurnt++ = *pState++;
000252  cf08              LDM      r7!,{r3}
;;;279        *pStateCurnt++ = *pState++;
;;;280        *pStateCurnt++ = *pState++;
;;;281        *pStateCurnt++ = *pState++;
000254  1e49              SUBS     r1,r1,#1
000256  c008              STM      r0!,{r3}              ;278
000258  cf08              LDM      r7!,{r3}              ;279
00025a  c008              STM      r0!,{r3}              ;279
00025c  f8573b08          LDR      r3,[r7],#8            ;280
000260  f8403b08          STR      r3,[r0],#8            ;280
000264  f8573c04          LDR      r3,[r7,#-4]
000268  f8403c04          STR      r3,[r0,#-4]
                  |L1.620|
00026c  2900              CMP      r1,#0                 ;276
00026e  d1f0              BNE      |L1.594|
;;;282    
;;;283        /* Decrement the loop counter */
;;;284        tapCnt--;
;;;285      }
;;;286    
;;;287      /* Calculate remaining number of copies */
;;;288      tapCnt = (numTaps - 1u) % 0x4u;
000270  f0020103          AND      r1,r2,#3
;;;289    
;;;290      /* Copy the remaining q31_t data */
;;;291      while(tapCnt > 0u)
000274  e002              B        |L1.636|
                  |L1.630|
;;;292      {
;;;293        *pStateCurnt++ = *pState++;
000276  cf04              LDM      r7!,{r2}
000278  1e49              SUBS     r1,r1,#1
00027a  c004              STM      r0!,{r2}
                  |L1.636|
00027c  2900              CMP      r1,#0                 ;291
00027e  d1fa              BNE      |L1.630|
;;;294    
;;;295        /* Decrement the loop counter */
;;;296        tapCnt--;
;;;297      }
;;;298    
;;;299    #else
;;;300    
;;;301      /* Run the below code for Cortex-M0 */
;;;302    
;;;303      while(blkCnt > 0u)
;;;304      {
;;;305    
;;;306        /* Copy the new input sample into the state buffer */
;;;307        *pStateCurnt++ = *pSrc;
;;;308    
;;;309        /* Initialize pState pointer */
;;;310        px = pState;
;;;311    
;;;312        /* Initialize pCoeffs pointer */
;;;313        pb = pCoeffs;
;;;314    
;;;315        /* Read the sample from input buffer */
;;;316        in = *pSrc++;
;;;317    
;;;318        /* Update the energy calculation */
;;;319        energy =
;;;320          (q31_t) ((((q63_t) energy << 32) - (((q63_t) x0 * x0) << 1)) >> 32);
;;;321        energy = (q31_t) (((((q63_t) in * in) << 1) + (energy << 32)) >> 32);
;;;322    
;;;323        /* Set the accumulator to zero */
;;;324        acc = 0;
;;;325    
;;;326        /* Loop over numTaps number of values */
;;;327        tapCnt = numTaps;
;;;328    
;;;329        while(tapCnt > 0u)
;;;330        {
;;;331          /* Perform the multiply-accumulate */
;;;332          acc += ((q63_t) (*px++)) * (*pb++);
;;;333    
;;;334          /* Decrement the loop counter */
;;;335          tapCnt--;
;;;336        }
;;;337    
;;;338        /* Converting the result to 1.31 format */
;;;339        /* Converting the result to 1.31 format */
;;;340        /* Calc lower part of acc */
;;;341        acc_l = acc & 0xffffffff;
;;;342    
;;;343        /* Calc upper part of acc */
;;;344        acc_h = (acc >> 32) & 0xffffffff;
;;;345    
;;;346        acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
;;;347    
;;;348    
;;;349        //acc = (q31_t) (acc >> shift); 
;;;350    
;;;351        /* Store the result from accumulator into the destination buffer. */
;;;352        *pOut++ = (q31_t) acc;
;;;353    
;;;354        /* Compute and store error */
;;;355        d = *pRef++;
;;;356        e = d - (q31_t) acc;
;;;357        *pErr++ = e;
;;;358    
;;;359        /* Calculates the reciprocal of energy */
;;;360        postShift =
;;;361          arm_recip_q31(energy + DELTA_Q31, &oneByEnergy, &S->recipTable[0]);
;;;362    
;;;363        /* Calculation of product of (e * mu) */
;;;364        errorXmu = (q31_t) (((q63_t) e * mu) >> 31);
;;;365    
;;;366        /* Weighting factor for the normalized version */
;;;367        w = clip_q63_to_q31(((q63_t) errorXmu * oneByEnergy) >> (31 - postShift));
;;;368    
;;;369        /* Initialize pState pointer */
;;;370        px = pState;
;;;371    
;;;372        /* Initialize coeff pointer */
;;;373        pb = (pCoeffs);
;;;374    
;;;375        /* Loop over numTaps number of values */
;;;376        tapCnt = numTaps;
;;;377    
;;;378        while(tapCnt > 0u)
;;;379        {
;;;380          /* Perform the multiply-accumulate */
;;;381          /* coef is in 2.30 format */
;;;382          coef = (q31_t) (((q63_t) w * (*px++)) >> (32));
;;;383          /* get coef in 1.31 format by left shifting */
;;;384          *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
;;;385          /* update coefficient buffer to next coefficient */
;;;386          pb++;
;;;387    
;;;388          /* Decrement the loop counter */
;;;389          tapCnt--;
;;;390        }
;;;391    
;;;392        /* Read the sample from state buffer */
;;;393        x0 = *pState;
;;;394    
;;;395        /* Advance state pointer by 1 for the next sample */
;;;396        pState = pState + 1;
;;;397    
;;;398        /* Decrement the loop counter */
;;;399        blkCnt--;
;;;400      }
;;;401    
;;;402      /* Save energy and x0 values for the next frame */
;;;403      S->energy = (q31_t) energy;
;;;404      S->x0 = x0;
;;;405    
;;;406      /* Processing is complete. Now copy the last numTaps - 1 samples to the     
;;;407         start of the state buffer. This prepares the state buffer for the        
;;;408         next function call. */
;;;409    
;;;410      /* Points to the start of the pState buffer */
;;;411      pStateCurnt = S->pState;
;;;412    
;;;413      /* Loop for (numTaps - 1u) samples copy */
;;;414      tapCnt = (numTaps - 1u);
;;;415    
;;;416      /* Copy the remaining q31_t data */
;;;417      while(tapCnt > 0u)
;;;418      {
;;;419        *pStateCurnt++ = *pState++;
;;;420    
;;;421        /* Decrement the loop counter */
;;;422        tapCnt--;
;;;423      }
;;;424    
;;;425    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
;;;426    
;;;427    }
000280  b017              ADD      sp,sp,#0x5c
000282  e8bd8ff0          POP      {r4-r11,pc}
;;;428    
                          ENDP


                          AREA ||i.clip_q63_to_q31||, CODE, READONLY, ALIGN=1

                  clip_q63_to_q31 PROC
;;;458       */
;;;459      static __INLINE q31_t clip_q63_to_q31(
000000  17ca              ASRS     r2,r1,#31
;;;460      q63_t x)
;;;461      {
;;;462        return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
000002  ebb17fe0          CMP      r1,r0,ASR #31
000006  d002              BEQ      |L2.14|
;;;463          ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
000008  f06f4000          MVN      r0,#0x80000000
00000c  4050              EORS     r0,r0,r2
                  |L2.14|
;;;464      }
00000e  4770              BX       lr
;;;465    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_lms_norm_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_lms_norm_q31_c_3a2782e8____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_lms_norm_q31_c_3a2782e8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_lms_norm_q31_c_3a2782e8____REVSH|
#line 144
|__asm___18_arm_lms_norm_q31_c_3a2782e8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_lms_norm_q31_c_3a2782e8____RRX|
#line 300
|__asm___18_arm_lms_norm_q31_c_3a2782e8____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
