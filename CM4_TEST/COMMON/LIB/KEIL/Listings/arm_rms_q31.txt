; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_rms_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rms_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_rms_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_rms_q31.c]
                          THUMB

                          AREA ||i.arm_rms_q31||, CODE, READONLY, ALIGN=1

                  arm_rms_q31 PROC
;;;72     
;;;73     void arm_rms_q31(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74       q31_t * pSrc,
;;;75       uint32_t blockSize,
;;;76       q31_t * pResult)
;;;77     {
000004  4603              MOV      r3,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;78       q63_t sum = 0;                                 /* accumulator */
00000a  2000              MOVS     r0,#0
00000c  4601              MOV      r1,r0
;;;79       q31_t in;                                      /* Temporary variable to store the input */
;;;80       uint32_t blkCnt;                               /* loop counter */
;;;81     
;;;82     #ifndef ARM_MATH_CM0_FAMILY
;;;83     
;;;84       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;85     
;;;86       q31_t in1, in2, in3, in4;                      /* Temporary input variables */
;;;87     
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
00000e  08ba              LSRS     r2,r7,#2
000010  e00d              B        |L1.46|
                  |L1.18|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.        
;;;92        ** a second loop below computes the remaining 1 to 7 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;96         /* Compute sum of the squares and then store the result in a temporary variable, sum */
;;;97         /* read two samples from source buffer */
;;;98         in1 = pSrc[0];
000012  681d              LDR      r5,[r3,#0]
;;;99         in2 = pSrc[1];
000014  685e              LDR      r6,[r3,#4]
;;;100    
;;;101        /* calculate power and accumulate to accumulator */
;;;102        sum += (q63_t) in1 *in1;
000016  fbc50105          SMLAL    r0,r1,r5,r5
;;;103        sum += (q63_t) in2 *in2;
00001a  fbc60106          SMLAL    r0,r1,r6,r6
;;;104    
;;;105        /* read two samples from source buffer */
;;;106        in3 = pSrc[2];
00001e  689d              LDR      r5,[r3,#8]
;;;107        in4 = pSrc[3];
000020  68de              LDR      r6,[r3,#0xc]
;;;108    
;;;109        /* calculate power and accumulate to accumulator */
;;;110        sum += (q63_t) in3 *in3;
000022  fbc50105          SMLAL    r0,r1,r5,r5
;;;111        sum += (q63_t) in4 *in4;
000026  fbc60106          SMLAL    r0,r1,r6,r6
;;;112    
;;;113    
;;;114        /* update source buffer to process next samples */
;;;115        pSrc += 4u;
00002a  3310              ADDS     r3,r3,#0x10
;;;116    
;;;117        /* Decrement the loop counter */
;;;118        blkCnt--;
00002c  1e52              SUBS     r2,r2,#1
                  |L1.46|
00002e  2a00              CMP      r2,#0                 ;93
000030  d1ef              BNE      |L1.18|
;;;119      }
;;;120    
;;;121      /* If the blockSize is not a multiple of 8, compute any remaining output samples here.        
;;;122       ** No loop unrolling is used. */
;;;123      blkCnt = blockSize % 0x4u;
000032  f0070203          AND      r2,r7,#3
;;;124    
;;;125    #else
;;;126    
;;;127      /* Run the below code for Cortex-M0 */
;;;128      blkCnt = blockSize;
;;;129    
;;;130    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;131    
;;;132      while(blkCnt > 0u)
000036  e003              B        |L1.64|
                  |L1.56|
;;;133      {
;;;134        /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
;;;135        /* Compute sum of the squares and then store the results in a temporary variable, sum */
;;;136        in = *pSrc++;
000038  cb20              LDM      r3!,{r5}
;;;137        sum += (q63_t) in *in;
00003a  fbc50105          SMLAL    r0,r1,r5,r5
;;;138    
;;;139        /* Decrement the loop counter */
;;;140        blkCnt--;
00003e  1e52              SUBS     r2,r2,#1
                  |L1.64|
000040  2a00              CMP      r2,#0                 ;132
000042  d1f9              BNE      |L1.56|
;;;141      }
;;;142    
;;;143      /* Convert data in 2.62 to 1.31 by 31 right shifts and saturate */
;;;144      /* Compute Rms and store the result in the destination vector */
;;;145      arm_sqrt_q31(clip_q63_to_q31((sum / (q63_t) blockSize) >> 31), pResult);
000044  463a              MOV      r2,r7
000046  2300              MOVS     r3,#0
000048  f7fffffe          BL       __aeabi_ldivmod
00004c  0fc0              LSRS     r0,r0,#31
00004e  ea400041          ORR      r0,r0,r1,LSL #1
000052  17c9              ASRS     r1,r1,#31
000054  ebb17fe0          CMP      r1,r0,ASR #31
000058  d003              BEQ      |L1.98|
00005a  17c8              ASRS     r0,r1,#31
00005c  f06f4100          MVN      r1,#0x80000000
000060  4048              EORS     r0,r0,r1
                  |L1.98|
000062  4621              MOV      r1,r4
000064  e8bd41f0          POP      {r4-r8,lr}
000068  f7ffbffe          B.W      arm_sqrt_q31
;;;146    }
;;;147    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_rms_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_q31_c_3b4c1528____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___13_arm_rms_q31_c_3b4c1528____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_q31_c_3b4c1528____REVSH|
#line 144
|__asm___13_arm_rms_q31_c_3b4c1528____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_arm_rms_q31_c_3b4c1528____RRX|
#line 300
|__asm___13_arm_rms_q31_c_3b4c1528____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
