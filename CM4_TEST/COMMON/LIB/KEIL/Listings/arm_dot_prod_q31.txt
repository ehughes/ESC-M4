; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_dot_prod_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_dot_prod_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_dot_prod_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_dot_prod_q31.c]
                          THUMB

                          AREA ||i.arm_dot_prod_q31||, CODE, READONLY, ALIGN=1

                  arm_dot_prod_q31 PROC
;;;69     
;;;70     void arm_dot_prod_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;71       q31_t * pSrcA,
;;;72       q31_t * pSrcB,
;;;73       uint32_t blockSize,
;;;74       q63_t * result)
;;;75     {
;;;76       q63_t sum = 0;                                 /* Temporary result storage */
000004  2200              MOVS     r2,#0
000006  4613              MOV      r3,r2
;;;77       uint32_t blkCnt;                               /* loop counter */
;;;78     
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       q31_t inA1, inA2, inA3, inA4;
;;;84       q31_t inB1, inB2, inB3, inB4;
;;;85     
;;;86       /*loop Unrolling */
;;;87       blkCnt = blockSize >> 2u;
000008  9c02              LDR      r4,[sp,#8]
00000a  08a4              LSRS     r4,r4,#2
00000c  e034              B        |L1.120|
                  |L1.14|
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93         /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;94         /* Calculate dot product and then store the result in a temporary buffer. */
;;;95         inA1 = *pSrcA++;
00000e  6805              LDR      r5,[r0,#0]
;;;96         inA2 = *pSrcA++;
000010  6846              LDR      r6,[r0,#4]
;;;97         inA3 = *pSrcA++;
000012  6887              LDR      r7,[r0,#8]
000014  300c              ADDS     r0,r0,#0xc
;;;98         inA4 = *pSrcA++;
000016  f850cb04          LDR      r12,[r0],#4
;;;99         inB1 = *pSrcB++;
00001a  f8518b04          LDR      r8,[r1],#4
;;;100        inB2 = *pSrcB++;
00001e  f8519b04          LDR      r9,[r1],#4
;;;101        inB3 = *pSrcB++;
000022  f851ab04          LDR      r10,[r1],#4
;;;102        inB4 = *pSrcB++;
000026  f851bb04          LDR      r11,[r1],#4
;;;103    
;;;104        sum += ((q63_t) inA1 * inB1) >> 14u;
00002a  fb858508          SMULL    r8,r5,r5,r8
00002e  ea4f3898          LSR      r8,r8,#14
000032  ea484885          ORR      r8,r8,r5,LSL #18
000036  eb180202          ADDS     r2,r8,r2
00003a  eb4333a5          ADC      r3,r3,r5,ASR #14
;;;105        sum += ((q63_t) inA2 * inB2) >> 14u;
00003e  fb866509          SMULL    r6,r5,r6,r9
000042  ea4f3696          LSR      r6,r6,#14
000046  ea464685          ORR      r6,r6,r5,LSL #18
00004a  18b2              ADDS     r2,r6,r2
00004c  eb4333a5          ADC      r3,r3,r5,ASR #14
;;;106        sum += ((q63_t) inA3 * inB3) >> 14u;
000050  fb87650a          SMULL    r6,r5,r7,r10
000054  ea4f3696          LSR      r6,r6,#14
000058  ea464685          ORR      r6,r6,r5,LSL #18
00005c  18b2              ADDS     r2,r6,r2
00005e  eb4333a5          ADC      r3,r3,r5,ASR #14
;;;107        sum += ((q63_t) inA4 * inB4) >> 14u;
000062  fb8c650b          SMULL    r6,r5,r12,r11
000066  ea4f3696          LSR      r6,r6,#14
00006a  ea464685          ORR      r6,r6,r5,LSL #18
00006e  18b2              ADDS     r2,r6,r2
000070  eb4333a5          ADC      r3,r3,r5,ASR #14
;;;108    
;;;109        /* Decrement the loop counter */
;;;110        blkCnt--;
000074  f1a40401          SUB      r4,r4,#1
                  |L1.120|
000078  2c00              CMP      r4,#0                 ;91
00007a  d1c8              BNE      |L1.14|
;;;111      }
;;;112    
;;;113      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;114       ** No loop unrolling is used. */
;;;115      blkCnt = blockSize % 0x4u;
00007c  9c02              LDR      r4,[sp,#8]
00007e  f0040403          AND      r4,r4,#3
;;;116    
;;;117    #else
;;;118    
;;;119      /* Run the below code for Cortex-M0 */
;;;120    
;;;121      /* Initialize blkCnt with number of samples */
;;;122      blkCnt = blockSize;
;;;123    
;;;124    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;125    
;;;126    
;;;127      while(blkCnt > 0u)
000082  e00b              B        |L1.156|
                  |L1.132|
;;;128      {
;;;129        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;130        /* Calculate dot product and then store the result in a temporary buffer. */
;;;131        sum += ((q63_t) * pSrcA++ * *pSrcB++) >> 14u;
000084  c820              LDM      r0!,{r5}
000086  c940              LDM      r1!,{r6}
000088  fb856506          SMULL    r6,r5,r5,r6
00008c  0bb6              LSRS     r6,r6,#14
00008e  ea464685          ORR      r6,r6,r5,LSL #18
000092  18b2              ADDS     r2,r6,r2
000094  eb4333a5          ADC      r3,r3,r5,ASR #14
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
000098  f1a40401          SUB      r4,r4,#1
                  |L1.156|
00009c  2c00              CMP      r4,#0                 ;127
00009e  d1f1              BNE      |L1.132|
;;;135      }
;;;136    
;;;137      /* Store the result in the destination buffer in 16.48 format */
;;;138      *result = sum;
0000a0  9803              LDR      r0,[sp,#0xc]
0000a2  c00c              STM      r0!,{r2,r3}
;;;139    }
0000a4  e8bd8fff          POP      {r0-r11,pc}
;;;140    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_dot_prod_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REVSH|
#line 144
|__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q31_c_5bfbfb8d____RRX|
#line 300
|__asm___18_arm_dot_prod_q31_c_5bfbfb8d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
