; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_dot_prod_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_dot_prod_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_dot_prod_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\BasicMathFunctions\arm_dot_prod_q31.c]
                          THUMB

                          AREA ||i.arm_dot_prod_q31||, CODE, READONLY, ALIGN=2

                  arm_dot_prod_q31 PROC
;;;69     
;;;70     void arm_dot_prod_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;71       q31_t * pSrcA,
;;;72       q31_t * pSrcB,
;;;73       uint32_t blockSize,
;;;74       q63_t * result)
;;;75     {
000004  2400              MOVS     r4,#0
000006  b081              SUB      sp,sp,#4
000008  4623              MOV      r3,r4
;;;76       q63_t sum = 0;                                 /* Temporary result storage */
;;;77       uint32_t blkCnt;                               /* loop counter */
;;;78     
;;;79     
;;;80     #ifndef ARM_MATH_CM0_FAMILY
;;;81     
;;;82     /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;83       q31_t inA1, inA2, inA3, inA4;
;;;84       q31_t inB1, inB2, inB3, inB4;
;;;85     
;;;86       /*loop Unrolling */
;;;87       blkCnt = blockSize >> 2u;
00000a  0895              LSRS     r5,r2,#2
00000c  e035              B        |L1.122|
00000e  bf00              NOP                            ;75
                  |L1.16|
000010  e8f0c802          LDRD     r12,r8,[r0],#8        ;75
;;;88     
;;;89       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;90        ** a second loop below computes the remaining 1 to 3 samples. */
;;;91       while(blkCnt > 0u)
;;;92       {
;;;93         /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;94         /* Calculate dot product and then store the result in a temporary buffer. */
;;;95         inA1 = *pSrcA++;
;;;96         inA2 = *pSrcA++;
;;;97         inA3 = *pSrcA++;
;;;98         inA4 = *pSrcA++;
;;;99         inB1 = *pSrcB++;
;;;100        inB2 = *pSrcB++;
;;;101        inB3 = *pSrcB++;
;;;102        inB4 = *pSrcB++;
;;;103    
;;;104        sum += ((q63_t) inA1 * inB1) >> 14u;
;;;105        sum += ((q63_t) inA2 * inB2) >> 14u;
;;;106        sum += ((q63_t) inA3 * inB3) >> 14u;
;;;107        sum += ((q63_t) inA4 * inB4) >> 14u;
000014  f1a50501          SUB      r5,r5,#1
000018  f850eb08          LDR      lr,[r0],#8            ;97
00001c  f8507c04          LDR      r7,[r0,#-4]           ;98
000020  9700              STR      r7,[sp,#0]            ;98
000022  e8f17602          LDRD     r7,r6,[r1],#8         ;98
000026  fb8cc707          SMULL    r12,r7,r12,r7         ;104
00002a  ea4f3c9c          LSR      r12,r12,#14           ;104
00002e  ea4c4c87          ORR      r12,r12,r7,LSL #18    ;104
000032  eb1c0404          ADDS     r4,r12,r4             ;104
000036  eb4337a7          ADC      r7,r3,r7,ASR #14      ;104
00003a  fb886306          SMULL    r6,r3,r8,r6           ;105
00003e  ea4f3696          LSR      r6,r6,#14             ;105
000042  f851ab04          LDR      r10,[r1],#4           ;101
000046  ea464683          ORR      r6,r6,r3,LSL #18      ;105
00004a  1934              ADDS     r4,r6,r4              ;105
00004c  eb4733a3          ADC      r3,r7,r3,ASR #14      ;105
000050  fb8e760a          SMULL    r7,r6,lr,r10          ;106
000054  ea4f3797          LSR      r7,r7,#14             ;106
000058  ea474786          ORR      r7,r7,r6,LSL #18      ;106
00005c  193c              ADDS     r4,r7,r4              ;106
00005e  f851bb04          LDR      r11,[r1],#4           ;102
000062  9f00              LDR      r7,[sp,#0]
000064  eb4336a6          ADC      r6,r3,r6,ASR #14      ;106
000068  fb87730b          SMULL    r7,r3,r7,r11
00006c  ea4f3797          LSR      r7,r7,#14
000070  ea474783          ORR      r7,r7,r3,LSL #18
000074  193c              ADDS     r4,r7,r4
000076  eb4633a3          ADC      r3,r6,r3,ASR #14
                  |L1.122|
00007a  2d00              CMP      r5,#0                 ;91
00007c  d1c8              BNE      |L1.16|
;;;108    
;;;109        /* Decrement the loop counter */
;;;110        blkCnt--;
;;;111      }
;;;112    
;;;113      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;114       ** No loop unrolling is used. */
;;;115      blkCnt = blockSize % 0x4u;
00007e  f0020203          AND      r2,r2,#3
;;;116    
;;;117    #else
;;;118    
;;;119      /* Run the below code for Cortex-M0 */
;;;120    
;;;121      /* Initialize blkCnt with number of samples */
;;;122      blkCnt = blockSize;
;;;123    
;;;124    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;125    
;;;126    
;;;127      while(blkCnt > 0u)
000082  e00b              B        |L1.156|
                  |L1.132|
;;;128      {
;;;129        /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
;;;130        /* Calculate dot product and then store the result in a temporary buffer. */
;;;131        sum += ((q63_t) * pSrcA++ * *pSrcB++) >> 14u;
000084  c820              LDM      r0!,{r5}
000086  c940              LDM      r1!,{r6}
000088  f1a20201          SUB      r2,r2,#1
00008c  fb856506          SMULL    r6,r5,r5,r6
000090  0bb6              LSRS     r6,r6,#14
000092  ea464685          ORR      r6,r6,r5,LSL #18
000096  1934              ADDS     r4,r6,r4
000098  eb4333a5          ADC      r3,r3,r5,ASR #14
                  |L1.156|
00009c  2a00              CMP      r2,#0                 ;127
00009e  d1f1              BNE      |L1.132|
;;;132    
;;;133        /* Decrement the loop counter */
;;;134        blkCnt--;
;;;135      }
;;;136    
;;;137      /* Store the result in the destination buffer in 16.48 format */
;;;138      *result = sum;
0000a0  9804              LDR      r0,[sp,#0x10]
0000a2  e9c04300          STRD     r4,r3,[r0,#0]
;;;139    }
0000a6  b005              ADD      sp,sp,#0x14
0000a8  e8bd8ff0          POP      {r4-r11,pc}
;;;140    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\BasicMathFunctions\\arm_dot_prod_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REVSH|
#line 144
|__asm___18_arm_dot_prod_q31_c_5bfbfb8d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_arm_dot_prod_q31_c_5bfbfb8d____RRX|
#line 300
|__asm___18_arm_dot_prod_q31_c_5bfbfb8d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
