; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mean_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mean_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mean_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\StatisticsFunctions\arm_mean_f32.c]
                          THUMB

                          AREA ||i.arm_mean_f32||, CODE, READONLY, ALIGN=2

                  arm_mean_f32 PROC
;;;74     
;;;75     void arm_mean_f32(
000000  ed9f0a14          VLDR     s0,|L1.84|
;;;76       float32_t * pSrc,
;;;77       uint32_t blockSize,
;;;78       float32_t * pResult)
;;;79     {
;;;80       float32_t sum = 0.0f;                          /* Temporary result storage */
;;;81       uint32_t blkCnt;                               /* loop counter */
;;;82     
;;;83     #ifndef ARM_MATH_CM0_FAMILY
;;;84     
;;;85       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;86       float32_t in1, in2, in3, in4;
;;;87     
;;;88       /*loop Unrolling */
;;;89       blkCnt = blockSize >> 2u;
000004  088b              LSRS     r3,r1,#2
000006  e010              B        |L1.42|
                  |L1.8|
;;;90     
;;;91       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;92        ** a second loop below computes the remaining 1 to 3 samples. */
;;;93       while(blkCnt > 0u)
;;;94       {
;;;95         /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;96         in1 = *pSrc++;
000008  ecb02a01          VLDM     r0!,{s4}
;;;97         in2 = *pSrc++;
00000c  ecb01a01          VLDM     r0!,{s2}
;;;98         in3 = *pSrc++;
000010  ecf00a01          VLDM     r0!,{s1}
;;;99         in4 = *pSrc++;
000014  ecf01a01          VLDM     r0!,{s3}
;;;100    
;;;101        sum += in1;
000018  ee300a02          VADD.F32 s0,s0,s4
;;;102        sum += in2;
00001c  ee300a01          VADD.F32 s0,s0,s2
;;;103        sum += in3;
000020  ee300a20          VADD.F32 s0,s0,s1
;;;104        sum += in4;
000024  ee300a21          VADD.F32 s0,s0,s3
;;;105    
;;;106        /* Decrement the loop counter */
;;;107        blkCnt--;
000028  1e5b              SUBS     r3,r3,#1
                  |L1.42|
00002a  2b00              CMP      r3,#0                 ;93
00002c  d1ec              BNE      |L1.8|
;;;108      }
;;;109    
;;;110      /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
;;;111       ** No loop unrolling is used. */
;;;112      blkCnt = blockSize % 0x4u;
00002e  f0010303          AND      r3,r1,#3
;;;113    
;;;114    #else
;;;115    
;;;116      /* Run the below code for Cortex-M0 */
;;;117    
;;;118      /* Loop over blockSize number of values */
;;;119      blkCnt = blockSize;
;;;120    
;;;121    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;122    
;;;123      while(blkCnt > 0u)
000032  e004              B        |L1.62|
                  |L1.52|
;;;124      {
;;;125        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
;;;126        sum += *pSrc++;
000034  ecf00a01          VLDM     r0!,{s1}
000038  ee300a80          VADD.F32 s0,s1,s0
;;;127    
;;;128        /* Decrement the loop counter */
;;;129        blkCnt--;
00003c  1e5b              SUBS     r3,r3,#1
                  |L1.62|
00003e  2b00              CMP      r3,#0                 ;123
000040  d1f8              BNE      |L1.52|
;;;130      }
;;;131    
;;;132      /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
;;;133      /* Store the result to the destination */
;;;134      *pResult = sum / (float32_t) blockSize;
000042  ee001a90          VMOV     s1,r1
000046  eef80a60          VCVT.F32.U32 s1,s1
00004a  ee801a20          VDIV.F32 s2,s0,s1
00004e  ed821a00          VSTR     s2,[r2,#0]
;;;135    }
000052  4770              BX       lr
;;;136    
                          ENDP

                  |L1.84|
000054  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\StatisticsFunctions\\arm_mean_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_f32_c_73dc5370____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_mean_f32_c_73dc5370____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_f32_c_73dc5370____REVSH|
#line 144
|__asm___14_arm_mean_f32_c_73dc5370____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_mean_f32_c_73dc5370____RRX|
#line 300
|__asm___14_arm_mean_f32_c_73dc5370____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
