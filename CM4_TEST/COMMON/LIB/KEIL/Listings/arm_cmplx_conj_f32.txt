; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_cmplx_conj_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_cmplx_conj_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_cmplx_conj_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\ComplexMathFunctions\arm_cmplx_conj_f32.c]
                          THUMB

                          AREA ||i.arm_cmplx_conj_f32||, CODE, READONLY, ALIGN=1

                  arm_cmplx_conj_f32 PROC
;;;81     
;;;82     void arm_cmplx_conj_f32(
000000  0893              LSRS     r3,r2,#2
;;;83       float32_t * pSrc,
;;;84       float32_t * pDst,
;;;85       uint32_t numSamples)
;;;86     {
000002  e02a              B        |L1.90|
                  |L1.4|
;;;87       uint32_t blkCnt;                               /* loop counter */
;;;88     
;;;89     #ifndef ARM_MATH_CM0_FAMILY
;;;90     
;;;91       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;92       float32_t inR1, inR2, inR3, inR4;
;;;93       float32_t inI1, inI2, inI3, inI4;
;;;94     
;;;95       /*loop Unrolling */
;;;96       blkCnt = numSamples >> 2u;
;;;97     
;;;98       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
;;;99        ** a second loop below computes the remaining 1 to 3 samples. */
;;;100      while(blkCnt > 0u)
;;;101      {
;;;102        /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
;;;103        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;104        /* read real input samples */
;;;105        inR1 = pSrc[0];
000004  ed900a00          VLDR     s0,[r0,#0]
;;;106        /* store real samples to destination */
;;;107        pDst[0] = inR1;
000008  ed810a00          VSTR     s0,[r1,#0]
;;;108        inR2 = pSrc[2];
00000c  ed900a02          VLDR     s0,[r0,#8]
;;;109        pDst[2] = inR2;
000010  ed810a02          VSTR     s0,[r1,#8]
;;;110        inR3 = pSrc[4];
000014  ed900a04          VLDR     s0,[r0,#0x10]
;;;111        pDst[4] = inR3;
000018  ed810a04          VSTR     s0,[r1,#0x10]
;;;112        inR4 = pSrc[6];
00001c  ed900a06          VLDR     s0,[r0,#0x18]
;;;113        pDst[6] = inR4;
000020  ed810a06          VSTR     s0,[r1,#0x18]
;;;114    
;;;115        /* read imaginary input samples */
;;;116        inI1 = pSrc[1];
000024  ed900a01          VLDR     s0,[r0,#4]
;;;117        inI2 = pSrc[3];
000028  edd00a03          VLDR     s1,[r0,#0xc]
;;;118    
;;;119        /* conjugate input */
;;;120        inI1 = -inI1;
00002c  eeb10a40          VNEG.F32 s0,s0
;;;121    
;;;122        /* read imaginary input samples */
;;;123        inI3 = pSrc[5];
000030  ed901a05          VLDR     s2,[r0,#0x14]
;;;124    
;;;125        /* conjugate input */
;;;126        inI2 = -inI2;
000034  eef10a60          VNEG.F32 s1,s1
;;;127    
;;;128        /* read imaginary input samples */
;;;129        inI4 = pSrc[7];
000038  edd01a07          VLDR     s3,[r0,#0x1c]
;;;130    
;;;131        /* conjugate input */
;;;132        inI3 = -inI3;
00003c  eeb11a41          VNEG.F32 s2,s2
;;;133    
;;;134        /* store imaginary samples to destination */
;;;135        pDst[1] = inI1;
000040  ed810a01          VSTR     s0,[r1,#4]
;;;136        pDst[3] = inI2;
000044  edc10a03          VSTR     s1,[r1,#0xc]
;;;137    
;;;138        /* conjugate input */
;;;139        inI4 = -inI4;
000048  eeb10a61          VNEG.F32 s0,s3
;;;140    
;;;141        /* store imaginary samples to destination */
;;;142        pDst[5] = inI3;
00004c  ed811a05          VSTR     s2,[r1,#0x14]
;;;143    
;;;144        /* increment source pointer by 8 to process next sampels */
;;;145        pSrc += 8u;
000050  3020              ADDS     r0,r0,#0x20
;;;146    
;;;147        /* store imaginary sample to destination */
;;;148        pDst[7] = inI4;
000052  ed810a07          VSTR     s0,[r1,#0x1c]
;;;149    
;;;150        /* increment destination pointer by 8 to store next samples */
;;;151        pDst += 8u;
000056  3120              ADDS     r1,r1,#0x20
;;;152    
;;;153        /* Decrement the loop counter */
;;;154        blkCnt--;
000058  1e5b              SUBS     r3,r3,#1
                  |L1.90|
00005a  2b00              CMP      r3,#0                 ;100
00005c  d1d2              BNE      |L1.4|
;;;155      }
;;;156    
;;;157      /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
;;;158       ** No loop unrolling is used. */
;;;159      blkCnt = numSamples % 0x4u;
00005e  f0020203          AND      r2,r2,#3
;;;160    
;;;161    #else
;;;162    
;;;163      /* Run the below code for Cortex-M0 */
;;;164      blkCnt = numSamples;
;;;165    
;;;166    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;167    
;;;168      while(blkCnt > 0u)
000062  e00a              B        |L1.122|
                  |L1.100|
;;;169      {
;;;170        /* realOut + j (imagOut) = realIn + j (-1) imagIn */
;;;171        /* Calculate Complex Conjugate and then store the results in the destination buffer. */
;;;172        *pDst++ = *pSrc++;
000064  ecb00a01          VLDM     r0!,{s0}
000068  eca10a01          VSTM     r1!,{s0}
;;;173        *pDst++ = -*pSrc++;
00006c  ecb00a01          VLDM     r0!,{s0}
000070  eeb10a40          VNEG.F32 s0,s0
000074  eca10a01          VSTM     r1!,{s0}
;;;174    
;;;175        /* Decrement the loop counter */
;;;176        blkCnt--;
000078  1e52              SUBS     r2,r2,#1
                  |L1.122|
00007a  2a00              CMP      r2,#0                 ;168
00007c  d1f2              BNE      |L1.100|
;;;177      }
;;;178    }
00007e  4770              BX       lr
;;;179    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\ComplexMathFunctions\\arm_cmplx_conj_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_f32_c_9becdf6f____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___20_arm_cmplx_conj_f32_c_9becdf6f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_f32_c_9becdf6f____REVSH|
#line 144
|__asm___20_arm_cmplx_conj_f32_c_9becdf6f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_arm_cmplx_conj_f32_c_9becdf6f____RRX|
#line 300
|__asm___20_arm_cmplx_conj_f32_c_9becdf6f____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
