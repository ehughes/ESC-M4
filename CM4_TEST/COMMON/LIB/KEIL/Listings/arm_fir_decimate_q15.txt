; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_fir_decimate_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_fir_decimate_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_fir_decimate_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_fir_decimate_q15.c]
                          THUMB

                          AREA ||i.arm_fir_decimate_q15||, CODE, READONLY, ALIGN=1

                  arm_fir_decimate_q15 PROC
;;;76     
;;;77     void arm_fir_decimate_q15(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;78       const arm_fir_decimate_instance_q15 * S,
;;;79       q15_t * pSrc,
;;;80       q15_t * pDst,
;;;81       uint32_t blockSize)
;;;82     {
000004  b08a              SUB      sp,sp,#0x28
;;;83       q15_t *pState = S->pState;                     /* State pointer */
000006  6887              LDR      r7,[r0,#8]
;;;84       q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
000008  6844              LDR      r4,[r0,#4]
00000a  9407              STR      r4,[sp,#0x1c]
;;;85       q15_t *pStateCurnt;                            /* Points to the current sample of the state */
;;;86       q15_t *px;                                     /* Temporary pointer for state buffer */
;;;87       q15_t *pb;                                     /* Temporary pointer coefficient buffer */
;;;88       q31_t x0, x1, c0, c1;                          /* Temporary variables to hold state and coefficient values */
;;;89       q63_t sum0;                                    /* Accumulators */
;;;90       q63_t acc0, acc1;
;;;91       q15_t *px0, *px1;
;;;92       uint32_t blkCntN3;
;;;93       uint32_t numTaps = S->numTaps;                 /* Number of taps */
00000c  8844              LDRH     r4,[r0,#2]
00000e  9402              STR      r4,[sp,#8]
;;;94       uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
000010  7804              LDRB     r4,[r0,#0]
000012  fbb3f3f4          UDIV     r3,r3,r4
;;;95     
;;;96     
;;;97       /* S->pState buffer contains previous frame (numTaps - 1) samples */
;;;98       /* pStateCurnt points to the location where the new input data should be written */
;;;99       pStateCurnt = S->pState + (numTaps - 1u);
000016  9c02              LDR      r4,[sp,#8]
000018  1e64              SUBS     r4,r4,#1
00001a  eb070a44          ADD      r10,r7,r4,LSL #1
00001e  9409              STR      r4,[sp,#0x24]
;;;100    
;;;101    
;;;102      /* Total number of output samples to be computed */
;;;103      blkCnt = outBlockSize / 2;
000020  085c              LSRS     r4,r3,#1
000022  9401              STR      r4,[sp,#4]
;;;104      blkCntN3 = outBlockSize - (2 * blkCnt);
000024  9c01              LDR      r4,[sp,#4]
000026  4264              RSBS     r4,r4,#0
000028  eb030344          ADD      r3,r3,r4,LSL #1
00002c  9303              STR      r3,[sp,#0xc]
00002e  e07d              B        |L1.300|
                  |L1.48|
;;;105    
;;;106    
;;;107      while(blkCnt > 0u)
;;;108      {
;;;109        /* Copy decimation factor number of new input samples into the state buffer */
;;;110        i = 2 * S->M;
000030  7803              LDRB     r3,[r0,#0]
000032  005b              LSLS     r3,r3,#1
                  |L1.52|
;;;111    
;;;112        do
;;;113        {
;;;114          *pStateCurnt++ = *pSrc++;
000034  f8314b02          LDRH     r4,[r1],#2
000038  f82a4b02          STRH     r4,[r10],#2
;;;115    
;;;116        } while(--i);
00003c  1e5b              SUBS     r3,r3,#1
00003e  d1f9              BNE      |L1.52|
;;;117    
;;;118        /* Set accumulator to zero */
;;;119        acc0 = 0;
000040  461c              MOV      r4,r3
;;;120        acc1 = 0;
000042  2500              MOVS     r5,#0
000044  462e              MOV      r6,r5
;;;121    
;;;122        /* Initialize state pointer */
;;;123        px0 = pState;
000046  46bc              MOV      r12,r7
;;;124    
;;;125        px1 = pState + S->M;
000048  f8908000          LDRB     r8,[r0,#0]
00004c  f8cd8020          STR      r8,[sp,#0x20]
000050  eb070948          ADD      r9,r7,r8,LSL #1
;;;126    
;;;127    
;;;128        /* Initialize coeff pointer */
;;;129        pb = pCoeffs;
000054  f8dd801c          LDR      r8,[sp,#0x1c]
;;;130    
;;;131        /* Loop unrolling.  Process 4 taps at a time. */
;;;132        tapCnt = numTaps >> 2;
000058  f8ddb008          LDR      r11,[sp,#8]
00005c  ea4f0b9b          LSR      r11,r11,#2
000060  f8cdb000          STR      r11,[sp,#0]
;;;133    
;;;134        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;135         ** Repeat until we've computed numTaps-4 coefficients. */
;;;136        while(tapCnt > 0u)
000064  e025              B        |L1.178|
                  |L1.102|
;;;137        {
;;;138          /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
;;;139          c0 = *__SIMD32(pb)++;
000066  f858bb04          LDR      r11,[r8],#4
;;;140    
;;;141          /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
;;;142          x0 = *__SIMD32(px0)++;
00006a  f85ceb04          LDR      lr,[r12],#4
00006e  f8cdc010          STR      r12,[sp,#0x10]
;;;143    
;;;144          x1 = *__SIMD32(px1)++;
000072  f859cb04          LDR      r12,[r9],#4
;;;145    
;;;146          /* Perform the multiply-accumulate */
;;;147          acc0 = __SMLALD(x0, c0, acc0);
000076  fbce34cb          SMLALD   r3,r4,lr,r11
;;;148    
;;;149          acc1 = __SMLALD(x1, c0, acc1);
00007a  fbcc56cb          SMLALD   r5,r6,r12,r11
;;;150    
;;;151          /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
;;;152          c0 = *__SIMD32(pb)++;
00007e  f858bb04          LDR      r11,[r8],#4
;;;153    
;;;154          /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
;;;155          x0 = *__SIMD32(px0)++;
000082  f8ddc010          LDR      r12,[sp,#0x10]
000086  f85ceb04          LDR      lr,[r12],#4
00008a  f8cde018          STR      lr,[sp,#0x18]
;;;156    
;;;157          x1 = *__SIMD32(px1)++;
00008e  f859eb04          LDR      lr,[r9],#4
000092  f8cde014          STR      lr,[sp,#0x14]
;;;158    
;;;159          /* Perform the multiply-accumulate */
;;;160          acc0 = __SMLALD(x0, c0, acc0);
000096  f8dde018          LDR      lr,[sp,#0x18]
00009a  fbce34cb          SMLALD   r3,r4,lr,r11
;;;161    
;;;162          acc1 = __SMLALD(x1, c0, acc1);
00009e  f8dde014          LDR      lr,[sp,#0x14]
0000a2  fbce56cb          SMLALD   r5,r6,lr,r11
;;;163    
;;;164          /* Decrement the loop counter */
;;;165          tapCnt--;
0000a6  f8ddb000          LDR      r11,[sp,#0]
0000aa  f1ab0b01          SUB      r11,r11,#1
0000ae  f8cdb000          STR      r11,[sp,#0]
                  |L1.178|
0000b2  f8ddb000          LDR      r11,[sp,#0]           ;136
0000b6  f1bb0f00          CMP      r11,#0                ;136
0000ba  d1d4              BNE      |L1.102|
;;;166        }
;;;167    
;;;168        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;169        tapCnt = numTaps % 0x4u;
0000bc  f8ddb008          LDR      r11,[sp,#8]
0000c0  f00b0b03          AND      r11,r11,#3
0000c4  f8cdb000          STR      r11,[sp,#0]
;;;170    
;;;171        while(tapCnt > 0u)
0000c8  e017              B        |L1.250|
                  |L1.202|
;;;172        {
;;;173          /* Read coefficients */
;;;174          c0 = *pb++;
0000ca  f938bb02          LDRSH    r11,[r8],#2
;;;175    
;;;176          /* Fetch 1 state variable */
;;;177          x0 = *px0++;
0000ce  f93ceb02          LDRSH    lr,[r12],#2
0000d2  f8cde018          STR      lr,[sp,#0x18]
;;;178    
;;;179          x1 = *px1++;
0000d6  f939eb02          LDRSH    lr,[r9],#2
0000da  f8cde014          STR      lr,[sp,#0x14]
;;;180    
;;;181          /* Perform the multiply-accumulate */
;;;182          acc0 = __SMLALD(x0, c0, acc0);
0000de  f8dde018          LDR      lr,[sp,#0x18]
0000e2  fbce34cb          SMLALD   r3,r4,lr,r11
;;;183          acc1 = __SMLALD(x1, c0, acc1);
0000e6  f8dde014          LDR      lr,[sp,#0x14]
0000ea  fbce56cb          SMLALD   r5,r6,lr,r11
;;;184    
;;;185          /* Decrement the loop counter */
;;;186          tapCnt--;
0000ee  f8ddb000          LDR      r11,[sp,#0]
0000f2  f1ab0b01          SUB      r11,r11,#1
0000f6  f8cdb000          STR      r11,[sp,#0]
                  |L1.250|
0000fa  f8ddb000          LDR      r11,[sp,#0]           ;171
0000fe  f1bb0f00          CMP      r11,#0                ;171
000102  d1e2              BNE      |L1.202|
;;;187        }
;;;188    
;;;189        /* Advance the state pointer by the decimation factor       
;;;190         * to process the next group of decimation factor number samples */
;;;191        pState = pState + S->M * 2;
000104  f8ddc020          LDR      r12,[sp,#0x20]
000108  eb07078c          ADD      r7,r7,r12,LSL #2
;;;192    
;;;193        /* Store filter output, smlad returns the values in 2.14 format */
;;;194        /* so downsacle by 15 to get output in 1.15 */
;;;195        *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
00010c  0bdb              LSRS     r3,r3,#15
00010e  ea434344          ORR      r3,r3,r4,LSL #17
000112  f303030f          SSAT     r3,#16,r3
000116  8013              STRH     r3,[r2,#0]
;;;196        *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
000118  0beb              LSRS     r3,r5,#15
00011a  ea434346          ORR      r3,r3,r6,LSL #17
00011e  f303030f          SSAT     r3,#16,r3
000122  8053              STRH     r3,[r2,#2]
000124  1d12              ADDS     r2,r2,#4
;;;197    
;;;198        /* Decrement the loop counter */
;;;199        blkCnt--;
000126  9b01              LDR      r3,[sp,#4]
000128  1e5b              SUBS     r3,r3,#1
00012a  9301              STR      r3,[sp,#4]
                  |L1.300|
00012c  9b01              LDR      r3,[sp,#4]            ;107
00012e  2b00              CMP      r3,#0                 ;107
000130  f47faf7e          BNE      |L1.48|
000134  e03c              B        |L1.432|
                  |L1.310|
;;;200      }
;;;201    
;;;202    
;;;203    
;;;204      while(blkCntN3 > 0u)
;;;205      {
;;;206        /* Copy decimation factor number of new input samples into the state buffer */
;;;207        i = S->M;
000136  7803              LDRB     r3,[r0,#0]
                  |L1.312|
;;;208    
;;;209        do
;;;210        {
;;;211          *pStateCurnt++ = *pSrc++;
000138  f8314b02          LDRH     r4,[r1],#2
00013c  f82a4b02          STRH     r4,[r10],#2
;;;212    
;;;213        } while(--i);
000140  1e5b              SUBS     r3,r3,#1
000142  d1f9              BNE      |L1.312|
;;;214    
;;;215        /*Set sum to zero */
;;;216        sum0 = 0;
000144  461c              MOV      r4,r3
;;;217    
;;;218        /* Initialize state pointer */
;;;219        px = pState;
000146  463e              MOV      r6,r7
;;;220    
;;;221        /* Initialize coeff pointer */
;;;222        pb = pCoeffs;
000148  9d07              LDR      r5,[sp,#0x1c]
;;;223    
;;;224        /* Loop unrolling.  Process 4 taps at a time. */
;;;225        tapCnt = numTaps >> 2;
00014a  f8ddc008          LDR      r12,[sp,#8]
00014e  ea4f0c9c          LSR      r12,r12,#2
;;;226    
;;;227        /* Loop over the number of taps.  Unroll by a factor of 4.       
;;;228         ** Repeat until we've computed numTaps-4 coefficients. */
;;;229        while(tapCnt > 0u)
000152  e00d              B        |L1.368|
                  |L1.340|
;;;230        {
;;;231          /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
;;;232          c0 = *__SIMD32(pb)++;
000154  f855bb04          LDR      r11,[r5],#4
;;;233    
;;;234          /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
;;;235          x0 = *__SIMD32(px)++;
000158  f8568b04          LDR      r8,[r6],#4
;;;236    
;;;237          /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
;;;238          c1 = *__SIMD32(pb)++;
00015c  f8559b04          LDR      r9,[r5],#4
;;;239    
;;;240          /* Perform the multiply-accumulate */
;;;241          sum0 = __SMLALD(x0, c0, sum0);
000160  fbc834cb          SMLALD   r3,r4,r8,r11
;;;242    
;;;243          /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
;;;244          x0 = *__SIMD32(px)++;
000164  f8568b04          LDR      r8,[r6],#4
;;;245    
;;;246          /* Perform the multiply-accumulate */
;;;247          sum0 = __SMLALD(x0, c1, sum0);
000168  fbc834c9          SMLALD   r3,r4,r8,r9
;;;248    
;;;249          /* Decrement the loop counter */
;;;250          tapCnt--;
00016c  f1ac0c01          SUB      r12,r12,#1
                  |L1.368|
000170  f1bc0f00          CMP      r12,#0                ;229
000174  d1ee              BNE      |L1.340|
;;;251        }
;;;252    
;;;253        /* If the filter length is not a multiple of 4, compute the remaining filter taps */
;;;254        tapCnt = numTaps % 0x4u;
000176  f8ddc008          LDR      r12,[sp,#8]
00017a  f00c0c03          AND      r12,r12,#3
;;;255    
;;;256        while(tapCnt > 0u)
00017e  e007              B        |L1.400|
                  |L1.384|
;;;257        {
;;;258          /* Read coefficients */
;;;259          c0 = *pb++;
000180  f9359b02          LDRSH    r9,[r5],#2
;;;260    
;;;261          /* Fetch 1 state variable */
;;;262          x0 = *px++;
000184  f9368b02          LDRSH    r8,[r6],#2
;;;263    
;;;264          /* Perform the multiply-accumulate */
;;;265          sum0 = __SMLALD(x0, c0, sum0);
000188  fbc834c9          SMLALD   r3,r4,r8,r9
;;;266    
;;;267          /* Decrement the loop counter */
;;;268          tapCnt--;
00018c  f1ac0c01          SUB      r12,r12,#1
                  |L1.400|
000190  f1bc0f00          CMP      r12,#0                ;256
000194  d1f4              BNE      |L1.384|
;;;269        }
;;;270    
;;;271        /* Advance the state pointer by the decimation factor       
;;;272         * to process the next group of decimation factor number samples */
;;;273        pState = pState + S->M;
000196  7805              LDRB     r5,[r0,#0]
000198  eb070745          ADD      r7,r7,r5,LSL #1
;;;274    
;;;275        /* Store filter output, smlad returns the values in 2.14 format */
;;;276        /* so downsacle by 15 to get output in 1.15 */
;;;277        *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
00019c  0bdb              LSRS     r3,r3,#15
00019e  ea434344          ORR      r3,r3,r4,LSL #17
0001a2  f303030f          SSAT     r3,#16,r3
0001a6  f8223b02          STRH     r3,[r2],#2
;;;278    
;;;279        /* Decrement the loop counter */
;;;280        blkCntN3--;
0001aa  9b03              LDR      r3,[sp,#0xc]
0001ac  1e5b              SUBS     r3,r3,#1
0001ae  9303              STR      r3,[sp,#0xc]
                  |L1.432|
0001b0  9b03              LDR      r3,[sp,#0xc]          ;204
0001b2  2b00              CMP      r3,#0                 ;204
0001b4  d1bf              BNE      |L1.310|
;;;281      }
;;;282    
;;;283      /* Processing is complete.       
;;;284       ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
;;;285       ** This prepares the state buffer for the next function call. */
;;;286    
;;;287      /* Points to the start of the state buffer */
;;;288      pStateCurnt = S->pState;
0001b6  6880              LDR      r0,[r0,#8]
;;;289    
;;;290      i = (numTaps - 1u) >> 2u;
0001b8  9909              LDR      r1,[sp,#0x24]
0001ba  0889              LSRS     r1,r1,#2
;;;291    
;;;292      /* copy data */
;;;293      while(i > 0u)
0001bc  e006              B        |L1.460|
                  |L1.446|
;;;294      {
;;;295        *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
0001be  683a              LDR      r2,[r7,#0]
0001c0  6002              STR      r2,[r0,#0]
;;;296        *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
0001c2  687a              LDR      r2,[r7,#4]
0001c4  3708              ADDS     r7,r7,#8
0001c6  6042              STR      r2,[r0,#4]
0001c8  3008              ADDS     r0,r0,#8
;;;297    
;;;298        /* Decrement the loop counter */
;;;299        i--;
0001ca  1e49              SUBS     r1,r1,#1
                  |L1.460|
0001cc  2900              CMP      r1,#0                 ;293
0001ce  d1f6              BNE      |L1.446|
;;;300      }
;;;301    
;;;302      i = (numTaps - 1u) % 0x04u;
0001d0  9909              LDR      r1,[sp,#0x24]
0001d2  f0010103          AND      r1,r1,#3
;;;303    
;;;304      /* copy data */
;;;305      while(i > 0u)
0001d6  e004              B        |L1.482|
                  |L1.472|
;;;306      {
;;;307        *pStateCurnt++ = *pState++;
0001d8  f8372b02          LDRH     r2,[r7],#2
0001dc  f8202b02          STRH     r2,[r0],#2
;;;308    
;;;309        /* Decrement the loop counter */
;;;310        i--;
0001e0  1e49              SUBS     r1,r1,#1
                  |L1.482|
0001e2  2900              CMP      r1,#0                 ;305
0001e4  d1f8              BNE      |L1.472|
;;;311      }
;;;312    }
0001e6  b00a              ADD      sp,sp,#0x28
0001e8  e8bd8ff0          POP      {r4-r11,pc}
;;;313    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_fir_decimate_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q15_c_9b6462e7____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___22_arm_fir_decimate_q15_c_9b6462e7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q15_c_9b6462e7____REVSH|
#line 144
|__asm___22_arm_fir_decimate_q15_c_9b6462e7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_fir_decimate_q15_c_9b6462e7____RRX|
#line 300
|__asm___22_arm_fir_decimate_q15_c_9b6462e7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
