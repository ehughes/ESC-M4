; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_biquad_cascade_df2t_f64.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_biquad_cascade_df2t_f64.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_biquad_cascade_df2t_f64.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_biquad_cascade_df2T_f64.c]
                          THUMB

                          AREA ||i.arm_biquad_cascade_df2T_f64||, CODE, READONLY, ALIGN=1

                  arm_biquad_cascade_df2T_f64 PROC
;;;154    LOW_OPTIMIZATION_ENTER
;;;155    void arm_biquad_cascade_df2T_f64(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;156    const arm_biquad_cascade_df2T_instance_f64 * S,
;;;157    float64_t * pSrc,
;;;158    float64_t * pDst,
;;;159    uint32_t blockSize)
;;;160    {
000004  460c              MOV      r4,r1
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  b099              SUB      sp,sp,#0x64
00000c  4692              MOV      r10,r2
00000e  469b              MOV      r11,r3
;;;161    
;;;162       float64_t *pIn = pSrc;                         /*  source pointer            */
;;;163       float64_t *pOut = pDst;                        /*  destination pointer       */
000010  4655              MOV      r5,r10
;;;164       float64_t *pState = S->pState;                 /*  State pointer             */
000012  6846              LDR      r6,[r0,#4]
;;;165       float64_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
000014  f8d08008          LDR      r8,[r0,#8]
;;;166       float64_t acc1;                                /*  accumulator               */
;;;167       float64_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
;;;168       float64_t Xn1;                                 /*  temporary input           */
;;;169       float64_t d1, d2;                              /*  state variables           */
;;;170       uint32_t sample, stage = S->numStages;         /*  loop counters             */
000018  f8909000          LDRB     r9,[r0,#0]
;;;171    
;;;172    #if defined(ARM_MATH_CM7)
;;;173    	
;;;174       float64_t Xn2, Xn3, Xn4, Xn5, Xn6, Xn7, Xn8;   /*  Input State variables     */
;;;175       float64_t Xn9, Xn10, Xn11, Xn12, Xn13, Xn14, Xn15, Xn16;
;;;176       float64_t acc2, acc3, acc4, acc5, acc6, acc7;  /*  Simulates the accumulator */
;;;177       float64_t acc8, acc9, acc10, acc11, acc12, acc13, acc14, acc15, acc16;
;;;178    
;;;179       do
;;;180       {
;;;181          /* Reading the coefficients */ 
;;;182          b0 = pCoeffs[0]; 
;;;183          b1 = pCoeffs[1]; 
;;;184          b2 = pCoeffs[2]; 
;;;185          a1 = pCoeffs[3]; 
;;;186          /* Apply loop unrolling and compute 16 output values simultaneously. */ 
;;;187          sample = blockSize >> 4u; 
;;;188          a2 = pCoeffs[4]; 
;;;189    
;;;190          /*Reading the state values */ 
;;;191          d1 = pState[0]; 
;;;192          d2 = pState[1]; 
;;;193    
;;;194          pCoeffs += 5u;
;;;195    
;;;196          
;;;197          /* First part of the processing with loop unrolling.  Compute 16 outputs at a time.       
;;;198           ** a second loop below computes the remaining 1 to 15 samples. */
;;;199          while(sample > 0u) {
;;;200    
;;;201             /* y[n] = b0 * x[n] + d1 */
;;;202             /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;203             /* d2 = b2 * x[n] + a2 * y[n] */
;;;204    
;;;205             /* Read the first 2 inputs. 2 cycles */
;;;206             Xn1  = pIn[0 ];
;;;207             Xn2  = pIn[1 ];
;;;208    
;;;209             /* Sample 1. 5 cycles */
;;;210             Xn3  = pIn[2 ];
;;;211             acc1 = b0 * Xn1 + d1;
;;;212             
;;;213             Xn4  = pIn[3 ];
;;;214             d1 = b1 * Xn1 + d2;
;;;215             
;;;216             Xn5  = pIn[4 ];
;;;217             d2 = b2 * Xn1;
;;;218             
;;;219             Xn6  = pIn[5 ];
;;;220             d1 += a1 * acc1;
;;;221             
;;;222             Xn7  = pIn[6 ];
;;;223             d2 += a2 * acc1;
;;;224    
;;;225             /* Sample 2. 5 cycles */
;;;226             Xn8  = pIn[7 ];
;;;227             acc2 = b0 * Xn2 + d1;
;;;228             
;;;229             Xn9  = pIn[8 ];
;;;230             d1 = b1 * Xn2 + d2;
;;;231             
;;;232             Xn10 = pIn[9 ];
;;;233             d2 = b2 * Xn2;
;;;234             
;;;235             Xn11 = pIn[10];
;;;236             d1 += a1 * acc2;
;;;237             
;;;238             Xn12 = pIn[11];
;;;239             d2 += a2 * acc2;
;;;240    
;;;241             /* Sample 3. 5 cycles */
;;;242             Xn13 = pIn[12];
;;;243             acc3 = b0 * Xn3 + d1;
;;;244             
;;;245             Xn14 = pIn[13];
;;;246             d1 = b1 * Xn3 + d2;
;;;247             
;;;248             Xn15 = pIn[14];
;;;249             d2 = b2 * Xn3;
;;;250             
;;;251             Xn16 = pIn[15];
;;;252             d1 += a1 * acc3;
;;;253             
;;;254             pIn += 16;
;;;255             d2 += a2 * acc3;
;;;256    
;;;257             /* Sample 4. 5 cycles */
;;;258             acc4 = b0 * Xn4 + d1;
;;;259             d1 = b1 * Xn4 + d2;
;;;260             d2 = b2 * Xn4;
;;;261             d1 += a1 * acc4;
;;;262             d2 += a2 * acc4;
;;;263    
;;;264             /* Sample 5. 5 cycles */
;;;265             acc5 = b0 * Xn5 + d1;
;;;266             d1 = b1 * Xn5 + d2;
;;;267             d2 = b2 * Xn5;
;;;268             d1 += a1 * acc5;
;;;269             d2 += a2 * acc5;
;;;270    
;;;271             /* Sample 6. 5 cycles */
;;;272             acc6 = b0 * Xn6 + d1;
;;;273             d1 = b1 * Xn6 + d2;
;;;274             d2 = b2 * Xn6;
;;;275             d1 += a1 * acc6;
;;;276             d2 += a2 * acc6;
;;;277    
;;;278             /* Sample 7. 5 cycles */
;;;279             acc7 = b0 * Xn7 + d1;
;;;280             d1 = b1 * Xn7 + d2;
;;;281             d2 = b2 * Xn7;
;;;282             d1 += a1 * acc7;
;;;283             d2 += a2 * acc7;
;;;284    
;;;285             /* Sample 8. 5 cycles */
;;;286             acc8 = b0 * Xn8 + d1;
;;;287             d1 = b1 * Xn8 + d2;
;;;288             d2 = b2 * Xn8;
;;;289             d1 += a1 * acc8;
;;;290             d2 += a2 * acc8;
;;;291    
;;;292             /* Sample 9. 5 cycles */
;;;293             acc9 = b0 * Xn9 + d1;
;;;294             d1 = b1 * Xn9 + d2;
;;;295             d2 = b2 * Xn9;
;;;296             d1 += a1 * acc9;
;;;297             d2 += a2 * acc9;
;;;298    
;;;299             /* Sample 10. 5 cycles */
;;;300             acc10 = b0 * Xn10 + d1;
;;;301             d1 = b1 * Xn10 + d2;
;;;302             d2 = b2 * Xn10;
;;;303             d1 += a1 * acc10;
;;;304             d2 += a2 * acc10;
;;;305    
;;;306             /* Sample 11. 5 cycles */
;;;307             acc11 = b0 * Xn11 + d1;
;;;308             d1 = b1 * Xn11 + d2;
;;;309             d2 = b2 * Xn11;
;;;310             d1 += a1 * acc11;
;;;311             d2 += a2 * acc11;
;;;312    
;;;313             /* Sample 12. 5 cycles */
;;;314             acc12 = b0 * Xn12 + d1;
;;;315             d1 = b1 * Xn12 + d2;
;;;316             d2 = b2 * Xn12;
;;;317             d1 += a1 * acc12;
;;;318             d2 += a2 * acc12;
;;;319    
;;;320             /* Sample 13. 5 cycles */
;;;321             acc13 = b0 * Xn13 + d1;         
;;;322             d1 = b1 * Xn13 + d2;         
;;;323             d2 = b2 * Xn13;
;;;324             
;;;325             pOut[0 ] = acc1 ;
;;;326             d1 += a1 * acc13;
;;;327             
;;;328             pOut[1 ] = acc2 ;	
;;;329             d2 += a2 * acc13;
;;;330    
;;;331             /* Sample 14. 5 cycles */
;;;332             pOut[2 ] = acc3 ;	
;;;333             acc14 = b0 * Xn14 + d1;
;;;334                 
;;;335             pOut[3 ] = acc4 ;
;;;336             d1 = b1 * Xn14 + d2;
;;;337              
;;;338             pOut[4 ] = acc5 ; 
;;;339             d2 = b2 * Xn14;
;;;340             
;;;341             pOut[5 ] = acc6 ;	  
;;;342             d1 += a1 * acc14;
;;;343             
;;;344             pOut[6 ] = acc7 ;	
;;;345             d2 += a2 * acc14;
;;;346    
;;;347             /* Sample 15. 5 cycles */
;;;348             pOut[7 ] = acc8 ;
;;;349             pOut[8 ] = acc9 ;  
;;;350             acc15 = b0 * Xn15 + d1;
;;;351                  
;;;352             pOut[9 ] = acc10;	
;;;353             d1 = b1 * Xn15 + d2;
;;;354             
;;;355             pOut[10] = acc11;	
;;;356             d2 = b2 * Xn15;
;;;357             
;;;358             pOut[11] = acc12;
;;;359             d1 += a1 * acc15;
;;;360             
;;;361             pOut[12] = acc13;
;;;362             d2 += a2 * acc15;
;;;363    
;;;364             /* Sample 16. 5 cycles */
;;;365             pOut[13] = acc14;	
;;;366             acc16 = b0 * Xn16 + d1;
;;;367             
;;;368             pOut[14] = acc15;	
;;;369             d1 = b1 * Xn16 + d2;
;;;370             
;;;371             pOut[15] = acc16;
;;;372             d2 = b2 * Xn16;
;;;373             
;;;374             sample--;	 
;;;375             d1 += a1 * acc16;
;;;376             
;;;377             pOut += 16;
;;;378             d2 += a2 * acc16;
;;;379          }
;;;380    
;;;381          sample = blockSize & 0xFu;
;;;382          while(sample > 0u) {
;;;383             Xn1 = *pIn;         
;;;384             acc1 = b0 * Xn1 + d1;
;;;385             
;;;386             pIn++;
;;;387             d1 = b1 * Xn1 + d2;
;;;388             
;;;389             *pOut = acc1; 
;;;390             d2 = b2 * Xn1;
;;;391             
;;;392             pOut++;
;;;393             d1 += a1 * acc1;
;;;394             
;;;395             sample--;	
;;;396             d2 += a2 * acc1; 
;;;397          }
;;;398    
;;;399          /* Store the updated state variables back into the state array */ 
;;;400          pState[0] = d1; 
;;;401          /* The current stage input is given as the output to the next stage */ 
;;;402          pIn = pDst; 
;;;403          
;;;404          pState[1] = d2; 
;;;405          /* decrement the loop counter */ 
;;;406          stage--; 
;;;407    
;;;408          pState += 2u;
;;;409    
;;;410          /*Reset the output working pointer */ 
;;;411          pOut = pDst; 
;;;412    
;;;413       } while(stage > 0u);
;;;414    	
;;;415    #elif defined(ARM_MATH_CM0_FAMILY)
;;;416    
;;;417       /* Run the below code for Cortex-M0 */
;;;418    
;;;419       do
;;;420       {
;;;421          /* Reading the coefficients */
;;;422          b0 = *pCoeffs++;
;;;423          b1 = *pCoeffs++;
;;;424          b2 = *pCoeffs++;
;;;425          a1 = *pCoeffs++;
;;;426          a2 = *pCoeffs++;
;;;427    
;;;428          /*Reading the state values */
;;;429          d1 = pState[0];
;;;430          d2 = pState[1];
;;;431    
;;;432    
;;;433          sample = blockSize;
;;;434    
;;;435          while(sample > 0u)
;;;436          {
;;;437             /* Read the input */
;;;438             Xn1 = *pIn++;
;;;439    
;;;440             /* y[n] = b0 * x[n] + d1 */
;;;441             acc1 = (b0 * Xn1) + d1;
;;;442    
;;;443             /* Store the result in the accumulator in the destination buffer. */
;;;444             *pOut++ = acc1;
;;;445    
;;;446             /* Every time after the output is computed state should be updated. */
;;;447             /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;448             d1 = ((b1 * Xn1) + (a1 * acc1)) + d2;
;;;449    
;;;450             /* d2 = b2 * x[n] + a2 * y[n] */
;;;451             d2 = (b2 * Xn1) + (a2 * acc1);
;;;452    
;;;453             /* decrement the loop counter */
;;;454             sample--;
;;;455          }
;;;456    
;;;457          /* Store the updated state variables back into the state array */
;;;458          *pState++ = d1;
;;;459          *pState++ = d2;
;;;460    
;;;461          /* The current stage input is given as the output to the next stage */
;;;462          pIn = pDst;
;;;463    
;;;464          /*Reset the output working pointer */
;;;465          pOut = pDst;
;;;466    
;;;467          /* decrement the loop counter */
;;;468          stage--;
;;;469    
;;;470       } while(stage > 0u);
;;;471    	 
;;;472    #else
;;;473    
;;;474       float64_t Xn2, Xn3, Xn4;                  	  /*  Input State variables     */
;;;475       float64_t acc2, acc3, acc4;              		  /*  accumulator               */
;;;476    
;;;477    
;;;478       float64_t p0, p1, p2, p3, p4, A1;
;;;479    
;;;480       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;481       do
;;;482       {
;;;483          /* Reading the coefficients */     
;;;484          b0 = *pCoeffs++;
;;;485          b1 = *pCoeffs++;
;;;486          b2 = *pCoeffs++;
;;;487          a1 = *pCoeffs++;
;;;488          a2 = *pCoeffs++;
;;;489          
;;;490    
;;;491          /*Reading the state values */
;;;492          d1 = pState[0];
;;;493          d2 = pState[1];
;;;494    
;;;495          /* Apply loop unrolling and compute 4 output values simultaneously. */
;;;496          sample = blockSize >> 2u;
00001c  ea4f009b          LSR      r0,r11,#2
000020  9018              STR      r0,[sp,#0x60]
                  |L1.34|
000022  ecb88b02          VLDM     r8!,{d8}              ;484
000026  ecb89b02          VLDM     r8!,{d9}              ;485
00002a  ecb8ab02          VLDM     r8!,{d10}             ;486
00002e  ecb8bb02          VLDM     r8!,{d11}             ;487
000032  ecb8cb02          VLDM     r8!,{d12}             ;488
000036  ed96db00          VLDR     d13,[r6,#0]           ;492
00003a  ed96eb02          VLDR     d14,[r6,#8]           ;493
00003e  9f18              LDR      r7,[sp,#0x60]
;;;497    
;;;498          /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
;;;499       ** a second loop below computes the remaining 1 to 3 samples. */
;;;500          while(sample > 0u) {
000040  e194              B        |L1.876|
                  |L1.66|
;;;501    
;;;502             /* y[n] = b0 * x[n] + d1 */
;;;503             /* d1 = b1 * x[n] + a1 * y[n] + d2 */
;;;504             /* d2 = b2 * x[n] + a2 * y[n] */
;;;505    
;;;506             /* Read the four inputs */
;;;507             Xn1 = pIn[0];
000042  ed94fb00          VLDR     d15,[r4,#0]
;;;508             Xn2 = pIn[1];
000046  ed940b02          VLDR     d0,[r4,#8]
00004a  ed8d0b10          VSTR     d0,[sp,#0x40]
;;;509             Xn3 = pIn[2];
00004e  ed940b04          VLDR     d0,[r4,#0x10]
000052  ed8d0b0e          VSTR     d0,[sp,#0x38]
;;;510             Xn4 = pIn[3];
000056  ed940b06          VLDR     d0,[r4,#0x18]
00005a  ed8d0b0c          VSTR     d0,[sp,#0x30]
;;;511             pIn += 4;     
00005e  3420              ADDS     r4,r4,#0x20
;;;512    
;;;513             p0 = b0 * Xn1; 
000060  ec532b1f          VMOV     r2,r3,d15
000064  ec510b18          VMOV     r0,r1,d8
000068  f7fffffe          BL       __aeabi_dmul
00006c  ec410b10          VMOV     d0,r0,r1
000070  ed8d0b06          VSTR     d0,[sp,#0x18]
;;;514             p1 = b1 * Xn1;
000074  ec532b1f          VMOV     r2,r3,d15
000078  ec510b19          VMOV     r0,r1,d9
00007c  f7fffffe          BL       __aeabi_dmul
000080  ec410b10          VMOV     d0,r0,r1
000084  ed8d0b04          VSTR     d0,[sp,#0x10]
;;;515             acc1 = p0 + d1;
000088  ed9d0b06          VLDR     d0,[sp,#0x18]
00008c  ec532b1d          VMOV     r2,r3,d13
000090  ec510b10          VMOV     r0,r1,d0
000094  f7fffffe          BL       __aeabi_dadd
000098  ec410b10          VMOV     d0,r0,r1
00009c  ed8d0b16          VSTR     d0,[sp,#0x58]
;;;516             p0 = b0 * Xn2; 
0000a0  ed9d0b10          VLDR     d0,[sp,#0x40]
0000a4  ec510b18          VMOV     r0,r1,d8
0000a8  ec532b10          VMOV     r2,r3,d0
0000ac  f7fffffe          BL       __aeabi_dmul
0000b0  ec410b10          VMOV     d0,r0,r1
0000b4  ed8d0b06          VSTR     d0,[sp,#0x18]
;;;517             p3 = a1 * acc1;
0000b8  ed9d0b16          VLDR     d0,[sp,#0x58]
0000bc  ec510b1b          VMOV     r0,r1,d11
0000c0  ec532b10          VMOV     r2,r3,d0
0000c4  f7fffffe          BL       __aeabi_dmul
0000c8  ec410b1d          VMOV     d13,r0,r1
;;;518             p2 = b2 * Xn1;
0000cc  ec532b1f          VMOV     r2,r3,d15
0000d0  ec510b1a          VMOV     r0,r1,d10
0000d4  f7fffffe          BL       __aeabi_dmul
0000d8  ec410b10          VMOV     d0,r0,r1
0000dc  ed8d0b02          VSTR     d0,[sp,#8]
;;;519             A1 = p1 + p3;
0000e0  ed9d0b04          VLDR     d0,[sp,#0x10]
0000e4  ec532b1d          VMOV     r2,r3,d13
0000e8  ec510b10          VMOV     r0,r1,d0
0000ec  f7fffffe          BL       __aeabi_dadd
0000f0  ec410b1f          VMOV     d15,r0,r1
;;;520             p4 = a2 * acc1;
0000f4  ed9d0b16          VLDR     d0,[sp,#0x58]
0000f8  ec510b1c          VMOV     r0,r1,d12
0000fc  ec532b10          VMOV     r2,r3,d0
000100  f7fffffe          BL       __aeabi_dmul
000104  ec410b1d          VMOV     d13,r0,r1
;;;521             d1 = A1 + d2;
000108  ec532b1e          VMOV     r2,r3,d14
00010c  ec510b1f          VMOV     r0,r1,d15
000110  f7fffffe          BL       __aeabi_dadd
000114  ec410b1e          VMOV     d14,r0,r1
;;;522             d2 = p2 + p4;
000118  ed9d0b02          VLDR     d0,[sp,#8]
00011c  ec532b1d          VMOV     r2,r3,d13
000120  ec510b10          VMOV     r0,r1,d0
000124  f7fffffe          BL       __aeabi_dadd
000128  ec410b10          VMOV     d0,r0,r1
00012c  ed8d0b12          VSTR     d0,[sp,#0x48]
;;;523    
;;;524             p1 = b1 * Xn2;
000130  ed9d0b10          VLDR     d0,[sp,#0x40]
000134  ec510b19          VMOV     r0,r1,d9
000138  ec532b10          VMOV     r2,r3,d0
00013c  f7fffffe          BL       __aeabi_dmul
000140  ec410b10          VMOV     d0,r0,r1
000144  ed8d0b04          VSTR     d0,[sp,#0x10]
;;;525             acc2 = p0 + d1;
000148  ed9d0b06          VLDR     d0,[sp,#0x18]
00014c  ec532b1e          VMOV     r2,r3,d14
000150  ec510b10          VMOV     r0,r1,d0
000154  f7fffffe          BL       __aeabi_dadd
000158  ec410b1f          VMOV     d15,r0,r1
;;;526             p0 = b0 * Xn3;	 
00015c  ed9d0b0e          VLDR     d0,[sp,#0x38]
000160  ec510b18          VMOV     r0,r1,d8
000164  ec532b10          VMOV     r2,r3,d0
000168  f7fffffe          BL       __aeabi_dmul
00016c  ec410b10          VMOV     d0,r0,r1
000170  ed8d0b06          VSTR     d0,[sp,#0x18]
;;;527             p3 = a1 * acc2; 
000174  ec532b1f          VMOV     r2,r3,d15
000178  ec510b1b          VMOV     r0,r1,d11
00017c  f7fffffe          BL       __aeabi_dmul
000180  ec410b1d          VMOV     d13,r0,r1
;;;528             p2 = b2 * Xn2;                                 
000184  ed9d0b10          VLDR     d0,[sp,#0x40]
000188  ec510b1a          VMOV     r0,r1,d10
00018c  ec532b10          VMOV     r2,r3,d0
000190  f7fffffe          BL       __aeabi_dmul
000194  ec410b10          VMOV     d0,r0,r1
000198  ed8d0b02          VSTR     d0,[sp,#8]
;;;529             A1 = p1 + p3;
00019c  ed9d0b04          VLDR     d0,[sp,#0x10]
0001a0  ec532b1d          VMOV     r2,r3,d13
0001a4  ec510b10          VMOV     r0,r1,d0
0001a8  f7fffffe          BL       __aeabi_dadd
0001ac  ec410b1d          VMOV     d13,r0,r1
;;;530             p4 = a2 * acc2;
0001b0  ec532b1f          VMOV     r2,r3,d15
0001b4  ec510b1c          VMOV     r0,r1,d12
0001b8  f7fffffe          BL       __aeabi_dmul
0001bc  ec410b1e          VMOV     d14,r0,r1
;;;531             d1 = A1 + d2;
0001c0  ed9d0b12          VLDR     d0,[sp,#0x48]
0001c4  ec510b1d          VMOV     r0,r1,d13
0001c8  ec532b10          VMOV     r2,r3,d0
0001cc  f7fffffe          BL       __aeabi_dadd
0001d0  ec410b1d          VMOV     d13,r0,r1
;;;532             d2 = p2 + p4;
0001d4  ed9d0b02          VLDR     d0,[sp,#8]
0001d8  ec532b1e          VMOV     r2,r3,d14
0001dc  ec510b10          VMOV     r0,r1,d0
0001e0  f7fffffe          BL       __aeabi_dadd
0001e4  ec410b10          VMOV     d0,r0,r1
0001e8  ed8d0b12          VSTR     d0,[sp,#0x48]
;;;533    
;;;534             p1 = b1 * Xn3;
0001ec  ed9d0b0e          VLDR     d0,[sp,#0x38]
0001f0  ec510b19          VMOV     r0,r1,d9
0001f4  ec532b10          VMOV     r2,r3,d0
0001f8  f7fffffe          BL       __aeabi_dmul
0001fc  ec410b1e          VMOV     d14,r0,r1
;;;535             acc3 = p0 + d1;
000200  ed9d0b06          VLDR     d0,[sp,#0x18]
000204  ec532b1d          VMOV     r2,r3,d13
000208  ec510b10          VMOV     r0,r1,d0
00020c  f7fffffe          BL       __aeabi_dadd
000210  e9cd010a          STRD     r0,r1,[sp,#0x28]
;;;536             p0 = b0 * Xn4;	
000214  ed9d0b0c          VLDR     d0,[sp,#0x30]
000218  ec510b18          VMOV     r0,r1,d8
00021c  ec532b10          VMOV     r2,r3,d0
000220  f7fffffe          BL       __aeabi_dmul
000224  ec410b10          VMOV     d0,r0,r1
000228  ed8d0b06          VSTR     d0,[sp,#0x18]
;;;537             p3 = a1 * acc3;
00022c  ed9d0b0a          VLDR     d0,[sp,#0x28]
000230  ec510b1b          VMOV     r0,r1,d11
000234  ec532b10          VMOV     r2,r3,d0
000238  f7fffffe          BL       __aeabi_dmul
00023c  ec410b1d          VMOV     d13,r0,r1
;;;538             p2 = b2 * Xn3;
000240  ed9d0b0e          VLDR     d0,[sp,#0x38]
000244  ec510b1a          VMOV     r0,r1,d10
000248  ec532b10          VMOV     r2,r3,d0
00024c  f7fffffe          BL       __aeabi_dmul
000250  ec410b10          VMOV     d0,r0,r1
000254  ed8d0b02          VSTR     d0,[sp,#8]
;;;539             A1 = p1 + p3;
000258  ec532b1d          VMOV     r2,r3,d13
00025c  ec510b1e          VMOV     r0,r1,d14
000260  f7fffffe          BL       __aeabi_dadd
000264  ec410b1d          VMOV     d13,r0,r1
;;;540             p4 = a2 * acc3;
000268  ed9d0b0a          VLDR     d0,[sp,#0x28]
00026c  ec510b1c          VMOV     r0,r1,d12
000270  ec532b10          VMOV     r2,r3,d0
000274  f7fffffe          BL       __aeabi_dmul
000278  ec410b1e          VMOV     d14,r0,r1
;;;541             d1 = A1 + d2;
00027c  ed9d0b12          VLDR     d0,[sp,#0x48]
000280  ec510b1d          VMOV     r0,r1,d13
000284  ec532b10          VMOV     r2,r3,d0
000288  f7fffffe          BL       __aeabi_dadd
00028c  ec410b1d          VMOV     d13,r0,r1
;;;542             d2 = p2 + p4;
000290  ed9d0b02          VLDR     d0,[sp,#8]
000294  ec532b1e          VMOV     r2,r3,d14
000298  ec510b10          VMOV     r0,r1,d0
00029c  f7fffffe          BL       __aeabi_dadd
0002a0  ec410b10          VMOV     d0,r0,r1
0002a4  ed8d0b12          VSTR     d0,[sp,#0x48]
;;;543    
;;;544             acc4 = p0 + d1;
0002a8  ed9d0b06          VLDR     d0,[sp,#0x18]
0002ac  ec532b1d          VMOV     r2,r3,d13
0002b0  ec510b10          VMOV     r0,r1,d0
0002b4  f7fffffe          BL       __aeabi_dadd
0002b8  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;545             p1 = b1 * Xn4;
0002bc  ed9d0b0c          VLDR     d0,[sp,#0x30]
0002c0  ec510b19          VMOV     r0,r1,d9
0002c4  ec532b10          VMOV     r2,r3,d0
0002c8  f7fffffe          BL       __aeabi_dmul
0002cc  ec410b1d          VMOV     d13,r0,r1
;;;546             p3 = a1 * acc4;
0002d0  ed9d0b08          VLDR     d0,[sp,#0x20]
0002d4  ec510b1b          VMOV     r0,r1,d11
0002d8  ec532b10          VMOV     r2,r3,d0
0002dc  f7fffffe          BL       __aeabi_dmul
0002e0  ec410b1e          VMOV     d14,r0,r1
;;;547             p2 = b2 * Xn4;
0002e4  ed9d0b0c          VLDR     d0,[sp,#0x30]
0002e8  ec510b1a          VMOV     r0,r1,d10
0002ec  ec532b10          VMOV     r2,r3,d0
0002f0  f7fffffe          BL       __aeabi_dmul
0002f4  ec410b10          VMOV     d0,r0,r1
0002f8  ed8d0b02          VSTR     d0,[sp,#8]
;;;548             A1 = p1 + p3;
0002fc  ec532b1e          VMOV     r2,r3,d14
000300  ec510b1d          VMOV     r0,r1,d13
000304  f7fffffe          BL       __aeabi_dadd
000308  ec410b1d          VMOV     d13,r0,r1
;;;549             p4 = a2 * acc4;
00030c  ed9d0b08          VLDR     d0,[sp,#0x20]
000310  ec510b1c          VMOV     r0,r1,d12
000314  ec532b10          VMOV     r2,r3,d0
000318  f7fffffe          BL       __aeabi_dmul
00031c  ec410b1e          VMOV     d14,r0,r1
;;;550             d1 = A1 + d2;
000320  ed9d0b12          VLDR     d0,[sp,#0x48]
000324  ec510b1d          VMOV     r0,r1,d13
000328  ec532b10          VMOV     r2,r3,d0
00032c  f7fffffe          BL       __aeabi_dadd
000330  ec410b1d          VMOV     d13,r0,r1
;;;551             d2 = p2 + p4;
000334  ed9d0b02          VLDR     d0,[sp,#8]
000338  ec532b1e          VMOV     r2,r3,d14
00033c  ec510b10          VMOV     r0,r1,d0
000340  f7fffffe          BL       __aeabi_dadd
000344  ec410b1e          VMOV     d14,r0,r1
;;;552    
;;;553             pOut[0] = acc1;	
000348  ed9d0b16          VLDR     d0,[sp,#0x58]
00034c  ed850b00          VSTR     d0,[r5,#0]
;;;554             pOut[1] = acc2;	
000350  ec510b1f          VMOV     r0,r1,d15
000354  e9c50102          STRD     r0,r1,[r5,#8]
;;;555             pOut[2] = acc3;	
000358  e9dd010a          LDRD     r0,r1,[sp,#0x28]
00035c  e9c50104          STRD     r0,r1,[r5,#0x10]
;;;556             pOut[3] = acc4;
000360  e9dd0108          LDRD     r0,r1,[sp,#0x20]
000364  e9c50106          STRD     r0,r1,[r5,#0x18]
;;;557    				 pOut += 4;
000368  3520              ADDS     r5,r5,#0x20
;;;558    				 
;;;559             sample--;	       
00036a  1e7f              SUBS     r7,r7,#1
                  |L1.876|
00036c  2f00              CMP      r7,#0                 ;500
00036e  f47fae68          BNE      |L1.66|
;;;560          }
;;;561    
;;;562          sample = blockSize & 0x3u;
000372  f00b0703          AND      r7,r11,#3
;;;563          while(sample > 0u) {
000376  e060              B        |L1.1082|
                  |L1.888|
;;;564             Xn1 = *pIn++;
000378  ecb40b02          VLDM     r4!,{d0}
00037c  ed8d0b14          VSTR     d0,[sp,#0x50]
;;;565    
;;;566             p0 = b0 * Xn1; 
000380  ed9d0b14          VLDR     d0,[sp,#0x50]
000384  ec510b18          VMOV     r0,r1,d8
000388  ec532b10          VMOV     r2,r3,d0
00038c  f7fffffe          BL       __aeabi_dmul
000390  ec410b1f          VMOV     d15,r0,r1
;;;567             p1 = b1 * Xn1;
000394  ed9d0b14          VLDR     d0,[sp,#0x50]
000398  ec510b19          VMOV     r0,r1,d9
00039c  ec532b10          VMOV     r2,r3,d0
0003a0  f7fffffe          BL       __aeabi_dmul
0003a4  ec410b10          VMOV     d0,r0,r1
0003a8  ed8d0b04          VSTR     d0,[sp,#0x10]
;;;568             acc1 = p0 + d1;
0003ac  ec532b1d          VMOV     r2,r3,d13
0003b0  ec510b1f          VMOV     r0,r1,d15
0003b4  f7fffffe          BL       __aeabi_dadd
0003b8  ec410b1f          VMOV     d15,r0,r1
;;;569             p3 = a1 * acc1;
0003bc  ec510b1b          VMOV     r0,r1,d11
0003c0  ec532b1f          VMOV     r2,r3,d15
0003c4  f7fffffe          BL       __aeabi_dmul
0003c8  ec410b1d          VMOV     d13,r0,r1
;;;570             p2 = b2 * Xn1;
0003cc  ed9d0b14          VLDR     d0,[sp,#0x50]
0003d0  ec510b1a          VMOV     r0,r1,d10
0003d4  ec532b10          VMOV     r2,r3,d0
0003d8  f7fffffe          BL       __aeabi_dmul
0003dc  ec410b10          VMOV     d0,r0,r1
0003e0  ed8d0b02          VSTR     d0,[sp,#8]
;;;571             A1 = p1 + p3;
0003e4  ed9d0b04          VLDR     d0,[sp,#0x10]
0003e8  ec532b1d          VMOV     r2,r3,d13
0003ec  ec510b10          VMOV     r0,r1,d0
0003f0  f7fffffe          BL       __aeabi_dadd
0003f4  ec410b1d          VMOV     d13,r0,r1
;;;572             p4 = a2 * acc1;
0003f8  ec532b1f          VMOV     r2,r3,d15
0003fc  ec510b1c          VMOV     r0,r1,d12
000400  f7fffffe          BL       __aeabi_dmul
000404  ec410b10          VMOV     d0,r0,r1
000408  ed8d0b00          VSTR     d0,[sp,#0]
;;;573             d1 = A1 + d2;
00040c  ec532b1e          VMOV     r2,r3,d14
000410  ec510b1d          VMOV     r0,r1,d13
000414  f7fffffe          BL       __aeabi_dadd
000418  ec410b1d          VMOV     d13,r0,r1
;;;574             d2 = p2 + p4;
00041c  ed9d0b00          VLDR     d0,[sp,#0]
000420  ec532b10          VMOV     r2,r3,d0
000424  ed9d0b02          VLDR     d0,[sp,#8]
000428  ec510b10          VMOV     r0,r1,d0
00042c  f7fffffe          BL       __aeabi_dadd
000430  ec410b1e          VMOV     d14,r0,r1
;;;575    	
;;;576             *pOut++ = acc1;
000434  eca5fb02          VSTM     r5!,{d15}
;;;577             
;;;578             sample--;	       
000438  1e7f              SUBS     r7,r7,#1
                  |L1.1082|
00043a  2f00              CMP      r7,#0                 ;563
00043c  d19c              BNE      |L1.888|
;;;579          }
;;;580    
;;;581          /* Store the updated state variables back into the state array */
;;;582          *pState++ = d1;
00043e  eca6db02          VSTM     r6!,{d13}
;;;583          *pState++ = d2;
000442  eca6eb02          VSTM     r6!,{d14}
;;;584    
;;;585          /* The current stage input is given as the output to the next stage */
;;;586          pIn = pDst;
;;;587    
;;;588          /*Reset the output working pointer */
;;;589          pOut = pDst;
000446  4654              MOV      r4,r10
000448  4625              MOV      r5,r4
;;;590    
;;;591          /* decrement the loop counter */
;;;592          stage--;
00044a  f1a90901          SUB      r9,r9,#1
;;;593    
;;;594       } while(stage > 0u);
00044e  f1b90f00          CMP      r9,#0
000452  f47fade6          BNE      |L1.34|
;;;595    
;;;596    #endif 
;;;597    
;;;598    }
000456  b019              ADD      sp,sp,#0x64
000458  ecbd8b10          VPOP     {d8-d15}
00045c  e8bd8ff0          POP      {r4-r11,pc}
;;;599    LOW_OPTIMIZATION_EXIT
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_biquad_cascade_df2T_f64.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___29_arm_biquad_cascade_df2T_f64_c_9c2d3ad2____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___29_arm_biquad_cascade_df2T_f64_c_9c2d3ad2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___29_arm_biquad_cascade_df2T_f64_c_9c2d3ad2____REVSH|
#line 144
|__asm___29_arm_biquad_cascade_df2T_f64_c_9c2d3ad2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___29_arm_biquad_cascade_df2T_f64_c_9c2d3ad2____RRX|
#line 300
|__asm___29_arm_biquad_cascade_df2T_f64_c_9c2d3ad2____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
