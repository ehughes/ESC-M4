; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_rfft_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rfft_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_rfft_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_rfft_q31.c]
                          THUMB

                          AREA ||i.arm_rfft_q31||, CODE, READONLY, ALIGN=2

                  arm_rfft_q31 PROC
;;;86     */
;;;87     void arm_rfft_q31(
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;88         const arm_rfft_instance_q31 * S,
;;;89         q31_t * pSrc,
;;;90         q31_t * pDst)
;;;91     {
000004  4604              MOV      r4,r0
;;;92         const arm_cfft_instance_q31 *S_CFFT = S->pCfft;
;;;93         uint32_t i;
;;;94         uint32_t L2 = S->fftLenReal >> 1;
000006  6947              LDR      r7,[r0,#0x14]
000008  4615              MOV      r5,r2                 ;91
00000a  6800              LDR      r0,[r0,#0]
;;;95     
;;;96         /* Calculation of RIFFT of input */
;;;97         if(S->ifftFlagR == 1u)
00000c  7922              LDRB     r2,[r4,#4]
00000e  0846              LSRS     r6,r0,#1              ;94
000010  4688              MOV      r8,r1                 ;91
000012  2a01              CMP      r2,#1
000014  d00e              BEQ      |L1.52|
;;;98         {
;;;99             /*  Real IFFT core process */
;;;100            arm_split_rifft_q31(pSrc, L2, S->pTwiddleAReal,
;;;101                                S->pTwiddleBReal, pDst, S->twidCoefRModifier);
;;;102            
;;;103            /* Complex IFFT process */
;;;104            arm_cfft_q31(S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
;;;105            
;;;106            for(i=0;i<S->fftLenReal;i++)
;;;107            {
;;;108                pDst[i] = pDst[i] << 1;
;;;109            }
;;;110        }
;;;111        else
;;;112        {
;;;113            /* Calculation of RFFT of input */
;;;114            
;;;115            /* Complex FFT process */
;;;116            arm_cfft_q31(S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
000016  7963              LDRB     r3,[r4,#5]
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       arm_cfft_q31
;;;117    
;;;118            /*  Real FFT core process */
;;;119            arm_split_rfft_q31(pSrc, L2, S->pTwiddleAReal,
00001e  68a0              LDR      r0,[r4,#8]
000020  4631              MOV      r1,r6
000022  e9cd5000          STRD     r5,r0,[sp,#0]
000026  e9d42303          LDRD     r2,r3,[r4,#0xc]
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       arm_split_rfft_q31
                  |L1.48|
;;;120                                S->pTwiddleBReal, pDst, S->twidCoefRModifier);
;;;121        }
;;;122    }
000030  e8bd81fc          POP      {r2-r8,pc}
                  |L1.52|
000034  68a0              LDR      r0,[r4,#8]            ;100
000036  4631              MOV      r1,r6                 ;100
000038  e9cd5000          STRD     r5,r0,[sp,#0]         ;100
00003c  e9d42303          LDRD     r2,r3,[r4,#0xc]       ;100
000040  4640              MOV      r0,r8                 ;100
000042  f7fffffe          BL       arm_split_rifft_q31
000046  7963              LDRB     r3,[r4,#5]            ;104
000048  7922              LDRB     r2,[r4,#4]            ;104
00004a  4629              MOV      r1,r5                 ;104
00004c  4638              MOV      r0,r7                 ;104
00004e  f7fffffe          BL       arm_cfft_q31
000052  2000              MOVS     r0,#0                 ;106
000054  e006              B        |L1.100|
000056  bf00              NOP                            ;108
                  |L1.88|
000058  f8551020          LDR      r1,[r5,r0,LSL #2]     ;108
00005c  0049              LSLS     r1,r1,#1              ;108
00005e  f8451020          STR      r1,[r5,r0,LSL #2]     ;108
000062  1c40              ADDS     r0,r0,#1              ;108
                  |L1.100|
000064  6821              LDR      r1,[r4,#0]            ;106
000066  4281              CMP      r1,r0                 ;106
000068  d8f6              BHI      |L1.88|
00006a  e7e1              B        |L1.48|
;;;123    
                          ENDP


                          AREA ||i.arm_split_rfft_q31||, CODE, READONLY, ALIGN=2

                  arm_split_rfft_q31 PROC
;;;137    */
;;;138    void arm_split_rfft_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;139        q31_t * pSrc,
;;;140        uint32_t fftLen,
;;;141        q31_t * pATable,
;;;142        q31_t * pBTable,
;;;143        q31_t * pDst,
;;;144        uint32_t modifier)
;;;145    {
000004  b08c              SUB      sp,sp,#0x30
;;;146        uint32_t i;                                    /* Loop Counter */
;;;147        q31_t outR, outI;                              /* Temporary variables for output */
;;;148        q31_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
;;;149        q31_t CoefA1, CoefA2, CoefB1;                  /* Temporary variables for twiddle coefficients */
;;;150        q31_t *pOut1 = &pDst[2], *pOut2 = &pDst[(4u * fftLen) - 1u];
;;;151        q31_t *pIn1 = &pSrc[2], *pIn2 = &pSrc[(2u * fftLen) - 1u];
000006  f1000a08          ADD      r10,r0,#8
00000a  9d15              LDR      r5,[sp,#0x54]         ;150
00000c  eb051601          ADD      r6,r5,r1,LSL #4       ;150
000010  f1a60b04          SUB      r11,r6,#4             ;150
000014  eb0006c1          ADD      r6,r0,r1,LSL #3
000018  f1a60e04          SUB      lr,r6,#4
;;;152    
;;;153        /* Init coefficient pointers */
;;;154        pCoefA = &pATable[modifier * 2u];
00001c  9e16              LDR      r6,[sp,#0x58]
;;;155        pCoefB = &pBTable[modifier * 2u];
;;;156    
;;;157        i = fftLen - 1u;
00001e  f1050408          ADD      r4,r5,#8
000022  eb0206c6          ADD      r6,r2,r6,LSL #3       ;154
000026  9a16              LDR      r2,[sp,#0x58]         ;155
000028  eb0302c2          ADD      r2,r3,r2,LSL #3       ;155
00002c  920b              STR      r2,[sp,#0x2c]
00002e  1e4a              SUBS     r2,r1,#1
000030  e042              B        |L2.184|
;;;158    
;;;159        while(i > 0u)
;;;160        {
;;;161            /*    
;;;162            outR = (pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1]    
;;;163            + pSrc[2 * n - 2 * i] * pBTable[2 * i] +    
;;;164            pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]);    
;;;165            */
;;;166    
;;;167            /* outI = (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] +    
;;;168            pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
;;;169            pIn[2 * n - 2 * i + 1] * pBTable[2 * i]); */
;;;170    
;;;171            CoefA1 = *pCoefA++;
000032  bf00              NOP      
                  |L2.52|
000034  f8569b04          LDR      r9,[r6],#4
;;;172            CoefA2 = *pCoefA;
000038  9609              STR      r6,[sp,#0x24]
00003a  6836              LDR      r6,[r6,#0]
;;;173    
;;;174            /* outR = (pSrc[2 * i] * pATable[2 * i] */    
;;;175            mult_32x32_keep32_R(outR, *pIn1, CoefA1);
00003c  f8da7000          LDR      r7,[r10,#0]
000040  fb57fc19          SMMULR   r12,r7,r9
;;;176    
;;;177            /* outI = pIn[2 * i] * pATable[2 * i + 1] */
;;;178            mult_32x32_keep32_R(outI, *pIn1++, CoefA2);
000044  f10a0304          ADD      r3,r10,#4
000048  fb57f816          SMMULR   r8,r7,r6
;;;179    
;;;180            /* - pSrc[2 * i + 1] * pATable[2 * i + 1] */
;;;181            multSub_32x32_keep32_R(outR, *pIn1, CoefA2);
00004c  cb80              LDM      r3!,{r7}
00004e  fb67cc16          SMMLSR   r12,r7,r6,r12
;;;182    
;;;183            /* (pIn[2 * i + 1] * pATable[2 * i] */
;;;184            multAcc_32x32_keep32_R(outI, *pIn1++, CoefA1);
000052  469a              MOV      r10,r3
000054  f8cdc004          STR      r12,[sp,#4]
000058  fb578c19          SMMLAR   r12,r7,r9,r8
;;;185    
;;;186            /* pSrc[2 * n - 2 * i] * pBTable[2 * i]  */
;;;187            multSub_32x32_keep32_R(outR, *pIn2, CoefA2);
00005c  f8cdc000          STR      r12,[sp,#0]
000060  f8de9000          LDR      r9,[lr,#0]
000064  f8ddc004          LDR      r12,[sp,#4]
000068  fb69c816          SMMLSR   r8,r9,r6,r12
;;;188            CoefB1 = *pCoefB;
00006c  f8cd8004          STR      r8,[sp,#4]
000070  9b0b              LDR      r3,[sp,#0x2c]
;;;189    
;;;190            /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] */
;;;191            multSub_32x32_keep32_R(outI, *pIn2--, CoefB1);
000072  f8ddc000          LDR      r12,[sp,#0]
000076  681f              LDR      r7,[r3,#0]            ;188
000078  9706              STR      r7,[sp,#0x18]
00007a  fb69c917          SMMLSR   r9,r9,r7,r12
;;;192    
;;;193            /* pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1] */
;;;194            multAcc_32x32_keep32_R(outR, *pIn2, CoefB1);
00007e  f85ecc04          LDR      r12,[lr,#-4]
000082  fb5c8717          SMMLAR   r7,r12,r7,r8
000086  f1ae0e08          SUB      lr,lr,#8
;;;195    
;;;196            /* pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
;;;197            multSub_32x32_keep32_R(outI, *pIn2--, CoefA2);
00008a  fb6c9316          SMMLSR   r3,r12,r6,r9
00008e  e8e47302          STRD     r7,r3,[r4],#8
;;;198    
;;;199            /* write output */
;;;200            *pOut1++ = outR;
;;;201            *pOut1++ = outI;
;;;202    
;;;203            /* write complex conjugate output */
;;;204            *pOut2-- = -outI;
000092  425e              RSBS     r6,r3,#0
000094  f8cb6000          STR      r6,[r11,#0]
000098  f1ab0604          SUB      r6,r11,#4
;;;205            *pOut2-- = outR;
;;;206    
;;;207            /* update coefficient pointer */
;;;208            pCoefB = pCoefB + (modifier * 2u);
;;;209            pCoefA = pCoefA + ((modifier * 2u) - 1u);
00009c  1e52              SUBS     r2,r2,#1
00009e  6037              STR      r7,[r6,#0]            ;208
0000a0  9e16              LDR      r6,[sp,#0x58]         ;208
0000a2  9b0b              LDR      r3,[sp,#0x2c]         ;208
;;;210    
;;;211            i--;
;;;212        }
;;;213        pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
;;;214        pDst[(2u * fftLen) + 1u] = 0;
;;;215    
;;;216        pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
;;;217        pDst[1] = 0;
;;;218    }
0000a4  f1ab0b08          SUB      r11,r11,#8
0000a8  eb0303c6          ADD      r3,r3,r6,LSL #3       ;208
0000ac  930b              STR      r3,[sp,#0x2c]         ;209
0000ae  9e09              LDR      r6,[sp,#0x24]         ;209
0000b0  9b16              LDR      r3,[sp,#0x58]         ;209
0000b2  eb0606c3          ADD      r6,r6,r3,LSL #3       ;209
0000b6  1f36              SUBS     r6,r6,#4              ;209
                  |L2.184|
0000b8  2a00              CMP      r2,#0                 ;159
0000ba  d1bb              BNE      |L2.52|
0000bc  e9d02300          LDRD     r2,r3,[r0,#0]         ;159
0000c0  1ad2              SUBS     r2,r2,r3              ;213
0000c2  1052              ASRS     r2,r2,#1              ;213
0000c4  f8452031          STR      r2,[r5,r1,LSL #3]     ;213
0000c8  eb0501c1          ADD      r1,r5,r1,LSL #3       ;214
0000cc  2200              MOVS     r2,#0                 ;214
0000ce  604a              STR      r2,[r1,#4]            ;214
0000d0  e9d01000          LDRD     r1,r0,[r0,#0]         ;214
0000d4  4408              ADD      r0,r0,r1              ;216
0000d6  1040              ASRS     r0,r0,#1              ;216
0000d8  e9c50200          STRD     r0,r2,[r5,#0]         ;216
0000dc  b00c              ADD      sp,sp,#0x30
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;219    
                          ENDP


                          AREA ||i.arm_split_rifft_q31||, CODE, READONLY, ALIGN=1

                  arm_split_rifft_q31 PROC
;;;229    */
;;;230    void arm_split_rifft_q31(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;231        q31_t * pSrc,
;;;232        uint32_t fftLen,
;;;233        q31_t * pATable,
;;;234        q31_t * pBTable,
;;;235        q31_t * pDst,
;;;236        uint32_t modifier)
;;;237    {
;;;238        q31_t outR, outI;                              /* Temporary variables for output */
;;;239        q31_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
;;;240        q31_t CoefA1, CoefA2, CoefB1;                  /* Temporary variables for twiddle coefficients */
;;;241        q31_t *pIn1 = &pSrc[0], *pIn2 = &pSrc[(2u * fftLen) + 1u];
000004  eb0005c1          ADD      r5,r0,r1,LSL #3
000008  e9dd4e09          LDRD     r4,lr,[sp,#0x24]      ;237
00000c  1d2d              ADDS     r5,r5,#4
00000e  e025              B        |L3.92|
                  |L3.16|
;;;242    
;;;243        pCoefA = &pATable[0];
;;;244        pCoefB = &pBTable[0];
;;;245    
;;;246        while(fftLen > 0u)
;;;247        {
;;;248            /*    
;;;249            outR = (pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] +    
;;;250            pIn[2 * n - 2 * i] * pBTable[2 * i] -    
;;;251            pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]);    
;;;252    
;;;253            outI = (pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] -    
;;;254            pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
;;;255            pIn[2 * n - 2 * i + 1] * pBTable[2 * i]);   
;;;256            */
;;;257            CoefA1 = *pCoefA++;
000010  ca80              LDM      r2!,{r7}
;;;258            CoefA2 = *pCoefA;
;;;259    
;;;260            /* outR = (pIn[2 * i] * pATable[2 * i] */
;;;261            mult_32x32_keep32_R(outR, *pIn1, CoefA1);
000012  f850cb04          LDR      r12,[r0],#4
000016  6816              LDR      r6,[r2,#0]
000018  fb5cf917          SMMULR   r9,r12,r7
;;;262    
;;;263            /* - pIn[2 * i] * pATable[2 * i + 1] */
;;;264            mult_32x32_keep32_R(outI, *pIn1++, -CoefA2);
00001c  f1c60800          RSB      r8,r6,#0
000020  fb5cfa18          SMMULR   r10,r12,r8
;;;265            
;;;266            /* pIn[2 * i + 1] * pATable[2 * i + 1] */
;;;267            multAcc_32x32_keep32_R(outR, *pIn1, CoefA2);
000024  f850cb04          LDR      r12,[r0],#4
000028  fb5c9916          SMMLAR   r9,r12,r6,r9
;;;268    
;;;269            /* pIn[2 * i + 1] * pATable[2 * i] */
;;;270            multAcc_32x32_keep32_R(outI, *pIn1++, CoefA1);
00002c  fb5caa17          SMMLAR   r10,r12,r7,r10
;;;271    
;;;272            /* pIn[2 * n - 2 * i] * pBTable[2 * i] */
;;;273            multAcc_32x32_keep32_R(outR, *pIn2, CoefA2);
000030  f8d5c000          LDR      r12,[r5,#0]
000034  fb5c9b16          SMMLAR   r11,r12,r6,r9
;;;274            CoefB1 = *pCoefB;
;;;275    
;;;276            /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] */
;;;277            multSub_32x32_keep32_R(outI, *pIn2--, CoefB1);
000038  681f              LDR      r7,[r3,#0]
00003a  fb6caa17          SMMLSR   r10,r12,r7,r10
;;;278    
;;;279            /* pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1] */
;;;280            multAcc_32x32_keep32_R(outR, *pIn2, CoefB1);
00003e  f855cc04          LDR      r12,[r5,#-4]
000042  fb5cb717          SMMLAR   r7,r12,r7,r11
;;;281    
;;;282            /* pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
;;;283            multAcc_32x32_keep32_R(outI, *pIn2--, CoefA2);
000046  fb5ca616          SMMLAR   r6,r12,r6,r10
00004a  e8e47602          STRD     r7,r6,[r4],#8
;;;284    
;;;285            /* write output */
;;;286            *pDst++ = outR;
;;;287            *pDst++ = outI;
;;;288    
;;;289            /* update coefficient pointer */
;;;290            pCoefB = pCoefB + (modifier * 2u);
;;;291            pCoefA = pCoefA + ((modifier * 2u) - 1u);
00004e  eb0202ce          ADD      r2,r2,lr,LSL #3
000052  1e49              SUBS     r1,r1,#1
000054  1f12              SUBS     r2,r2,#4
000056  eb0303ce          ADD      r3,r3,lr,LSL #3       ;290
00005a  3d08              SUBS     r5,r5,#8
                  |L3.92|
00005c  2900              CMP      r1,#0                 ;246
00005e  d1d7              BNE      |L3.16|
;;;292    
;;;293            /* Decrement loop count */
;;;294            fftLen--;
;;;295        }
;;;296    }
000060  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_rfft_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_q31_c_509a31be____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_rfft_q31_c_509a31be____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_q31_c_509a31be____REVSH|
#line 144
|__asm___14_arm_rfft_q31_c_509a31be____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_q31_c_509a31be____RRX|
#line 300
|__asm___14_arm_rfft_q31_c_509a31be____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
