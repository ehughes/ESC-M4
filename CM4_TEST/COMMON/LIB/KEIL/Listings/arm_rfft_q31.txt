; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_rfft_q31.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_rfft_q31.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_rfft_q31.crf ..\..\SRC\CMSIS_DSP_4_5\src\TransformFunctions\arm_rfft_q31.c]
                          THUMB

                          AREA ||i.arm_rfft_q31||, CODE, READONLY, ALIGN=1

                  arm_rfft_q31 PROC
;;;86     */
;;;87     void arm_rfft_q31(
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;88         const arm_rfft_instance_q31 * S,
;;;89         q31_t * pSrc,
;;;90         q31_t * pDst)
;;;91     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;92         const arm_cfft_instance_q31 *S_CFFT = S->pCfft;
00000a  f8d48014          LDR      r8,[r4,#0x14]
;;;93         uint32_t i;
;;;94         uint32_t L2 = S->fftLenReal >> 1;
00000e  6820              LDR      r0,[r4,#0]
000010  0846              LSRS     r6,r0,#1
;;;95     
;;;96         /* Calculation of RIFFT of input */
;;;97         if(S->ifftFlagR == 1u)
000012  7922              LDRB     r2,[r4,#4]
000014  2a01              CMP      r2,#1
000016  d00f              BEQ      |L1.56|
;;;98         {
;;;99             /*  Real IFFT core process */
;;;100            arm_split_rifft_q31(pSrc, L2, S->pTwiddleAReal,
;;;101                                S->pTwiddleBReal, pDst, S->twidCoefRModifier);
;;;102            
;;;103            /* Complex IFFT process */
;;;104            arm_cfft_q31(S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
;;;105            
;;;106            for(i=0;i<S->fftLenReal;i++)
;;;107            {
;;;108                pDst[i] = pDst[i] << 1;
;;;109            }
;;;110        }
;;;111        else
;;;112        {
;;;113            /* Calculation of RFFT of input */
;;;114            
;;;115            /* Complex FFT process */
;;;116            arm_cfft_q31(S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
000018  7963              LDRB     r3,[r4,#5]
00001a  4639              MOV      r1,r7
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       arm_cfft_q31
;;;117    
;;;118            /*  Real FFT core process */
;;;119            arm_split_rfft_q31(pSrc, L2, S->pTwiddleAReal,
000022  68a0              LDR      r0,[r4,#8]
000024  4631              MOV      r1,r6
000026  e9cd5000          STRD     r5,r0,[sp,#0]
00002a  e9d42303          LDRD     r2,r3,[r4,#0xc]
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       arm_split_rfft_q31
                  |L1.52|
;;;120                                S->pTwiddleBReal, pDst, S->twidCoefRModifier);
;;;121        }
;;;122    }
000034  e8bd81fc          POP      {r2-r8,pc}
                  |L1.56|
000038  68a0              LDR      r0,[r4,#8]            ;100
00003a  4631              MOV      r1,r6                 ;100
00003c  e9cd5000          STRD     r5,r0,[sp,#0]         ;100
000040  e9d42303          LDRD     r2,r3,[r4,#0xc]       ;100
000044  4638              MOV      r0,r7                 ;100
000046  f7fffffe          BL       arm_split_rifft_q31
00004a  7963              LDRB     r3,[r4,#5]            ;104
00004c  7922              LDRB     r2,[r4,#4]            ;104
00004e  4629              MOV      r1,r5                 ;104
000050  4640              MOV      r0,r8                 ;104
000052  f7fffffe          BL       arm_cfft_q31
000056  2000              MOVS     r0,#0                 ;106
000058  e005              B        |L1.102|
                  |L1.90|
00005a  f8551020          LDR      r1,[r5,r0,LSL #2]     ;108
00005e  0049              LSLS     r1,r1,#1              ;108
000060  f8451020          STR      r1,[r5,r0,LSL #2]     ;108
000064  1c40              ADDS     r0,r0,#1              ;106
                  |L1.102|
000066  6821              LDR      r1,[r4,#0]            ;106
000068  4281              CMP      r1,r0                 ;106
00006a  d8f6              BHI      |L1.90|
00006c  e7e2              B        |L1.52|
;;;123    
                          ENDP


                          AREA ||i.arm_split_rfft_q31||, CODE, READONLY, ALIGN=1

                  arm_split_rfft_q31 PROC
;;;137    */
;;;138    void arm_split_rfft_q31(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;139        q31_t * pSrc,
;;;140        uint32_t fftLen,
;;;141        q31_t * pATable,
;;;142        q31_t * pBTable,
;;;143        q31_t * pDst,
;;;144        uint32_t modifier)
;;;145    {
000004  b082              SUB      sp,sp,#8
000006  e9ddc90f          LDRD     r12,r9,[sp,#0x3c]
;;;146        uint32_t i;                                    /* Loop Counter */
;;;147        q31_t outR, outI;                              /* Temporary variables for output */
;;;148        q31_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
;;;149        q31_t CoefA1, CoefA2, CoefB1;                  /* Temporary variables for twiddle coefficients */
;;;150        q31_t *pOut1 = &pDst[2], *pOut2 = &pDst[(4u * fftLen) - 1u];
00000a  f10c0408          ADD      r4,r12,#8
00000e  9d03              LDR      r5,[sp,#0xc]
000010  f04f31ff          MOV      r1,#0xffffffff
000014  eb010585          ADD      r5,r1,r5,LSL #2
000018  eb0c0585          ADD      r5,r12,r5,LSL #2
;;;151        q31_t *pIn1 = &pSrc[2], *pIn2 = &pSrc[(2u * fftLen) - 1u];
00001c  f1000708          ADD      r7,r0,#8
000020  9e03              LDR      r6,[sp,#0xc]
000022  eb010146          ADD      r1,r1,r6,LSL #1
000026  eb000681          ADD      r6,r0,r1,LSL #2
;;;152    
;;;153        /* Init coefficient pointers */
;;;154        pCoefA = &pATable[modifier * 2u];
00002a  eb0208c9          ADD      r8,r2,r9,LSL #3
;;;155        pCoefB = &pBTable[modifier * 2u];
00002e  eb0303c9          ADD      r3,r3,r9,LSL #3
;;;156    
;;;157        i = fftLen - 1u;
000032  9a03              LDR      r2,[sp,#0xc]
000034  1e52              SUBS     r2,r2,#1
000036  e04b              B        |L2.208|
                  |L2.56|
;;;158    
;;;159        while(i > 0u)
;;;160        {
;;;161            /*    
;;;162            outR = (pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1]    
;;;163            + pSrc[2 * n - 2 * i] * pBTable[2 * i] +    
;;;164            pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]);    
;;;165            */
;;;166    
;;;167            /* outI = (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] +    
;;;168            pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
;;;169            pIn[2 * n - 2 * i + 1] * pBTable[2 * i]); */
;;;170    
;;;171            CoefA1 = *pCoefA++;
000038  f8d8a000          LDR      r10,[r8,#0]
;;;172            CoefA2 = *pCoefA;
00003c  f8581f04          LDR      r1,[r8,#4]!
;;;173    
;;;174            /* outR = (pSrc[2 * i] * pATable[2 * i] */    
;;;175            mult_32x32_keep32_R(outR, *pIn1, CoefA1);
000040  f8d7b000          LDR      r11,[r7,#0]
000044  fb5bfe1a          SMMULR   lr,r11,r10
000048  f8cde004          STR      lr,[sp,#4]
;;;176    
;;;177            /* outI = pIn[2 * i] * pATable[2 * i + 1] */
;;;178            mult_32x32_keep32_R(outI, *pIn1++, CoefA2);
00004c  1d3f              ADDS     r7,r7,#4
00004e  fb5bfe11          SMMULR   lr,r11,r1
000052  f8cde000          STR      lr,[sp,#0]
;;;179    
;;;180            /* - pSrc[2 * i + 1] * pATable[2 * i + 1] */
;;;181            multSub_32x32_keep32_R(outR, *pIn1, CoefA2);
000056  f8d7b000          LDR      r11,[r7,#0]
00005a  f8dde004          LDR      lr,[sp,#4]
00005e  fb6bee11          SMMLSR   lr,r11,r1,lr
000062  f8cde004          STR      lr,[sp,#4]
;;;182    
;;;183            /* (pIn[2 * i + 1] * pATable[2 * i] */
;;;184            multAcc_32x32_keep32_R(outI, *pIn1++, CoefA1);
000066  f8dde000          LDR      lr,[sp,#0]
00006a  1d3f              ADDS     r7,r7,#4
00006c  fb5bee1a          SMMLAR   lr,r11,r10,lr
000070  f8cde000          STR      lr,[sp,#0]
;;;185    
;;;186            /* pSrc[2 * n - 2 * i] * pBTable[2 * i]  */
;;;187            multSub_32x32_keep32_R(outR, *pIn2, CoefA2);
000074  f8d6a000          LDR      r10,[r6,#0]
000078  f8dde004          LDR      lr,[sp,#4]
00007c  fb6aee11          SMMLSR   lr,r10,r1,lr
000080  f8cde004          STR      lr,[sp,#4]
;;;188            CoefB1 = *pCoefB;
000084  f8d3b000          LDR      r11,[r3,#0]
;;;189    
;;;190            /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] */
;;;191            multSub_32x32_keep32_R(outI, *pIn2--, CoefB1);
000088  f8dde000          LDR      lr,[sp,#0]
00008c  1f36              SUBS     r6,r6,#4
00008e  fb6aee1b          SMMLSR   lr,r10,r11,lr
000092  f8cde000          STR      lr,[sp,#0]
;;;192    
;;;193            /* pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1] */
;;;194            multAcc_32x32_keep32_R(outR, *pIn2, CoefB1);
000096  f8d6a000          LDR      r10,[r6,#0]
00009a  f8dde004          LDR      lr,[sp,#4]
00009e  fb5aeb1b          SMMLAR   r11,r10,r11,lr
;;;195    
;;;196            /* pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
;;;197            multSub_32x32_keep32_R(outI, *pIn2--, CoefA2);
0000a2  f8dde000          LDR      lr,[sp,#0]
0000a6  1f36              SUBS     r6,r6,#4
0000a8  fb6ae111          SMMLSR   r1,r10,r1,lr
;;;198    
;;;199            /* write output */
;;;200            *pOut1++ = outR;
0000ac  f8c4b000          STR      r11,[r4,#0]
;;;201            *pOut1++ = outI;
0000b0  6061              STR      r1,[r4,#4]
0000b2  3408              ADDS     r4,r4,#8
;;;202    
;;;203            /* write complex conjugate output */
;;;204            *pOut2-- = -outI;
0000b4  4249              RSBS     r1,r1,#0
0000b6  f8451904          STR      r1,[r5],#-4
;;;205            *pOut2-- = outR;
0000ba  f845b904          STR      r11,[r5],#-4
;;;206    
;;;207            /* update coefficient pointer */
;;;208            pCoefB = pCoefB + (modifier * 2u);
0000be  eb0303c9          ADD      r3,r3,r9,LSL #3
;;;209            pCoefA = pCoefA + ((modifier * 2u) - 1u);
0000c2  f04f31ff          MOV      r1,#0xffffffff
0000c6  eb010149          ADD      r1,r1,r9,LSL #1
0000ca  eb080881          ADD      r8,r8,r1,LSL #2
;;;210    
;;;211            i--;
0000ce  1e52              SUBS     r2,r2,#1
                  |L2.208|
0000d0  2a00              CMP      r2,#0                 ;159
0000d2  d1b1              BNE      |L2.56|
;;;212        }
;;;213        pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
0000d4  e9d01200          LDRD     r1,r2,[r0,#0]
0000d8  1a89              SUBS     r1,r1,r2
0000da  104a              ASRS     r2,r1,#1
0000dc  9903              LDR      r1,[sp,#0xc]
0000de  f84c2031          STR      r2,[r12,r1,LSL #3]
;;;214        pDst[(2u * fftLen) + 1u] = 0;
0000e2  2100              MOVS     r1,#0
0000e4  9a03              LDR      r2,[sp,#0xc]
0000e6  2301              MOVS     r3,#1
0000e8  eb030242          ADD      r2,r3,r2,LSL #1
0000ec  f84c1022          STR      r1,[r12,r2,LSL #2]
;;;215    
;;;216        pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
0000f0  e9d02000          LDRD     r2,r0,[r0,#0]
0000f4  4410              ADD      r0,r0,r2
0000f6  1040              ASRS     r0,r0,#1
0000f8  f8cc0000          STR      r0,[r12,#0]
;;;217        pDst[1] = 0;
0000fc  f8cc1004          STR      r1,[r12,#4]
;;;218    }
000100  b006              ADD      sp,sp,#0x18
000102  e8bd8ff0          POP      {r4-r11,pc}
;;;219    
                          ENDP


                          AREA ||i.arm_split_rifft_q31||, CODE, READONLY, ALIGN=1

                  arm_split_rifft_q31 PROC
;;;229    */
;;;230    void arm_split_rifft_q31(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;231        q31_t * pSrc,
;;;232        uint32_t fftLen,
;;;233        q31_t * pATable,
;;;234        q31_t * pBTable,
;;;235        q31_t * pDst,
;;;236        uint32_t modifier)
;;;237    {
000004  e9dd6808          LDRD     r6,r8,[sp,#0x20]
;;;238        q31_t outR, outI;                              /* Temporary variables for output */
;;;239        q31_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
;;;240        q31_t CoefA1, CoefA2, CoefB1;                  /* Temporary variables for twiddle coefficients */
;;;241        q31_t *pIn1 = &pSrc[0], *pIn2 = &pSrc[(2u * fftLen) + 1u];
000008  2401              MOVS     r4,#1
00000a  eb040441          ADD      r4,r4,r1,LSL #1
00000e  eb000584          ADD      r5,r0,r4,LSL #2
000012  e02c              B        |L3.110|
                  |L3.20|
;;;242    
;;;243        pCoefA = &pATable[0];
;;;244        pCoefB = &pBTable[0];
;;;245    
;;;246        while(fftLen > 0u)
;;;247        {
;;;248            /*    
;;;249            outR = (pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] +    
;;;250            pIn[2 * n - 2 * i] * pBTable[2 * i] -    
;;;251            pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]);    
;;;252    
;;;253            outI = (pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] -    
;;;254            pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
;;;255            pIn[2 * n - 2 * i + 1] * pBTable[2 * i]);   
;;;256            */
;;;257            CoefA1 = *pCoefA++;
000014  ca80              LDM      r2!,{r7}
;;;258            CoefA2 = *pCoefA;
000016  6814              LDR      r4,[r2,#0]
;;;259    
;;;260            /* outR = (pIn[2 * i] * pATable[2 * i] */
;;;261            mult_32x32_keep32_R(outR, *pIn1, CoefA1);
000018  f8d0c000          LDR      r12,[r0,#0]
00001c  fb5cf917          SMMULR   r9,r12,r7
;;;262    
;;;263            /* - pIn[2 * i] * pATable[2 * i + 1] */
;;;264            mult_32x32_keep32_R(outI, *pIn1++, -CoefA2);
000020  1d00              ADDS     r0,r0,#4
000022  f1c40a00          RSB      r10,r4,#0
000026  fb5cfc1a          SMMULR   r12,r12,r10
;;;265            
;;;266            /* pIn[2 * i + 1] * pATable[2 * i + 1] */
;;;267            multAcc_32x32_keep32_R(outR, *pIn1, CoefA2);
00002a  f8d0a000          LDR      r10,[r0,#0]
00002e  fb5a9914          SMMLAR   r9,r10,r4,r9
;;;268    
;;;269            /* pIn[2 * i + 1] * pATable[2 * i] */
;;;270            multAcc_32x32_keep32_R(outI, *pIn1++, CoefA1);
000032  1d00              ADDS     r0,r0,#4
000034  fb5acc17          SMMLAR   r12,r10,r7,r12
;;;271    
;;;272            /* pIn[2 * n - 2 * i] * pBTable[2 * i] */
;;;273            multAcc_32x32_keep32_R(outR, *pIn2, CoefA2);
000038  f8d5a000          LDR      r10,[r5,#0]
00003c  fb5a9914          SMMLAR   r9,r10,r4,r9
;;;274            CoefB1 = *pCoefB;
000040  681f              LDR      r7,[r3,#0]
;;;275    
;;;276            /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] */
;;;277            multSub_32x32_keep32_R(outI, *pIn2--, CoefB1);
000042  1f2d              SUBS     r5,r5,#4
000044  fb6acc17          SMMLSR   r12,r10,r7,r12
;;;278    
;;;279            /* pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1] */
;;;280            multAcc_32x32_keep32_R(outR, *pIn2, CoefB1);
000048  f8d5a000          LDR      r10,[r5,#0]
00004c  fb5a9717          SMMLAR   r7,r10,r7,r9
;;;281    
;;;282            /* pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
;;;283            multAcc_32x32_keep32_R(outI, *pIn2--, CoefA2);
000050  1f2d              SUBS     r5,r5,#4
000052  fb5ac414          SMMLAR   r4,r10,r4,r12
;;;284    
;;;285            /* write output */
;;;286            *pDst++ = outR;
000056  6037              STR      r7,[r6,#0]
;;;287            *pDst++ = outI;
000058  6074              STR      r4,[r6,#4]
00005a  3608              ADDS     r6,r6,#8
;;;288    
;;;289            /* update coefficient pointer */
;;;290            pCoefB = pCoefB + (modifier * 2u);
00005c  eb0303c8          ADD      r3,r3,r8,LSL #3
;;;291            pCoefA = pCoefA + ((modifier * 2u) - 1u);
000060  f04f34ff          MOV      r4,#0xffffffff
000064  eb040448          ADD      r4,r4,r8,LSL #1
000068  eb020284          ADD      r2,r2,r4,LSL #2
;;;292    
;;;293            /* Decrement loop count */
;;;294            fftLen--;
00006c  1e49              SUBS     r1,r1,#1
                  |L3.110|
00006e  2900              CMP      r1,#0                 ;246
000070  d1d0              BNE      |L3.20|
;;;295        }
;;;296    }
000072  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\TransformFunctions\\arm_rfft_q31.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_q31_c_509a31be____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___14_arm_rfft_q31_c_509a31be____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_q31_c_509a31be____REVSH|
#line 144
|__asm___14_arm_rfft_q31_c_509a31be____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_arm_rfft_q31_c_509a31be____RRX|
#line 300
|__asm___14_arm_rfft_q31_c_509a31be____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
