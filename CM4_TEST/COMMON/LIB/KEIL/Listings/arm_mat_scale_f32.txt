; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\arm_mat_scale_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_scale_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 --omf_browse=.\objects\arm_mat_scale_f32.crf ..\..\SRC\CMSIS_DSP_4_5\src\MatrixFunctions\arm_mat_scale_f32.c]
                          THUMB

                          AREA ||i.arm_mat_scale_f32||, CODE, READONLY, ALIGN=1

                  arm_mat_scale_f32 PROC
;;;79     
;;;80     arm_status arm_mat_scale_f32(
000000  6842              LDR      r2,[r0,#4]
;;;81       const arm_matrix_instance_f32 * pSrc,
;;;82       float32_t scale,
;;;83       arm_matrix_instance_f32 * pDst)
;;;84     {
;;;85       float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
;;;86       float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
000002  6849              LDR      r1,[r1,#4]
;;;87       uint32_t numSamples;                           /* total number of elements in the matrix */
;;;88       uint32_t blkCnt;                               /* loop counters */
;;;89       arm_status status;                             /* status of matrix scaling     */
;;;90     
;;;91     #ifndef ARM_MATH_CM0_FAMILY
;;;92     
;;;93       float32_t in1, in2, in3, in4;                  /* temporary variables */
;;;94       float32_t out1, out2, out3, out4;              /* temporary variables */
;;;95     
;;;96     #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;97     
;;;98     #ifdef ARM_MATH_MATRIX_CHECK
;;;99       /* Check for matrix mismatch condition */
;;;100      if((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
;;;101      {
;;;102        /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;103        status = ARM_MATH_SIZE_MISMATCH;
;;;104      }
;;;105      else
;;;106    #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
;;;107      {
;;;108        /* Total number of samples in the input matrix */
;;;109        numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
000004  8803              LDRH     r3,[r0,#0]
000006  8840              LDRH     r0,[r0,#2]
000008  4343              MULS     r3,r0,r3
;;;110    
;;;111    #ifndef ARM_MATH_CM0_FAMILY
;;;112    
;;;113        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;114    
;;;115        /* Loop Unrolling */
;;;116        blkCnt = numSamples >> 2;
00000a  0898              LSRS     r0,r3,#2
00000c  e01a              B        |L1.68|
                  |L1.14|
;;;117    
;;;118        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;119         ** a second loop below computes the remaining 1 to 3 samples. */
;;;120        while(blkCnt > 0u)
;;;121        {
;;;122          /* C(m,n) = A(m,n) * scale */
;;;123          /* Scaling and results are stored in the destination buffer. */
;;;124          in1 = pIn[0];
00000e  ed921a00          VLDR     s2,[r2,#0]
;;;125          in2 = pIn[1];
000012  edd21a01          VLDR     s3,[r2,#4]
;;;126          in3 = pIn[2];
000016  ed922a02          VLDR     s4,[r2,#8]
;;;127          in4 = pIn[3];
00001a  edd20a03          VLDR     s1,[r2,#0xc]
;;;128    
;;;129          out1 = in1 * scale;
00001e  ee211a00          VMUL.F32 s2,s2,s0
;;;130          out2 = in2 * scale;
000022  ee611a80          VMUL.F32 s3,s3,s0
;;;131          out3 = in3 * scale;
000026  ee222a00          VMUL.F32 s4,s4,s0
;;;132          out4 = in4 * scale;
00002a  ee600a80          VMUL.F32 s1,s1,s0
;;;133    
;;;134    
;;;135          pOut[0] = out1;
00002e  ed811a00          VSTR     s2,[r1,#0]
;;;136          pOut[1] = out2;
000032  edc11a01          VSTR     s3,[r1,#4]
;;;137          pOut[2] = out3;
000036  ed812a02          VSTR     s4,[r1,#8]
;;;138          pOut[3] = out4;
00003a  edc10a03          VSTR     s1,[r1,#0xc]
;;;139    
;;;140          /* update pointers to process next sampels */
;;;141          pIn += 4u;
00003e  3210              ADDS     r2,r2,#0x10
;;;142          pOut += 4u;
000040  3110              ADDS     r1,r1,#0x10
;;;143    
;;;144          /* Decrement the numSamples loop counter */
;;;145          blkCnt--;
000042  1e40              SUBS     r0,r0,#1
                  |L1.68|
000044  2800              CMP      r0,#0                 ;120
000046  d1e2              BNE      |L1.14|
;;;146        }
;;;147    
;;;148        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;149         ** No loop unrolling is used. */
;;;150        blkCnt = numSamples % 0x4u;
000048  f0030003          AND      r0,r3,#3
;;;151    
;;;152    #else
;;;153    
;;;154        /* Run the below code for Cortex-M0 */
;;;155    
;;;156        /* Initialize blkCnt with number of samples */
;;;157        blkCnt = numSamples;
;;;158    
;;;159    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;160    
;;;161        while(blkCnt > 0u)
00004c  e006              B        |L1.92|
                  |L1.78|
;;;162        {
;;;163          /* C(m,n) = A(m,n) * scale */
;;;164          /* The results are stored in the destination buffer. */
;;;165          *pOut++ = (*pIn++) * scale;
00004e  ecf20a01          VLDM     r2!,{s1}
000052  ee600a80          VMUL.F32 s1,s1,s0
000056  ece10a01          VSTM     r1!,{s1}
;;;166    
;;;167          /* Decrement the loop counter */
;;;168          blkCnt--;
00005a  1e40              SUBS     r0,r0,#1
                  |L1.92|
00005c  2800              CMP      r0,#0                 ;161
00005e  d1f6              BNE      |L1.78|
;;;169        }
;;;170    
;;;171        /* Set status as ARM_MATH_SUCCESS */
;;;172        status = ARM_MATH_SUCCESS;
;;;173      }
;;;174    
;;;175      /* Return to application */
;;;176      return (status);
;;;177    }
000060  4770              BX       lr
;;;178    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\MatrixFunctions\\arm_mat_scale_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_f32_c_21ee612e____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___19_arm_mat_scale_f32_c_21ee612e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_f32_c_21ee612e____REVSH|
#line 144
|__asm___19_arm_mat_scale_f32_c_21ee612e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_f32_c_21ee612e____RRX|
#line 300
|__asm___19_arm_mat_scale_f32_c_21ee612e____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
