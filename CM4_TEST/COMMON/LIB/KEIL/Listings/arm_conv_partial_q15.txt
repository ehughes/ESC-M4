; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\arm_conv_partial_q15.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_conv_partial_q15.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\SRC\CMSIS_DSP_4_5\inc -IC:\Users\emh203\Documents\GitHub\ESC-M4\CM4_TEST\COMMON\LIB\KEIL\RTE\_CMSIS_DSP_4_5_O3 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DARMCM4_FP -D__FPU_PRESENT=1 -DARM_MATH_CM4 -D__CC_ARM --omf_browse=.\objects\arm_conv_partial_q15.crf ..\..\SRC\CMSIS_DSP_4_5\src\FilteringFunctions\arm_conv_partial_q15.c]
                          THUMB

                          AREA ||i.arm_conv_partial_q15||, CODE, READONLY, ALIGN=2

                  arm_conv_partial_q15 PROC
;;;70     
;;;71     arm_status arm_conv_partial_q15(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;72       q15_t * pSrcA,
;;;73       uint32_t srcALen,
;;;74       q15_t * pSrcB,
;;;75       uint32_t srcBLen,
;;;76       q15_t * pDst,
;;;77       uint32_t firstIndex,
;;;78       uint32_t numPoints)
;;;79     {
000004  b09f              SUB      sp,sp,#0x7c
000006  e9dd612d          LDRD     r6,r1,[sp,#0xb4]
;;;80     
;;;81     #if (defined(ARM_MATH_CM4) || defined(ARM_MATH_CM3)) && !defined(UNALIGNED_SUPPORT_DISABLE)
;;;82     
;;;83       /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;84     
;;;85       q15_t *pIn1;                                   /* inputA pointer               */
;;;86       q15_t *pIn2;                                   /* inputB pointer               */
;;;87       q15_t *pOut = pDst;                            /* output pointer               */
;;;88       q63_t sum, acc0, acc1, acc2, acc3;             /* Accumulator                  */
;;;89       q15_t *px;                                     /* Intermediate inputA pointer  */
;;;90       q15_t *py;                                     /* Intermediate inputB pointer  */
;;;91       q15_t *pSrc1, *pSrc2;                          /* Intermediate pointers        */
;;;92       q31_t x0, x1, x2, x3, c0;                      /* Temporary input variables */
;;;93       uint32_t j, k, count, check, blkCnt;
;;;94       int32_t blockSize1, blockSize2, blockSize3;    /* loop counter                 */
;;;95       arm_status status;                             /* status of Partial convolution */
;;;96     
;;;97       /* Check for range of output samples to be calculated */
;;;98       if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
00000a  9f20              LDR      r7,[sp,#0x80]
00000c  1874              ADDS     r4,r6,r1
00000e  441f              ADD      r7,r7,r3
000010  1e7f              SUBS     r7,r7,#1
000012  9d2c              LDR      r5,[sp,#0xb0]
000014  42bc              CMP      r4,r7
000016  d904              BLS      |L1.34|
;;;99       {
;;;100        /* Set status as ARM_MATH_ARGUMENT_ERROR */
;;;101        status = ARM_MATH_ARGUMENT_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L1.28|
;;;102      }
;;;103      else
;;;104      {
;;;105    
;;;106        /* The algorithm implementation is based on the lengths of the inputs. */
;;;107        /* srcB is always made to slide across srcA. */
;;;108        /* So srcBLen is always considered as shorter or equal to srcALen */
;;;109        if(srcALen >= srcBLen)
;;;110        {
;;;111          /* Initialization of inputA pointer */
;;;112          pIn1 = pSrcA;
;;;113    
;;;114          /* Initialization of inputB pointer */
;;;115          pIn2 = pSrcB;
;;;116        }
;;;117        else
;;;118        {
;;;119          /* Initialization of inputA pointer */
;;;120          pIn1 = pSrcB;
;;;121    
;;;122          /* Initialization of inputB pointer */
;;;123          pIn2 = pSrcA;
;;;124    
;;;125          /* srcBLen is always considered as shorter or equal to srcALen */
;;;126          j = srcBLen;
;;;127          srcBLen = srcALen;
;;;128          srcALen = j;
;;;129        }
;;;130    
;;;131        /* Conditions to check which loopCounter holds   
;;;132         * the first and last indices of the output samples to be calculated. */
;;;133        check = firstIndex + numPoints;
;;;134        blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
;;;135        blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;
;;;136        blockSize1 = (((int32_t) srcBLen - 1) - (int32_t) firstIndex);
;;;137        blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
;;;138                                         (int32_t) numPoints) : 0;
;;;139        blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
;;;140                                        (int32_t) firstIndex);
;;;141        blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
;;;142    
;;;143        /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
;;;144        /* The function is internally   
;;;145         * divided into three stages according to the number of multiplications that has to be   
;;;146         * taken place between inputA samples and inputB samples. In the first stage of the   
;;;147         * algorithm, the multiplications increase by one for every iteration.   
;;;148         * In the second stage of the algorithm, srcBLen number of multiplications are done.   
;;;149         * In the third stage of the algorithm, the multiplications decrease by one   
;;;150         * for every iteration. */
;;;151    
;;;152        /* Set the output pointer to point to the firstIndex   
;;;153         * of the output sample to be calculated. */
;;;154        pOut = pDst + firstIndex;
;;;155    
;;;156        /* --------------------------   
;;;157         * Initializations of stage1   
;;;158         * -------------------------*/
;;;159    
;;;160        /* sum = x[0] * y[0]   
;;;161         * sum = x[0] * y[1] + x[1] * y[0]   
;;;162         * ....   
;;;163         * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]   
;;;164         */
;;;165    
;;;166        /* In this stage the MAC operations are increased by 1 for every iteration.   
;;;167           The count variable holds the number of MAC operations performed.   
;;;168           Since the partial convolution starts from firstIndex   
;;;169           Number of Macs to be performed is firstIndex + 1 */
;;;170        count = 1u + firstIndex;
;;;171    
;;;172        /* Working pointer of inputA */
;;;173        px = pIn1;
;;;174    
;;;175        /* Working pointer of inputB */
;;;176        pSrc2 = pIn2 + firstIndex;
;;;177        py = pSrc2;
;;;178    
;;;179        /* ------------------------   
;;;180         * Stage1 process   
;;;181         * ----------------------*/
;;;182    
;;;183        /* For loop unrolling by 4, this stage is divided into two. */
;;;184        /* First part of this stage computes the MAC operations less than 4 */
;;;185        /* Second part of this stage computes the MAC operations greater than or equal to 4 */
;;;186    
;;;187        /* The first part of the stage starts here */
;;;188        while((count < 4u) && (blockSize1 > 0))
;;;189        {
;;;190          /* Accumulator is made zero for every iteration */
;;;191          sum = 0;
;;;192    
;;;193          /* Loop over number of MAC operations between   
;;;194           * inputA samples and inputB samples */
;;;195          k = count;
;;;196    
;;;197          while(k > 0u)
;;;198          {
;;;199            /* Perform the multiply-accumulates */
;;;200            sum = __SMLALD(*px++, *py--, sum);
;;;201    
;;;202            /* Decrement the loop counter */
;;;203            k--;
;;;204          }
;;;205    
;;;206          /* Store the result in the accumulator in the destination buffer. */
;;;207          *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
;;;208    
;;;209          /* Update the inputA and inputB pointers for next MAC calculation */
;;;210          py = ++pSrc2;
;;;211          px = pIn1;
;;;212    
;;;213          /* Increment the MAC count */
;;;214          count++;
;;;215    
;;;216          /* Decrement the loop counter */
;;;217          blockSize1--;
;;;218        }
;;;219    
;;;220        /* The second part of the stage starts here */
;;;221        /* The internal loop, over count, is unrolled by 4 */
;;;222        /* To, read the last two inputB samples using SIMD:   
;;;223         * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
;;;224        py = py - 1;
;;;225    
;;;226        while(blockSize1 > 0)
;;;227        {
;;;228          /* Accumulator is made zero for every iteration */
;;;229          sum = 0;
;;;230    
;;;231          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;232          k = count >> 2u;
;;;233    
;;;234          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;235           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;236          while(k > 0u)
;;;237          {
;;;238            /* Perform the multiply-accumulates */
;;;239            /* x[0], x[1] are multiplied with y[srcBLen - 1], y[srcBLen - 2] respectively */
;;;240            sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
;;;241            /* x[2], x[3] are multiplied with y[srcBLen - 3], y[srcBLen - 4] respectively */
;;;242            sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
;;;243    
;;;244            /* Decrement the loop counter */
;;;245            k--;
;;;246          }
;;;247    
;;;248          /* For the next MAC operations, the pointer py is used without SIMD   
;;;249           * So, py is incremented by 1 */
;;;250          py = py + 1u;
;;;251    
;;;252          /* If the count is not a multiple of 4, compute any remaining MACs here.   
;;;253           ** No loop unrolling is used. */
;;;254          k = count % 0x4u;
;;;255    
;;;256          while(k > 0u)
;;;257          {
;;;258            /* Perform the multiply-accumulates */
;;;259            sum = __SMLALD(*px++, *py--, sum);
;;;260    
;;;261            /* Decrement the loop counter */
;;;262            k--;
;;;263          }
;;;264    
;;;265          /* Store the result in the accumulator in the destination buffer. */
;;;266          *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
;;;267    
;;;268          /* Update the inputA and inputB pointers for next MAC calculation */
;;;269          py = ++pSrc2 - 1u;
;;;270          px = pIn1;
;;;271    
;;;272          /* Increment the MAC count */
;;;273          count++;
;;;274    
;;;275          /* Decrement the loop counter */
;;;276          blockSize1--;
;;;277        }
;;;278    
;;;279        /* --------------------------   
;;;280         * Initializations of stage2   
;;;281         * ------------------------*/
;;;282    
;;;283        /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]   
;;;284         * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]   
;;;285         * ....   
;;;286         * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]   
;;;287         */
;;;288    
;;;289        /* Working pointer of inputA */
;;;290        if((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
;;;291        {
;;;292          px = pIn1 + firstIndex - srcBLen + 1;
;;;293        }
;;;294        else
;;;295        {
;;;296          px = pIn1;
;;;297        }
;;;298    
;;;299        /* Working pointer of inputB */
;;;300        pSrc2 = pIn2 + (srcBLen - 1u);
;;;301        py = pSrc2;
;;;302    
;;;303      /* count is the index by which the pointer pIn1 to be incremented */
;;;304      count = 0u;
;;;305    
;;;306    
;;;307      /* --------------------   
;;;308       * Stage2 process   
;;;309       * -------------------*/
;;;310    
;;;311      /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.   
;;;312       * So, to loop unroll over blockSize2,   
;;;313       * srcBLen should be greater than or equal to 4 */
;;;314      if(srcBLen >= 4u)
;;;315      {
;;;316        /* Loop unroll over blockSize2, by 4 */
;;;317        blkCnt = blockSize2 >> 2u;
;;;318    
;;;319        while(blkCnt > 0u)
;;;320        {
;;;321          py = py - 1u;
;;;322    
;;;323          /* Set all accumulators to zero */
;;;324          acc0 = 0;
;;;325          acc1 = 0;
;;;326          acc2 = 0;
;;;327          acc3 = 0;
;;;328    
;;;329    
;;;330          /* read x[0], x[1] samples */
;;;331          x0 = *__SIMD32(px);
;;;332          /* read x[1], x[2] samples */
;;;333          x1 = _SIMD32_OFFSET(px+1);
;;;334    	  px+= 2u;
;;;335    
;;;336    
;;;337          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;338          k = srcBLen >> 2u;
;;;339    
;;;340          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;341           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;342          do
;;;343          {
;;;344            /* Read the last two inputB samples using SIMD:   
;;;345             * y[srcBLen - 1] and y[srcBLen - 2] */
;;;346            c0 = *__SIMD32(py)--;
;;;347    
;;;348            /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
;;;349            acc0 = __SMLALDX(x0, c0, acc0);
;;;350    
;;;351            /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
;;;352            acc1 = __SMLALDX(x1, c0, acc1);
;;;353    
;;;354            /* Read x[2], x[3] */
;;;355            x2 = *__SIMD32(px);
;;;356    
;;;357            /* Read x[3], x[4] */
;;;358            x3 = _SIMD32_OFFSET(px+1);
;;;359    
;;;360            /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
;;;361            acc2 = __SMLALDX(x2, c0, acc2);
;;;362    
;;;363            /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
;;;364            acc3 = __SMLALDX(x3, c0, acc3);
;;;365    
;;;366            /* Read y[srcBLen - 3] and y[srcBLen - 4] */
;;;367            c0 = *__SIMD32(py)--;
;;;368    
;;;369            /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
;;;370            acc0 = __SMLALDX(x2, c0, acc0);
;;;371    
;;;372            /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
;;;373            acc1 = __SMLALDX(x3, c0, acc1);
;;;374    
;;;375            /* Read x[4], x[5] */
;;;376            x0 = _SIMD32_OFFSET(px+2);
;;;377    
;;;378            /* Read x[5], x[6] */
;;;379            x1 = _SIMD32_OFFSET(px+3);
;;;380    		px += 4u;
;;;381    
;;;382            /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
;;;383            acc2 = __SMLALDX(x0, c0, acc2);
;;;384    
;;;385            /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
;;;386            acc3 = __SMLALDX(x1, c0, acc3);
;;;387    
;;;388          } while(--k);
;;;389    
;;;390          /* For the next MAC operations, SIMD is not used   
;;;391           * So, the 16 bit pointer if inputB, py is updated */
;;;392    
;;;393          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.   
;;;394           ** No loop unrolling is used. */
;;;395          k = srcBLen % 0x4u;
;;;396    
;;;397          if(k == 1u)
;;;398          {
;;;399            /* Read y[srcBLen - 5] */
;;;400            c0 = *(py+1);
;;;401    
;;;402    #ifdef  ARM_MATH_BIG_ENDIAN
;;;403    
;;;404            c0 = c0 << 16u;
;;;405    
;;;406    #else
;;;407    
;;;408            c0 = c0 & 0x0000FFFF;
;;;409    
;;;410    #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
;;;411    
;;;412            /* Read x[7] */
;;;413            x3 = *__SIMD32(px);
;;;414    		px++;
;;;415    
;;;416            /* Perform the multiply-accumulates */
;;;417            acc0 = __SMLALD(x0, c0, acc0);
;;;418            acc1 = __SMLALD(x1, c0, acc1);
;;;419            acc2 = __SMLALDX(x1, c0, acc2);
;;;420            acc3 = __SMLALDX(x3, c0, acc3);
;;;421          }
;;;422    
;;;423          if(k == 2u)
;;;424          {
;;;425            /* Read y[srcBLen - 5], y[srcBLen - 6] */
;;;426            c0 = _SIMD32_OFFSET(py);
;;;427    
;;;428            /* Read x[7], x[8] */
;;;429            x3 = *__SIMD32(px);
;;;430    
;;;431            /* Read x[9] */
;;;432            x2 = _SIMD32_OFFSET(px+1);
;;;433    		px += 2u;
;;;434    
;;;435            /* Perform the multiply-accumulates */
;;;436            acc0 = __SMLALDX(x0, c0, acc0);
;;;437            acc1 = __SMLALDX(x1, c0, acc1);
;;;438            acc2 = __SMLALDX(x3, c0, acc2);
;;;439            acc3 = __SMLALDX(x2, c0, acc3);
;;;440          }
;;;441    
;;;442          if(k == 3u)
;;;443          {
;;;444            /* Read y[srcBLen - 5], y[srcBLen - 6] */
;;;445            c0 = _SIMD32_OFFSET(py);
;;;446    
;;;447            /* Read x[7], x[8] */
;;;448            x3 = *__SIMD32(px);
;;;449    
;;;450            /* Read x[9] */
;;;451            x2 = _SIMD32_OFFSET(px+1);
;;;452    
;;;453            /* Perform the multiply-accumulates */
;;;454            acc0 = __SMLALDX(x0, c0, acc0);
;;;455            acc1 = __SMLALDX(x1, c0, acc1);
;;;456            acc2 = __SMLALDX(x3, c0, acc2);
;;;457            acc3 = __SMLALDX(x2, c0, acc3);
;;;458    
;;;459    		c0 = *(py-1);
;;;460    
;;;461    #ifdef  ARM_MATH_BIG_ENDIAN
;;;462    
;;;463            c0 = c0 << 16u;
;;;464    #else
;;;465    
;;;466            c0 = c0 & 0x0000FFFF;
;;;467    #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
;;;468    
;;;469            /* Read x[10] */
;;;470            x3 =  _SIMD32_OFFSET(px+2);
;;;471    		px += 3u;
;;;472    
;;;473            /* Perform the multiply-accumulates */
;;;474            acc0 = __SMLALDX(x1, c0, acc0);
;;;475            acc1 = __SMLALD(x2, c0, acc1);
;;;476            acc2 = __SMLALDX(x2, c0, acc2);
;;;477            acc3 = __SMLALDX(x3, c0, acc3);
;;;478          }
;;;479    
;;;480    
;;;481          /* Store the results in the accumulators in the destination buffer. */
;;;482    
;;;483    #ifndef  ARM_MATH_BIG_ENDIAN
;;;484    
;;;485          *__SIMD32(pOut)++ =
;;;486            __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
;;;487          *__SIMD32(pOut)++ =
;;;488            __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
;;;489    
;;;490    #else
;;;491    
;;;492          *__SIMD32(pOut)++ =
;;;493            __PKHBT(__SSAT((acc1 >> 15), 16), __SSAT((acc0 >> 15), 16), 16);
;;;494          *__SIMD32(pOut)++ =
;;;495            __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);
;;;496    
;;;497    #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
;;;498    
;;;499          /* Increment the pointer pIn1 index, count by 4 */
;;;500          count += 4u;
;;;501    
;;;502          /* Update the inputA and inputB pointers for next MAC calculation */
;;;503          px = pIn1 + count;
;;;504          py = pSrc2;
;;;505    
;;;506            /* Decrement the loop counter */
;;;507            blkCnt--;
;;;508          }
;;;509    
;;;510          /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.   
;;;511           ** No loop unrolling is used. */
;;;512          blkCnt = (uint32_t) blockSize2 % 0x4u;
;;;513      	  
;;;514          while(blkCnt > 0u)
;;;515          {
;;;516            /* Accumulator is made zero for every iteration */
;;;517            sum = 0;
;;;518    
;;;519            /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;520            k = srcBLen >> 2u;
;;;521    
;;;522            /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;523             ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;524            while(k > 0u)
;;;525            {
;;;526              /* Perform the multiply-accumulates */
;;;527              sum += (q63_t) ((q31_t) * px++ * *py--);
;;;528              sum += (q63_t) ((q31_t) * px++ * *py--);
;;;529              sum += (q63_t) ((q31_t) * px++ * *py--);
;;;530              sum += (q63_t) ((q31_t) * px++ * *py--);
;;;531    
;;;532              /* Decrement the loop counter */
;;;533              k--;
;;;534            }
;;;535    
;;;536            /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.   
;;;537             ** No loop unrolling is used. */
;;;538            k = srcBLen % 0x4u;
;;;539    
;;;540            while(k > 0u)
;;;541            {
;;;542              /* Perform the multiply-accumulates */
;;;543              sum += (q63_t) ((q31_t) * px++ * *py--);
;;;544    
;;;545              /* Decrement the loop counter */
;;;546              k--;
;;;547            }
;;;548    
;;;549            /* Store the result in the accumulator in the destination buffer. */
;;;550            *pOut++ = (q15_t) (__SSAT(sum >> 15, 16));
;;;551    
;;;552            /* Increment the pointer pIn1 index, count by 1 */
;;;553            count++;
;;;554    
;;;555            /* Update the inputA and inputB pointers for next MAC calculation */
;;;556            px = pIn1 + count;
;;;557            py = pSrc2;
;;;558    
;;;559            /* Decrement the loop counter */
;;;560            blkCnt--;
;;;561          }
;;;562        }
;;;563        else
;;;564        {
;;;565          /* If the srcBLen is not a multiple of 4,   
;;;566           * the blockSize2 loop cannot be unrolled by 4 */
;;;567          blkCnt = (uint32_t) blockSize2;
;;;568    
;;;569          while(blkCnt > 0u)
;;;570          {
;;;571            /* Accumulator is made zero for every iteration */
;;;572            sum = 0;
;;;573    
;;;574            /* srcBLen number of MACS should be performed */
;;;575            k = srcBLen;
;;;576    
;;;577            while(k > 0u)
;;;578            {
;;;579              /* Perform the multiply-accumulate */
;;;580              sum += (q63_t) ((q31_t) * px++ * *py--);
;;;581    
;;;582              /* Decrement the loop counter */
;;;583              k--;
;;;584            }
;;;585    
;;;586            /* Store the result in the accumulator in the destination buffer. */
;;;587            *pOut++ = (q15_t) (__SSAT(sum >> 15, 16));
;;;588    
;;;589            /* Increment the MAC count */
;;;590            count++;
;;;591    
;;;592            /* Update the inputA and inputB pointers for next MAC calculation */
;;;593            px = pIn1 + count;
;;;594            py = pSrc2;
;;;595      
;;;596            /* Decrement the loop counter */
;;;597            blkCnt--;
;;;598          }
;;;599        }
;;;600    
;;;601    
;;;602        /* --------------------------   
;;;603         * Initializations of stage3   
;;;604         * -------------------------*/
;;;605    
;;;606        /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcALen-1] * y[1]   
;;;607         * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcALen-1] * y[2]   
;;;608         * ....   
;;;609         * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]   
;;;610         * sum +=  x[srcALen-1] * y[srcBLen-1]   
;;;611         */
;;;612    
;;;613        /* In this stage the MAC operations are decreased by 1 for every iteration.   
;;;614           The count variable holds the number of MAC operations performed */
;;;615        count = srcBLen - 1u;
;;;616    
;;;617        /* Working pointer of inputA */
;;;618        pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
;;;619        px = pSrc1;
;;;620    
;;;621        /* Working pointer of inputB */
;;;622        pSrc2 = pIn2 + (srcBLen - 1u);
;;;623        pIn2 = pSrc2 - 1u;
;;;624        py = pIn2;
;;;625    
;;;626        /* -------------------   
;;;627         * Stage3 process   
;;;628         * ------------------*/
;;;629    
;;;630        /* For loop unrolling by 4, this stage is divided into two. */
;;;631        /* First part of this stage computes the MAC operations greater than 4 */
;;;632        /* Second part of this stage computes the MAC operations less than or equal to 4 */
;;;633    
;;;634        /* The first part of the stage starts here */
;;;635        j = count >> 2u;
;;;636    
;;;637        while((j > 0u) && (blockSize3 > 0))
;;;638        {
;;;639          /* Accumulator is made zero for every iteration */
;;;640          sum = 0;
;;;641    
;;;642          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;643          k = count >> 2u;
;;;644    
;;;645          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.   
;;;646           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
;;;647          while(k > 0u)
;;;648          {
;;;649            /* x[srcALen - srcBLen + 1], x[srcALen - srcBLen + 2] are multiplied   
;;;650             * with y[srcBLen - 1], y[srcBLen - 2] respectively */
;;;651            sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
;;;652            /* x[srcALen - srcBLen + 3], x[srcALen - srcBLen + 4] are multiplied   
;;;653             * with y[srcBLen - 3], y[srcBLen - 4] respectively */
;;;654            sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
;;;655    
;;;656            /* Decrement the loop counter */
;;;657            k--;
;;;658          }
;;;659    
;;;660          /* For the next MAC operations, the pointer py is used without SIMD   
;;;661           * So, py is incremented by 1 */
;;;662          py = py + 1u;
;;;663    
;;;664          /* If the count is not a multiple of 4, compute any remaining MACs here.   
;;;665           ** No loop unrolling is used. */
;;;666          k = count % 0x4u;
;;;667    
;;;668          while(k > 0u)
;;;669          {
;;;670            /* sum += x[srcALen - srcBLen + 5] * y[srcBLen - 5] */
;;;671            sum = __SMLALD(*px++, *py--, sum);
;;;672    
;;;673            /* Decrement the loop counter */
;;;674            k--;
;;;675          }
;;;676    
;;;677          /* Store the result in the accumulator in the destination buffer. */
;;;678          *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
;;;679    
;;;680          /* Update the inputA and inputB pointers for next MAC calculation */
;;;681          px = ++pSrc1;
;;;682          py = pIn2;
;;;683    
;;;684          /* Decrement the MAC count */
;;;685          count--;
;;;686    
;;;687          /* Decrement the loop counter */
;;;688          blockSize3--;
;;;689    
;;;690          j--;
;;;691        }
;;;692    
;;;693        /* The second part of the stage starts here */
;;;694        /* SIMD is not used for the next MAC operations,   
;;;695         * so pointer py is updated to read only one sample at a time */
;;;696        py = py + 1u;
;;;697    
;;;698        while(blockSize3 > 0)
;;;699        {
;;;700          /* Accumulator is made zero for every iteration */
;;;701          sum = 0;
;;;702    
;;;703          /* Apply loop unrolling and compute 4 MACs simultaneously. */
;;;704          k = count;
;;;705    
;;;706          while(k > 0u)
;;;707          {
;;;708            /* Perform the multiply-accumulates */
;;;709            /* sum +=  x[srcALen-1] * y[srcBLen-1] */
;;;710            sum = __SMLALD(*px++, *py--, sum);
;;;711    
;;;712            /* Decrement the loop counter */
;;;713            k--;
;;;714          }
;;;715    
;;;716          /* Store the result in the accumulator in the destination buffer. */
;;;717          *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
;;;718    
;;;719          /* Update the inputA and inputB pointers for next MAC calculation */
;;;720          px = ++pSrc1;
;;;721          py = pSrc2;
;;;722    
;;;723          /* Decrement the MAC count */
;;;724          count--;
;;;725    
;;;726          /* Decrement the loop counter */
;;;727          blockSize3--;
;;;728        }
;;;729    
;;;730        /* set status as ARM_MATH_SUCCESS */
;;;731        status = ARM_MATH_SUCCESS;
;;;732      }
;;;733    
;;;734      /* Return to application */
;;;735      return (status);
;;;736    
;;;737    #else
;;;738    
;;;739      /* Run the below code for Cortex-M0 */
;;;740    
;;;741      q15_t *pIn1 = pSrcA;                           /* inputA pointer */
;;;742      q15_t *pIn2 = pSrcB;                           /* inputB pointer */
;;;743      q63_t sum;                                     /* Accumulator */
;;;744      uint32_t i, j;                                 /* loop counters */
;;;745      arm_status status;                             /* status of Partial convolution */
;;;746    
;;;747      /* Check for range of output samples to be calculated */
;;;748      if((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
;;;749      {
;;;750        /* Set status as ARM_ARGUMENT_ERROR */
;;;751        status = ARM_MATH_ARGUMENT_ERROR;
;;;752      }
;;;753      else
;;;754      {
;;;755        /* Loop to calculate convolution for output length number of values */
;;;756        for (i = firstIndex; i <= (firstIndex + numPoints - 1); i++)
;;;757        {
;;;758          /* Initialize sum with zero to carry on MAC operations */
;;;759          sum = 0;
;;;760    
;;;761          /* Loop to perform MAC operations according to convolution equation */
;;;762          for (j = 0; j <= i; j++)
;;;763          {
;;;764            /* Check the array limitations */
;;;765            if(((i - j) < srcBLen) && (j < srcALen))
;;;766            {
;;;767              /* z[i] += x[i-j] * y[j] */
;;;768              sum += ((q31_t) pIn1[j] * (pIn2[i - j]));
;;;769            }
;;;770          }
;;;771    
;;;772          /* Store the output in the destination buffer */
;;;773          pDst[i] = (q15_t) __SSAT((sum >> 15u), 16u);
;;;774        }
;;;775        /* set status as ARM_SUCCESS as there are no argument errors */
;;;776        status = ARM_MATH_SUCCESS;
;;;777      }
;;;778      return (status);
;;;779    
;;;780    #endif /* #if (defined(ARM_MATH_CM4) || defined(ARM_MATH_CM3)) && !defined(UNALIGNED_SUPPORT_DISABLE)  */
;;;781    
;;;782    }
00001c  b023              ADD      sp,sp,#0x8c
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.34|
000022  9f20              LDR      r7,[sp,#0x80]         ;109
000024  429f              CMP      r7,r3                 ;109
000026  d303              BCC      |L1.48|
000028  9015              STR      r0,[sp,#0x54]         ;134
00002a  4696              MOV      lr,r2                 ;115
00002c  4638              MOV      r0,r7                 ;134
00002e  e004              B        |L1.58|
                  |L1.48|
000030  4686              MOV      lr,r0                 ;123
000032  4618              MOV      r0,r3                 ;126
000034  463b              MOV      r3,r7                 ;127
000036  9215              STR      r2,[sp,#0x54]         ;128
000038  9020              STR      r0,[sp,#0x80]         ;128
                  |L1.58|
00003a  4284              CMP      r4,r0                 ;134
00003c  dd01              BLE      |L1.66|
00003e  1a20              SUBS     r0,r4,r0              ;134
000040  e000              B        |L1.68|
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;134
                  |L1.68|
000044  9a20              LDR      r2,[sp,#0x80]         ;135
000046  1e52              SUBS     r2,r2,#1              ;135
000048  4296              CMP      r6,r2                 ;135
00004a  dd02              BLE      |L1.82|
00004c  1b82              SUBS     r2,r0,r6              ;135
00004e  9820              LDR      r0,[sp,#0x80]         ;135
000050  4410              ADD      r0,r0,r2              ;135
                  |L1.82|
000052  9002              STR      r0,[sp,#8]            ;136
000054  1b98              SUBS     r0,r3,r6              ;136
000056  1e40              SUBS     r0,r0,#1              ;136
000058  2800              CMP      r0,#0                 ;137
00005a  dd04              BLE      |L1.102|
00005c  1e5a              SUBS     r2,r3,#1              ;137
00005e  4294              CMP      r4,r2                 ;137
000060  d902              BLS      |L1.104|
000062  4601              MOV      r1,r0                 ;137
000064  e000              B        |L1.104|
                  |L1.102|
000066  2100              MOVS     r1,#0                 ;138
                  |L1.104|
000068  9802              LDR      r0,[sp,#8]            ;139
00006a  4408              ADD      r0,r0,r1              ;139
00006c  4430              ADD      r0,r0,r6              ;139
00006e  1a20              SUBS     r0,r4,r0              ;139
000070  2800              CMP      r0,#0                 ;141
000072  dc00              BGT      |L1.118|
000074  2000              MOVS     r0,#0                 ;141
                  |L1.118|
000076  901d              STR      r0,[sp,#0x74]         ;154
000078  eb050046          ADD      r0,r5,r6,LSL #1       ;154
00007c  900f              STR      r0,[sp,#0x3c]         ;173
00007e  eb0e0046          ADD      r0,lr,r6,LSL #1       ;176
000082  f1060a01          ADD      r10,r6,#1             ;154
000086  9a15              LDR      r2,[sp,#0x54]         ;176
000088  9005              STR      r0,[sp,#0x14]         ;188
00008a  e01d              B        |L1.200|
                  |L1.140|
00008c  2400              MOVS     r4,#0                 ;188
00008e  4625              MOV      r5,r4                 ;188
000090  4657              MOV      r7,r10                ;195
000092  e006              B        |L1.162|
                  |L1.148|
000094  f9328b02          LDRSH    r8,[r2],#2            ;200
000098  f930c902          LDRSH    r12,[r0],#-2          ;200
00009c  fbc845cc          SMLALD   r4,r5,r8,r12          ;200
0000a0  1e7f              SUBS     r7,r7,#1              ;200
                  |L1.162|
0000a2  2f00              CMP      r7,#0                 ;197
0000a4  d1f6              BNE      |L1.148|
0000a6  0be0              LSRS     r0,r4,#15             ;207
0000a8  ea404045          ORR      r0,r0,r5,LSL #17      ;207
0000ac  f300020f          SSAT     r2,#16,r0             ;207
0000b0  980f              LDR      r0,[sp,#0x3c]         ;207
0000b2  f10a0a01          ADD      r10,r10,#1            ;214
0000b6  8002              STRH     r2,[r0,#0]            ;207
0000b8  980f              LDR      r0,[sp,#0x3c]         ;207
0000ba  9a15              LDR      r2,[sp,#0x54]         ;214
0000bc  1c80              ADDS     r0,r0,#2              ;207
0000be  900f              STR      r0,[sp,#0x3c]         ;210
0000c0  9805              LDR      r0,[sp,#0x14]         ;210
0000c2  1c80              ADDS     r0,r0,#2              ;210
0000c4  9005              STR      r0,[sp,#0x14]         ;211
0000c6  1e49              SUBS     r1,r1,#1              ;214
                  |L1.200|
0000c8  f1ba0f04          CMP      r10,#4                ;188
0000cc  d201              BCS      |L1.210|
0000ce  2900              CMP      r1,#0                 ;188
0000d0  dcdc              BGT      |L1.140|
                  |L1.210|
0000d2  1e80              SUBS     r0,r0,#2              ;188
0000d4  e035              B        |L1.322|
                  |L1.214|
0000d6  2400              MOVS     r4,#0                 ;226
0000d8  4625              MOV      r5,r4                 ;226
0000da  ea4f079a          LSR      r7,r10,#2             ;232
0000de  e00f              B        |L1.256|
                  |L1.224|
0000e0  f852cb04          LDR      r12,[r2],#4           ;240
0000e4  4693              MOV      r11,r2                ;240
0000e6  6802              LDR      r2,[r0,#0]            ;240
0000e8  fbcc45d2          SMLALDX  r4,r5,r12,r2          ;240
0000ec  f8db9000          LDR      r9,[r11,#0]           ;242
0000f0  f850cc04          LDR      r12,[r0,#-4]          ;242
0000f4  f10b0204          ADD      r2,r11,#4             ;242
0000f8  fbc945dc          SMLALDX  r4,r5,r9,r12          ;242
0000fc  3808              SUBS     r0,r0,#8              ;242
0000fe  1e7f              SUBS     r7,r7,#1              ;242
                  |L1.256|
000100  2f00              CMP      r7,#0                 ;236
000102  d1ed              BNE      |L1.224|
000104  f00a0703          AND      r7,r10,#3             ;254
000108  1c80              ADDS     r0,r0,#2              ;254
00010a  e006              B        |L1.282|
                  |L1.268|
00010c  f9328b02          LDRSH    r8,[r2],#2            ;259
000110  f930c902          LDRSH    r12,[r0],#-2          ;259
000114  fbc845cc          SMLALD   r4,r5,r8,r12          ;259
000118  1e7f              SUBS     r7,r7,#1              ;259
                  |L1.282|
00011a  2f00              CMP      r7,#0                 ;256
00011c  d1f6              BNE      |L1.268|
00011e  0be0              LSRS     r0,r4,#15             ;266
000120  ea404045          ORR      r0,r0,r5,LSL #17      ;266
000124  f300020f          SSAT     r2,#16,r0             ;266
000128  980f              LDR      r0,[sp,#0x3c]         ;266
00012a  f10a0a01          ADD      r10,r10,#1            ;273
00012e  8002              STRH     r2,[r0,#0]            ;266
000130  980f              LDR      r0,[sp,#0x3c]         ;266
000132  9a15              LDR      r2,[sp,#0x54]         ;273
000134  1c80              ADDS     r0,r0,#2              ;266
000136  900f              STR      r0,[sp,#0x3c]         ;269
000138  9805              LDR      r0,[sp,#0x14]         ;269
00013a  1c80              ADDS     r0,r0,#2              ;269
00013c  9005              STR      r0,[sp,#0x14]         ;270
00013e  1e80              SUBS     r0,r0,#2              ;273
000140  1e49              SUBS     r1,r1,#1              ;273
                  |L1.322|
000142  2900              CMP      r1,#0                 ;226
000144  dcc7              BGT      |L1.214|
000146  1af0              SUBS     r0,r6,r3              ;290
000148  1c40              ADDS     r0,r0,#1              ;290
00014a  2800              CMP      r0,#0                 ;290
00014c  dd04              BLE      |L1.344|
00014e  eb020046          ADD      r0,r2,r6,LSL #1       ;292
000152  eba00243          SUB      r2,r0,r3,LSL #1       ;292
000156  1c92              ADDS     r2,r2,#2              ;292
                  |L1.344|
000158  eb0e0443          ADD      r4,lr,r3,LSL #1       ;300
00015c  941c              STR      r4,[sp,#0x70]         ;304
00015e  2000              MOVS     r0,#0                 ;304
000160  1ea4              SUBS     r4,r4,#2              ;304
000162  e9cd0404          STRD     r0,r4,[sp,#0x10]      ;314
000166  2b04              CMP      r3,#4                 ;314
000168  d37e              BCC      |L1.616|
00016a  981d              LDR      r0,[sp,#0x74]         ;317
00016c  1080              ASRS     r0,r0,#2              ;317
00016e  e0e4              B        |L1.826|
                  |L1.368|
000170  2100              MOVS     r1,#0                 ;319
000172  9116              STR      r1,[sp,#0x58]         ;326
000174  9106              STR      r1,[sp,#0x18]         ;331
000176  f8527b02          LDR      r7,[r2],#2            ;331
00017a  089e              LSRS     r6,r3,#2              ;338
00017c  f8525b02          LDR      r5,[r2],#2            ;333
000180  468e              MOV      lr,r1                 ;324
000182  468a              MOV      r10,r1                ;325
000184  468b              MOV      r11,r1                ;326
000186  4608              MOV      r0,r1                 ;326
000188  4688              MOV      r8,r1                 ;326
00018a  1ea4              SUBS     r4,r4,#2              ;338
00018c  f8cd6028          STR.W    r6,[sp,#0x28]         ;338
                  |L1.400|
000190  f8d4c000          LDR      r12,[r4,#0]           ;346
000194  1f26              SUBS     r6,r4,#4              ;346
000196  9601              STR      r6,[sp,#4]            ;349
000198  4676              MOV      r6,lr                 ;349
00019a  fbc716dc          SMLALDX  r1,r6,r7,r12          ;349
00019e  46b6              MOV      lr,r6                 ;349
0001a0  9f16              LDR      r7,[sp,#0x58]         ;352
0001a2  4656              MOV      r6,r10                ;352
0001a4  fbc576dc          SMLALDX  r7,r6,r5,r12          ;352
0001a8  9614              STR      r6,[sp,#0x50]         ;355
0001aa  f8525b02          LDR      r5,[r2],#2            ;355
0001ae  9e06              LDR      r6,[sp,#0x18]         ;361
0001b0  f852ab02          LDR      r10,[r2],#2           ;358
0001b4  46d9              MOV      r9,r11                ;361
0001b6  fbc569dc          SMLALDX  r6,r9,r5,r12          ;361
0001ba  fbca08dc          SMLALDX  r0,r8,r10,r12         ;364
0001be  9606              STR      r6,[sp,#0x18]         ;367
0001c0  9e01              LDR      r6,[sp,#4]            ;367
0001c2  f8d6c000          LDR      r12,[r6,#0]           ;367
0001c6  4676              MOV      r6,lr                 ;370
0001c8  fbc516dc          SMLALDX  r1,r6,r5,r12          ;370
0001cc  46b6              MOV      lr,r6                 ;370
0001ce  9e14              LDR      r6,[sp,#0x50]         ;373
0001d0  fbca76dc          SMLALDX  r7,r6,r10,r12         ;373
0001d4  9716              STR      r7,[sp,#0x58]         ;376
0001d6  f8527b04          LDR      r7,[r2],#4            ;376
0001da  46b2              MOV      r10,r6                ;373
0001dc  f8525c02          LDR      r5,[r2,#-2]           ;379
0001e0  9e06              LDR      r6,[sp,#0x18]         ;383
0001e2  fbc769dc          SMLALDX  r6,r9,r7,r12          ;383
0001e6  46cb              MOV      r11,r9                ;383
0001e8  fbc508dc          SMLALDX  r0,r8,r5,r12          ;386
0001ec  9606              STR      r6,[sp,#0x18]         ;388
0001ee  9e0a              LDR      r6,[sp,#0x28]         ;388
0001f0  f1a40408          SUB      r4,r4,#8              ;388
0001f4  1e76              SUBS     r6,r6,#1              ;388
0001f6  960a              STR      r6,[sp,#0x28]         ;388
0001f8  d1ca              BNE      |L1.400|
0001fa  f0030603          AND      r6,r3,#3              ;395
0001fe  2e01              CMP      r6,#1                 ;397
000200  d004              BEQ      |L1.524|
000202  2e02              CMP      r6,#2                 ;423
000204  d019              BEQ      |L1.570|
000206  2e03              CMP      r6,#3                 ;442
000208  d031              BEQ      |L1.622|
00020a  e06c              B        |L1.742|
                  |L1.524|
00020c  8864              LDRH     r4,[r4,#2]            ;400
00020e  f8d2c000          LDR      r12,[r2,#0]           ;413
000212  b2a4              UXTH     r4,r4                 ;408
000214  4672              MOV      r2,lr                 ;417
000216  fbc712c4          SMLALD   r1,r2,r7,r4           ;417
00021a  4696              MOV      lr,r2                 ;417
00021c  9a16              LDR      r2,[sp,#0x58]         ;418
00021e  4656              MOV      r6,r10                ;418
000220  fbc526c4          SMLALD   r2,r6,r5,r4           ;418
000224  9216              STR      r2,[sp,#0x58]         ;419
000226  46b2              MOV      r10,r6                ;418
000228  9a06              LDR      r2,[sp,#0x18]         ;419
00022a  464e              MOV      r6,r9                 ;419
00022c  fbc526d4          SMLALDX  r2,r6,r5,r4           ;419
000230  46b3              MOV      r11,r6                ;419
000232  fbcc08d4          SMLALDX  r0,r8,r12,r4          ;420
000236  9206              STR      r2,[sp,#0x18]         ;420
000238  e055              B        |L1.742|
                  |L1.570|
00023a  6824              LDR      r4,[r4,#0]            ;426
00023c  f8d2c000          LDR      r12,[r2,#0]           ;429
000240  f8d26002          LDR      r6,[r2,#2]            ;432
000244  4672              MOV      r2,lr                 ;436
000246  fbc712d4          SMLALDX  r1,r2,r7,r4           ;436
00024a  4696              MOV      lr,r2                 ;436
00024c  9a16              LDR      r2,[sp,#0x58]         ;437
00024e  4657              MOV      r7,r10                ;437
000250  fbc527d4          SMLALDX  r2,r7,r5,r4           ;437
000254  9216              STR      r2,[sp,#0x58]         ;438
000256  9a06              LDR      r2,[sp,#0x18]         ;438
000258  46ba              MOV      r10,r7                ;437
00025a  464d              MOV      r5,r9                 ;438
00025c  fbcc25d4          SMLALDX  r2,r5,r12,r4          ;438
000260  46ab              MOV      r11,r5                ;438
000262  fbc608d4          SMLALDX  r0,r8,r6,r4           ;439
000266  e000              B        |L1.618|
                  |L1.616|
000268  e0b2              B        |L1.976|
                  |L1.618|
00026a  9206              STR      r2,[sp,#0x18]         ;439
00026c  e03b              B        |L1.742|
                  |L1.622|
00026e  f8d4c000          LDR      r12,[r4,#0]           ;445
000272  f8d29000          LDR      r9,[r2,#0]            ;448
000276  f8cd9044          STR      r9,[sp,#0x44]         ;451
00027a  f8d29002          LDR      r9,[r2,#2]            ;451
00027e  f8cd9040          STR      r9,[sp,#0x40]         ;451
000282  4676              MOV      r6,lr                 ;454
000284  fbc716dc          SMLALDX  r1,r6,r7,r12          ;454
000288  f8cd9038          STR      r9,[sp,#0x38]         ;455
00028c  9609              STR      r6,[sp,#0x24]         ;455
00028e  9e16              LDR      r6,[sp,#0x58]         ;455
000290  468e              MOV      lr,r1                 ;454
000292  4657              MOV      r7,r10                ;455
000294  fbc567dc          SMLALDX  r6,r7,r5,r12          ;455
000298  46b2              MOV      r10,r6                ;455
00029a  9714              STR      r7,[sp,#0x50]         ;456
00029c  f8dd9044          LDR      r9,[sp,#0x44]         ;456
0002a0  9e06              LDR      r6,[sp,#0x18]         ;456
0002a2  465f              MOV      r7,r11                ;456
0002a4  fbc967dc          SMLALDX  r6,r7,r9,r12          ;456
0002a8  f8dd9040          LDR      r9,[sp,#0x40]         ;457
0002ac  46b3              MOV      r11,r6                ;456
0002ae  9707              STR      r7,[sp,#0x1c]         ;456
0002b0  fbc908dc          SMLALDX  r0,r8,r9,r12          ;457
0002b4  f8341c02          LDRH     r1,[r4,#-2]           ;459
0002b8  6852              LDR      r2,[r2,#4]            ;470
0002ba  b28c              UXTH     r4,r1                 ;466
0002bc  9e09              LDR      r6,[sp,#0x24]         ;474
0002be  4671              MOV      r1,lr                 ;474
0002c0  fbc516d4          SMLALDX  r1,r6,r5,r4           ;474
0002c4  46b6              MOV      lr,r6                 ;474
0002c6  f8dd9038          LDR      r9,[sp,#0x38]         ;475
0002ca  9f14              LDR      r7,[sp,#0x50]         ;475
0002cc  4656              MOV      r6,r10                ;475
0002ce  fbc967c4          SMLALD   r6,r7,r9,r4           ;475
0002d2  46ba              MOV      r10,r7                ;475
0002d4  9616              STR      r6,[sp,#0x58]         ;476
0002d6  9f07              LDR      r7,[sp,#0x1c]         ;476
0002d8  465e              MOV      r6,r11                ;476
0002da  fbc967d4          SMLALDX  r6,r7,r9,r4           ;476
0002de  46bb              MOV      r11,r7                ;476
0002e0  fbc208d4          SMLALDX  r0,r8,r2,r4           ;477
0002e4  9606              STR      r6,[sp,#0x18]         ;477
                  |L1.742|
0002e6  0bc9              LSRS     r1,r1,#15             ;485
0002e8  ea41414e          ORR      r1,r1,lr,LSL #17      ;485
0002ec  f301020f          SSAT     r2,#16,r1             ;485
0002f0  9916              LDR      r1,[sp,#0x58]         ;485
0002f2  0bc9              LSRS     r1,r1,#15             ;485
0002f4  ea41414a          ORR      r1,r1,r10,LSL #17     ;485
0002f8  f301010f          SSAT     r1,#16,r1             ;485
0002fc  eac24101          PKHBT    r1,r2,r1,LSL #16      ;485
000300  9a0f              LDR      r2,[sp,#0x3c]         ;485
000302  6011              STR      r1,[r2,#0]            ;485
000304  9a06              LDR      r2,[sp,#0x18]         ;487
000306  0bd2              LSRS     r2,r2,#15             ;487
000308  0bc0              LSRS     r0,r0,#15             ;487
00030a  ea42424b          ORR      r2,r2,r11,LSL #17     ;487
00030e  ea404048          ORR      r0,r0,r8,LSL #17      ;487
000312  f302020f          SSAT     r2,#16,r2             ;487
000316  f300000f          SSAT     r0,#16,r0             ;487
00031a  eac24000          PKHBT    r0,r2,r0,LSL #16      ;487
00031e  990f              LDR      r1,[sp,#0x3c]         ;487
000320  6048              STR      r0,[r1,#4]            ;487
000322  9804              LDR      r0,[sp,#0x10]         ;500
000324  3108              ADDS     r1,r1,#8              ;487
000326  1d00              ADDS     r0,r0,#4              ;500
000328  9004              STR      r0,[sp,#0x10]         ;503
00032a  910f              STR      r1,[sp,#0x3c]         ;500
00032c  9904              LDR      r1,[sp,#0x10]         ;503
00032e  9815              LDR      r0,[sp,#0x54]         ;503
000330  9c05              LDR      r4,[sp,#0x14]         ;507
000332  eb000241          ADD      r2,r0,r1,LSL #1       ;503
000336  981a              LDR      r0,[sp,#0x68]         ;507
000338  1e40              SUBS     r0,r0,#1              ;507
                  |L1.826|
00033a  901a              STR      r0,[sp,#0x68]         ;317
00033c  2800              CMP      r0,#0                 ;317
00033e  f47faf17          BNE      |L1.368|
000342  981d              LDR      r0,[sp,#0x74]         ;512
000344  f0000603          AND      r6,r0,#3              ;512
000348  e03f              B        |L1.970|
                  |L1.842|
00034a  2000              MOVS     r0,#0                 ;514
00034c  4601              MOV      r1,r0                 ;514
00034e  089d              LSRS     r5,r3,#2              ;520
000350  e01a              B        |L1.904|
000352  bf00              NOP                            ;527
                  |L1.852|
000354  f9328b02          LDRSH    r8,[r2],#2            ;527
000358  f9b47000          LDRSH    r7,[r4,#0]            ;527
00035c  fbc80187          SMLALBB  r0,r1,r8,r7           ;527
000360  f9328b02          LDRSH    r8,[r2],#2            ;528
000364  f934cc02          LDRSH    r12,[r4,#-2]          ;528
000368  fbc8018c          SMLALBB  r0,r1,r8,r12          ;528
00036c  f9328b02          LDRSH    r8,[r2],#2            ;529
000370  f934cc04          LDRSH    r12,[r4,#-4]          ;529
000374  fbc8018c          SMLALBB  r0,r1,r8,r12          ;529
000378  f932cb02          LDRSH    r12,[r2],#2           ;530
00037c  f9347c06          LDRSH    r7,[r4,#-6]           ;530
000380  fbcc0187          SMLALBB  r0,r1,r12,r7          ;530
000384  3c08              SUBS     r4,r4,#8              ;530
000386  1e6d              SUBS     r5,r5,#1              ;530
                  |L1.904|
000388  2d00              CMP      r5,#0                 ;524
00038a  d1e3              BNE      |L1.852|
00038c  f0030503          AND      r5,r3,#3              ;538
000390  e007              B        |L1.930|
000392  bf00              NOP                            ;543
                  |L1.916|
000394  f9327b02          LDRSH    r7,[r2],#2            ;543
000398  f934c902          LDRSH    r12,[r4],#-2          ;543
00039c  fbc7018c          SMLALBB  r0,r1,r7,r12          ;543
0003a0  1e6d              SUBS     r5,r5,#1              ;543
                  |L1.930|
0003a2  2d00              CMP      r5,#0                 ;540
0003a4  d1f6              BNE      |L1.916|
0003a6  0bc0              LSRS     r0,r0,#15             ;550
0003a8  ea404041          ORR      r0,r0,r1,LSL #17      ;550
0003ac  f300010f          SSAT     r1,#16,r0             ;550
0003b0  980f              LDR      r0,[sp,#0x3c]         ;550
0003b2  8001              STRH     r1,[r0,#0]            ;550
0003b4  980f              LDR      r0,[sp,#0x3c]         ;550
0003b6  9915              LDR      r1,[sp,#0x54]         ;556
0003b8  1c80              ADDS     r0,r0,#2              ;550
0003ba  900f              STR      r0,[sp,#0x3c]         ;553
0003bc  9804              LDR      r0,[sp,#0x10]         ;553
0003be  9c05              LDR      r4,[sp,#0x14]         ;557
0003c0  1c40              ADDS     r0,r0,#1              ;553
0003c2  9004              STR      r0,[sp,#0x10]         ;556
0003c4  eb010240          ADD      r2,r1,r0,LSL #1       ;556
0003c8  1e76              SUBS     r6,r6,#1              ;557
                  |L1.970|
0003ca  2e00              CMP      r6,#0                 ;514
0003cc  d1bd              BNE      |L1.842|
0003ce  e022              B        |L1.1046|
                  |L1.976|
0003d0  9e1d              LDR      r6,[sp,#0x74]         ;569
0003d2  e01e              B        |L1.1042|
                  |L1.980|
0003d4  2100              MOVS     r1,#0                 ;569
0003d6  4608              MOV      r0,r1                 ;569
0003d8  461d              MOV      r5,r3                 ;575
0003da  e006              B        |L1.1002|
                  |L1.988|
0003dc  f932cb02          LDRSH    r12,[r2],#2           ;580
0003e0  f9347902          LDRSH    r7,[r4],#-2           ;580
0003e4  fbcc1087          SMLALBB  r1,r0,r12,r7          ;580
0003e8  1e6d              SUBS     r5,r5,#1              ;580
                  |L1.1002|
0003ea  2d00              CMP      r5,#0                 ;577
0003ec  d1f6              BNE      |L1.988|
0003ee  0442              LSLS     r2,r0,#17             ;587
0003f0  ea4230d1          ORR      r0,r2,r1,LSR #15      ;587
0003f4  990f              LDR      r1,[sp,#0x3c]         ;587
0003f6  f300000f          SSAT     r0,#16,r0             ;587
0003fa  8008              STRH     r0,[r1,#0]            ;587
0003fc  980f              LDR      r0,[sp,#0x3c]         ;587
0003fe  9915              LDR      r1,[sp,#0x54]         ;593
000400  1c80              ADDS     r0,r0,#2              ;587
000402  900f              STR      r0,[sp,#0x3c]         ;590
000404  9804              LDR      r0,[sp,#0x10]         ;590
000406  9c05              LDR      r4,[sp,#0x14]         ;594
000408  1c40              ADDS     r0,r0,#1              ;590
00040a  9004              STR      r0,[sp,#0x10]         ;593
00040c  eb010240          ADD      r2,r1,r0,LSL #1       ;593
000410  1e76              SUBS     r6,r6,#1              ;594
                  |L1.1042|
000412  2e00              CMP      r6,#0                 ;569
000414  d1de              BNE      |L1.980|
                  |L1.1046|
000416  9920              LDR      r1,[sp,#0x80]         ;618
000418  9815              LDR      r0,[sp,#0x54]         ;618
00041a  1e5d              SUBS     r5,r3,#1              ;615
00041c  eb000041          ADD      r0,r0,r1,LSL #1       ;618
000420  eba00643          SUB      r6,r0,r3,LSL #1       ;618
000424  981c              LDR      r0,[sp,#0x70]         ;619
000426  1cb6              ADDS     r6,r6,#2              ;618
000428  f1a00a02          SUB      r10,r0,#2             ;619
00042c  1f00              SUBS     r0,r0,#4              ;623
00042e  4631              MOV      r1,r6                 ;619
000430  4683              MOV      r11,r0                ;623
000432  08af              LSRS     r7,r5,#2              ;635
000434  e033              B        |L1.1182|
                  |L1.1078|
000436  2200              MOVS     r2,#0                 ;637
000438  4614              MOV      r4,r2                 ;637
00043a  08ab              LSRS     r3,r5,#2              ;643
00043c  e00e              B        |L1.1116|
                  |L1.1086|
00043e  46a0              MOV      r8,r4                 ;651
000440  f851cb04          LDR      r12,[r1],#4           ;651
000444  6804              LDR      r4,[r0,#0]            ;651
000446  fbcc28d4          SMLALDX  r2,r8,r12,r4          ;651
00044a  4644              MOV      r4,r8                 ;654
00044c  f8518b04          LDR      r8,[r1],#4            ;654
000450  f850cc04          LDR      r12,[r0,#-4]          ;654
000454  fbc824dc          SMLALDX  r2,r4,r8,r12          ;654
000458  3808              SUBS     r0,r0,#8              ;654
00045a  1e5b              SUBS     r3,r3,#1              ;654
                  |L1.1116|
00045c  2b00              CMP      r3,#0                 ;647
00045e  d1ee              BNE      |L1.1086|
000460  f0050303          AND      r3,r5,#3              ;666
000464  1c80              ADDS     r0,r0,#2              ;666
000466  e006              B        |L1.1142|
                  |L1.1128|
000468  f931cb02          LDRSH    r12,[r1],#2           ;671
00046c  f9308902          LDRSH    r8,[r0],#-2           ;671
000470  fbcc24c8          SMLALD   r2,r4,r12,r8          ;671
000474  1e5b              SUBS     r3,r3,#1              ;671
                  |L1.1142|
000476  2b00              CMP      r3,#0                 ;668
000478  d1f6              BNE      |L1.1128|
00047a  0bd0              LSRS     r0,r2,#15             ;678
00047c  ea404044          ORR      r0,r0,r4,LSL #17      ;678
000480  f300010f          SSAT     r1,#16,r0             ;678
000484  980f              LDR      r0,[sp,#0x3c]         ;678
000486  1e6d              SUBS     r5,r5,#1              ;688
000488  8001              STRH     r1,[r0,#0]            ;678
00048a  980f              LDR      r0,[sp,#0x3c]         ;678
00048c  9a02              LDR      r2,[sp,#8]            ;688
00048e  1c80              ADDS     r0,r0,#2              ;678
000490  1cb1              ADDS     r1,r6,#2              ;681
000492  1e52              SUBS     r2,r2,#1              ;688
000494  900f              STR      r0,[sp,#0x3c]         ;682
000496  460e              MOV      r6,r1                 ;681
000498  4658              MOV      r0,r11                ;682
00049a  1e7f              SUBS     r7,r7,#1              ;688
00049c  9202              STR      r2,[sp,#8]            ;688
                  |L1.1182|
00049e  b117              CBZ      r7,|L1.1190|
0004a0  9a02              LDR      r2,[sp,#8]            ;637
0004a2  2a00              CMP      r2,#0                 ;637
0004a4  dcc7              BGT      |L1.1078|
                  |L1.1190|
0004a6  f10b0002          ADD      r0,r11,#2             ;696
0004aa  9a02              LDR      r2,[sp,#8]            ;698
0004ac  e01e              B        |L1.1260|
                  |L1.1198|
0004ae  2200              MOVS     r2,#0                 ;698
0004b0  4613              MOV      r3,r2                 ;698
0004b2  462c              MOV      r4,r5                 ;704
0004b4  e007              B        |L1.1222|
0004b6  bf00              NOP                            ;710
                  |L1.1208|
0004b8  f931cb02          LDRSH    r12,[r1],#2           ;710
0004bc  f9307902          LDRSH    r7,[r0],#-2           ;710
0004c0  fbcc23c7          SMLALD   r2,r3,r12,r7          ;710
0004c4  1e64              SUBS     r4,r4,#1              ;710
                  |L1.1222|
0004c6  2c00              CMP      r4,#0                 ;706
0004c8  d1f6              BNE      |L1.1208|
0004ca  0bd0              LSRS     r0,r2,#15             ;717
0004cc  ea404043          ORR      r0,r0,r3,LSL #17      ;717
0004d0  f300010f          SSAT     r1,#16,r0             ;717
0004d4  980f              LDR      r0,[sp,#0x3c]         ;717
0004d6  8001              STRH     r1,[r0,#0]            ;717
0004d8  980f              LDR      r0,[sp,#0x3c]         ;717
0004da  9a02              LDR      r2,[sp,#8]            ;727
0004dc  1c80              ADDS     r0,r0,#2              ;717
0004de  1cb1              ADDS     r1,r6,#2              ;720
0004e0  1e52              SUBS     r2,r2,#1              ;727
0004e2  900f              STR      r0,[sp,#0x3c]         ;721
0004e4  460e              MOV      r6,r1                 ;720
0004e6  4650              MOV      r0,r10                ;721
0004e8  1e6d              SUBS     r5,r5,#1              ;727
0004ea  9202              STR      r2,[sp,#8]            ;727
                  |L1.1260|
0004ec  2a00              CMP      r2,#0                 ;698
0004ee  dcde              BGT      |L1.1198|
0004f0  2000              MOVS     r0,#0                 ;731
0004f2  e593              B        |L1.28|
;;;783    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\SRC\\CMSIS_DSP_4_5\\src\\FilteringFunctions\\arm_conv_partial_q15.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_conv_partial_q15_c_2501e473____REV16|
#line 129 "..\\..\\SRC\\CMSIS_DSP_4_5\\inc\\core_cmInstr.h"
|__asm___22_arm_conv_partial_q15_c_2501e473____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_conv_partial_q15_c_2501e473____REVSH|
#line 144
|__asm___22_arm_conv_partial_q15_c_2501e473____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_arm_conv_partial_q15_c_2501e473____RRX|
#line 300
|__asm___22_arm_conv_partial_q15_c_2501e473____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
